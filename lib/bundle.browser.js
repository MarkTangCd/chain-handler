!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@walletconnect/utils"),require("ethereumjs-util"),require("ethers"),require("@walletconnect/web3-provider")):"function"==typeof define&&define.amd?define(["exports","@walletconnect/utils","ethereumjs-util","ethers","@walletconnect/web3-provider"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).ChainHandler={},e.utils,e.ethUtil,e.ethers,e.WalletConnectProvider)}(this,(function(e,t,n,r,o){"use strict";function i(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}function s(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(n){if("default"!==n){var r=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,r.get?r:{enumerable:!0,get:function(){return e[n]}})}})),t.default=e,Object.freeze(t)}var a=s(n),c=i(o);function l(e){const t=Buffer.from(e),n=a.hashPersonalMessage(t);return a.bufferToHex(n)}function d(e,t){const n=a.fromRpcSig(e),r=Buffer.from(t.replace("0x",""),"hex"),o=a.ecrecover(r,n.v,n.r,n.s);return a.bufferToHex(a.publicToAddress(o))}var h=Object.freeze({__proto__:null,hashPersonalMessage:l,recoverPublicKey:d});class u{constructor(e,t,n){this.web3Provider=t,this.originProvider=e,this.signer=t.getSigner(),this.type=n}async queryContract(e,t,n,...o){return new r.ethers.Contract(e,t,this.web3Provider).functions[n](...o)}async runContractTransactionFunc(e,t,n,...o){return new r.ethers.Contract(e,t,this.web3Provider.getSigner()).functions[n](...o)}listenForChanges(e,t=(()=>{})){if(!e)throw new Error("This listener item cannot be empty.");if(-1===["chainChanged","accountsChanged","disconnect"].indexOf(e))throw new Error("This listener item does not exist.");try{this.originProvider.on(e,t)}catch(e){console.log("Listen to error."),console.log(e)}}verifySignature(e,t,n){return d(e,t).toLowerCase()===n.toLowerCase()}async signMessage(e,t){let n=e;return"injected"===this.type&&(n=l(e)),await this.originProvider.request({method:"eth_sign",params:[t,n]})}async personalSign(e,n){const r=t.convertUtf8ToHex(e);return this.originProvider.request({method:"personal_sign",params:[r,n],from:n})}formatUnits(e,t){return r.ethers.utils.formatUnits(e,t)}}const p=[{id:"ETH-Testnet",name:"ETH Testnet",label:"EHT Rinkeby Testnet",chainId:"0x4",url:"https://ropsten.infura.io/v3/a892bade64884ad6a13cf9981de659eb",explorer:"https://ropsten.etherscan.io/",config:{chainId:"0x4",chainName:"ETH Testnet",nativeCurrency:{name:"ETH",symbol:"ETH",decimals:18},rpcUrls:["https://ropsten.infura.io/v3/a892bade64884ad6a13cf9981de659eb"],blockExplorerUrls:["https://ropsten.etherscan.io/"]}},{id:"BSC-Testnet",name:"BSC Testnet",chainId:"0x61",label:"BSC Testnet",url:"https://data-seed-prebsc-2-s3.binance.org:8545/",explorer:"https://testnet.bscscan.com/",config:{chainId:"0x61",chainName:"BSC Testnet",nativeCurrency:{name:"BNB",symbol:"BNB",decimals:18},rpcUrls:["https://data-seed-prebsc-2-s3.binance.org:8545/"],blockExplorerUrls:["https://testnet.bscscan.com/"]}},{id:"OEC-Testnet",name:"OEC Testnet",chainId:"0x41",label:"OEC Testnet",url:"https://exchaintestrpc.okex.org",explorer:"https://www.oklink.com/oec-test/",config:{chainId:"0x41",chainName:"OKExChain Testnet",nativeCurrency:{name:"OKExChain Global Utility Token in testnet",symbol:"OKT",decimals:18},rpcUrls:["https://exchaintestrpc.okex.org"],blockExplorerUrls:["https://www.oklink.com/okexchain-test"]}},{id:"ETH-Mainnet",name:"ETH Mainnet",chainId:"0x1",url:"https://mainnet.infura.io/v3/a892bade64884ad6a13cf9981de659eb",explorer:"https://etherscan.io/",config:{chainId:"0x1",chainName:"ETH Mainnet",nativeCurrency:{name:"ETH",symbol:"ETH",decimals:18},rpcUrls:["https://mainnet.infura.io/v3/a892bade64884ad6a13cf9981de659eb"],blockExplorerUrls:["https://etherscan.io/"]}},{id:"BSC-Mainnet",name:"BSC Mainnet",chainId:"0x38",url:"https://bsc-dataseed.binance.org/",explorer:"https://bscscan.com/",config:{chainId:"0x38",chainName:"Binance Smart Chain",nativeCurrency:{name:"BNB",symbol:"BNB",decimals:18},rpcUrls:["https://bsc-dataseed.binance.org/"],blockExplorerUrls:["https://bscscan.com/"]}},{id:"OEC-Mainnet",name:"OEC Mainnet",chainId:"0x42",url:"https://exchainrpc.okex.org",explorer:"https://www.oklink.com/oec/",config:{chainId:"0x42",chainName:"OKExChain Mainnet",nativeCurrency:{name:"OKExChain Global Utility Token",symbol:"OKT",decimals:18},rpcUrls:["https://exchainrpc.okex.org"],blockExplorerUrls:["https://www.oklink.com/okexchain"]}}];!function(e){if(!Array.isArray(e))return void console.log("type error!");let t=[];for(let n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n])}(p.map((e=>e.name.split(" ")[0])));const f=Object.freeze({BSC_TEST:"BSC-Testnet",ETH_TEST:"ETH-Testnet",OEC_TEST:"OEC-Testnet",BSC_MAIN:"BSC-Mainnet",ETH_MAIN:"ETH-Mainnet",OEC_MAIN:"OEC-Mainnet"}),w={[f.BSC_TEST]:97,[f.ETH_TEST]:4,[f.OEC_TEST]:41,[f.BSC_MAIN]:56,[f.ETH_MAIN]:1,[f.OEC_MAIN]:42},b={[w[f.BSC_TEST]]:"https://data-seed-prebsc-2-s3.binance.org:8545/",[w[f.ETH_TEST]]:"https://ropsten.infura.io/v3/a892bade64884ad6a13cf9981de659eb",[w[f.OEC_TEST]]:"https://exchaintestrpc.okex.org",[w[f.BSC_MAIN]]:"https://bsc-dataseed.binance.org/",[w[f.ETH_MAIN]]:"https://mainnet.infura.io/v3/a892bade64884ad6a13cf9981de659eb",[w[f.OEC_TEST]]:"https://exchainrpc.okex.org"};class m extends u{constructor(e){super(e,new r.ethers.providers.Web3Provider(e),"injected")}async getAddress(){try{return await this.signer.getAddress()}catch(e){if("UNSUPPORTED_OPERATION"===e.code)throw new Error("Please connect your wallet first");console.error(e)}}static connectWallet(e=(()=>{})){window.ethereum.request({method:"eth_requestAccounts"}).then((t=>{e(t[0])})).catch((e=>{console.error(e.message)}))}async switchNetwork(e,t=(()=>{})){let n=await this.getAddress();if(!n)throw new Error("Please connect your wallet first");let r=Object.values(f);if(!e)throw new Error("The param cannot be empty.");if(-1===r.indexOf(e))throw new Error("The param is wrong.");let o=p.find((t=>t.id===e));try{await window.ethereum.request({method:"wallet_switchEthereumChain",params:[{chainId:o.config.chainId}]}),t()}catch(e){4902===e.code?(await window.ethereum.request({method:"wallet_addEthereumChain",params:[o.config,n]}),t()):console.error(e)}}}class T extends u{constructor(e){super(e,new r.ethers.providers.Web3Provider(e),"walletconnect")}disconnect(){this.originProvider.wc.killSession()}}e.ConnectToInjected=async()=>{let e=null;if(void 0!==window.ethereum){e=window.ethereum;try{await e.request({method:"eth_requestAccounts"})}catch(e){throw new Error("User Rejected")}}else if(window.web3)e=window.web3.currentProvider;else{if(!window.celo)throw new Error("No Web3 Provider found");e=window.celo}return new m(e)},e.ConnectToWalletConnect=e=>new Promise((async(t,n)=>{let r,o="https://bridge.walletconnect.org",i=!0,s="",a=b,l=w[f.BSC_MAIN];e&&(o=e.bridge||o,i=void 0!==e.qrcode?e.qrcode:i,s=e.infuraId||"",l=e.network?w[e.network]:l,r=e.qrcodeModalOptions||void 0);const d=new c.default({bridge:o,qrcode:i,infuraId:s,rpc:a,chainId:l,qrcodeModalOptions:r});try{const e=await d.enable();t({walletConnectHandler:new T(d),accounts:e})}catch(e){n(e)}})),e.Networks=f,e.Utils=h,Object.defineProperty(e,"__esModule",{value:!0})}));
