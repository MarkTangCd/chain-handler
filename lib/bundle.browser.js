(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('events'), require('https'), require('http'), require('net'), require('tls'), require('crypto'), require('url'), require('zlib'), require('stream'), require('buffer'), require('fs'), require('util'), require('assert'), require('os')) :
  typeof define === 'function' && define.amd ? define(['exports', 'events', 'https', 'http', 'net', 'tls', 'crypto', 'url', 'zlib', 'stream', 'buffer', 'fs', 'util', 'assert', 'os'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ChainHandler = {}, global.require$$0$5, global.require$$1$2, global.require$$2$1, global.require$$3$1, global.require$$4, global.require$$0$4, global.require$$6, global.require$$0$2, global.require$$0$3, global.require$$2$2, global.require$$1$3, global.require$$0$6, global.require$$0$7, global.require$$2$3));
})(this, (function (exports, require$$0$5, require$$1$2, require$$2$1, require$$3$1, require$$4, require$$0$4, require$$6, require$$0$2, require$$0$3, require$$2$2, require$$1$3, require$$0$6, require$$0$7, require$$2$3) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var require$$0__default$3 = /*#__PURE__*/_interopDefaultLegacy(require$$0$5);
  var require$$1__default = /*#__PURE__*/_interopDefaultLegacy(require$$1$2);
  var require$$2__default = /*#__PURE__*/_interopDefaultLegacy(require$$2$1);
  var require$$3__default = /*#__PURE__*/_interopDefaultLegacy(require$$3$1);
  var require$$4__default = /*#__PURE__*/_interopDefaultLegacy(require$$4);
  var require$$0__default$2 = /*#__PURE__*/_interopDefaultLegacy(require$$0$4);
  var require$$6__default = /*#__PURE__*/_interopDefaultLegacy(require$$6);
  var require$$0__default = /*#__PURE__*/_interopDefaultLegacy(require$$0$2);
  var require$$0__default$1 = /*#__PURE__*/_interopDefaultLegacy(require$$0$3);
  var require$$2__default$1 = /*#__PURE__*/_interopDefaultLegacy(require$$2$2);
  var require$$1__default$1 = /*#__PURE__*/_interopDefaultLegacy(require$$1$3);
  var require$$0__default$4 = /*#__PURE__*/_interopDefaultLegacy(require$$0$6);
  var require$$0__default$5 = /*#__PURE__*/_interopDefaultLegacy(require$$0$7);
  var require$$2__default$2 = /*#__PURE__*/_interopDefaultLegacy(require$$2$3);

  const ethers$2 = require('ethers');

  class Base$3 {
    constructor(originProvider, web3Provider) {
      this.web3Provider = web3Provider;
      this.originProvider = originProvider;
      this.signer = web3Provider.getSigner();
    }

    /**
     * general contract method
     * @param address 
     * @param abi 
     * @param funcName : contract function name 
     * @param args : contract function params
     * @returns query result
     */
    async queryContract(address, abi,funcName,...args){
      const contract = new ethers$2.Contract(address, abi, this.web3Provider);
      return contract.functions[funcName](...args)
    }

    /**
     * general contract method
     * @param address 
     * @param abi 
     * @param funcName : contract function name 
     * @param args : contract function params
     * @returns contract function execute result
     */
    async runContractTransactionFunc(address, abi, funcName,...args){
      const contract = new ethers$2.Contract(address, abi, this.web3Provider.getSigner());
      return contract.functions[funcName](...args)
    }

    listenForChanges(item, callback = () => {}) {
      let items = ['chainChanged', 'accountsChanged', 'disconnect'];
      if (!item) {
        throw new Error('This listener item cannot be empty.');
      } else if (items.indexOf(item) === -1) {
        throw new Error('This listener item does not exist.');
      }

      try {
        this.originProvider.on(item, callback);
      } catch (err) {
        console.log('Listen to error.');
        console.log(err);
      }
    }

    async signMessage (message, address) {
      return await this.originProvider.request({ method: 'eth_sign', params: [address, message] })
    }

    async personalSign(message, address){
      return this.originProvider.request({
        method: 'personal_sign',
        params: [message, address],
        from: address
      });
    }

    formatUnits(ether, num) {
      return ethers$2.utils.formatUnits(ether, num);
    }
  }

  // wallet error code
  const NOT_THE_CHAIN = 4902;
  const UNSUPPORTED_OPERATION = 'UNSUPPORTED_OPERATION';

  function unique(arr) {
    if (!Array.isArray(arr)) {
      console.log('type error!');
      return
    }
    let array = [];
    for (let i = 0; i < arr.length; i++) {
      if (array.indexOf(arr[i]) === -1) {
        array.push(arr[i]);
      }
    }
    return array
  }

  const NetworksDetails = [
    // ETH Chain
    {
      id: 'ETH-Testnet',
      name: 'ETH Testnet',
      label: 'EHT Rinkeby Testnet',
      chainId: '0x4',
      url: 'https://ropsten.infura.io/v3/a892bade64884ad6a13cf9981de659eb',
      explorer: 'https://ropsten.etherscan.io/',
      config: {
        chainId: '0x4',
        chainName: 'ETH Testnet',
        nativeCurrency: {
          name: 'ETH',
          symbol: 'ETH',
          decimals: 18,
        },
        rpcUrls: [
          'https://ropsten.infura.io/v3/a892bade64884ad6a13cf9981de659eb',
        ],
        blockExplorerUrls: ['https://ropsten.etherscan.io/'],
      },
    },
    // BSC Chain
    {
      id: 'BSC-Testnet',
      name: 'BSC Testnet',
      chainId: '0x61',
      label: 'BSC Testnet',
      url: 'https://data-seed-prebsc-2-s3.binance.org:8545/',
      explorer: 'https://testnet.bscscan.com/',
      config: {
        chainId: '0x61',
        chainName: 'BSC Testnet',
        nativeCurrency: {
          name: 'BNB',
          symbol: 'BNB',
          decimals: 18,
        },
        rpcUrls: ['https://data-seed-prebsc-2-s3.binance.org:8545/'],
        blockExplorerUrls: ['https://testnet.bscscan.com/'],
      },
    },
    {
      id: 'OEC-Testnet',
      name: 'OEC Testnet',
      chainId: '0x41',
      label: 'OEC Testnet',
      url: 'https://exchaintestrpc.okex.org',
      explorer: 'https://www.oklink.com/oec-test/',
      config: {
        chainId: '0x41',
        chainName: 'OKExChain Testnet',
        nativeCurrency: {
          name: 'OKExChain Global Utility Token in testnet',
          symbol: 'OKT',
          decimals: 18,
        },
        rpcUrls: ['https://exchaintestrpc.okex.org'],
        blockExplorerUrls: ['https://www.oklink.com/okexchain-test'],
      },
    },
    // Main network
    {
      id: 'ETH-Mainnet',
      name: 'ETH Mainnet',
      chainId: '0x1',
      url: 'https://mainnet.infura.io/v3/a892bade64884ad6a13cf9981de659eb',
      explorer: 'https://etherscan.io/',
      config: {
        chainId: '0x1',
        chainName: 'ETH Mainnet',
        nativeCurrency: {
          name: 'ETH',
          symbol: 'ETH',
          decimals: 18,
        },
        rpcUrls: [
          'https://mainnet.infura.io/v3/a892bade64884ad6a13cf9981de659eb',
        ],
        blockExplorerUrls: ['https://etherscan.io/'],
      },
    },
    {
      id: 'BSC-Mainnet',
      name: 'BSC Mainnet',
      chainId: '0x38',
      url: 'https://bsc-dataseed.binance.org/',
      explorer: 'https://bscscan.com/',
      config: {
        chainId: '0x38',
        chainName: 'Binance Smart Chain',
        nativeCurrency: {
          name: 'BNB',
          symbol: 'BNB',
          decimals: 18,
        },
        rpcUrls: ['https://bsc-dataseed.binance.org/'],
        blockExplorerUrls: ['https://bscscan.com/'],
      },
    },
    {
      id: 'OEC-Mainnet',
      name: 'OEC Mainnet',
      chainId: '0x42',
      url: 'https://exchainrpc.okex.org',
      explorer: 'https://www.oklink.com/oec/',
      config: {
        chainId: '0x42',
        chainName: 'OKExChain Mainnet',
        nativeCurrency: {
          name: 'OKExChain Global Utility Token',
          symbol: 'OKT',
          decimals: 18,
        },
        rpcUrls: ['https://exchainrpc.okex.org'],
        blockExplorerUrls: ['https://www.oklink.com/okexchain'],
      },
    }
  ];
  unique(NetworksDetails.map((item) => item.name.split(' ')[0]));

  const Networks = Object.freeze({
    BSC_TEST: 'BSC-Testnet',
    ETH_TEST: 'ETH-Testnet',
    OEC_TEST: 'OEC-Testnet',
    BSC_MAIN: 'BSC-Mainnet',
    ETH_MAIN: 'ETH-Mainnet',
    OEC_MAIN: 'OEC-Mainnet',
  });

  const ChainIdByNetwork = {
    [Networks.BSC_TEST]: 97,
    [Networks.ETH_TEST]: 4,
    [Networks.OEC_TEST]: 41,
    [Networks.BSC_MAIN]: 56,
    [Networks.ETH_MAIN]: 1,
    [Networks.OEC_MAIN]: 42,
  };

  const RpcList = {
    [ChainIdByNetwork[Networks.BSC_TEST]]:
      'https://data-seed-prebsc-2-s3.binance.org:8545/',
    [ChainIdByNetwork[Networks.ETH_TEST]]:
      'https://ropsten.infura.io/v3/a892bade64884ad6a13cf9981de659eb',
    [ChainIdByNetwork[Networks.OEC_TEST]]: 'https://exchaintestrpc.okex.org',
    [ChainIdByNetwork[Networks.BSC_MAIN]]: 'https://bsc-dataseed.binance.org/',
    [ChainIdByNetwork[Networks.ETH_MAIN]]:
      'https://mainnet.infura.io/v3/a892bade64884ad6a13cf9981de659eb',
    [ChainIdByNetwork[Networks.OEC_TEST]]: 'https://exchainrpc.okex.org',
  };

  const ethers$1 = require('ethers');

  class WalletHandler extends Base$3 {

    constructor() {
      if (window.ethereum) {
        const originProvider = window.ethereum;
        const web3Provider = new ethers$1.providers.Web3Provider(originProvider);
        super(originProvider, web3Provider);
      } else {
        throw new Error('No provider exists for the current environment.');
      }
    }

    async getAddress() {
      try {
        let address = await this.signer.getAddress();
        return address;
      } catch(err) {
        if (err.code === UNSUPPORTED_OPERATION) {
          throw new Error('Please connect your wallet first');
        } else {
          console.error(err);
        }
      }
    }

    static getInstance() {
      if (!WalletHandler.instance) {
        WalletHandler.instance = new WalletHandler();
      }
      return WalletHandler.instance;
    }

    static connectWallet(callback = () => {}) {
      window.ethereum.request({ method: 'eth_requestAccounts' })
        .then(accounts => {
          // This is the current account.
          callback(accounts[0]);
        })
        .catch(err => {
          console.error(err.message);
        });
    }

    async switchNetwork(network, callback = () => {}) {
      // Checking to connect status of the wallet.
      let address = await this.getAddress();
      if (!address) {
        throw new Error('Please connect your wallet first');
      }

      let values = Object.values(Networks);
      if (!network) {
        throw new Error('The param cannot be empty.');
      } else if (values.indexOf(network) === -1){
        throw new Error('The param is wrong.');
      }

      let detail = NetworksDetails.find((item) => item.id === network);
      try {
        await window.ethereum.request({
          method: 'wallet_switchEthereumChain',
          params: [{chainId: detail.config.chainId}]
        });
        callback();
      } catch (err) {
        if (err.code === NOT_THE_CHAIN) {
          await window.ethereum.request({
            method: 'wallet_addEthereumChain',
            params: [detail.config, address]
          });
          callback();
        } else {
          console.error(err);
        }
      }
    }
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getAugmentedNamespace(n) {
  	if (n.__esModule) return n;
  	var a = Object.defineProperty({}, '__esModule', {value: true});
  	Object.keys(n).forEach(function (k) {
  		var d = Object.getOwnPropertyDescriptor(n, k);
  		Object.defineProperty(a, k, d.get ? d : {
  			enumerable: true,
  			get: function () {
  				return n[k];
  			}
  		});
  	});
  	return a;
  }

  var cjs$c = {};

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  /* global Reflect, Promise */

  var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
      return extendStatics(d, b);
  };

  function __extends$3(d, b) {
      if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
      extendStatics(d, b);
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  var __assign$1 = function() {
      __assign$1 = Object.assign || function __assign(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
      };
      return __assign$1.apply(this, arguments);
  };

  function __rest(s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  }

  function __decorate(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
      else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
  }

  function __param(paramIndex, decorator) {
      return function (target, key) { decorator(target, key, paramIndex); }
  }

  function __metadata(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
  }

  function __awaiter$3(thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  }

  function __generator(thisArg, body) {
      var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
      function verb(n) { return function (v) { return step([n, v]); }; }
      function step(op) {
          if (f) throw new TypeError("Generator is already executing.");
          while (_) try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
              if (y = 0, t) op = [op[0] & 2, t.value];
              switch (op[0]) {
                  case 0: case 1: t = op; break;
                  case 4: _.label++; return { value: op[1], done: false };
                  case 5: _.label++; y = op[1]; op = [0]; continue;
                  case 7: op = _.ops.pop(); _.trys.pop(); continue;
                  default:
                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                      if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                      if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                      if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                      if (t[2]) _.ops.pop();
                      _.trys.pop(); continue;
              }
              op = body.call(thisArg, _);
          } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
          if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
      }
  }

  var __createBinding = Object.create ? (function(o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
  }) : (function(o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
  });

  function __exportStar(m, o) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
  }

  function __values(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
          next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
          }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }

  function __read(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      }
      catch (error) { e = { error: error }; }
      finally {
          try {
              if (r && !r.done && (m = i["return"])) m.call(i);
          }
          finally { if (e) throw e.error; }
      }
      return ar;
  }

  /** @deprecated */
  function __spread() {
      for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
      return ar;
  }

  /** @deprecated */
  function __spreadArrays$1() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r[k] = a[j];
      return r;
  }

  function __spreadArray(to, from, pack) {
      if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
              if (!ar) ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
          }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
  }

  function __await(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
  }

  function __asyncGenerator(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
      function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
      function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
      function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
      function fulfill(value) { resume("next", value); }
      function reject(value) { resume("throw", value); }
      function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
  }

  function __asyncDelegator(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
      function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
  }

  function __asyncValues(o) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
      function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
      function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
  }

  function __makeTemplateObject(cooked, raw) {
      if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
      return cooked;
  }
  var __setModuleDefault = Object.create ? (function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
  }) : function(o, v) {
      o["default"] = v;
  };

  function __importStar(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      __setModuleDefault(result, mod);
      return result;
  }

  function __importDefault$5(mod) {
      return (mod && mod.__esModule) ? mod : { default: mod };
  }

  function __classPrivateFieldGet(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  }

  function __classPrivateFieldSet(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
  }

  var tslib_es6 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    __extends: __extends$3,
    get __assign () { return __assign$1; },
    __rest: __rest,
    __decorate: __decorate,
    __param: __param,
    __metadata: __metadata,
    __awaiter: __awaiter$3,
    __generator: __generator,
    __createBinding: __createBinding,
    __exportStar: __exportStar,
    __values: __values,
    __read: __read,
    __spread: __spread,
    __spreadArrays: __spreadArrays$1,
    __spreadArray: __spreadArray,
    __await: __await,
    __asyncGenerator: __asyncGenerator,
    __asyncDelegator: __asyncDelegator,
    __asyncValues: __asyncValues,
    __makeTemplateObject: __makeTemplateObject,
    __importStar: __importStar,
    __importDefault: __importDefault$5,
    __classPrivateFieldGet: __classPrivateFieldGet,
    __classPrivateFieldSet: __classPrivateFieldSet
  });

  var require$$0$1 = /*@__PURE__*/getAugmentedNamespace(tslib_es6);

  var cjs$b = {};

  var cjs$a = {};

  var cjs$9 = {};

  var cjs$8 = {};

  var browser$1 = {};

  var cjs$7 = {};

  var cjs$6 = {};

  Object.defineProperty(cjs$6, "__esModule", { value: true });
  cjs$6.getLocalStorage = cjs$6.getLocalStorageOrThrow = cjs$6.getCrypto = cjs$6.getCryptoOrThrow = cjs$6.getLocation = cjs$6.getLocationOrThrow = cjs$6.getNavigator = cjs$6.getNavigatorOrThrow = cjs$6.getDocument = cjs$6.getDocumentOrThrow = cjs$6.getFromWindowOrThrow = cjs$6.getFromWindow = void 0;
  function getFromWindow(name) {
      let res = undefined;
      if (typeof window !== "undefined" && typeof window[name] !== "undefined") {
          res = window[name];
      }
      return res;
  }
  cjs$6.getFromWindow = getFromWindow;
  function getFromWindowOrThrow(name) {
      const res = getFromWindow(name);
      if (!res) {
          throw new Error(`${name} is not defined in Window`);
      }
      return res;
  }
  cjs$6.getFromWindowOrThrow = getFromWindowOrThrow;
  function getDocumentOrThrow() {
      return getFromWindowOrThrow("document");
  }
  cjs$6.getDocumentOrThrow = getDocumentOrThrow;
  function getDocument() {
      return getFromWindow("document");
  }
  cjs$6.getDocument = getDocument;
  function getNavigatorOrThrow() {
      return getFromWindowOrThrow("navigator");
  }
  cjs$6.getNavigatorOrThrow = getNavigatorOrThrow;
  function getNavigator() {
      return getFromWindow("navigator");
  }
  cjs$6.getNavigator = getNavigator;
  function getLocationOrThrow() {
      return getFromWindowOrThrow("location");
  }
  cjs$6.getLocationOrThrow = getLocationOrThrow;
  function getLocation() {
      return getFromWindow("location");
  }
  cjs$6.getLocation = getLocation;
  function getCryptoOrThrow() {
      return getFromWindowOrThrow("crypto");
  }
  cjs$6.getCryptoOrThrow = getCryptoOrThrow;
  function getCrypto() {
      return getFromWindow("crypto");
  }
  cjs$6.getCrypto = getCrypto;
  function getLocalStorageOrThrow() {
      return getFromWindowOrThrow("localStorage");
  }
  cjs$6.getLocalStorageOrThrow = getLocalStorageOrThrow;
  function getLocalStorage() {
      return getFromWindow("localStorage");
  }
  cjs$6.getLocalStorage = getLocalStorage;

  Object.defineProperty(cjs$7, "__esModule", { value: true });
  cjs$7.getWindowMetadata = void 0;
  const window_getters_1 = cjs$6;
  function getWindowMetadata() {
      let doc;
      let loc;
      try {
          doc = window_getters_1.getDocumentOrThrow();
          loc = window_getters_1.getLocationOrThrow();
      }
      catch (e) {
          return null;
      }
      function getIcons() {
          const links = doc.getElementsByTagName("link");
          const icons = [];
          for (let i = 0; i < links.length; i++) {
              const link = links[i];
              const rel = link.getAttribute("rel");
              if (rel) {
                  if (rel.toLowerCase().indexOf("icon") > -1) {
                      const href = link.getAttribute("href");
                      if (href) {
                          if (href.toLowerCase().indexOf("https:") === -1 &&
                              href.toLowerCase().indexOf("http:") === -1 &&
                              href.indexOf("//") !== 0) {
                              let absoluteHref = loc.protocol + "//" + loc.host;
                              if (href.indexOf("/") === 0) {
                                  absoluteHref += href;
                              }
                              else {
                                  const path = loc.pathname.split("/");
                                  path.pop();
                                  const finalPath = path.join("/");
                                  absoluteHref += finalPath + "/" + href;
                              }
                              icons.push(absoluteHref);
                          }
                          else if (href.indexOf("//") === 0) {
                              const absoluteUrl = loc.protocol + href;
                              icons.push(absoluteUrl);
                          }
                          else {
                              icons.push(href);
                          }
                      }
                  }
              }
          }
          return icons;
      }
      function getWindowMetadataOfAny(...args) {
          const metaTags = doc.getElementsByTagName("meta");
          for (let i = 0; i < metaTags.length; i++) {
              const tag = metaTags[i];
              const attributes = ["itemprop", "property", "name"]
                  .map((target) => tag.getAttribute(target))
                  .filter((attr) => {
                  if (attr) {
                      return args.includes(attr);
                  }
                  return false;
              });
              if (attributes.length && attributes) {
                  const content = tag.getAttribute("content");
                  if (content) {
                      return content;
                  }
              }
          }
          return "";
      }
      function getName() {
          let name = getWindowMetadataOfAny("name", "og:site_name", "og:title", "twitter:title");
          if (!name) {
              name = doc.title;
          }
          return name;
      }
      function getDescription() {
          const description = getWindowMetadataOfAny("description", "og:description", "twitter:description", "keywords");
          return description;
      }
      const name = getName();
      const description = getDescription();
      const url = loc.origin;
      const icons = getIcons();
      const meta = {
          description,
          url,
          icons,
          name,
      };
      return meta;
  }
  cjs$7.getWindowMetadata = getWindowMetadata;

  var __spreadArrays = (undefined && undefined.__spreadArrays) || function () {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r[k] = a[j];
      return r;
  };
  var BrowserInfo = /** @class */ (function () {
      function BrowserInfo(name, version, os) {
          this.name = name;
          this.version = version;
          this.os = os;
          this.type = 'browser';
      }
      return BrowserInfo;
  }());
  var NodeInfo = /** @class */ (function () {
      function NodeInfo(version) {
          this.version = version;
          this.type = 'node';
          this.name = 'node';
          this.os = process.platform;
      }
      return NodeInfo;
  }());
  var SearchBotDeviceInfo = /** @class */ (function () {
      function SearchBotDeviceInfo(name, version, os, bot) {
          this.name = name;
          this.version = version;
          this.os = os;
          this.bot = bot;
          this.type = 'bot-device';
      }
      return SearchBotDeviceInfo;
  }());
  var BotInfo = /** @class */ (function () {
      function BotInfo() {
          this.type = 'bot';
          this.bot = true; // NOTE: deprecated test name instead
          this.name = 'bot';
          this.version = null;
          this.os = null;
      }
      return BotInfo;
  }());
  var ReactNativeInfo = /** @class */ (function () {
      function ReactNativeInfo() {
          this.type = 'react-native';
          this.name = 'react-native';
          this.version = null;
          this.os = null;
      }
      return ReactNativeInfo;
  }());
  // tslint:disable-next-line:max-line-length
  var SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;
  var SEARCHBOT_OS_REGEX = /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/;
  var REQUIRED_VERSION_PARTS = 3;
  var userAgentRules = [
      ['aol', /AOLShield\/([0-9\._]+)/],
      ['edge', /Edge\/([0-9\._]+)/],
      ['edge-ios', /EdgiOS\/([0-9\._]+)/],
      ['yandexbrowser', /YaBrowser\/([0-9\._]+)/],
      ['kakaotalk', /KAKAOTALK\s([0-9\.]+)/],
      ['samsung', /SamsungBrowser\/([0-9\.]+)/],
      ['silk', /\bSilk\/([0-9._-]+)\b/],
      ['miui', /MiuiBrowser\/([0-9\.]+)$/],
      ['beaker', /BeakerBrowser\/([0-9\.]+)/],
      ['edge-chromium', /EdgA?\/([0-9\.]+)/],
      [
          'chromium-webview',
          /(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/,
      ],
      ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],
      ['phantomjs', /PhantomJS\/([0-9\.]+)(:?\s|$)/],
      ['crios', /CriOS\/([0-9\.]+)(:?\s|$)/],
      ['firefox', /Firefox\/([0-9\.]+)(?:\s|$)/],
      ['fxios', /FxiOS\/([0-9\.]+)/],
      ['opera-mini', /Opera Mini.*Version\/([0-9\.]+)/],
      ['opera', /Opera\/([0-9\.]+)(?:\s|$)/],
      ['opera', /OPR\/([0-9\.]+)(:?\s|$)/],
      ['ie', /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],
      ['ie', /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],
      ['ie', /MSIE\s(7\.0)/],
      ['bb10', /BB10;\sTouch.*Version\/([0-9\.]+)/],
      ['android', /Android\s([0-9\.]+)/],
      ['ios', /Version\/([0-9\._]+).*Mobile.*Safari.*/],
      ['safari', /Version\/([0-9\._]+).*Safari/],
      ['facebook', /FBAV\/([0-9\.]+)/],
      ['instagram', /Instagram\s([0-9\.]+)/],
      ['ios-webview', /AppleWebKit\/([0-9\.]+).*Mobile/],
      ['ios-webview', /AppleWebKit\/([0-9\.]+).*Gecko\)$/],
      ['searchbot', SEARCHBOX_UA_REGEX],
  ];
  var operatingSystemRules = [
      ['iOS', /iP(hone|od|ad)/],
      ['Android OS', /Android/],
      ['BlackBerry OS', /BlackBerry|BB10/],
      ['Windows Mobile', /IEMobile/],
      ['Amazon OS', /Kindle/],
      ['Windows 3.11', /Win16/],
      ['Windows 95', /(Windows 95)|(Win95)|(Windows_95)/],
      ['Windows 98', /(Windows 98)|(Win98)/],
      ['Windows 2000', /(Windows NT 5.0)|(Windows 2000)/],
      ['Windows XP', /(Windows NT 5.1)|(Windows XP)/],
      ['Windows Server 2003', /(Windows NT 5.2)/],
      ['Windows Vista', /(Windows NT 6.0)/],
      ['Windows 7', /(Windows NT 6.1)/],
      ['Windows 8', /(Windows NT 6.2)/],
      ['Windows 8.1', /(Windows NT 6.3)/],
      ['Windows 10', /(Windows NT 10.0)/],
      ['Windows ME', /Windows ME/],
      ['Open BSD', /OpenBSD/],
      ['Sun OS', /SunOS/],
      ['Chrome OS', /CrOS/],
      ['Linux', /(Linux)|(X11)/],
      ['Mac OS', /(Mac_PowerPC)|(Macintosh)/],
      ['QNX', /QNX/],
      ['BeOS', /BeOS/],
      ['OS/2', /OS\/2/],
  ];
  function detect(userAgent) {
      if (!!userAgent) {
          return parseUserAgent(userAgent);
      }
      if (typeof document === 'undefined' &&
          typeof navigator !== 'undefined' &&
          navigator.product === 'ReactNative') {
          return new ReactNativeInfo();
      }
      if (typeof navigator !== 'undefined') {
          return parseUserAgent(navigator.userAgent);
      }
      return getNodeVersion();
  }
  function matchUserAgent(ua) {
      // opted for using reduce here rather than Array#first with a regex.test call
      // this is primarily because using the reduce we only perform the regex
      // execution once rather than once for the test and for the exec again below
      // probably something that needs to be benchmarked though
      return (ua !== '' &&
          userAgentRules.reduce(function (matched, _a) {
              var browser = _a[0], regex = _a[1];
              if (matched) {
                  return matched;
              }
              var uaMatch = regex.exec(ua);
              return !!uaMatch && [browser, uaMatch];
          }, false));
  }
  function browserName(ua) {
      var data = matchUserAgent(ua);
      return data ? data[0] : null;
  }
  function parseUserAgent(ua) {
      var matchedRule = matchUserAgent(ua);
      if (!matchedRule) {
          return null;
      }
      var name = matchedRule[0], match = matchedRule[1];
      if (name === 'searchbot') {
          return new BotInfo();
      }
      var versionParts = match[1] && match[1].split(/[._]/).slice(0, 3);
      if (versionParts) {
          if (versionParts.length < REQUIRED_VERSION_PARTS) {
              versionParts = __spreadArrays(versionParts, createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length));
          }
      }
      else {
          versionParts = [];
      }
      var version = versionParts.join('.');
      var os = detectOS(ua);
      var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua);
      if (searchBotMatch && searchBotMatch[1]) {
          return new SearchBotDeviceInfo(name, version, os, searchBotMatch[1]);
      }
      return new BrowserInfo(name, version, os);
  }
  function detectOS(ua) {
      for (var ii = 0, count = operatingSystemRules.length; ii < count; ii++) {
          var _a = operatingSystemRules[ii], os = _a[0], regex = _a[1];
          var match = regex.exec(ua);
          if (match) {
              return os;
          }
      }
      return null;
  }
  function getNodeVersion() {
      var isNode = typeof process !== 'undefined' && process.version;
      return isNode ? new NodeInfo(process.version.slice(1)) : null;
  }
  function createVersionParts(count) {
      var output = [];
      for (var ii = 0; ii < count; ii++) {
          output.push('0');
      }
      return output;
  }

  var es$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    BrowserInfo: BrowserInfo,
    NodeInfo: NodeInfo,
    SearchBotDeviceInfo: SearchBotDeviceInfo,
    BotInfo: BotInfo,
    ReactNativeInfo: ReactNativeInfo,
    detect: detect,
    browserName: browserName,
    parseUserAgent: parseUserAgent,
    detectOS: detectOS,
    getNodeVersion: getNodeVersion
  });

  var require$$3 = /*@__PURE__*/getAugmentedNamespace(es$1);

  (function (exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getClientMeta = exports.getLocalStorage = exports.getLocalStorageOrThrow = exports.getCrypto = exports.getCryptoOrThrow = exports.getLocation = exports.getLocationOrThrow = exports.getNavigator = exports.getNavigatorOrThrow = exports.getDocument = exports.getDocumentOrThrow = exports.getFromWindowOrThrow = exports.getFromWindow = exports.isBrowser = exports.isNode = exports.isMobile = exports.isIOS = exports.isAndroid = exports.detectOS = exports.detectEnv = void 0;
  const tslib_1 = require$$0$1;
  const windowMetadata = (0, tslib_1.__importStar)(cjs$7);
  const windowGetters = (0, tslib_1.__importStar)(cjs$6);
  const detect_browser_1 = require$$3;
  function detectEnv(userAgent) {
      return (0, detect_browser_1.detect)(userAgent);
  }
  exports.detectEnv = detectEnv;
  function detectOS() {
      const env = detectEnv();
      return env && env.os ? env.os : undefined;
  }
  exports.detectOS = detectOS;
  function isAndroid() {
      const os = detectOS();
      return os ? os.toLowerCase().includes("android") : false;
  }
  exports.isAndroid = isAndroid;
  function isIOS() {
      const os = detectOS();
      return os
          ? os.toLowerCase().includes("ios") ||
              (os.toLowerCase().includes("mac") && navigator.maxTouchPoints > 1)
          : false;
  }
  exports.isIOS = isIOS;
  function isMobile() {
      const os = detectOS();
      return os ? isAndroid() || isIOS() : false;
  }
  exports.isMobile = isMobile;
  function isNode() {
      const env = detectEnv();
      const result = env && env.name ? env.name.toLowerCase() === "node" : false;
      return result;
  }
  exports.isNode = isNode;
  function isBrowser() {
      const result = !isNode() && !!(0, exports.getNavigator)();
      return result;
  }
  exports.isBrowser = isBrowser;
  exports.getFromWindow = windowGetters.getFromWindow;
  exports.getFromWindowOrThrow = windowGetters.getFromWindowOrThrow;
  exports.getDocumentOrThrow = windowGetters.getDocumentOrThrow;
  exports.getDocument = windowGetters.getDocument;
  exports.getNavigatorOrThrow = windowGetters.getNavigatorOrThrow;
  exports.getNavigator = windowGetters.getNavigator;
  exports.getLocationOrThrow = windowGetters.getLocationOrThrow;
  exports.getLocation = windowGetters.getLocation;
  exports.getCryptoOrThrow = windowGetters.getCryptoOrThrow;
  exports.getCrypto = windowGetters.getCrypto;
  exports.getLocalStorageOrThrow = windowGetters.getLocalStorageOrThrow;
  exports.getLocalStorage = windowGetters.getLocalStorage;
  function getClientMeta() {
      return windowMetadata.getWindowMetadata();
  }
  exports.getClientMeta = getClientMeta;

  }(browser$1));

  var json$1 = {};

  function safeJsonParse(value) {
      if (typeof value !== "string") {
          throw new Error(`Cannot safe json parse value of type ${typeof value}`);
      }
      try {
          return JSON.parse(value);
      }
      catch (_a) {
          return value;
      }
  }
  function safeJsonStringify(value) {
      return typeof value === "string" ? value : JSON.stringify(value);
  }

  var esm$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    safeJsonParse: safeJsonParse,
    safeJsonStringify: safeJsonStringify
  });

  var require$$1$1 = /*@__PURE__*/getAugmentedNamespace(esm$1);

  Object.defineProperty(json$1, "__esModule", { value: true });
  json$1.safeJsonStringify = json$1.safeJsonParse = void 0;
  const tslib_1$e = require$$0$1;
  const safeJson = (0, tslib_1$e.__importStar)(require$$1$1);
  json$1.safeJsonParse = safeJson.safeJsonParse;
  json$1.safeJsonStringify = safeJson.safeJsonStringify;

  var local = {};

  Object.defineProperty(local, "__esModule", { value: true });
  local.removeLocal = local.getLocal = local.setLocal = void 0;
  const json_1 = json$1;
  const browser_1 = browser$1;
  function setLocal(key, data) {
      const raw = (0, json_1.safeJsonStringify)(data);
      const local = (0, browser_1.getLocalStorage)();
      if (local) {
          local.setItem(key, raw);
      }
  }
  local.setLocal = setLocal;
  function getLocal(key) {
      let data = null;
      let raw = null;
      const local = (0, browser_1.getLocalStorage)();
      if (local) {
          raw = local.getItem(key);
      }
      data = raw ? (0, json_1.safeJsonParse)(raw) : raw;
      return data;
  }
  local.getLocal = getLocal;
  function removeLocal(key) {
      const local = (0, browser_1.getLocalStorage)();
      if (local) {
          local.removeItem(key);
      }
  }
  local.removeLocal = removeLocal;

  var mobile = {};

  (function (exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getMobileLinkRegistry = exports.getMobileRegistryEntry = exports.saveMobileLinkInfo = exports.formatIOSMobile = exports.mobileLinkChoiceKey = void 0;
  const local_1 = local;
  exports.mobileLinkChoiceKey = "WALLETCONNECT_DEEPLINK_CHOICE";
  function formatIOSMobile(uri, entry) {
      const encodedUri = encodeURIComponent(uri);
      return entry.universalLink
          ? `${entry.universalLink}/wc?uri=${encodedUri}`
          : entry.deepLink
              ? `${entry.deepLink}${entry.deepLink.endsWith(":") ? "//" : "/"}wc?uri=${encodedUri}`
              : "";
  }
  exports.formatIOSMobile = formatIOSMobile;
  function saveMobileLinkInfo(data) {
      const focusUri = data.href.split("?")[0];
      (0, local_1.setLocal)(exports.mobileLinkChoiceKey, Object.assign(Object.assign({}, data), { href: focusUri }));
  }
  exports.saveMobileLinkInfo = saveMobileLinkInfo;
  function getMobileRegistryEntry(registry, name) {
      return registry.filter((entry) => entry.name.toLowerCase().includes(name.toLowerCase()))[0];
  }
  exports.getMobileRegistryEntry = getMobileRegistryEntry;
  function getMobileLinkRegistry(registry, whitelist) {
      let links = registry;
      if (whitelist) {
          links = whitelist.map((name) => getMobileRegistryEntry(registry, name)).filter(Boolean);
      }
      return links;
  }
  exports.getMobileLinkRegistry = getMobileLinkRegistry;

  }(mobile));

  var registry = {};

  Object.defineProperty(registry, "__esModule", { value: true });
  registry.formatMobileRegistry = registry.formatMobileRegistryEntry = registry.getAppLogoUrl = registry.getDappRegistryUrl = registry.getWalletRegistryUrl = void 0;
  const API_URL = "https://registry.walletconnect.org";
  function getWalletRegistryUrl() {
      return API_URL + "/data/wallets.json";
  }
  registry.getWalletRegistryUrl = getWalletRegistryUrl;
  function getDappRegistryUrl() {
      return API_URL + "/data/dapps.json";
  }
  registry.getDappRegistryUrl = getDappRegistryUrl;
  function getAppLogoUrl(id) {
      return API_URL + "/logo/sm/" + id + ".jpeg";
  }
  registry.getAppLogoUrl = getAppLogoUrl;
  function formatMobileRegistryEntry(entry, platform = "mobile") {
      return {
          name: entry.name || "",
          shortName: entry.metadata.shortName || "",
          color: entry.metadata.colors.primary || "",
          logo: entry.id ? getAppLogoUrl(entry.id) : "",
          universalLink: entry[platform].universal || "",
          deepLink: entry[platform].native || "",
      };
  }
  registry.formatMobileRegistryEntry = formatMobileRegistryEntry;
  function formatMobileRegistry(registry, platform = "mobile") {
      return Object.values(registry)
          .filter(entry => !!entry[platform].universal || !!entry[platform].native)
          .map((entry) => formatMobileRegistryEntry(entry, platform));
  }
  registry.formatMobileRegistry = formatMobileRegistry;

  (function (exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  const tslib_1 = require$$0$1;
  (0, tslib_1.__exportStar)(browser$1, exports);
  (0, tslib_1.__exportStar)(json$1, exports);
  (0, tslib_1.__exportStar)(local, exports);
  (0, tslib_1.__exportStar)(mobile, exports);
  (0, tslib_1.__exportStar)(registry, exports);

  }(cjs$8));

  var constants$9 = {};

  Object.defineProperty(constants$9, "__esModule", { value: true });
  constants$9.infuraNetworks = constants$9.stateMethods = constants$9.signingMethods = constants$9.reservedEvents = void 0;
  constants$9.reservedEvents = [
      "session_request",
      "session_update",
      "exchange_key",
      "connect",
      "disconnect",
      "display_uri",
      "modal_closed",
      "transport_open",
      "transport_close",
      "transport_error",
  ];
  constants$9.signingMethods = [
      "eth_sendTransaction",
      "eth_signTransaction",
      "eth_sign",
      "eth_signTypedData",
      "eth_signTypedData_v1",
      "eth_signTypedData_v2",
      "eth_signTypedData_v3",
      "eth_signTypedData_v4",
      "personal_sign",
      "wallet_addEthereumChain",
      "wallet_switchEthereumChain",
      "wallet_getPermissions",
      "wallet_requestPermissions",
      "wallet_registerOnboarding",
      "wallet_watchAsset",
      "wallet_scanQRCode",
  ];
  constants$9.stateMethods = ["eth_accounts", "eth_chainId", "net_version"];
  constants$9.infuraNetworks = {
      1: "mainnet",
      3: "ropsten",
      4: "rinkeby",
      5: "goerli",
      42: "kovan",
  };

  var encoding$5 = {};

  var bn$2 = {exports: {}};

  (function (module) {
  (function (module, exports) {

    // Utils
    function assert (val, msg) {
      if (!val) throw new Error(msg || 'Assertion failed');
    }

    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits (ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }

    // BN

    function BN (number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }

      this.negative = 0;
      this.words = null;
      this.length = 0;

      // Reduction context
      this.red = null;

      if (number !== null) {
        if (base === 'le' || base === 'be') {
          endian = base;
          base = 10;
        }

        this._init(number || 0, base || 10, endian || 'be');
      }
    }
    if (typeof module === 'object') {
      module.exports = BN;
    } else {
      exports.BN = BN;
    }

    BN.BN = BN;
    BN.wordSize = 26;

    var Buffer;
    try {
      Buffer = require('buffer').Buffer;
    } catch (e) {
    }

    BN.isBN = function isBN (num) {
      if (num instanceof BN) {
        return true;
      }

      return num !== null && typeof num === 'object' &&
        num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };

    BN.max = function max (left, right) {
      if (left.cmp(right) > 0) return left;
      return right;
    };

    BN.min = function min (left, right) {
      if (left.cmp(right) < 0) return left;
      return right;
    };

    BN.prototype._init = function init (number, base, endian) {
      if (typeof number === 'number') {
        return this._initNumber(number, base, endian);
      }

      if (typeof number === 'object') {
        return this._initArray(number, base, endian);
      }

      if (base === 'hex') {
        base = 16;
      }
      assert(base === (base | 0) && base >= 2 && base <= 36);

      number = number.toString().replace(/\s+/g, '');
      var start = 0;
      if (number[0] === '-') {
        start++;
      }

      if (base === 16) {
        this._parseHex(number, start);
      } else {
        this._parseBase(number, base, start);
      }

      if (number[0] === '-') {
        this.negative = 1;
      }

      this.strip();

      if (endian !== 'le') return;

      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initNumber = function _initNumber (number, base, endian) {
      if (number < 0) {
        this.negative = 1;
        number = -number;
      }
      if (number < 0x4000000) {
        this.words = [ number & 0x3ffffff ];
        this.length = 1;
      } else if (number < 0x10000000000000) {
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff
        ];
        this.length = 2;
      } else {
        assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff,
          1
        ];
        this.length = 3;
      }

      if (endian !== 'le') return;

      // Reverse the bytes
      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initArray = function _initArray (number, base, endian) {
      // Perhaps a Uint8Array
      assert(typeof number.length === 'number');
      if (number.length <= 0) {
        this.words = [ 0 ];
        this.length = 1;
        return this;
      }

      this.length = Math.ceil(number.length / 3);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      var off = 0;
      if (endian === 'be') {
        for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
          w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      } else if (endian === 'le') {
        for (i = 0, j = 0; i < number.length; i += 3) {
          w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      }
      return this.strip();
    };

    function parseHex (str, start, end) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;

        r <<= 4;

        // 'a' - 'f'
        if (c >= 49 && c <= 54) {
          r |= c - 49 + 0xa;

        // 'A' - 'F'
        } else if (c >= 17 && c <= 22) {
          r |= c - 17 + 0xa;

        // '0' - '9'
        } else {
          r |= c & 0xf;
        }
      }
      return r;
    }

    BN.prototype._parseHex = function _parseHex (number, start) {
      // Create possibly bigger array to ensure that it fits the number
      this.length = Math.ceil((number.length - start) / 6);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      // Scan 24-bit chunks and add them to the number
      var off = 0;
      for (i = number.length - 6, j = 0; i >= start; i -= 6) {
        w = parseHex(number, i, i + 6);
        this.words[j] |= (w << off) & 0x3ffffff;
        // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
      if (i + 6 !== start) {
        w = parseHex(number, start, i + 6);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      }
      this.strip();
    };

    function parseBase (str, start, end, mul) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;

        r *= mul;

        // 'a'
        if (c >= 49) {
          r += c - 49 + 0xa;

        // 'A'
        } else if (c >= 17) {
          r += c - 17 + 0xa;

        // '0' - '9'
        } else {
          r += c;
        }
      }
      return r;
    }

    BN.prototype._parseBase = function _parseBase (number, base, start) {
      // Initialize as zero
      this.words = [ 0 ];
      this.length = 1;

      // Find length of limb in base
      for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = (limbPow / base) | 0;

      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;

      var word = 0;
      for (var i = start; i < end; i += limbLen) {
        word = parseBase(number, i, i + limbLen, base);

        this.imuln(limbPow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }

      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i, number.length, base);

        for (i = 0; i < mod; i++) {
          pow *= base;
        }

        this.imuln(pow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
    };

    BN.prototype.copy = function copy (dest) {
      dest.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        dest.words[i] = this.words[i];
      }
      dest.length = this.length;
      dest.negative = this.negative;
      dest.red = this.red;
    };

    BN.prototype.clone = function clone () {
      var r = new BN(null);
      this.copy(r);
      return r;
    };

    BN.prototype._expand = function _expand (size) {
      while (this.length < size) {
        this.words[this.length++] = 0;
      }
      return this;
    };

    // Remove leading `0` from `this`
    BN.prototype.strip = function strip () {
      while (this.length > 1 && this.words[this.length - 1] === 0) {
        this.length--;
      }
      return this._normSign();
    };

    BN.prototype._normSign = function _normSign () {
      // -0 = 0
      if (this.length === 1 && this.words[0] === 0) {
        this.negative = 0;
      }
      return this;
    };

    BN.prototype.inspect = function inspect () {
      return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };

    /*

    var zeros = [];
    var groupSizes = [];
    var groupBases = [];

    var s = '';
    var i = -1;
    while (++i < BN.wordSize) {
      zeros[i] = s;
      s += '0';
    }
    groupSizes[0] = 0;
    groupSizes[1] = 0;
    groupBases[0] = 0;
    groupBases[1] = 0;
    var base = 2 - 1;
    while (++base < 36 + 1) {
      var groupSize = 0;
      var groupBase = 1;
      while (groupBase < (1 << BN.wordSize) / base) {
        groupBase *= base;
        groupSize += 1;
      }
      groupSizes[base] = groupSize;
      groupBases[base] = groupBase;
    }

    */

    var zeros = [
      '',
      '0',
      '00',
      '000',
      '0000',
      '00000',
      '000000',
      '0000000',
      '00000000',
      '000000000',
      '0000000000',
      '00000000000',
      '000000000000',
      '0000000000000',
      '00000000000000',
      '000000000000000',
      '0000000000000000',
      '00000000000000000',
      '000000000000000000',
      '0000000000000000000',
      '00000000000000000000',
      '000000000000000000000',
      '0000000000000000000000',
      '00000000000000000000000',
      '000000000000000000000000',
      '0000000000000000000000000'
    ];

    var groupSizes = [
      0, 0,
      25, 16, 12, 11, 10, 9, 8,
      8, 7, 7, 7, 7, 6, 6,
      6, 6, 6, 6, 6, 5, 5,
      5, 5, 5, 5, 5, 5, 5,
      5, 5, 5, 5, 5, 5, 5
    ];

    var groupBases = [
      0, 0,
      33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
      43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
      16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
      6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
      24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
    ];

    BN.prototype.toString = function toString (base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;

      var out;
      if (base === 16 || base === 'hex') {
        out = '';
        var off = 0;
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = this.words[i];
          var word = (((w << off) | carry) & 0xffffff).toString(16);
          carry = (w >>> (24 - off)) & 0xffffff;
          if (carry !== 0 || i !== this.length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off += 2;
          if (off >= 26) {
            off -= 26;
            i--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      if (base === (base | 0) && base >= 2 && base <= 36) {
        // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
        var groupSize = groupSizes[base];
        // var groupBase = Math.pow(base, groupSize);
        var groupBase = groupBases[base];
        out = '';
        var c = this.clone();
        c.negative = 0;
        while (!c.isZero()) {
          var r = c.modn(groupBase).toString(base);
          c = c.idivn(groupBase);

          if (!c.isZero()) {
            out = zeros[groupSize - r.length] + r + out;
          } else {
            out = r + out;
          }
        }
        if (this.isZero()) {
          out = '0' + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      assert(false, 'Base should be between 2 and 36');
    };

    BN.prototype.toNumber = function toNumber () {
      var ret = this.words[0];
      if (this.length === 2) {
        ret += this.words[1] * 0x4000000;
      } else if (this.length === 3 && this.words[2] === 0x01) {
        // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + (this.words[1] * 0x4000000);
      } else if (this.length > 2) {
        assert(false, 'Number can only safely store up to 53 bits');
      }
      return (this.negative !== 0) ? -ret : ret;
    };

    BN.prototype.toJSON = function toJSON () {
      return this.toString(16);
    };

    BN.prototype.toBuffer = function toBuffer (endian, length) {
      assert(typeof Buffer !== 'undefined');
      return this.toArrayLike(Buffer, endian, length);
    };

    BN.prototype.toArray = function toArray (endian, length) {
      return this.toArrayLike(Array, endian, length);
    };

    BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert(byteLength <= reqLength, 'byte array longer than desired length');
      assert(reqLength > 0, 'Requested array length <= 0');

      this.strip();
      var littleEndian = endian === 'le';
      var res = new ArrayType(reqLength);

      var b, i;
      var q = this.clone();
      if (!littleEndian) {
        // Assume big-endian
        for (i = 0; i < reqLength - byteLength; i++) {
          res[i] = 0;
        }

        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[reqLength - i - 1] = b;
        }
      } else {
        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[i] = b;
        }

        for (; i < reqLength; i++) {
          res[i] = 0;
        }
      }

      return res;
    };

    if (Math.clz32) {
      BN.prototype._countBits = function _countBits (w) {
        return 32 - Math.clz32(w);
      };
    } else {
      BN.prototype._countBits = function _countBits (w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
          r += 13;
          t >>>= 13;
        }
        if (t >= 0x40) {
          r += 7;
          t >>>= 7;
        }
        if (t >= 0x8) {
          r += 4;
          t >>>= 4;
        }
        if (t >= 0x02) {
          r += 2;
          t >>>= 2;
        }
        return r + t;
      };
    }

    BN.prototype._zeroBits = function _zeroBits (w) {
      // Short-cut
      if (w === 0) return 26;

      var t = w;
      var r = 0;
      if ((t & 0x1fff) === 0) {
        r += 13;
        t >>>= 13;
      }
      if ((t & 0x7f) === 0) {
        r += 7;
        t >>>= 7;
      }
      if ((t & 0xf) === 0) {
        r += 4;
        t >>>= 4;
      }
      if ((t & 0x3) === 0) {
        r += 2;
        t >>>= 2;
      }
      if ((t & 0x1) === 0) {
        r++;
      }
      return r;
    };

    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength () {
      var w = this.words[this.length - 1];
      var hi = this._countBits(w);
      return (this.length - 1) * 26 + hi;
    };

    function toBitArray (num) {
      var w = new Array(num.bitLength());

      for (var bit = 0; bit < w.length; bit++) {
        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
      }

      return w;
    }

    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits () {
      if (this.isZero()) return 0;

      var r = 0;
      for (var i = 0; i < this.length; i++) {
        var b = this._zeroBits(this.words[i]);
        r += b;
        if (b !== 26) break;
      }
      return r;
    };

    BN.prototype.byteLength = function byteLength () {
      return Math.ceil(this.bitLength() / 8);
    };

    BN.prototype.toTwos = function toTwos (width) {
      if (this.negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };

    BN.prototype.fromTwos = function fromTwos (width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };

    BN.prototype.isNeg = function isNeg () {
      return this.negative !== 0;
    };

    // Return negative clone of `this`
    BN.prototype.neg = function neg () {
      return this.clone().ineg();
    };

    BN.prototype.ineg = function ineg () {
      if (!this.isZero()) {
        this.negative ^= 1;
      }

      return this;
    };

    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor (num) {
      while (this.length < num.length) {
        this.words[this.length++] = 0;
      }

      for (var i = 0; i < num.length; i++) {
        this.words[i] = this.words[i] | num.words[i];
      }

      return this.strip();
    };

    BN.prototype.ior = function ior (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuor(num);
    };

    // Or `num` with `this`
    BN.prototype.or = function or (num) {
      if (this.length > num.length) return this.clone().ior(num);
      return num.clone().ior(this);
    };

    BN.prototype.uor = function uor (num) {
      if (this.length > num.length) return this.clone().iuor(num);
      return num.clone().iuor(this);
    };

    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand (num) {
      // b = min-length(num, this)
      var b;
      if (this.length > num.length) {
        b = num;
      } else {
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = this.words[i] & num.words[i];
      }

      this.length = b.length;

      return this.strip();
    };

    BN.prototype.iand = function iand (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuand(num);
    };

    // And `num` with `this`
    BN.prototype.and = function and (num) {
      if (this.length > num.length) return this.clone().iand(num);
      return num.clone().iand(this);
    };

    BN.prototype.uand = function uand (num) {
      if (this.length > num.length) return this.clone().iuand(num);
      return num.clone().iuand(this);
    };

    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor (num) {
      // a.length > b.length
      var a;
      var b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = a.words[i] ^ b.words[i];
      }

      if (this !== a) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = a.length;

      return this.strip();
    };

    BN.prototype.ixor = function ixor (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuxor(num);
    };

    // Xor `num` with `this`
    BN.prototype.xor = function xor (num) {
      if (this.length > num.length) return this.clone().ixor(num);
      return num.clone().ixor(this);
    };

    BN.prototype.uxor = function uxor (num) {
      if (this.length > num.length) return this.clone().iuxor(num);
      return num.clone().iuxor(this);
    };

    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn (width) {
      assert(typeof width === 'number' && width >= 0);

      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;

      // Extend the buffer with leading zeroes
      this._expand(bytesNeeded);

      if (bitsLeft > 0) {
        bytesNeeded--;
      }

      // Handle complete words
      for (var i = 0; i < bytesNeeded; i++) {
        this.words[i] = ~this.words[i] & 0x3ffffff;
      }

      // Handle the residue
      if (bitsLeft > 0) {
        this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
      }

      // And remove leading zeroes
      return this.strip();
    };

    BN.prototype.notn = function notn (width) {
      return this.clone().inotn(width);
    };

    // Set `bit` of `this`
    BN.prototype.setn = function setn (bit, val) {
      assert(typeof bit === 'number' && bit >= 0);

      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      this._expand(off + 1);

      if (val) {
        this.words[off] = this.words[off] | (1 << wbit);
      } else {
        this.words[off] = this.words[off] & ~(1 << wbit);
      }

      return this.strip();
    };

    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd (num) {
      var r;

      // negative + positive
      if (this.negative !== 0 && num.negative === 0) {
        this.negative = 0;
        r = this.isub(num);
        this.negative ^= 1;
        return this._normSign();

      // positive + negative
      } else if (this.negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r = this.isub(num);
        num.negative = 1;
        return r._normSign();
      }

      // a.length > b.length
      var a, b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }

      this.length = a.length;
      if (carry !== 0) {
        this.words[this.length] = carry;
        this.length++;
      // Copy the rest of the words
      } else if (a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      return this;
    };

    // Add `num` to `this`
    BN.prototype.add = function add (num) {
      var res;
      if (num.negative !== 0 && this.negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && this.negative !== 0) {
        this.negative = 0;
        res = num.sub(this);
        this.negative = 1;
        return res;
      }

      if (this.length > num.length) return this.clone().iadd(num);

      return num.clone().iadd(this);
    };

    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub (num) {
      // this - (-num) = this + num
      if (num.negative !== 0) {
        num.negative = 0;
        var r = this.iadd(num);
        num.negative = 1;
        return r._normSign();

      // -this - num = -(this + num)
      } else if (this.negative !== 0) {
        this.negative = 0;
        this.iadd(num);
        this.negative = 1;
        return this._normSign();
      }

      // At this point both numbers are positive
      var cmp = this.cmp(num);

      // Optimization - zeroify
      if (cmp === 0) {
        this.negative = 0;
        this.length = 1;
        this.words[0] = 0;
        return this;
      }

      // a > b
      var a, b;
      if (cmp > 0) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }

      // Copy rest of the words
      if (carry === 0 && i < a.length && a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = Math.max(this.length, i);

      if (a !== this) {
        this.negative = 1;
      }

      return this.strip();
    };

    // Subtract `num` from `this`
    BN.prototype.sub = function sub (num) {
      return this.clone().isub(num);
    };

    function smallMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      var len = (self.length + num.length) | 0;
      out.length = len;
      len = (len - 1) | 0;

      // Peel one iteration (compiler can't do it, because of code complexity)
      var a = self.words[0] | 0;
      var b = num.words[0] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      var carry = (r / 0x4000000) | 0;
      out.words[0] = lo;

      for (var k = 1; k < len; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = carry >>> 26;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = (k - j) | 0;
          a = self.words[i] | 0;
          b = num.words[j] | 0;
          r = a * b + rword;
          ncarry += (r / 0x4000000) | 0;
          rword = r & 0x3ffffff;
        }
        out.words[k] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k] = carry | 0;
      } else {
        out.length--;
      }

      return out.strip();
    }

    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo (self, num, out) {
      var a = self.words;
      var b = num.words;
      var o = out.words;
      var c = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a[0] | 0;
      var al0 = a0 & 0x1fff;
      var ah0 = a0 >>> 13;
      var a1 = a[1] | 0;
      var al1 = a1 & 0x1fff;
      var ah1 = a1 >>> 13;
      var a2 = a[2] | 0;
      var al2 = a2 & 0x1fff;
      var ah2 = a2 >>> 13;
      var a3 = a[3] | 0;
      var al3 = a3 & 0x1fff;
      var ah3 = a3 >>> 13;
      var a4 = a[4] | 0;
      var al4 = a4 & 0x1fff;
      var ah4 = a4 >>> 13;
      var a5 = a[5] | 0;
      var al5 = a5 & 0x1fff;
      var ah5 = a5 >>> 13;
      var a6 = a[6] | 0;
      var al6 = a6 & 0x1fff;
      var ah6 = a6 >>> 13;
      var a7 = a[7] | 0;
      var al7 = a7 & 0x1fff;
      var ah7 = a7 >>> 13;
      var a8 = a[8] | 0;
      var al8 = a8 & 0x1fff;
      var ah8 = a8 >>> 13;
      var a9 = a[9] | 0;
      var al9 = a9 & 0x1fff;
      var ah9 = a9 >>> 13;
      var b0 = b[0] | 0;
      var bl0 = b0 & 0x1fff;
      var bh0 = b0 >>> 13;
      var b1 = b[1] | 0;
      var bl1 = b1 & 0x1fff;
      var bh1 = b1 >>> 13;
      var b2 = b[2] | 0;
      var bl2 = b2 & 0x1fff;
      var bh2 = b2 >>> 13;
      var b3 = b[3] | 0;
      var bl3 = b3 & 0x1fff;
      var bh3 = b3 >>> 13;
      var b4 = b[4] | 0;
      var bl4 = b4 & 0x1fff;
      var bh4 = b4 >>> 13;
      var b5 = b[5] | 0;
      var bl5 = b5 & 0x1fff;
      var bh5 = b5 >>> 13;
      var b6 = b[6] | 0;
      var bl6 = b6 & 0x1fff;
      var bh6 = b6 >>> 13;
      var b7 = b[7] | 0;
      var bl7 = b7 & 0x1fff;
      var bh7 = b7 >>> 13;
      var b8 = b[8] | 0;
      var bl8 = b8 & 0x1fff;
      var bh8 = b8 >>> 13;
      var b9 = b[9] | 0;
      var bl9 = b9 & 0x1fff;
      var bh9 = b9 >>> 13;

      out.negative = self.negative ^ num.negative;
      out.length = 19;
      /* k = 0 */
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = (mid + Math.imul(ah0, bl0)) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
      w0 &= 0x3ffffff;
      /* k = 1 */
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = (mid + Math.imul(ah1, bl0)) | 0;
      hi = Math.imul(ah1, bh0);
      lo = (lo + Math.imul(al0, bl1)) | 0;
      mid = (mid + Math.imul(al0, bh1)) | 0;
      mid = (mid + Math.imul(ah0, bl1)) | 0;
      hi = (hi + Math.imul(ah0, bh1)) | 0;
      var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
      w1 &= 0x3ffffff;
      /* k = 2 */
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = (mid + Math.imul(ah2, bl0)) | 0;
      hi = Math.imul(ah2, bh0);
      lo = (lo + Math.imul(al1, bl1)) | 0;
      mid = (mid + Math.imul(al1, bh1)) | 0;
      mid = (mid + Math.imul(ah1, bl1)) | 0;
      hi = (hi + Math.imul(ah1, bh1)) | 0;
      lo = (lo + Math.imul(al0, bl2)) | 0;
      mid = (mid + Math.imul(al0, bh2)) | 0;
      mid = (mid + Math.imul(ah0, bl2)) | 0;
      hi = (hi + Math.imul(ah0, bh2)) | 0;
      var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
      w2 &= 0x3ffffff;
      /* k = 3 */
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = (mid + Math.imul(ah3, bl0)) | 0;
      hi = Math.imul(ah3, bh0);
      lo = (lo + Math.imul(al2, bl1)) | 0;
      mid = (mid + Math.imul(al2, bh1)) | 0;
      mid = (mid + Math.imul(ah2, bl1)) | 0;
      hi = (hi + Math.imul(ah2, bh1)) | 0;
      lo = (lo + Math.imul(al1, bl2)) | 0;
      mid = (mid + Math.imul(al1, bh2)) | 0;
      mid = (mid + Math.imul(ah1, bl2)) | 0;
      hi = (hi + Math.imul(ah1, bh2)) | 0;
      lo = (lo + Math.imul(al0, bl3)) | 0;
      mid = (mid + Math.imul(al0, bh3)) | 0;
      mid = (mid + Math.imul(ah0, bl3)) | 0;
      hi = (hi + Math.imul(ah0, bh3)) | 0;
      var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
      w3 &= 0x3ffffff;
      /* k = 4 */
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = (mid + Math.imul(ah4, bl0)) | 0;
      hi = Math.imul(ah4, bh0);
      lo = (lo + Math.imul(al3, bl1)) | 0;
      mid = (mid + Math.imul(al3, bh1)) | 0;
      mid = (mid + Math.imul(ah3, bl1)) | 0;
      hi = (hi + Math.imul(ah3, bh1)) | 0;
      lo = (lo + Math.imul(al2, bl2)) | 0;
      mid = (mid + Math.imul(al2, bh2)) | 0;
      mid = (mid + Math.imul(ah2, bl2)) | 0;
      hi = (hi + Math.imul(ah2, bh2)) | 0;
      lo = (lo + Math.imul(al1, bl3)) | 0;
      mid = (mid + Math.imul(al1, bh3)) | 0;
      mid = (mid + Math.imul(ah1, bl3)) | 0;
      hi = (hi + Math.imul(ah1, bh3)) | 0;
      lo = (lo + Math.imul(al0, bl4)) | 0;
      mid = (mid + Math.imul(al0, bh4)) | 0;
      mid = (mid + Math.imul(ah0, bl4)) | 0;
      hi = (hi + Math.imul(ah0, bh4)) | 0;
      var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
      w4 &= 0x3ffffff;
      /* k = 5 */
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = (mid + Math.imul(ah5, bl0)) | 0;
      hi = Math.imul(ah5, bh0);
      lo = (lo + Math.imul(al4, bl1)) | 0;
      mid = (mid + Math.imul(al4, bh1)) | 0;
      mid = (mid + Math.imul(ah4, bl1)) | 0;
      hi = (hi + Math.imul(ah4, bh1)) | 0;
      lo = (lo + Math.imul(al3, bl2)) | 0;
      mid = (mid + Math.imul(al3, bh2)) | 0;
      mid = (mid + Math.imul(ah3, bl2)) | 0;
      hi = (hi + Math.imul(ah3, bh2)) | 0;
      lo = (lo + Math.imul(al2, bl3)) | 0;
      mid = (mid + Math.imul(al2, bh3)) | 0;
      mid = (mid + Math.imul(ah2, bl3)) | 0;
      hi = (hi + Math.imul(ah2, bh3)) | 0;
      lo = (lo + Math.imul(al1, bl4)) | 0;
      mid = (mid + Math.imul(al1, bh4)) | 0;
      mid = (mid + Math.imul(ah1, bl4)) | 0;
      hi = (hi + Math.imul(ah1, bh4)) | 0;
      lo = (lo + Math.imul(al0, bl5)) | 0;
      mid = (mid + Math.imul(al0, bh5)) | 0;
      mid = (mid + Math.imul(ah0, bl5)) | 0;
      hi = (hi + Math.imul(ah0, bh5)) | 0;
      var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
      w5 &= 0x3ffffff;
      /* k = 6 */
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = (mid + Math.imul(ah6, bl0)) | 0;
      hi = Math.imul(ah6, bh0);
      lo = (lo + Math.imul(al5, bl1)) | 0;
      mid = (mid + Math.imul(al5, bh1)) | 0;
      mid = (mid + Math.imul(ah5, bl1)) | 0;
      hi = (hi + Math.imul(ah5, bh1)) | 0;
      lo = (lo + Math.imul(al4, bl2)) | 0;
      mid = (mid + Math.imul(al4, bh2)) | 0;
      mid = (mid + Math.imul(ah4, bl2)) | 0;
      hi = (hi + Math.imul(ah4, bh2)) | 0;
      lo = (lo + Math.imul(al3, bl3)) | 0;
      mid = (mid + Math.imul(al3, bh3)) | 0;
      mid = (mid + Math.imul(ah3, bl3)) | 0;
      hi = (hi + Math.imul(ah3, bh3)) | 0;
      lo = (lo + Math.imul(al2, bl4)) | 0;
      mid = (mid + Math.imul(al2, bh4)) | 0;
      mid = (mid + Math.imul(ah2, bl4)) | 0;
      hi = (hi + Math.imul(ah2, bh4)) | 0;
      lo = (lo + Math.imul(al1, bl5)) | 0;
      mid = (mid + Math.imul(al1, bh5)) | 0;
      mid = (mid + Math.imul(ah1, bl5)) | 0;
      hi = (hi + Math.imul(ah1, bh5)) | 0;
      lo = (lo + Math.imul(al0, bl6)) | 0;
      mid = (mid + Math.imul(al0, bh6)) | 0;
      mid = (mid + Math.imul(ah0, bl6)) | 0;
      hi = (hi + Math.imul(ah0, bh6)) | 0;
      var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
      w6 &= 0x3ffffff;
      /* k = 7 */
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = (mid + Math.imul(ah7, bl0)) | 0;
      hi = Math.imul(ah7, bh0);
      lo = (lo + Math.imul(al6, bl1)) | 0;
      mid = (mid + Math.imul(al6, bh1)) | 0;
      mid = (mid + Math.imul(ah6, bl1)) | 0;
      hi = (hi + Math.imul(ah6, bh1)) | 0;
      lo = (lo + Math.imul(al5, bl2)) | 0;
      mid = (mid + Math.imul(al5, bh2)) | 0;
      mid = (mid + Math.imul(ah5, bl2)) | 0;
      hi = (hi + Math.imul(ah5, bh2)) | 0;
      lo = (lo + Math.imul(al4, bl3)) | 0;
      mid = (mid + Math.imul(al4, bh3)) | 0;
      mid = (mid + Math.imul(ah4, bl3)) | 0;
      hi = (hi + Math.imul(ah4, bh3)) | 0;
      lo = (lo + Math.imul(al3, bl4)) | 0;
      mid = (mid + Math.imul(al3, bh4)) | 0;
      mid = (mid + Math.imul(ah3, bl4)) | 0;
      hi = (hi + Math.imul(ah3, bh4)) | 0;
      lo = (lo + Math.imul(al2, bl5)) | 0;
      mid = (mid + Math.imul(al2, bh5)) | 0;
      mid = (mid + Math.imul(ah2, bl5)) | 0;
      hi = (hi + Math.imul(ah2, bh5)) | 0;
      lo = (lo + Math.imul(al1, bl6)) | 0;
      mid = (mid + Math.imul(al1, bh6)) | 0;
      mid = (mid + Math.imul(ah1, bl6)) | 0;
      hi = (hi + Math.imul(ah1, bh6)) | 0;
      lo = (lo + Math.imul(al0, bl7)) | 0;
      mid = (mid + Math.imul(al0, bh7)) | 0;
      mid = (mid + Math.imul(ah0, bl7)) | 0;
      hi = (hi + Math.imul(ah0, bh7)) | 0;
      var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
      w7 &= 0x3ffffff;
      /* k = 8 */
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = (mid + Math.imul(ah8, bl0)) | 0;
      hi = Math.imul(ah8, bh0);
      lo = (lo + Math.imul(al7, bl1)) | 0;
      mid = (mid + Math.imul(al7, bh1)) | 0;
      mid = (mid + Math.imul(ah7, bl1)) | 0;
      hi = (hi + Math.imul(ah7, bh1)) | 0;
      lo = (lo + Math.imul(al6, bl2)) | 0;
      mid = (mid + Math.imul(al6, bh2)) | 0;
      mid = (mid + Math.imul(ah6, bl2)) | 0;
      hi = (hi + Math.imul(ah6, bh2)) | 0;
      lo = (lo + Math.imul(al5, bl3)) | 0;
      mid = (mid + Math.imul(al5, bh3)) | 0;
      mid = (mid + Math.imul(ah5, bl3)) | 0;
      hi = (hi + Math.imul(ah5, bh3)) | 0;
      lo = (lo + Math.imul(al4, bl4)) | 0;
      mid = (mid + Math.imul(al4, bh4)) | 0;
      mid = (mid + Math.imul(ah4, bl4)) | 0;
      hi = (hi + Math.imul(ah4, bh4)) | 0;
      lo = (lo + Math.imul(al3, bl5)) | 0;
      mid = (mid + Math.imul(al3, bh5)) | 0;
      mid = (mid + Math.imul(ah3, bl5)) | 0;
      hi = (hi + Math.imul(ah3, bh5)) | 0;
      lo = (lo + Math.imul(al2, bl6)) | 0;
      mid = (mid + Math.imul(al2, bh6)) | 0;
      mid = (mid + Math.imul(ah2, bl6)) | 0;
      hi = (hi + Math.imul(ah2, bh6)) | 0;
      lo = (lo + Math.imul(al1, bl7)) | 0;
      mid = (mid + Math.imul(al1, bh7)) | 0;
      mid = (mid + Math.imul(ah1, bl7)) | 0;
      hi = (hi + Math.imul(ah1, bh7)) | 0;
      lo = (lo + Math.imul(al0, bl8)) | 0;
      mid = (mid + Math.imul(al0, bh8)) | 0;
      mid = (mid + Math.imul(ah0, bl8)) | 0;
      hi = (hi + Math.imul(ah0, bh8)) | 0;
      var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
      w8 &= 0x3ffffff;
      /* k = 9 */
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = (mid + Math.imul(ah9, bl0)) | 0;
      hi = Math.imul(ah9, bh0);
      lo = (lo + Math.imul(al8, bl1)) | 0;
      mid = (mid + Math.imul(al8, bh1)) | 0;
      mid = (mid + Math.imul(ah8, bl1)) | 0;
      hi = (hi + Math.imul(ah8, bh1)) | 0;
      lo = (lo + Math.imul(al7, bl2)) | 0;
      mid = (mid + Math.imul(al7, bh2)) | 0;
      mid = (mid + Math.imul(ah7, bl2)) | 0;
      hi = (hi + Math.imul(ah7, bh2)) | 0;
      lo = (lo + Math.imul(al6, bl3)) | 0;
      mid = (mid + Math.imul(al6, bh3)) | 0;
      mid = (mid + Math.imul(ah6, bl3)) | 0;
      hi = (hi + Math.imul(ah6, bh3)) | 0;
      lo = (lo + Math.imul(al5, bl4)) | 0;
      mid = (mid + Math.imul(al5, bh4)) | 0;
      mid = (mid + Math.imul(ah5, bl4)) | 0;
      hi = (hi + Math.imul(ah5, bh4)) | 0;
      lo = (lo + Math.imul(al4, bl5)) | 0;
      mid = (mid + Math.imul(al4, bh5)) | 0;
      mid = (mid + Math.imul(ah4, bl5)) | 0;
      hi = (hi + Math.imul(ah4, bh5)) | 0;
      lo = (lo + Math.imul(al3, bl6)) | 0;
      mid = (mid + Math.imul(al3, bh6)) | 0;
      mid = (mid + Math.imul(ah3, bl6)) | 0;
      hi = (hi + Math.imul(ah3, bh6)) | 0;
      lo = (lo + Math.imul(al2, bl7)) | 0;
      mid = (mid + Math.imul(al2, bh7)) | 0;
      mid = (mid + Math.imul(ah2, bl7)) | 0;
      hi = (hi + Math.imul(ah2, bh7)) | 0;
      lo = (lo + Math.imul(al1, bl8)) | 0;
      mid = (mid + Math.imul(al1, bh8)) | 0;
      mid = (mid + Math.imul(ah1, bl8)) | 0;
      hi = (hi + Math.imul(ah1, bh8)) | 0;
      lo = (lo + Math.imul(al0, bl9)) | 0;
      mid = (mid + Math.imul(al0, bh9)) | 0;
      mid = (mid + Math.imul(ah0, bl9)) | 0;
      hi = (hi + Math.imul(ah0, bh9)) | 0;
      var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
      w9 &= 0x3ffffff;
      /* k = 10 */
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = (mid + Math.imul(ah9, bl1)) | 0;
      hi = Math.imul(ah9, bh1);
      lo = (lo + Math.imul(al8, bl2)) | 0;
      mid = (mid + Math.imul(al8, bh2)) | 0;
      mid = (mid + Math.imul(ah8, bl2)) | 0;
      hi = (hi + Math.imul(ah8, bh2)) | 0;
      lo = (lo + Math.imul(al7, bl3)) | 0;
      mid = (mid + Math.imul(al7, bh3)) | 0;
      mid = (mid + Math.imul(ah7, bl3)) | 0;
      hi = (hi + Math.imul(ah7, bh3)) | 0;
      lo = (lo + Math.imul(al6, bl4)) | 0;
      mid = (mid + Math.imul(al6, bh4)) | 0;
      mid = (mid + Math.imul(ah6, bl4)) | 0;
      hi = (hi + Math.imul(ah6, bh4)) | 0;
      lo = (lo + Math.imul(al5, bl5)) | 0;
      mid = (mid + Math.imul(al5, bh5)) | 0;
      mid = (mid + Math.imul(ah5, bl5)) | 0;
      hi = (hi + Math.imul(ah5, bh5)) | 0;
      lo = (lo + Math.imul(al4, bl6)) | 0;
      mid = (mid + Math.imul(al4, bh6)) | 0;
      mid = (mid + Math.imul(ah4, bl6)) | 0;
      hi = (hi + Math.imul(ah4, bh6)) | 0;
      lo = (lo + Math.imul(al3, bl7)) | 0;
      mid = (mid + Math.imul(al3, bh7)) | 0;
      mid = (mid + Math.imul(ah3, bl7)) | 0;
      hi = (hi + Math.imul(ah3, bh7)) | 0;
      lo = (lo + Math.imul(al2, bl8)) | 0;
      mid = (mid + Math.imul(al2, bh8)) | 0;
      mid = (mid + Math.imul(ah2, bl8)) | 0;
      hi = (hi + Math.imul(ah2, bh8)) | 0;
      lo = (lo + Math.imul(al1, bl9)) | 0;
      mid = (mid + Math.imul(al1, bh9)) | 0;
      mid = (mid + Math.imul(ah1, bl9)) | 0;
      hi = (hi + Math.imul(ah1, bh9)) | 0;
      var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
      w10 &= 0x3ffffff;
      /* k = 11 */
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = (mid + Math.imul(ah9, bl2)) | 0;
      hi = Math.imul(ah9, bh2);
      lo = (lo + Math.imul(al8, bl3)) | 0;
      mid = (mid + Math.imul(al8, bh3)) | 0;
      mid = (mid + Math.imul(ah8, bl3)) | 0;
      hi = (hi + Math.imul(ah8, bh3)) | 0;
      lo = (lo + Math.imul(al7, bl4)) | 0;
      mid = (mid + Math.imul(al7, bh4)) | 0;
      mid = (mid + Math.imul(ah7, bl4)) | 0;
      hi = (hi + Math.imul(ah7, bh4)) | 0;
      lo = (lo + Math.imul(al6, bl5)) | 0;
      mid = (mid + Math.imul(al6, bh5)) | 0;
      mid = (mid + Math.imul(ah6, bl5)) | 0;
      hi = (hi + Math.imul(ah6, bh5)) | 0;
      lo = (lo + Math.imul(al5, bl6)) | 0;
      mid = (mid + Math.imul(al5, bh6)) | 0;
      mid = (mid + Math.imul(ah5, bl6)) | 0;
      hi = (hi + Math.imul(ah5, bh6)) | 0;
      lo = (lo + Math.imul(al4, bl7)) | 0;
      mid = (mid + Math.imul(al4, bh7)) | 0;
      mid = (mid + Math.imul(ah4, bl7)) | 0;
      hi = (hi + Math.imul(ah4, bh7)) | 0;
      lo = (lo + Math.imul(al3, bl8)) | 0;
      mid = (mid + Math.imul(al3, bh8)) | 0;
      mid = (mid + Math.imul(ah3, bl8)) | 0;
      hi = (hi + Math.imul(ah3, bh8)) | 0;
      lo = (lo + Math.imul(al2, bl9)) | 0;
      mid = (mid + Math.imul(al2, bh9)) | 0;
      mid = (mid + Math.imul(ah2, bl9)) | 0;
      hi = (hi + Math.imul(ah2, bh9)) | 0;
      var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
      w11 &= 0x3ffffff;
      /* k = 12 */
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = (mid + Math.imul(ah9, bl3)) | 0;
      hi = Math.imul(ah9, bh3);
      lo = (lo + Math.imul(al8, bl4)) | 0;
      mid = (mid + Math.imul(al8, bh4)) | 0;
      mid = (mid + Math.imul(ah8, bl4)) | 0;
      hi = (hi + Math.imul(ah8, bh4)) | 0;
      lo = (lo + Math.imul(al7, bl5)) | 0;
      mid = (mid + Math.imul(al7, bh5)) | 0;
      mid = (mid + Math.imul(ah7, bl5)) | 0;
      hi = (hi + Math.imul(ah7, bh5)) | 0;
      lo = (lo + Math.imul(al6, bl6)) | 0;
      mid = (mid + Math.imul(al6, bh6)) | 0;
      mid = (mid + Math.imul(ah6, bl6)) | 0;
      hi = (hi + Math.imul(ah6, bh6)) | 0;
      lo = (lo + Math.imul(al5, bl7)) | 0;
      mid = (mid + Math.imul(al5, bh7)) | 0;
      mid = (mid + Math.imul(ah5, bl7)) | 0;
      hi = (hi + Math.imul(ah5, bh7)) | 0;
      lo = (lo + Math.imul(al4, bl8)) | 0;
      mid = (mid + Math.imul(al4, bh8)) | 0;
      mid = (mid + Math.imul(ah4, bl8)) | 0;
      hi = (hi + Math.imul(ah4, bh8)) | 0;
      lo = (lo + Math.imul(al3, bl9)) | 0;
      mid = (mid + Math.imul(al3, bh9)) | 0;
      mid = (mid + Math.imul(ah3, bl9)) | 0;
      hi = (hi + Math.imul(ah3, bh9)) | 0;
      var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
      w12 &= 0x3ffffff;
      /* k = 13 */
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = (mid + Math.imul(ah9, bl4)) | 0;
      hi = Math.imul(ah9, bh4);
      lo = (lo + Math.imul(al8, bl5)) | 0;
      mid = (mid + Math.imul(al8, bh5)) | 0;
      mid = (mid + Math.imul(ah8, bl5)) | 0;
      hi = (hi + Math.imul(ah8, bh5)) | 0;
      lo = (lo + Math.imul(al7, bl6)) | 0;
      mid = (mid + Math.imul(al7, bh6)) | 0;
      mid = (mid + Math.imul(ah7, bl6)) | 0;
      hi = (hi + Math.imul(ah7, bh6)) | 0;
      lo = (lo + Math.imul(al6, bl7)) | 0;
      mid = (mid + Math.imul(al6, bh7)) | 0;
      mid = (mid + Math.imul(ah6, bl7)) | 0;
      hi = (hi + Math.imul(ah6, bh7)) | 0;
      lo = (lo + Math.imul(al5, bl8)) | 0;
      mid = (mid + Math.imul(al5, bh8)) | 0;
      mid = (mid + Math.imul(ah5, bl8)) | 0;
      hi = (hi + Math.imul(ah5, bh8)) | 0;
      lo = (lo + Math.imul(al4, bl9)) | 0;
      mid = (mid + Math.imul(al4, bh9)) | 0;
      mid = (mid + Math.imul(ah4, bl9)) | 0;
      hi = (hi + Math.imul(ah4, bh9)) | 0;
      var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
      w13 &= 0x3ffffff;
      /* k = 14 */
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = (mid + Math.imul(ah9, bl5)) | 0;
      hi = Math.imul(ah9, bh5);
      lo = (lo + Math.imul(al8, bl6)) | 0;
      mid = (mid + Math.imul(al8, bh6)) | 0;
      mid = (mid + Math.imul(ah8, bl6)) | 0;
      hi = (hi + Math.imul(ah8, bh6)) | 0;
      lo = (lo + Math.imul(al7, bl7)) | 0;
      mid = (mid + Math.imul(al7, bh7)) | 0;
      mid = (mid + Math.imul(ah7, bl7)) | 0;
      hi = (hi + Math.imul(ah7, bh7)) | 0;
      lo = (lo + Math.imul(al6, bl8)) | 0;
      mid = (mid + Math.imul(al6, bh8)) | 0;
      mid = (mid + Math.imul(ah6, bl8)) | 0;
      hi = (hi + Math.imul(ah6, bh8)) | 0;
      lo = (lo + Math.imul(al5, bl9)) | 0;
      mid = (mid + Math.imul(al5, bh9)) | 0;
      mid = (mid + Math.imul(ah5, bl9)) | 0;
      hi = (hi + Math.imul(ah5, bh9)) | 0;
      var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
      w14 &= 0x3ffffff;
      /* k = 15 */
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = (mid + Math.imul(ah9, bl6)) | 0;
      hi = Math.imul(ah9, bh6);
      lo = (lo + Math.imul(al8, bl7)) | 0;
      mid = (mid + Math.imul(al8, bh7)) | 0;
      mid = (mid + Math.imul(ah8, bl7)) | 0;
      hi = (hi + Math.imul(ah8, bh7)) | 0;
      lo = (lo + Math.imul(al7, bl8)) | 0;
      mid = (mid + Math.imul(al7, bh8)) | 0;
      mid = (mid + Math.imul(ah7, bl8)) | 0;
      hi = (hi + Math.imul(ah7, bh8)) | 0;
      lo = (lo + Math.imul(al6, bl9)) | 0;
      mid = (mid + Math.imul(al6, bh9)) | 0;
      mid = (mid + Math.imul(ah6, bl9)) | 0;
      hi = (hi + Math.imul(ah6, bh9)) | 0;
      var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
      w15 &= 0x3ffffff;
      /* k = 16 */
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = (mid + Math.imul(ah9, bl7)) | 0;
      hi = Math.imul(ah9, bh7);
      lo = (lo + Math.imul(al8, bl8)) | 0;
      mid = (mid + Math.imul(al8, bh8)) | 0;
      mid = (mid + Math.imul(ah8, bl8)) | 0;
      hi = (hi + Math.imul(ah8, bh8)) | 0;
      lo = (lo + Math.imul(al7, bl9)) | 0;
      mid = (mid + Math.imul(al7, bh9)) | 0;
      mid = (mid + Math.imul(ah7, bl9)) | 0;
      hi = (hi + Math.imul(ah7, bh9)) | 0;
      var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
      w16 &= 0x3ffffff;
      /* k = 17 */
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = (mid + Math.imul(ah9, bl8)) | 0;
      hi = Math.imul(ah9, bh8);
      lo = (lo + Math.imul(al8, bl9)) | 0;
      mid = (mid + Math.imul(al8, bh9)) | 0;
      mid = (mid + Math.imul(ah8, bl9)) | 0;
      hi = (hi + Math.imul(ah8, bh9)) | 0;
      var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
      w17 &= 0x3ffffff;
      /* k = 18 */
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = (mid + Math.imul(ah9, bl9)) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
      w18 &= 0x3ffffff;
      o[0] = w0;
      o[1] = w1;
      o[2] = w2;
      o[3] = w3;
      o[4] = w4;
      o[5] = w5;
      o[6] = w6;
      o[7] = w7;
      o[8] = w8;
      o[9] = w9;
      o[10] = w10;
      o[11] = w11;
      o[12] = w12;
      o[13] = w13;
      o[14] = w14;
      o[15] = w15;
      o[16] = w16;
      o[17] = w17;
      o[18] = w18;
      if (c !== 0) {
        o[19] = c;
        out.length++;
      }
      return out;
    };

    // Polyfill comb
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }

    function bigMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      out.length = self.length + num.length;

      var carry = 0;
      var hncarry = 0;
      for (var k = 0; k < out.length - 1; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = k - j;
          var a = self.words[i] | 0;
          var b = num.words[j] | 0;
          var r = a * b;

          var lo = r & 0x3ffffff;
          ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
          lo = (lo + rword) | 0;
          rword = lo & 0x3ffffff;
          ncarry = (ncarry + (lo >>> 26)) | 0;

          hncarry += ncarry >>> 26;
          ncarry &= 0x3ffffff;
        }
        out.words[k] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k] = carry;
      } else {
        out.length--;
      }

      return out.strip();
    }

    function jumboMulTo (self, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self, num, out);
    }

    BN.prototype.mulTo = function mulTo (num, out) {
      var res;
      var len = this.length + num.length;
      if (this.length === 10 && num.length === 10) {
        res = comb10MulTo(this, num, out);
      } else if (len < 63) {
        res = smallMulTo(this, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this, num, out);
      } else {
        res = jumboMulTo(this, num, out);
      }

      return res;
    };

    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion

    function FFTM (x, y) {
      this.x = x;
      this.y = y;
    }

    FFTM.prototype.makeRBT = function makeRBT (N) {
      var t = new Array(N);
      var l = BN.prototype._countBits(N) - 1;
      for (var i = 0; i < N; i++) {
        t[i] = this.revBin(i, l, N);
      }

      return t;
    };

    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin (x, l, N) {
      if (x === 0 || x === N - 1) return x;

      var rb = 0;
      for (var i = 0; i < l; i++) {
        rb |= (x & 1) << (l - i - 1);
        x >>= 1;
      }

      return rb;
    };

    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
      for (var i = 0; i < N; i++) {
        rtws[i] = rws[rbt[i]];
        itws[i] = iws[rbt[i]];
      }
    };

    FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N);

      for (var s = 1; s < N; s <<= 1) {
        var l = s << 1;

        var rtwdf = Math.cos(2 * Math.PI / l);
        var itwdf = Math.sin(2 * Math.PI / l);

        for (var p = 0; p < N; p += l) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;

          for (var j = 0; j < s; j++) {
            var re = rtws[p + j];
            var ie = itws[p + j];

            var ro = rtws[p + j + s];
            var io = itws[p + j + s];

            var rx = rtwdf_ * ro - itwdf_ * io;

            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;

            rtws[p + j] = re + ro;
            itws[p + j] = ie + io;

            rtws[p + j + s] = re - ro;
            itws[p + j + s] = ie - io;

            /* jshint maxdepth : false */
            if (j !== l) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;

              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };

    FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
      var N = Math.max(m, n) | 1;
      var odd = N & 1;
      var i = 0;
      for (N = N / 2 | 0; N; N = N >>> 1) {
        i++;
      }

      return 1 << i + 1 + odd;
    };

    FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
      if (N <= 1) return;

      for (var i = 0; i < N / 2; i++) {
        var t = rws[i];

        rws[i] = rws[N - i - 1];
        rws[N - i - 1] = t;

        t = iws[i];

        iws[i] = -iws[N - i - 1];
        iws[N - i - 1] = -t;
      }
    };

    FFTM.prototype.normalize13b = function normalize13b (ws, N) {
      var carry = 0;
      for (var i = 0; i < N / 2; i++) {
        var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
          Math.round(ws[2 * i] / N) +
          carry;

        ws[i] = w & 0x3ffffff;

        if (w < 0x4000000) {
          carry = 0;
        } else {
          carry = w / 0x4000000 | 0;
        }
      }

      return ws;
    };

    FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
      var carry = 0;
      for (var i = 0; i < len; i++) {
        carry = carry + (ws[i] | 0);

        rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
        rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
      }

      // Pad with zeroes
      for (i = 2 * len; i < N; ++i) {
        rws[i] = 0;
      }

      assert(carry === 0);
      assert((carry & ~0x1fff) === 0);
    };

    FFTM.prototype.stub = function stub (N) {
      var ph = new Array(N);
      for (var i = 0; i < N; i++) {
        ph[i] = 0;
      }

      return ph;
    };

    FFTM.prototype.mulp = function mulp (x, y, out) {
      var N = 2 * this.guessLen13b(x.length, y.length);

      var rbt = this.makeRBT(N);

      var _ = this.stub(N);

      var rws = new Array(N);
      var rwst = new Array(N);
      var iwst = new Array(N);

      var nrws = new Array(N);
      var nrwst = new Array(N);
      var niwst = new Array(N);

      var rmws = out.words;
      rmws.length = N;

      this.convert13b(x.words, x.length, rws, N);
      this.convert13b(y.words, y.length, nrws, N);

      this.transform(rws, _, rwst, iwst, N, rbt);
      this.transform(nrws, _, nrwst, niwst, N, rbt);

      for (var i = 0; i < N; i++) {
        var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
        iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
        rwst[i] = rx;
      }

      this.conjugate(rwst, iwst, N);
      this.transform(rwst, iwst, rmws, _, N, rbt);
      this.conjugate(rmws, _, N);
      this.normalize13b(rmws, N);

      out.negative = x.negative ^ y.negative;
      out.length = x.length + y.length;
      return out.strip();
    };

    // Multiply `this` by `num`
    BN.prototype.mul = function mul (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return this.mulTo(num, out);
    };

    // Multiply employing FFT
    BN.prototype.mulf = function mulf (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return jumboMulTo(this, num, out);
    };

    // In-place Multiplication
    BN.prototype.imul = function imul (num) {
      return this.clone().mulTo(num, this);
    };

    BN.prototype.imuln = function imuln (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);

      // Carry
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = (this.words[i] | 0) * num;
        var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
        carry >>= 26;
        carry += (w / 0x4000000) | 0;
        // NOTE: lo is 27bit maximum
        carry += lo >>> 26;
        this.words[i] = lo & 0x3ffffff;
      }

      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }

      return this;
    };

    BN.prototype.muln = function muln (num) {
      return this.clone().imuln(num);
    };

    // `this` * `this`
    BN.prototype.sqr = function sqr () {
      return this.mul(this);
    };

    // `this` * `this` in-place
    BN.prototype.isqr = function isqr () {
      return this.imul(this.clone());
    };

    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow (num) {
      var w = toBitArray(num);
      if (w.length === 0) return new BN(1);

      // Skip leading zeroes
      var res = this;
      for (var i = 0; i < w.length; i++, res = res.sqr()) {
        if (w[i] !== 0) break;
      }

      if (++i < w.length) {
        for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
          if (w[i] === 0) continue;

          res = res.mul(q);
        }
      }

      return res;
    };

    // Shift-left in-place
    BN.prototype.iushln = function iushln (bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
      var i;

      if (r !== 0) {
        var carry = 0;

        for (i = 0; i < this.length; i++) {
          var newCarry = this.words[i] & carryMask;
          var c = ((this.words[i] | 0) - newCarry) << r;
          this.words[i] = c | carry;
          carry = newCarry >>> (26 - r);
        }

        if (carry) {
          this.words[i] = carry;
          this.length++;
        }
      }

      if (s !== 0) {
        for (i = this.length - 1; i >= 0; i--) {
          this.words[i + s] = this.words[i];
        }

        for (i = 0; i < s; i++) {
          this.words[i] = 0;
        }

        this.length += s;
      }

      return this.strip();
    };

    BN.prototype.ishln = function ishln (bits) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushln(bits);
    };

    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn (bits, hint, extended) {
      assert(typeof bits === 'number' && bits >= 0);
      var h;
      if (hint) {
        h = (hint - (hint % 26)) / 26;
      } else {
        h = 0;
      }

      var r = bits % 26;
      var s = Math.min((bits - r) / 26, this.length);
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      var maskedWords = extended;

      h -= s;
      h = Math.max(0, h);

      // Extended mode, copy masked part
      if (maskedWords) {
        for (var i = 0; i < s; i++) {
          maskedWords.words[i] = this.words[i];
        }
        maskedWords.length = s;
      }

      if (s === 0) ; else if (this.length > s) {
        this.length -= s;
        for (i = 0; i < this.length; i++) {
          this.words[i] = this.words[i + s];
        }
      } else {
        this.words[0] = 0;
        this.length = 1;
      }

      var carry = 0;
      for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
        var word = this.words[i] | 0;
        this.words[i] = (carry << (26 - r)) | (word >>> r);
        carry = word & mask;
      }

      // Push carried bits as a mask
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }

      if (this.length === 0) {
        this.words[0] = 0;
        this.length = 1;
      }

      return this.strip();
    };

    BN.prototype.ishrn = function ishrn (bits, hint, extended) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushrn(bits, hint, extended);
    };

    // Shift-left
    BN.prototype.shln = function shln (bits) {
      return this.clone().ishln(bits);
    };

    BN.prototype.ushln = function ushln (bits) {
      return this.clone().iushln(bits);
    };

    // Shift-right
    BN.prototype.shrn = function shrn (bits) {
      return this.clone().ishrn(bits);
    };

    BN.prototype.ushrn = function ushrn (bits) {
      return this.clone().iushrn(bits);
    };

    // Test if n bit is set
    BN.prototype.testn = function testn (bit) {
      assert(typeof bit === 'number' && bit >= 0);
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) return false;

      // Check bit and return
      var w = this.words[s];

      return !!(w & q);
    };

    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn (bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;

      assert(this.negative === 0, 'imaskn works only with positive numbers');

      if (this.length <= s) {
        return this;
      }

      if (r !== 0) {
        s++;
      }
      this.length = Math.min(s, this.length);

      if (r !== 0) {
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        this.words[this.length - 1] &= mask;
      }

      return this.strip();
    };

    // Return only lowers bits of number
    BN.prototype.maskn = function maskn (bits) {
      return this.clone().imaskn(bits);
    };

    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.isubn(-num);

      // Possible sign change
      if (this.negative !== 0) {
        if (this.length === 1 && (this.words[0] | 0) < num) {
          this.words[0] = num - (this.words[0] | 0);
          this.negative = 0;
          return this;
        }

        this.negative = 0;
        this.isubn(num);
        this.negative = 1;
        return this;
      }

      // Add without checks
      return this._iaddn(num);
    };

    BN.prototype._iaddn = function _iaddn (num) {
      this.words[0] += num;

      // Carry
      for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
        this.words[i] -= 0x4000000;
        if (i === this.length - 1) {
          this.words[i + 1] = 1;
        } else {
          this.words[i + 1]++;
        }
      }
      this.length = Math.max(this.length, i + 1);

      return this;
    };

    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.iaddn(-num);

      if (this.negative !== 0) {
        this.negative = 0;
        this.iaddn(num);
        this.negative = 1;
        return this;
      }

      this.words[0] -= num;

      if (this.length === 1 && this.words[0] < 0) {
        this.words[0] = -this.words[0];
        this.negative = 1;
      } else {
        // Carry
        for (var i = 0; i < this.length && this.words[i] < 0; i++) {
          this.words[i] += 0x4000000;
          this.words[i + 1] -= 1;
        }
      }

      return this.strip();
    };

    BN.prototype.addn = function addn (num) {
      return this.clone().iaddn(num);
    };

    BN.prototype.subn = function subn (num) {
      return this.clone().isubn(num);
    };

    BN.prototype.iabs = function iabs () {
      this.negative = 0;

      return this;
    };

    BN.prototype.abs = function abs () {
      return this.clone().iabs();
    };

    BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
      var len = num.length + shift;
      var i;

      this._expand(len);

      var w;
      var carry = 0;
      for (i = 0; i < num.length; i++) {
        w = (this.words[i + shift] | 0) + carry;
        var right = (num.words[i] | 0) * mul;
        w -= right & 0x3ffffff;
        carry = (w >> 26) - ((right / 0x4000000) | 0);
        this.words[i + shift] = w & 0x3ffffff;
      }
      for (; i < this.length - shift; i++) {
        w = (this.words[i + shift] | 0) + carry;
        carry = w >> 26;
        this.words[i + shift] = w & 0x3ffffff;
      }

      if (carry === 0) return this.strip();

      // Subtraction overflow
      assert(carry === -1);
      carry = 0;
      for (i = 0; i < this.length; i++) {
        w = -(this.words[i] | 0) + carry;
        carry = w >> 26;
        this.words[i] = w & 0x3ffffff;
      }
      this.negative = 1;

      return this.strip();
    };

    BN.prototype._wordDiv = function _wordDiv (num, mode) {
      var shift = this.length - num.length;

      var a = this.clone();
      var b = num;

      // Normalize
      var bhi = b.words[b.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b = b.ushln(shift);
        a.iushln(shift);
        bhi = b.words[b.length - 1] | 0;
      }

      // Initialize quotient
      var m = a.length - b.length;
      var q;

      if (mode !== 'mod') {
        q = new BN(null);
        q.length = m + 1;
        q.words = new Array(q.length);
        for (var i = 0; i < q.length; i++) {
          q.words[i] = 0;
        }
      }

      var diff = a.clone()._ishlnsubmul(b, 1, m);
      if (diff.negative === 0) {
        a = diff;
        if (q) {
          q.words[m] = 1;
        }
      }

      for (var j = m - 1; j >= 0; j--) {
        var qj = (a.words[b.length + j] | 0) * 0x4000000 +
          (a.words[b.length + j - 1] | 0);

        // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
        // (0x7ffffff)
        qj = Math.min((qj / bhi) | 0, 0x3ffffff);

        a._ishlnsubmul(b, qj, j);
        while (a.negative !== 0) {
          qj--;
          a.negative = 0;
          a._ishlnsubmul(b, 1, j);
          if (!a.isZero()) {
            a.negative ^= 1;
          }
        }
        if (q) {
          q.words[j] = qj;
        }
      }
      if (q) {
        q.strip();
      }
      a.strip();

      // Denormalize
      if (mode !== 'div' && shift !== 0) {
        a.iushrn(shift);
      }

      return {
        div: q || null,
        mod: a
      };
    };

    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod (num, mode, positive) {
      assert(!num.isZero());

      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }

      var div, mod, res;
      if (this.negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }

        return {
          div: div,
          mod: mod
        };
      }

      if (this.negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        return {
          div: div,
          mod: res.mod
        };
      }

      if ((this.negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }

        return {
          div: res.div,
          mod: mod
        };
      }

      // Both numbers are positive at this point

      // Strip both numbers to approximate shift value
      if (num.length > this.length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this
        };
      }

      // Very short reduction
      if (num.length === 1) {
        if (mode === 'div') {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }

        if (mode === 'mod') {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }

        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return this._wordDiv(num, mode);
    };

    // Find `this` / `num`
    BN.prototype.div = function div (num) {
      return this.divmod(num, 'div', false).div;
    };

    // Find `this` % `num`
    BN.prototype.mod = function mod (num) {
      return this.divmod(num, 'mod', false).mod;
    };

    BN.prototype.umod = function umod (num) {
      return this.divmod(num, 'mod', true).mod;
    };

    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound (num) {
      var dm = this.divmod(num);

      // Fast case - exact division
      if (dm.mod.isZero()) return dm.div;

      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

      var half = num.ushrn(1);
      var r2 = num.andln(1);
      var cmp = mod.cmp(half);

      // Round down
      if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

      // Round up
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };

    BN.prototype.modn = function modn (num) {
      assert(num <= 0x3ffffff);
      var p = (1 << 26) % num;

      var acc = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        acc = (p * acc + (this.words[i] | 0)) % num;
      }

      return acc;
    };

    // In-place division by number
    BN.prototype.idivn = function idivn (num) {
      assert(num <= 0x3ffffff);

      var carry = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var w = (this.words[i] | 0) + carry * 0x4000000;
        this.words[i] = (w / num) | 0;
        carry = w % num;
      }

      return this.strip();
    };

    BN.prototype.divn = function divn (num) {
      return this.clone().idivn(num);
    };

    BN.prototype.egcd = function egcd (p) {
      assert(p.negative === 0);
      assert(!p.isZero());

      var x = this;
      var y = p.clone();

      if (x.negative !== 0) {
        x = x.umod(p);
      } else {
        x = x.clone();
      }

      // A * x + B * y = x
      var A = new BN(1);
      var B = new BN(0);

      // C * x + D * y = y
      var C = new BN(0);
      var D = new BN(1);

      var g = 0;

      while (x.isEven() && y.isEven()) {
        x.iushrn(1);
        y.iushrn(1);
        ++g;
      }

      var yp = y.clone();
      var xp = x.clone();

      while (!x.isZero()) {
        for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          x.iushrn(i);
          while (i-- > 0) {
            if (A.isOdd() || B.isOdd()) {
              A.iadd(yp);
              B.isub(xp);
            }

            A.iushrn(1);
            B.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          y.iushrn(j);
          while (j-- > 0) {
            if (C.isOdd() || D.isOdd()) {
              C.iadd(yp);
              D.isub(xp);
            }

            C.iushrn(1);
            D.iushrn(1);
          }
        }

        if (x.cmp(y) >= 0) {
          x.isub(y);
          A.isub(C);
          B.isub(D);
        } else {
          y.isub(x);
          C.isub(A);
          D.isub(B);
        }
      }

      return {
        a: C,
        b: D,
        gcd: y.iushln(g)
      };
    };

    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp (p) {
      assert(p.negative === 0);
      assert(!p.isZero());

      var a = this;
      var b = p.clone();

      if (a.negative !== 0) {
        a = a.umod(p);
      } else {
        a = a.clone();
      }

      var x1 = new BN(1);
      var x2 = new BN(0);

      var delta = b.clone();

      while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
        for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          a.iushrn(i);
          while (i-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }

            x1.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          b.iushrn(j);
          while (j-- > 0) {
            if (x2.isOdd()) {
              x2.iadd(delta);
            }

            x2.iushrn(1);
          }
        }

        if (a.cmp(b) >= 0) {
          a.isub(b);
          x1.isub(x2);
        } else {
          b.isub(a);
          x2.isub(x1);
        }
      }

      var res;
      if (a.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x2;
      }

      if (res.cmpn(0) < 0) {
        res.iadd(p);
      }

      return res;
    };

    BN.prototype.gcd = function gcd (num) {
      if (this.isZero()) return num.abs();
      if (num.isZero()) return this.abs();

      var a = this.clone();
      var b = num.clone();
      a.negative = 0;
      b.negative = 0;

      // Remove common factor of two
      for (var shift = 0; a.isEven() && b.isEven(); shift++) {
        a.iushrn(1);
        b.iushrn(1);
      }

      do {
        while (a.isEven()) {
          a.iushrn(1);
        }
        while (b.isEven()) {
          b.iushrn(1);
        }

        var r = a.cmp(b);
        if (r < 0) {
          // Swap `a` and `b` to make `a` always bigger than `b`
          var t = a;
          a = b;
          b = t;
        } else if (r === 0 || b.cmpn(1) === 0) {
          break;
        }

        a.isub(b);
      } while (true);

      return b.iushln(shift);
    };

    // Invert number in the field F(num)
    BN.prototype.invm = function invm (num) {
      return this.egcd(num).a.umod(num);
    };

    BN.prototype.isEven = function isEven () {
      return (this.words[0] & 1) === 0;
    };

    BN.prototype.isOdd = function isOdd () {
      return (this.words[0] & 1) === 1;
    };

    // And first word and num
    BN.prototype.andln = function andln (num) {
      return this.words[0] & num;
    };

    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn (bit) {
      assert(typeof bit === 'number');
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) {
        this._expand(s + 1);
        this.words[s] |= q;
        return this;
      }

      // Add bit and propagate, if needed
      var carry = q;
      for (var i = s; carry !== 0 && i < this.length; i++) {
        var w = this.words[i] | 0;
        w += carry;
        carry = w >>> 26;
        w &= 0x3ffffff;
        this.words[i] = w;
      }
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
      return this;
    };

    BN.prototype.isZero = function isZero () {
      return this.length === 1 && this.words[0] === 0;
    };

    BN.prototype.cmpn = function cmpn (num) {
      var negative = num < 0;

      if (this.negative !== 0 && !negative) return -1;
      if (this.negative === 0 && negative) return 1;

      this.strip();

      var res;
      if (this.length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }

        assert(num <= 0x3ffffff, 'Number is too big');

        var w = this.words[0] | 0;
        res = w === num ? 0 : w < num ? -1 : 1;
      }
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp (num) {
      if (this.negative !== 0 && num.negative === 0) return -1;
      if (this.negative === 0 && num.negative !== 0) return 1;

      var res = this.ucmp(num);
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Unsigned comparison
    BN.prototype.ucmp = function ucmp (num) {
      // At this point both numbers have the same sign
      if (this.length > num.length) return 1;
      if (this.length < num.length) return -1;

      var res = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var a = this.words[i] | 0;
        var b = num.words[i] | 0;

        if (a === b) continue;
        if (a < b) {
          res = -1;
        } else if (a > b) {
          res = 1;
        }
        break;
      }
      return res;
    };

    BN.prototype.gtn = function gtn (num) {
      return this.cmpn(num) === 1;
    };

    BN.prototype.gt = function gt (num) {
      return this.cmp(num) === 1;
    };

    BN.prototype.gten = function gten (num) {
      return this.cmpn(num) >= 0;
    };

    BN.prototype.gte = function gte (num) {
      return this.cmp(num) >= 0;
    };

    BN.prototype.ltn = function ltn (num) {
      return this.cmpn(num) === -1;
    };

    BN.prototype.lt = function lt (num) {
      return this.cmp(num) === -1;
    };

    BN.prototype.lten = function lten (num) {
      return this.cmpn(num) <= 0;
    };

    BN.prototype.lte = function lte (num) {
      return this.cmp(num) <= 0;
    };

    BN.prototype.eqn = function eqn (num) {
      return this.cmpn(num) === 0;
    };

    BN.prototype.eq = function eq (num) {
      return this.cmp(num) === 0;
    };

    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red (num) {
      return new Red(num);
    };

    BN.prototype.toRed = function toRed (ctx) {
      assert(!this.red, 'Already a number in reduction context');
      assert(this.negative === 0, 'red works only with positives');
      return ctx.convertTo(this)._forceRed(ctx);
    };

    BN.prototype.fromRed = function fromRed () {
      assert(this.red, 'fromRed works only with numbers in reduction context');
      return this.red.convertFrom(this);
    };

    BN.prototype._forceRed = function _forceRed (ctx) {
      this.red = ctx;
      return this;
    };

    BN.prototype.forceRed = function forceRed (ctx) {
      assert(!this.red, 'Already a number in reduction context');
      return this._forceRed(ctx);
    };

    BN.prototype.redAdd = function redAdd (num) {
      assert(this.red, 'redAdd works only with red numbers');
      return this.red.add(this, num);
    };

    BN.prototype.redIAdd = function redIAdd (num) {
      assert(this.red, 'redIAdd works only with red numbers');
      return this.red.iadd(this, num);
    };

    BN.prototype.redSub = function redSub (num) {
      assert(this.red, 'redSub works only with red numbers');
      return this.red.sub(this, num);
    };

    BN.prototype.redISub = function redISub (num) {
      assert(this.red, 'redISub works only with red numbers');
      return this.red.isub(this, num);
    };

    BN.prototype.redShl = function redShl (num) {
      assert(this.red, 'redShl works only with red numbers');
      return this.red.shl(this, num);
    };

    BN.prototype.redMul = function redMul (num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.mul(this, num);
    };

    BN.prototype.redIMul = function redIMul (num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.imul(this, num);
    };

    BN.prototype.redSqr = function redSqr () {
      assert(this.red, 'redSqr works only with red numbers');
      this.red._verify1(this);
      return this.red.sqr(this);
    };

    BN.prototype.redISqr = function redISqr () {
      assert(this.red, 'redISqr works only with red numbers');
      this.red._verify1(this);
      return this.red.isqr(this);
    };

    // Square root over p
    BN.prototype.redSqrt = function redSqrt () {
      assert(this.red, 'redSqrt works only with red numbers');
      this.red._verify1(this);
      return this.red.sqrt(this);
    };

    BN.prototype.redInvm = function redInvm () {
      assert(this.red, 'redInvm works only with red numbers');
      this.red._verify1(this);
      return this.red.invm(this);
    };

    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg () {
      assert(this.red, 'redNeg works only with red numbers');
      this.red._verify1(this);
      return this.red.neg(this);
    };

    BN.prototype.redPow = function redPow (num) {
      assert(this.red && !num.red, 'redPow(normalNum)');
      this.red._verify1(this);
      return this.red.pow(this, num);
    };

    // Prime numbers with efficient reduction
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };

    // Pseudo-Mersenne prime
    function MPrime (name, p) {
      // P = 2 ^ N - K
      this.name = name;
      this.p = new BN(p, 16);
      this.n = this.p.bitLength();
      this.k = new BN(1).iushln(this.n).isub(this.p);

      this.tmp = this._tmp();
    }

    MPrime.prototype._tmp = function _tmp () {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil(this.n / 13));
      return tmp;
    };

    MPrime.prototype.ireduce = function ireduce (num) {
      // Assumes that `num` is less than `P^2`
      // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
      var r = num;
      var rlen;

      do {
        this.split(r, this.tmp);
        r = this.imulK(r);
        r = r.iadd(this.tmp);
        rlen = r.bitLength();
      } while (rlen > this.n);

      var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
      if (cmp === 0) {
        r.words[0] = 0;
        r.length = 1;
      } else if (cmp > 0) {
        r.isub(this.p);
      } else {
        r.strip();
      }

      return r;
    };

    MPrime.prototype.split = function split (input, out) {
      input.iushrn(this.n, 0, out);
    };

    MPrime.prototype.imulK = function imulK (num) {
      return num.imul(this.k);
    };

    function K256 () {
      MPrime.call(
        this,
        'k256',
        'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);

    K256.prototype.split = function split (input, output) {
      // 256 = 9 * 26 + 22
      var mask = 0x3fffff;

      var outLen = Math.min(input.length, 9);
      for (var i = 0; i < outLen; i++) {
        output.words[i] = input.words[i];
      }
      output.length = outLen;

      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }

      // Shift by 9 limbs
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;

      for (i = 10; i < input.length; i++) {
        var next = input.words[i] | 0;
        input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
        prev = next;
      }
      prev >>>= 22;
      input.words[i - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };

    K256.prototype.imulK = function imulK (num) {
      // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;

      // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
      var lo = 0;
      for (var i = 0; i < num.length; i++) {
        var w = num.words[i] | 0;
        lo += w * 0x3d1;
        num.words[i] = lo & 0x3ffffff;
        lo = w * 0x40 + ((lo / 0x4000000) | 0);
      }

      // Fast length reduction
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };

    function P224 () {
      MPrime.call(
        this,
        'p224',
        'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);

    function P192 () {
      MPrime.call(
        this,
        'p192',
        'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);

    function P25519 () {
      // 2 ^ 255 - 19
      MPrime.call(
        this,
        '25519',
        '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);

    P25519.prototype.imulK = function imulK (num) {
      // K = 0x13
      var carry = 0;
      for (var i = 0; i < num.length; i++) {
        var hi = (num.words[i] | 0) * 0x13 + carry;
        var lo = hi & 0x3ffffff;
        hi >>>= 26;

        num.words[i] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };

    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime (name) {
      // Cached version of prime
      if (primes[name]) return primes[name];

      var prime;
      if (name === 'k256') {
        prime = new K256();
      } else if (name === 'p224') {
        prime = new P224();
      } else if (name === 'p192') {
        prime = new P192();
      } else if (name === 'p25519') {
        prime = new P25519();
      } else {
        throw new Error('Unknown prime ' + name);
      }
      primes[name] = prime;

      return prime;
    };

    //
    // Base reduction engine
    //
    function Red (m) {
      if (typeof m === 'string') {
        var prime = BN._prime(m);
        this.m = prime.p;
        this.prime = prime;
      } else {
        assert(m.gtn(1), 'modulus must be greater than 1');
        this.m = m;
        this.prime = null;
      }
    }

    Red.prototype._verify1 = function _verify1 (a) {
      assert(a.negative === 0, 'red works only with positives');
      assert(a.red, 'red works only with red numbers');
    };

    Red.prototype._verify2 = function _verify2 (a, b) {
      assert((a.negative | b.negative) === 0, 'red works only with positives');
      assert(a.red && a.red === b.red,
        'red works only with red numbers');
    };

    Red.prototype.imod = function imod (a) {
      if (this.prime) return this.prime.ireduce(a)._forceRed(this);
      return a.umod(this.m)._forceRed(this);
    };

    Red.prototype.neg = function neg (a) {
      if (a.isZero()) {
        return a.clone();
      }

      return this.m.sub(a)._forceRed(this);
    };

    Red.prototype.add = function add (a, b) {
      this._verify2(a, b);

      var res = a.add(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.iadd = function iadd (a, b) {
      this._verify2(a, b);

      var res = a.iadd(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res;
    };

    Red.prototype.sub = function sub (a, b) {
      this._verify2(a, b);

      var res = a.sub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.isub = function isub (a, b) {
      this._verify2(a, b);

      var res = a.isub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res;
    };

    Red.prototype.shl = function shl (a, num) {
      this._verify1(a);
      return this.imod(a.ushln(num));
    };

    Red.prototype.imul = function imul (a, b) {
      this._verify2(a, b);
      return this.imod(a.imul(b));
    };

    Red.prototype.mul = function mul (a, b) {
      this._verify2(a, b);
      return this.imod(a.mul(b));
    };

    Red.prototype.isqr = function isqr (a) {
      return this.imul(a, a.clone());
    };

    Red.prototype.sqr = function sqr (a) {
      return this.mul(a, a);
    };

    Red.prototype.sqrt = function sqrt (a) {
      if (a.isZero()) return a.clone();

      var mod3 = this.m.andln(3);
      assert(mod3 % 2 === 1);

      // Fast case
      if (mod3 === 3) {
        var pow = this.m.add(new BN(1)).iushrn(2);
        return this.pow(a, pow);
      }

      // Tonelli-Shanks algorithm (Totally unoptimized and slow)
      //
      // Find Q and S, that Q * 2 ^ S = (P - 1)
      var q = this.m.subn(1);
      var s = 0;
      while (!q.isZero() && q.andln(1) === 0) {
        s++;
        q.iushrn(1);
      }
      assert(!q.isZero());

      var one = new BN(1).toRed(this);
      var nOne = one.redNeg();

      // Find quadratic non-residue
      // NOTE: Max is such because of generalized Riemann hypothesis.
      var lpow = this.m.subn(1).iushrn(1);
      var z = this.m.bitLength();
      z = new BN(2 * z * z).toRed(this);

      while (this.pow(z, lpow).cmp(nOne) !== 0) {
        z.redIAdd(nOne);
      }

      var c = this.pow(z, q);
      var r = this.pow(a, q.addn(1).iushrn(1));
      var t = this.pow(a, q);
      var m = s;
      while (t.cmp(one) !== 0) {
        var tmp = t;
        for (var i = 0; tmp.cmp(one) !== 0; i++) {
          tmp = tmp.redSqr();
        }
        assert(i < m);
        var b = this.pow(c, new BN(1).iushln(m - i - 1));

        r = r.redMul(b);
        c = b.redSqr();
        t = t.redMul(c);
        m = i;
      }

      return r;
    };

    Red.prototype.invm = function invm (a) {
      var inv = a._invmp(this.m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };

    Red.prototype.pow = function pow (a, num) {
      if (num.isZero()) return new BN(1).toRed(this);
      if (num.cmpn(1) === 0) return a.clone();

      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this);
      wnd[1] = a;
      for (var i = 2; i < wnd.length; i++) {
        wnd[i] = this.mul(wnd[i - 1], a);
      }

      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }

      for (i = num.length - 1; i >= 0; i--) {
        var word = num.words[i];
        for (var j = start - 1; j >= 0; j--) {
          var bit = (word >> j) & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }

          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }

          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }

      return res;
    };

    Red.prototype.convertTo = function convertTo (num) {
      var r = num.umod(this.m);

      return r === num ? r.clone() : r;
    };

    Red.prototype.convertFrom = function convertFrom (num) {
      var res = num.clone();
      res.red = null;
      return res;
    };

    //
    // Montgomery method engine
    //

    BN.mont = function mont (num) {
      return new Mont(num);
    };

    function Mont (m) {
      Red.call(this, m);

      this.shift = this.m.bitLength();
      if (this.shift % 26 !== 0) {
        this.shift += 26 - (this.shift % 26);
      }

      this.r = new BN(1).iushln(this.shift);
      this.r2 = this.imod(this.r.sqr());
      this.rinv = this.r._invmp(this.m);

      this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
      this.minv = this.minv.umod(this.r);
      this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);

    Mont.prototype.convertTo = function convertTo (num) {
      return this.imod(num.ushln(this.shift));
    };

    Mont.prototype.convertFrom = function convertFrom (num) {
      var r = this.imod(num.mul(this.rinv));
      r.red = null;
      return r;
    };

    Mont.prototype.imul = function imul (a, b) {
      if (a.isZero() || b.isZero()) {
        a.words[0] = 0;
        a.length = 1;
        return a;
      }

      var t = a.imul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;

      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.mul = function mul (a, b) {
      if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

      var t = a.mul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;
      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.invm = function invm (a) {
      // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
      var res = this.imod(a._invmp(this.m).mul(this.r2));
      return res._forceRed(this);
    };
  })(module, commonjsGlobal);
  }(bn$2));

  var cjs$5 = {};

  var isTypedarray      = isTypedArray$5;
  isTypedArray$5.strict = isStrictTypedArray;
  isTypedArray$5.loose  = isLooseTypedArray;

  var toString$2 = Object.prototype.toString;
  var names = {
      '[object Int8Array]': true
    , '[object Int16Array]': true
    , '[object Int32Array]': true
    , '[object Uint8Array]': true
    , '[object Uint8ClampedArray]': true
    , '[object Uint16Array]': true
    , '[object Uint32Array]': true
    , '[object Float32Array]': true
    , '[object Float64Array]': true
  };

  function isTypedArray$5(arr) {
    return (
         isStrictTypedArray(arr)
      || isLooseTypedArray(arr)
    )
  }

  function isStrictTypedArray(arr) {
    return (
         arr instanceof Int8Array
      || arr instanceof Int16Array
      || arr instanceof Int32Array
      || arr instanceof Uint8Array
      || arr instanceof Uint8ClampedArray
      || arr instanceof Uint16Array
      || arr instanceof Uint32Array
      || arr instanceof Float32Array
      || arr instanceof Float64Array
    )
  }

  function isLooseTypedArray(arr) {
    return names[toString$2.call(arr)]
  }

  /**
   * Convert a typed array to a Buffer without a copy
   *
   * Author:   Feross Aboukhadijeh <https://feross.org>
   * License:  MIT
   *
   * `npm install typedarray-to-buffer`
   */

  var isTypedArray$4 = isTypedarray.strict;

  var typedarrayToBuffer = function typedarrayToBuffer (arr) {
    if (isTypedArray$4(arr)) {
      // To avoid a copy, use the typed array's underlying ArrayBuffer to back new Buffer
      var buf = Buffer.from(arr.buffer);
      if (arr.byteLength !== arr.buffer.byteLength) {
        // Respect the "view", i.e. byteOffset and byteLength, without doing a copy
        buf = buf.slice(arr.byteOffset, arr.byteOffset + arr.byteLength);
      }
      return buf
    } else {
      // Pass through all other types to `Buffer.from`
      return Buffer.from(arr)
    }
  };

  var __importDefault$4 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
      return (mod && mod.__esModule) ? mod : { "default": mod };
  };
  Object.defineProperty(cjs$5, "__esModule", { value: true });
  cjs$5.removeHexLeadingZeros = cjs$5.sanitizeHex = cjs$5.addHexPrefix = cjs$5.removeHexPrefix = cjs$5.padRight = cjs$5.padLeft = cjs$5.sanitizeBytes = cjs$5.swapHex = cjs$5.swapBytes = cjs$5.splitBytes = cjs$5.calcByteLength = cjs$5.trimRight = cjs$5.trimLeft = cjs$5.concatArrays = cjs$5.concatBuffers = cjs$5.getEncoding = cjs$5.getType = cjs$5.isArrayBuffer = cjs$5.isTypedArray = cjs$5.isBuffer = cjs$5.isHexString = cjs$5.isBinaryString = cjs$5.binaryToNumber = cjs$5.binaryToUtf8 = cjs$5.binaryToHex = cjs$5.binaryToArray = cjs$5.binaryToBuffer = cjs$5.numberToBinary = cjs$5.numberToUtf8 = cjs$5.numberToHex = cjs$5.numberToArray = cjs$5.numberToBuffer = cjs$5.utf8ToBinary = cjs$5.utf8ToNumber = cjs$5.utf8ToHex = cjs$5.utf8ToArray = cjs$5.utf8ToBuffer = cjs$5.hexToBinary = cjs$5.hexToNumber = cjs$5.hexToUtf8 = cjs$5.hexToArray = cjs$5.hexToBuffer = cjs$5.arrayToBinary = cjs$5.arrayToNumber = cjs$5.arrayToUtf8 = cjs$5.arrayToHex = cjs$5.arrayToBuffer = cjs$5.bufferToBinary = cjs$5.bufferToNumber = cjs$5.bufferToUtf8 = cjs$5.bufferToHex = cjs$5.bufferToArray = void 0;
  const is_typedarray_1 = __importDefault$4(isTypedarray);
  const typedarray_to_buffer_1 = __importDefault$4(typedarrayToBuffer);
  const ENC_HEX = "hex";
  const ENC_UTF8 = "utf8";
  const ENC_BIN = "binary";
  const TYPE_BUFFER = "buffer";
  const TYPE_ARRAY = "array";
  const TYPE_TYPED_ARRAY = "typed-array";
  const TYPE_ARRAY_BUFFER = "array-buffer";
  const STRING_ZERO = "0";
  function bufferToArray(buf) {
      return new Uint8Array(buf);
  }
  cjs$5.bufferToArray = bufferToArray;
  function bufferToHex(buf, prefixed = false) {
      const hex = buf.toString(ENC_HEX);
      return prefixed ? addHexPrefix$1(hex) : hex;
  }
  cjs$5.bufferToHex = bufferToHex;
  function bufferToUtf8(buf) {
      return buf.toString(ENC_UTF8);
  }
  cjs$5.bufferToUtf8 = bufferToUtf8;
  function bufferToNumber(buf) {
      return buf.readUIntBE(0, buf.length);
  }
  cjs$5.bufferToNumber = bufferToNumber;
  function bufferToBinary(buf) {
      return arrayToBinary(bufferToArray(buf));
  }
  cjs$5.bufferToBinary = bufferToBinary;
  function arrayToBuffer(arr) {
      return typedarray_to_buffer_1.default(arr);
  }
  cjs$5.arrayToBuffer = arrayToBuffer;
  function arrayToHex(arr, prefixed = false) {
      return bufferToHex(arrayToBuffer(arr), prefixed);
  }
  cjs$5.arrayToHex = arrayToHex;
  function arrayToUtf8(arr) {
      return bufferToUtf8(arrayToBuffer(arr));
  }
  cjs$5.arrayToUtf8 = arrayToUtf8;
  function arrayToNumber(arr) {
      return bufferToNumber(arrayToBuffer(arr));
  }
  cjs$5.arrayToNumber = arrayToNumber;
  function arrayToBinary(arr) {
      return Array.from(arr)
          .map(numberToBinary)
          .join("");
  }
  cjs$5.arrayToBinary = arrayToBinary;
  function hexToBuffer(hex) {
      return Buffer.from(removeHexPrefix$1(hex), ENC_HEX);
  }
  cjs$5.hexToBuffer = hexToBuffer;
  function hexToArray(hex) {
      return bufferToArray(hexToBuffer(hex));
  }
  cjs$5.hexToArray = hexToArray;
  function hexToUtf8(hex) {
      return bufferToUtf8(hexToBuffer(hex));
  }
  cjs$5.hexToUtf8 = hexToUtf8;
  function hexToNumber(hex) {
      return arrayToNumber(hexToArray(hex));
  }
  cjs$5.hexToNumber = hexToNumber;
  function hexToBinary(hex) {
      return arrayToBinary(hexToArray(hex));
  }
  cjs$5.hexToBinary = hexToBinary;
  function utf8ToBuffer(utf8) {
      return Buffer.from(utf8, ENC_UTF8);
  }
  cjs$5.utf8ToBuffer = utf8ToBuffer;
  function utf8ToArray(utf8) {
      return bufferToArray(utf8ToBuffer(utf8));
  }
  cjs$5.utf8ToArray = utf8ToArray;
  function utf8ToHex(utf8, prefixed = false) {
      return bufferToHex(utf8ToBuffer(utf8), prefixed);
  }
  cjs$5.utf8ToHex = utf8ToHex;
  function utf8ToNumber(utf8) {
      const num = parseInt(utf8, 10);
      assert$j(isDefined(num), "Number can only safely store up to 53 bits");
      return num;
  }
  cjs$5.utf8ToNumber = utf8ToNumber;
  function utf8ToBinary(utf8) {
      return arrayToBinary(utf8ToArray(utf8));
  }
  cjs$5.utf8ToBinary = utf8ToBinary;
  function numberToBuffer(num) {
      return binaryToBuffer(numberToBinary(num));
  }
  cjs$5.numberToBuffer = numberToBuffer;
  function numberToArray(num) {
      return binaryToArray(numberToBinary(num));
  }
  cjs$5.numberToArray = numberToArray;
  function numberToHex(num, prefixed) {
      return binaryToHex(numberToBinary(num), prefixed);
  }
  cjs$5.numberToHex = numberToHex;
  function numberToUtf8(num) {
      return `${num}`;
  }
  cjs$5.numberToUtf8 = numberToUtf8;
  function numberToBinary(num) {
      const bin = (num >>> 0).toString(2);
      return sanitizeBytes(bin);
  }
  cjs$5.numberToBinary = numberToBinary;
  function binaryToBuffer(bin) {
      return arrayToBuffer(binaryToArray(bin));
  }
  cjs$5.binaryToBuffer = binaryToBuffer;
  function binaryToArray(bin) {
      return new Uint8Array(splitBytes(bin).map(x => parseInt(x, 2)));
  }
  cjs$5.binaryToArray = binaryToArray;
  function binaryToHex(bin, prefixed) {
      return arrayToHex(binaryToArray(bin), prefixed);
  }
  cjs$5.binaryToHex = binaryToHex;
  function binaryToUtf8(bin) {
      return arrayToUtf8(binaryToArray(bin));
  }
  cjs$5.binaryToUtf8 = binaryToUtf8;
  function binaryToNumber(bin) {
      return arrayToNumber(binaryToArray(bin));
  }
  cjs$5.binaryToNumber = binaryToNumber;
  function isBinaryString(str) {
      if (typeof str !== "string" || !new RegExp(/^[01]+$/).test(str)) {
          return false;
      }
      if (str.length % 8 !== 0) {
          return false;
      }
      return true;
  }
  cjs$5.isBinaryString = isBinaryString;
  function isHexString$2(str, length) {
      if (typeof str !== "string" || !str.match(/^0x[0-9A-Fa-f]*$/)) {
          return false;
      }
      if (length && str.length !== 2 + 2 * length) {
          return false;
      }
      return true;
  }
  cjs$5.isHexString = isHexString$2;
  function isBuffer$3(val) {
      return Buffer.isBuffer(val);
  }
  cjs$5.isBuffer = isBuffer$3;
  function isTypedArray$3(val) {
      return is_typedarray_1.default.strict(val) && !isBuffer$3(val);
  }
  cjs$5.isTypedArray = isTypedArray$3;
  function isArrayBuffer$2(val) {
      return (!isTypedArray$3(val) &&
          !isBuffer$3(val) &&
          typeof val.byteLength !== "undefined");
  }
  cjs$5.isArrayBuffer = isArrayBuffer$2;
  function getType$1(val) {
      if (isBuffer$3(val)) {
          return TYPE_BUFFER;
      }
      else if (isTypedArray$3(val)) {
          return TYPE_TYPED_ARRAY;
      }
      else if (isArrayBuffer$2(val)) {
          return TYPE_ARRAY_BUFFER;
      }
      else if (Array.isArray(val)) {
          return TYPE_ARRAY;
      }
      else {
          return typeof val;
      }
  }
  cjs$5.getType = getType$1;
  function getEncoding$1(str) {
      if (isBinaryString(str)) {
          return ENC_BIN;
      }
      if (isHexString$2(str)) {
          return ENC_HEX;
      }
      return ENC_UTF8;
  }
  cjs$5.getEncoding = getEncoding$1;
  function concatBuffers$1(...args) {
      const result = Buffer.concat(args);
      return result;
  }
  cjs$5.concatBuffers = concatBuffers$1;
  function concatArrays(...args) {
      let result = [];
      args.forEach(arg => (result = result.concat(Array.from(arg))));
      return new Uint8Array([...result]);
  }
  cjs$5.concatArrays = concatArrays;
  function trimLeft(data, length) {
      const diff = data.length - length;
      if (diff > 0) {
          data = data.slice(diff);
      }
      return data;
  }
  cjs$5.trimLeft = trimLeft;
  function trimRight(data, length) {
      return data.slice(0, length);
  }
  cjs$5.trimRight = trimRight;
  function calcByteLength(length, byteSize = 8) {
      const remainder = length % byteSize;
      return remainder
          ? ((length - remainder) / byteSize) * byteSize + byteSize
          : length;
  }
  cjs$5.calcByteLength = calcByteLength;
  function splitBytes(str, byteSize = 8) {
      const bytes = sanitizeBytes(str).match(new RegExp(`.{${byteSize}}`, "gi"));
      return Array.from(bytes || []);
  }
  cjs$5.splitBytes = splitBytes;
  function swapBytes(str) {
      return splitBytes(str)
          .map(reverseString)
          .join("");
  }
  cjs$5.swapBytes = swapBytes;
  function swapHex(str) {
      return binaryToHex(swapBytes(hexToBinary(str)));
  }
  cjs$5.swapHex = swapHex;
  function sanitizeBytes(str, byteSize = 8, padding = STRING_ZERO) {
      return padLeft(str, calcByteLength(str.length, byteSize), padding);
  }
  cjs$5.sanitizeBytes = sanitizeBytes;
  function padLeft(str, length, padding = STRING_ZERO) {
      return padString(str, length, true, padding);
  }
  cjs$5.padLeft = padLeft;
  function padRight(str, length, padding = STRING_ZERO) {
      return padString(str, length, false, padding);
  }
  cjs$5.padRight = padRight;
  function removeHexPrefix$1(hex) {
      return hex.replace(/^0x/, "");
  }
  cjs$5.removeHexPrefix = removeHexPrefix$1;
  function addHexPrefix$1(hex) {
      return hex.startsWith("0x") ? hex : `0x${hex}`;
  }
  cjs$5.addHexPrefix = addHexPrefix$1;
  function sanitizeHex$1(hex) {
      hex = removeHexPrefix$1(hex);
      hex = sanitizeBytes(hex, 2);
      if (hex) {
          hex = addHexPrefix$1(hex);
      }
      return hex;
  }
  cjs$5.sanitizeHex = sanitizeHex$1;
  function removeHexLeadingZeros$1(hex) {
      const prefixed = hex.startsWith("0x");
      hex = removeHexPrefix$1(hex);
      hex = hex.startsWith(STRING_ZERO) ? hex.substring(1) : hex;
      return prefixed ? addHexPrefix$1(hex) : hex;
  }
  cjs$5.removeHexLeadingZeros = removeHexLeadingZeros$1;
  function isUndefined(value) {
      return typeof value === "undefined";
  }
  function isDefined(value) {
      return !isUndefined(value);
  }
  function assert$j(assertion, errorMessage) {
      if (!assertion) {
          throw new Error(errorMessage);
      }
  }
  function reverseString(str) {
      return str
          .split("")
          .reverse()
          .join("");
  }
  function padString(str, length, left, padding = STRING_ZERO) {
      const diff = length - str.length;
      let result = str;
      if (diff > 0) {
          const pad = padding.repeat(diff);
          result = left ? pad + str : str + pad;
      }
      return result;
  }

  Object.defineProperty(encoding$5, "__esModule", { value: true });
  encoding$5.convertNumberToHex = encoding$5.convertNumberToUtf8 = encoding$5.convertNumberToArrayBuffer = encoding$5.convertNumberToBuffer = encoding$5.convertHexToNumber = encoding$5.convertHexToUtf8 = encoding$5.convertHexToArrayBuffer = encoding$5.convertHexToBuffer = encoding$5.convertUtf8ToNumber = encoding$5.convertUtf8ToHex = encoding$5.convertUtf8ToBuffer = encoding$5.convertUtf8ToArrayBuffer = encoding$5.concatBuffers = encoding$5.convertBufferToNumber = encoding$5.convertBufferToHex = encoding$5.convertBufferToUtf8 = encoding$5.convertBufferToArrayBuffer = encoding$5.concatArrayBuffers = encoding$5.convertArrayBufferToNumber = encoding$5.convertArrayBufferToHex = encoding$5.convertArrayBufferToUtf8 = encoding$5.convertArrayBufferToBuffer = void 0;
  const tslib_1$d = require$$0$1;
  const bn_js_1$1 = (0, tslib_1$d.__importDefault)(bn$2.exports);
  const encoding$4 = (0, tslib_1$d.__importStar)(cjs$5);
  function convertArrayBufferToBuffer(arrBuf) {
      return encoding$4.arrayToBuffer(new Uint8Array(arrBuf));
  }
  encoding$5.convertArrayBufferToBuffer = convertArrayBufferToBuffer;
  function convertArrayBufferToUtf8(arrBuf) {
      return encoding$4.arrayToUtf8(new Uint8Array(arrBuf));
  }
  encoding$5.convertArrayBufferToUtf8 = convertArrayBufferToUtf8;
  function convertArrayBufferToHex(arrBuf, noPrefix) {
      return encoding$4.arrayToHex(new Uint8Array(arrBuf), !noPrefix);
  }
  encoding$5.convertArrayBufferToHex = convertArrayBufferToHex;
  function convertArrayBufferToNumber(arrBuf) {
      return encoding$4.arrayToNumber(new Uint8Array(arrBuf));
  }
  encoding$5.convertArrayBufferToNumber = convertArrayBufferToNumber;
  function concatArrayBuffers(...args) {
      return encoding$4.hexToArray(args.map(b => encoding$4.arrayToHex(new Uint8Array(b))).join("")).buffer;
  }
  encoding$5.concatArrayBuffers = concatArrayBuffers;
  function convertBufferToArrayBuffer(buf) {
      return encoding$4.bufferToArray(buf).buffer;
  }
  encoding$5.convertBufferToArrayBuffer = convertBufferToArrayBuffer;
  function convertBufferToUtf8(buf) {
      return encoding$4.bufferToUtf8(buf);
  }
  encoding$5.convertBufferToUtf8 = convertBufferToUtf8;
  function convertBufferToHex(buf, noPrefix) {
      return encoding$4.bufferToHex(buf, !noPrefix);
  }
  encoding$5.convertBufferToHex = convertBufferToHex;
  function convertBufferToNumber(buf) {
      return encoding$4.bufferToNumber(buf);
  }
  encoding$5.convertBufferToNumber = convertBufferToNumber;
  function concatBuffers(...args) {
      return encoding$4.concatBuffers(...args);
  }
  encoding$5.concatBuffers = concatBuffers;
  function convertUtf8ToArrayBuffer(utf8) {
      return encoding$4.utf8ToArray(utf8).buffer;
  }
  encoding$5.convertUtf8ToArrayBuffer = convertUtf8ToArrayBuffer;
  function convertUtf8ToBuffer(utf8) {
      return encoding$4.utf8ToBuffer(utf8);
  }
  encoding$5.convertUtf8ToBuffer = convertUtf8ToBuffer;
  function convertUtf8ToHex(utf8, noPrefix) {
      return encoding$4.utf8ToHex(utf8, !noPrefix);
  }
  encoding$5.convertUtf8ToHex = convertUtf8ToHex;
  function convertUtf8ToNumber(utf8) {
      return new bn_js_1$1.default(utf8, 10).toNumber();
  }
  encoding$5.convertUtf8ToNumber = convertUtf8ToNumber;
  function convertHexToBuffer(hex) {
      return encoding$4.hexToBuffer(hex);
  }
  encoding$5.convertHexToBuffer = convertHexToBuffer;
  function convertHexToArrayBuffer(hex) {
      return encoding$4.hexToArray(hex).buffer;
  }
  encoding$5.convertHexToArrayBuffer = convertHexToArrayBuffer;
  function convertHexToUtf8(hex) {
      return encoding$4.hexToUtf8(hex);
  }
  encoding$5.convertHexToUtf8 = convertHexToUtf8;
  function convertHexToNumber(hex) {
      return new bn_js_1$1.default(encoding$4.removeHexPrefix(hex), "hex").toNumber();
  }
  encoding$5.convertHexToNumber = convertHexToNumber;
  function convertNumberToBuffer(num) {
      return encoding$4.numberToBuffer(num);
  }
  encoding$5.convertNumberToBuffer = convertNumberToBuffer;
  function convertNumberToArrayBuffer(num) {
      return encoding$4.numberToArray(num).buffer;
  }
  encoding$5.convertNumberToArrayBuffer = convertNumberToArrayBuffer;
  function convertNumberToUtf8(num) {
      return new bn_js_1$1.default(num).toString();
  }
  encoding$5.convertNumberToUtf8 = convertNumberToUtf8;
  function convertNumberToHex(num, noPrefix) {
      const hex = encoding$4.removeHexPrefix(encoding$4.sanitizeHex(new bn_js_1$1.default(num).toString(16)));
      return noPrefix ? hex : encoding$4.addHexPrefix(hex);
  }
  encoding$5.convertNumberToHex = convertNumberToHex;

  var ethereum = {};

  var sha3 = {exports: {}};

  /**
   * [js-sha3]{@link https://github.com/emn178/js-sha3}
   *
   * @version 0.8.0
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2015-2018
   * @license MIT
   */

  (function (module) {
  /*jslint bitwise: true */
  (function () {

    var INPUT_ERROR = 'input is invalid type';
    var FINALIZE_ERROR = 'finalize already called';
    var WINDOW = typeof window === 'object';
    var root = WINDOW ? window : {};
    if (root.JS_SHA3_NO_WINDOW) {
      WINDOW = false;
    }
    var WEB_WORKER = !WINDOW && typeof self === 'object';
    var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
    if (NODE_JS) {
      root = commonjsGlobal;
    } else if (WEB_WORKER) {
      root = self;
    }
    var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && 'object' === 'object' && module.exports;
    var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
    var HEX_CHARS = '0123456789abcdef'.split('');
    var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
    var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
    var KECCAK_PADDING = [1, 256, 65536, 16777216];
    var PADDING = [6, 1536, 393216, 100663296];
    var SHIFT = [0, 8, 16, 24];
    var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
      0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
      2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
      2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
      2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
    var BITS = [224, 256, 384, 512];
    var SHAKE_BITS = [128, 256];
    var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
    var CSHAKE_BYTEPAD = {
      '128': 168,
      '256': 136
    };

    if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
      Array.isArray = function (obj) {
        return Object.prototype.toString.call(obj) === '[object Array]';
      };
    }

    if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
      ArrayBuffer.isView = function (obj) {
        return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
      };
    }

    var createOutputMethod = function (bits, padding, outputType) {
      return function (message) {
        return new Keccak(bits, padding, bits).update(message)[outputType]();
      };
    };

    var createShakeOutputMethod = function (bits, padding, outputType) {
      return function (message, outputBits) {
        return new Keccak(bits, padding, outputBits).update(message)[outputType]();
      };
    };

    var createCshakeOutputMethod = function (bits, padding, outputType) {
      return function (message, outputBits, n, s) {
        return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
      };
    };

    var createKmacOutputMethod = function (bits, padding, outputType) {
      return function (key, message, outputBits, s) {
        return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
      };
    };

    var createOutputMethods = function (method, createMethod, bits, padding) {
      for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
        var type = OUTPUT_TYPES[i];
        method[type] = createMethod(bits, padding, type);
      }
      return method;
    };

    var createMethod = function (bits, padding) {
      var method = createOutputMethod(bits, padding, 'hex');
      method.create = function () {
        return new Keccak(bits, padding, bits);
      };
      method.update = function (message) {
        return method.create().update(message);
      };
      return createOutputMethods(method, createOutputMethod, bits, padding);
    };

    var createShakeMethod = function (bits, padding) {
      var method = createShakeOutputMethod(bits, padding, 'hex');
      method.create = function (outputBits) {
        return new Keccak(bits, padding, outputBits);
      };
      method.update = function (message, outputBits) {
        return method.create(outputBits).update(message);
      };
      return createOutputMethods(method, createShakeOutputMethod, bits, padding);
    };

    var createCshakeMethod = function (bits, padding) {
      var w = CSHAKE_BYTEPAD[bits];
      var method = createCshakeOutputMethod(bits, padding, 'hex');
      method.create = function (outputBits, n, s) {
        if (!n && !s) {
          return methods['shake' + bits].create(outputBits);
        } else {
          return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
        }
      };
      method.update = function (message, outputBits, n, s) {
        return method.create(outputBits, n, s).update(message);
      };
      return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
    };

    var createKmacMethod = function (bits, padding) {
      var w = CSHAKE_BYTEPAD[bits];
      var method = createKmacOutputMethod(bits, padding, 'hex');
      method.create = function (key, outputBits, s) {
        return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
      };
      method.update = function (key, message, outputBits, s) {
        return method.create(key, outputBits, s).update(message);
      };
      return createOutputMethods(method, createKmacOutputMethod, bits, padding);
    };

    var algorithms = [
      { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
      { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
      { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
      { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
      { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
    ];

    var methods = {}, methodNames = [];

    for (var i = 0; i < algorithms.length; ++i) {
      var algorithm = algorithms[i];
      var bits = algorithm.bits;
      for (var j = 0; j < bits.length; ++j) {
        var methodName = algorithm.name + '_' + bits[j];
        methodNames.push(methodName);
        methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
        if (algorithm.name !== 'sha3') {
          var newMethodName = algorithm.name + bits[j];
          methodNames.push(newMethodName);
          methods[newMethodName] = methods[methodName];
        }
      }
    }

    function Keccak(bits, padding, outputBits) {
      this.blocks = [];
      this.s = [];
      this.padding = padding;
      this.outputBits = outputBits;
      this.reset = true;
      this.finalized = false;
      this.block = 0;
      this.start = 0;
      this.blockCount = (1600 - (bits << 1)) >> 5;
      this.byteCount = this.blockCount << 2;
      this.outputBlocks = outputBits >> 5;
      this.extraBytes = (outputBits & 31) >> 3;

      for (var i = 0; i < 50; ++i) {
        this.s[i] = 0;
      }
    }

    Keccak.prototype.update = function (message) {
      if (this.finalized) {
        throw new Error(FINALIZE_ERROR);
      }
      var notString, type = typeof message;
      if (type !== 'string') {
        if (type === 'object') {
          if (message === null) {
            throw new Error(INPUT_ERROR);
          } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
            message = new Uint8Array(message);
          } else if (!Array.isArray(message)) {
            if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
              throw new Error(INPUT_ERROR);
            }
          }
        } else {
          throw new Error(INPUT_ERROR);
        }
        notString = true;
      }
      var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
        blockCount = this.blockCount, index = 0, s = this.s, i, code;

      while (index < length) {
        if (this.reset) {
          this.reset = false;
          blocks[0] = this.block;
          for (i = 1; i < blockCount + 1; ++i) {
            blocks[i] = 0;
          }
        }
        if (notString) {
          for (i = this.start; index < length && i < byteCount; ++index) {
            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
          }
        } else {
          for (i = this.start; index < length && i < byteCount; ++index) {
            code = message.charCodeAt(index);
            if (code < 0x80) {
              blocks[i >> 2] |= code << SHIFT[i++ & 3];
            } else if (code < 0x800) {
              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
            } else if (code < 0xd800 || code >= 0xe000) {
              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
            } else {
              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
            }
          }
        }
        this.lastByteIndex = i;
        if (i >= byteCount) {
          this.start = i - byteCount;
          this.block = blocks[blockCount];
          for (i = 0; i < blockCount; ++i) {
            s[i] ^= blocks[i];
          }
          f(s);
          this.reset = true;
        } else {
          this.start = i;
        }
      }
      return this;
    };

    Keccak.prototype.encode = function (x, right) {
      var o = x & 255, n = 1;
      var bytes = [o];
      x = x >> 8;
      o = x & 255;
      while (o > 0) {
        bytes.unshift(o);
        x = x >> 8;
        o = x & 255;
        ++n;
      }
      if (right) {
        bytes.push(n);
      } else {
        bytes.unshift(n);
      }
      this.update(bytes);
      return bytes.length;
    };

    Keccak.prototype.encodeString = function (str) {
      var notString, type = typeof str;
      if (type !== 'string') {
        if (type === 'object') {
          if (str === null) {
            throw new Error(INPUT_ERROR);
          } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
            str = new Uint8Array(str);
          } else if (!Array.isArray(str)) {
            if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
              throw new Error(INPUT_ERROR);
            }
          }
        } else {
          throw new Error(INPUT_ERROR);
        }
        notString = true;
      }
      var bytes = 0, length = str.length;
      if (notString) {
        bytes = length;
      } else {
        for (var i = 0; i < str.length; ++i) {
          var code = str.charCodeAt(i);
          if (code < 0x80) {
            bytes += 1;
          } else if (code < 0x800) {
            bytes += 2;
          } else if (code < 0xd800 || code >= 0xe000) {
            bytes += 3;
          } else {
            code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
            bytes += 4;
          }
        }
      }
      bytes += this.encode(bytes * 8);
      this.update(str);
      return bytes;
    };

    Keccak.prototype.bytepad = function (strs, w) {
      var bytes = this.encode(w);
      for (var i = 0; i < strs.length; ++i) {
        bytes += this.encodeString(strs[i]);
      }
      var paddingBytes = w - bytes % w;
      var zeros = [];
      zeros.length = paddingBytes;
      this.update(zeros);
      return this;
    };

    Keccak.prototype.finalize = function () {
      if (this.finalized) {
        return;
      }
      this.finalized = true;
      var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
      blocks[i >> 2] |= this.padding[i & 3];
      if (this.lastByteIndex === this.byteCount) {
        blocks[0] = blocks[blockCount];
        for (i = 1; i < blockCount + 1; ++i) {
          blocks[i] = 0;
        }
      }
      blocks[blockCount - 1] |= 0x80000000;
      for (i = 0; i < blockCount; ++i) {
        s[i] ^= blocks[i];
      }
      f(s);
    };

    Keccak.prototype.toString = Keccak.prototype.hex = function () {
      this.finalize();

      var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
        extraBytes = this.extraBytes, i = 0, j = 0;
      var hex = '', block;
      while (j < outputBlocks) {
        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
          block = s[i];
          hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
            HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
            HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
            HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
        }
        if (j % blockCount === 0) {
          f(s);
          i = 0;
        }
      }
      if (extraBytes) {
        block = s[i];
        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
        if (extraBytes > 1) {
          hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
        }
        if (extraBytes > 2) {
          hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
        }
      }
      return hex;
    };

    Keccak.prototype.arrayBuffer = function () {
      this.finalize();

      var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
        extraBytes = this.extraBytes, i = 0, j = 0;
      var bytes = this.outputBits >> 3;
      var buffer;
      if (extraBytes) {
        buffer = new ArrayBuffer((outputBlocks + 1) << 2);
      } else {
        buffer = new ArrayBuffer(bytes);
      }
      var array = new Uint32Array(buffer);
      while (j < outputBlocks) {
        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
          array[j] = s[i];
        }
        if (j % blockCount === 0) {
          f(s);
        }
      }
      if (extraBytes) {
        array[i] = s[i];
        buffer = buffer.slice(0, bytes);
      }
      return buffer;
    };

    Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

    Keccak.prototype.digest = Keccak.prototype.array = function () {
      this.finalize();

      var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
        extraBytes = this.extraBytes, i = 0, j = 0;
      var array = [], offset, block;
      while (j < outputBlocks) {
        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
          offset = j << 2;
          block = s[i];
          array[offset] = block & 0xFF;
          array[offset + 1] = (block >> 8) & 0xFF;
          array[offset + 2] = (block >> 16) & 0xFF;
          array[offset + 3] = (block >> 24) & 0xFF;
        }
        if (j % blockCount === 0) {
          f(s);
        }
      }
      if (extraBytes) {
        offset = j << 2;
        block = s[i];
        array[offset] = block & 0xFF;
        if (extraBytes > 1) {
          array[offset + 1] = (block >> 8) & 0xFF;
        }
        if (extraBytes > 2) {
          array[offset + 2] = (block >> 16) & 0xFF;
        }
      }
      return array;
    };

    function Kmac(bits, padding, outputBits) {
      Keccak.call(this, bits, padding, outputBits);
    }

    Kmac.prototype = new Keccak();

    Kmac.prototype.finalize = function () {
      this.encode(this.outputBits, true);
      return Keccak.prototype.finalize.call(this);
    };

    var f = function (s) {
      var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
        b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
        b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
        b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
      for (n = 0; n < 48; n += 2) {
        c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
        c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
        c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
        c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
        c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
        c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
        c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
        c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
        c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
        c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

        h = c8 ^ ((c2 << 1) | (c3 >>> 31));
        l = c9 ^ ((c3 << 1) | (c2 >>> 31));
        s[0] ^= h;
        s[1] ^= l;
        s[10] ^= h;
        s[11] ^= l;
        s[20] ^= h;
        s[21] ^= l;
        s[30] ^= h;
        s[31] ^= l;
        s[40] ^= h;
        s[41] ^= l;
        h = c0 ^ ((c4 << 1) | (c5 >>> 31));
        l = c1 ^ ((c5 << 1) | (c4 >>> 31));
        s[2] ^= h;
        s[3] ^= l;
        s[12] ^= h;
        s[13] ^= l;
        s[22] ^= h;
        s[23] ^= l;
        s[32] ^= h;
        s[33] ^= l;
        s[42] ^= h;
        s[43] ^= l;
        h = c2 ^ ((c6 << 1) | (c7 >>> 31));
        l = c3 ^ ((c7 << 1) | (c6 >>> 31));
        s[4] ^= h;
        s[5] ^= l;
        s[14] ^= h;
        s[15] ^= l;
        s[24] ^= h;
        s[25] ^= l;
        s[34] ^= h;
        s[35] ^= l;
        s[44] ^= h;
        s[45] ^= l;
        h = c4 ^ ((c8 << 1) | (c9 >>> 31));
        l = c5 ^ ((c9 << 1) | (c8 >>> 31));
        s[6] ^= h;
        s[7] ^= l;
        s[16] ^= h;
        s[17] ^= l;
        s[26] ^= h;
        s[27] ^= l;
        s[36] ^= h;
        s[37] ^= l;
        s[46] ^= h;
        s[47] ^= l;
        h = c6 ^ ((c0 << 1) | (c1 >>> 31));
        l = c7 ^ ((c1 << 1) | (c0 >>> 31));
        s[8] ^= h;
        s[9] ^= l;
        s[18] ^= h;
        s[19] ^= l;
        s[28] ^= h;
        s[29] ^= l;
        s[38] ^= h;
        s[39] ^= l;
        s[48] ^= h;
        s[49] ^= l;

        b0 = s[0];
        b1 = s[1];
        b32 = (s[11] << 4) | (s[10] >>> 28);
        b33 = (s[10] << 4) | (s[11] >>> 28);
        b14 = (s[20] << 3) | (s[21] >>> 29);
        b15 = (s[21] << 3) | (s[20] >>> 29);
        b46 = (s[31] << 9) | (s[30] >>> 23);
        b47 = (s[30] << 9) | (s[31] >>> 23);
        b28 = (s[40] << 18) | (s[41] >>> 14);
        b29 = (s[41] << 18) | (s[40] >>> 14);
        b20 = (s[2] << 1) | (s[3] >>> 31);
        b21 = (s[3] << 1) | (s[2] >>> 31);
        b2 = (s[13] << 12) | (s[12] >>> 20);
        b3 = (s[12] << 12) | (s[13] >>> 20);
        b34 = (s[22] << 10) | (s[23] >>> 22);
        b35 = (s[23] << 10) | (s[22] >>> 22);
        b16 = (s[33] << 13) | (s[32] >>> 19);
        b17 = (s[32] << 13) | (s[33] >>> 19);
        b48 = (s[42] << 2) | (s[43] >>> 30);
        b49 = (s[43] << 2) | (s[42] >>> 30);
        b40 = (s[5] << 30) | (s[4] >>> 2);
        b41 = (s[4] << 30) | (s[5] >>> 2);
        b22 = (s[14] << 6) | (s[15] >>> 26);
        b23 = (s[15] << 6) | (s[14] >>> 26);
        b4 = (s[25] << 11) | (s[24] >>> 21);
        b5 = (s[24] << 11) | (s[25] >>> 21);
        b36 = (s[34] << 15) | (s[35] >>> 17);
        b37 = (s[35] << 15) | (s[34] >>> 17);
        b18 = (s[45] << 29) | (s[44] >>> 3);
        b19 = (s[44] << 29) | (s[45] >>> 3);
        b10 = (s[6] << 28) | (s[7] >>> 4);
        b11 = (s[7] << 28) | (s[6] >>> 4);
        b42 = (s[17] << 23) | (s[16] >>> 9);
        b43 = (s[16] << 23) | (s[17] >>> 9);
        b24 = (s[26] << 25) | (s[27] >>> 7);
        b25 = (s[27] << 25) | (s[26] >>> 7);
        b6 = (s[36] << 21) | (s[37] >>> 11);
        b7 = (s[37] << 21) | (s[36] >>> 11);
        b38 = (s[47] << 24) | (s[46] >>> 8);
        b39 = (s[46] << 24) | (s[47] >>> 8);
        b30 = (s[8] << 27) | (s[9] >>> 5);
        b31 = (s[9] << 27) | (s[8] >>> 5);
        b12 = (s[18] << 20) | (s[19] >>> 12);
        b13 = (s[19] << 20) | (s[18] >>> 12);
        b44 = (s[29] << 7) | (s[28] >>> 25);
        b45 = (s[28] << 7) | (s[29] >>> 25);
        b26 = (s[38] << 8) | (s[39] >>> 24);
        b27 = (s[39] << 8) | (s[38] >>> 24);
        b8 = (s[48] << 14) | (s[49] >>> 18);
        b9 = (s[49] << 14) | (s[48] >>> 18);

        s[0] = b0 ^ (~b2 & b4);
        s[1] = b1 ^ (~b3 & b5);
        s[10] = b10 ^ (~b12 & b14);
        s[11] = b11 ^ (~b13 & b15);
        s[20] = b20 ^ (~b22 & b24);
        s[21] = b21 ^ (~b23 & b25);
        s[30] = b30 ^ (~b32 & b34);
        s[31] = b31 ^ (~b33 & b35);
        s[40] = b40 ^ (~b42 & b44);
        s[41] = b41 ^ (~b43 & b45);
        s[2] = b2 ^ (~b4 & b6);
        s[3] = b3 ^ (~b5 & b7);
        s[12] = b12 ^ (~b14 & b16);
        s[13] = b13 ^ (~b15 & b17);
        s[22] = b22 ^ (~b24 & b26);
        s[23] = b23 ^ (~b25 & b27);
        s[32] = b32 ^ (~b34 & b36);
        s[33] = b33 ^ (~b35 & b37);
        s[42] = b42 ^ (~b44 & b46);
        s[43] = b43 ^ (~b45 & b47);
        s[4] = b4 ^ (~b6 & b8);
        s[5] = b5 ^ (~b7 & b9);
        s[14] = b14 ^ (~b16 & b18);
        s[15] = b15 ^ (~b17 & b19);
        s[24] = b24 ^ (~b26 & b28);
        s[25] = b25 ^ (~b27 & b29);
        s[34] = b34 ^ (~b36 & b38);
        s[35] = b35 ^ (~b37 & b39);
        s[44] = b44 ^ (~b46 & b48);
        s[45] = b45 ^ (~b47 & b49);
        s[6] = b6 ^ (~b8 & b0);
        s[7] = b7 ^ (~b9 & b1);
        s[16] = b16 ^ (~b18 & b10);
        s[17] = b17 ^ (~b19 & b11);
        s[26] = b26 ^ (~b28 & b20);
        s[27] = b27 ^ (~b29 & b21);
        s[36] = b36 ^ (~b38 & b30);
        s[37] = b37 ^ (~b39 & b31);
        s[46] = b46 ^ (~b48 & b40);
        s[47] = b47 ^ (~b49 & b41);
        s[8] = b8 ^ (~b0 & b2);
        s[9] = b9 ^ (~b1 & b3);
        s[18] = b18 ^ (~b10 & b12);
        s[19] = b19 ^ (~b11 & b13);
        s[28] = b28 ^ (~b20 & b22);
        s[29] = b29 ^ (~b21 & b23);
        s[38] = b38 ^ (~b30 & b32);
        s[39] = b39 ^ (~b31 & b33);
        s[48] = b48 ^ (~b40 & b42);
        s[49] = b49 ^ (~b41 & b43);

        s[0] ^= RC[n];
        s[1] ^= RC[n + 1];
      }
    };

    if (COMMON_JS) {
      module.exports = methods;
    } else {
      for (i = 0; i < methodNames.length; ++i) {
        root[methodNames[i]] = methods[methodNames[i]];
      }
    }
  })();
  }(sha3));

  var misc = {};

  const PARSE_ERROR = "PARSE_ERROR";
  const INVALID_REQUEST = "INVALID_REQUEST";
  const METHOD_NOT_FOUND = "METHOD_NOT_FOUND";
  const INVALID_PARAMS = "INVALID_PARAMS";
  const INTERNAL_ERROR = "INTERNAL_ERROR";
  const SERVER_ERROR = "SERVER_ERROR";
  const RESERVED_ERROR_CODES = [-32700, -32600, -32601, -32602, -32603];
  const SERVER_ERROR_CODE_RANGE = [-32000, -32099];
  const STANDARD_ERROR_MAP = {
      [PARSE_ERROR]: { code: -32700, message: "Parse error" },
      [INVALID_REQUEST]: { code: -32600, message: "Invalid Request" },
      [METHOD_NOT_FOUND]: { code: -32601, message: "Method not found" },
      [INVALID_PARAMS]: { code: -32602, message: "Invalid params" },
      [INTERNAL_ERROR]: { code: -32603, message: "Internal error" },
      [SERVER_ERROR]: { code: -32000, message: "Server error" },
  };

  function isServerErrorCode(code) {
      return code <= SERVER_ERROR_CODE_RANGE[0] && code >= SERVER_ERROR_CODE_RANGE[1];
  }
  function isReservedErrorCode(code) {
      return RESERVED_ERROR_CODES.includes(code);
  }
  function isValidErrorCode(code) {
      return typeof code === "number";
  }
  function getError(type) {
      if (!Object.keys(STANDARD_ERROR_MAP).includes(type)) {
          return STANDARD_ERROR_MAP[INTERNAL_ERROR];
      }
      return STANDARD_ERROR_MAP[type];
  }
  function getErrorByCode(code) {
      const match = Object.values(STANDARD_ERROR_MAP).find(e => e.code === code);
      if (!match) {
          return STANDARD_ERROR_MAP[INTERNAL_ERROR];
      }
      return match;
  }
  function validateJsonRpcError(response) {
      if (typeof response.error.code === "undefined") {
          return { valid: false, error: "Missing code for JSON-RPC error" };
      }
      if (typeof response.error.message === "undefined") {
          return { valid: false, error: "Missing message for JSON-RPC error" };
      }
      if (!isValidErrorCode(response.error.code)) {
          return {
              valid: false,
              error: `Invalid error code type for JSON-RPC: ${response.error.code}`,
          };
      }
      if (isReservedErrorCode(response.error.code)) {
          const error = getErrorByCode(response.error.code);
          if (error.message !== STANDARD_ERROR_MAP[INTERNAL_ERROR].message &&
              response.error.message === error.message) {
              return {
                  valid: false,
                  error: `Invalid error code message for JSON-RPC: ${response.error.code}`,
              };
          }
      }
      return { valid: true };
  }
  function parseConnectionError(e, url, type) {
      return e.message.includes("getaddrinfo ENOTFOUND") || e.message.includes("connect ECONNREFUSED")
          ? new Error(`Unavailable ${type} RPC url at ${url}`)
          : e;
  }

  var cjs$4 = {};

  var crypto$2 = {};

  Object.defineProperty(crypto$2, "__esModule", { value: true });
  crypto$2.isBrowserCryptoAvailable = crypto$2.getSubtleCrypto = crypto$2.getBrowerCrypto = void 0;
  function getBrowerCrypto() {
      return (commonjsGlobal === null || commonjsGlobal === void 0 ? void 0 : commonjsGlobal.crypto) || (commonjsGlobal === null || commonjsGlobal === void 0 ? void 0 : commonjsGlobal.msCrypto) || {};
  }
  crypto$2.getBrowerCrypto = getBrowerCrypto;
  function getSubtleCrypto() {
      const browserCrypto = getBrowerCrypto();
      return browserCrypto.subtle || browserCrypto.webkitSubtle;
  }
  crypto$2.getSubtleCrypto = getSubtleCrypto;
  function isBrowserCryptoAvailable() {
      return !!getBrowerCrypto() && !!getSubtleCrypto();
  }
  crypto$2.isBrowserCryptoAvailable = isBrowserCryptoAvailable;

  var env$1 = {};

  Object.defineProperty(env$1, "__esModule", { value: true });
  env$1.isBrowser = env$1.isNode = env$1.isReactNative = void 0;
  function isReactNative() {
      return (typeof document === "undefined" &&
          typeof navigator !== "undefined" &&
          navigator.product === "ReactNative");
  }
  env$1.isReactNative = isReactNative;
  function isNode$1() {
      return (typeof process !== "undefined" &&
          typeof process.versions !== "undefined" &&
          typeof process.versions.node !== "undefined");
  }
  env$1.isNode = isNode$1;
  function isBrowser() {
      return !isReactNative() && !isNode$1();
  }
  env$1.isBrowser = isBrowser;

  (function (exports) {
  var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
  }) : (function(o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
  }));
  var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
      for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  __exportStar(crypto$2, exports);
  __exportStar(env$1, exports);

  }(cjs$4));

  const isNodeJs = cjs$4.isNode;

  function payloadId() {
      const date = Date.now() * Math.pow(10, 3);
      const extra = Math.floor(Math.random() * Math.pow(10, 3));
      return date + extra;
  }
  function formatJsonRpcRequest(method, params, id) {
      return {
          id: id || payloadId(),
          jsonrpc: "2.0",
          method,
          params,
      };
  }
  function formatJsonRpcResult(id, result) {
      return {
          id,
          jsonrpc: "2.0",
          result,
      };
  }
  function formatJsonRpcError(id, error) {
      return {
          id,
          jsonrpc: "2.0",
          error: formatErrorMessage(error),
      };
  }
  function formatErrorMessage(error) {
      if (typeof error === "undefined") {
          return getError(INTERNAL_ERROR);
      }
      if (typeof error === "string") {
          error = Object.assign(Object.assign({}, getError(SERVER_ERROR)), { message: error });
      }
      if (isReservedErrorCode(error.code)) {
          error = getErrorByCode(error.code);
      }
      return error;
  }

  function isValidRoute(route) {
      if (route.includes("*")) {
          return isValidWildcardRoute(route);
      }
      if (/\W/g.test(route)) {
          return false;
      }
      return true;
  }
  function isValidDefaultRoute(route) {
      return route === "*";
  }
  function isValidWildcardRoute(route) {
      if (isValidDefaultRoute(route)) {
          return true;
      }
      if (!route.includes("*")) {
          return false;
      }
      if (route.split("*").length !== 2) {
          return false;
      }
      if (route.split("*").filter(x => x.trim() === "").length !== 1) {
          return false;
      }
      return true;
  }
  function isValidLeadingWildcardRoute(route) {
      return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split("*")[0].trim();
  }
  function isValidTrailingWildcardRoute(route) {
      return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split("*")[1].trim();
  }

  class IEvents {
  }

  class IJsonRpcConnection extends IEvents {
      constructor(opts) {
          super();
      }
  }
  class IBaseJsonRpcProvider extends IEvents {
      constructor() {
          super();
      }
  }
  class IJsonRpcProvider extends IBaseJsonRpcProvider {
      constructor(connection) {
          super();
      }
  }

  const HTTP_REGEX = "^https?:";
  const WS_REGEX = "^wss?:";
  function getUrlProtocol(url) {
      const matches = url.match(new RegExp(/^\w+:/, "gi"));
      if (!matches || !matches.length)
          return;
      return matches[0];
  }
  function matchRegexProtocol(url, regex) {
      const protocol = getUrlProtocol(url);
      if (typeof protocol === "undefined")
          return false;
      return new RegExp(regex).test(protocol);
  }
  function isHttpUrl(url) {
      return matchRegexProtocol(url, HTTP_REGEX);
  }
  function isWsUrl(url) {
      return matchRegexProtocol(url, WS_REGEX);
  }
  function isLocalhostUrl(url) {
      return new RegExp("wss?://localhost(:d{2,5})?").test(url);
  }

  function isJsonRpcPayload(payload) {
      return "id" in payload && "jsonrpc" in payload && payload.jsonrpc === "2.0";
  }
  function isJsonRpcRequest$1(payload) {
      return isJsonRpcPayload(payload) && "method" in payload;
  }
  function isJsonRpcResponse(payload) {
      return isJsonRpcPayload(payload) && (isJsonRpcResult(payload) || isJsonRpcError(payload));
  }
  function isJsonRpcResult(payload) {
      return "result" in payload;
  }
  function isJsonRpcError(payload) {
      return "error" in payload;
  }
  function isJsonRpcValidationInvalid(validation) {
      return "error" in validation && validation.valid === false;
  }

  var esm = /*#__PURE__*/Object.freeze({
    __proto__: null,
    PARSE_ERROR: PARSE_ERROR,
    INVALID_REQUEST: INVALID_REQUEST,
    METHOD_NOT_FOUND: METHOD_NOT_FOUND,
    INVALID_PARAMS: INVALID_PARAMS,
    INTERNAL_ERROR: INTERNAL_ERROR,
    SERVER_ERROR: SERVER_ERROR,
    RESERVED_ERROR_CODES: RESERVED_ERROR_CODES,
    SERVER_ERROR_CODE_RANGE: SERVER_ERROR_CODE_RANGE,
    STANDARD_ERROR_MAP: STANDARD_ERROR_MAP,
    isServerErrorCode: isServerErrorCode,
    isReservedErrorCode: isReservedErrorCode,
    isValidErrorCode: isValidErrorCode,
    getError: getError,
    getErrorByCode: getErrorByCode,
    validateJsonRpcError: validateJsonRpcError,
    parseConnectionError: parseConnectionError,
    __moduleExports: cjs$4,
    isNodeJs: isNodeJs,
    payloadId: payloadId,
    formatJsonRpcRequest: formatJsonRpcRequest,
    formatJsonRpcResult: formatJsonRpcResult,
    formatJsonRpcError: formatJsonRpcError,
    formatErrorMessage: formatErrorMessage,
    isValidRoute: isValidRoute,
    isValidDefaultRoute: isValidDefaultRoute,
    isValidWildcardRoute: isValidWildcardRoute,
    isValidLeadingWildcardRoute: isValidLeadingWildcardRoute,
    isValidTrailingWildcardRoute: isValidTrailingWildcardRoute,
    IEvents: IEvents,
    IJsonRpcConnection: IJsonRpcConnection,
    IBaseJsonRpcProvider: IBaseJsonRpcProvider,
    IJsonRpcProvider: IJsonRpcProvider,
    isHttpUrl: isHttpUrl,
    isWsUrl: isWsUrl,
    isLocalhostUrl: isLocalhostUrl,
    isJsonRpcPayload: isJsonRpcPayload,
    isJsonRpcRequest: isJsonRpcRequest$1,
    isJsonRpcResponse: isJsonRpcResponse,
    isJsonRpcResult: isJsonRpcResult,
    isJsonRpcError: isJsonRpcError,
    isJsonRpcValidationInvalid: isJsonRpcValidationInvalid
  });

  var require$$2 = /*@__PURE__*/getAugmentedNamespace(esm);

  Object.defineProperty(misc, "__esModule", { value: true });
  misc.getRpcUrl = misc.getInfuraRpcUrl = misc.logDeprecationWarning = misc.uuid = misc.payloadId = misc.removeHexLeadingZeros = misc.removeHexPrefix = misc.addHexPrefix = misc.sanitizeHex = void 0;
  const tslib_1$c = require$$0$1;
  const encoding$3 = (0, tslib_1$c.__importStar)(cjs$5);
  const jsonRpcUtils = (0, tslib_1$c.__importStar)(require$$2);
  const constants_1$2 = constants$9;
  function sanitizeHex(hex) {
      return encoding$3.sanitizeHex(hex);
  }
  misc.sanitizeHex = sanitizeHex;
  function addHexPrefix(hex) {
      return encoding$3.addHexPrefix(hex);
  }
  misc.addHexPrefix = addHexPrefix;
  function removeHexPrefix(hex) {
      return encoding$3.removeHexPrefix(hex);
  }
  misc.removeHexPrefix = removeHexPrefix;
  function removeHexLeadingZeros(hex) {
      return encoding$3.removeHexLeadingZeros(encoding$3.addHexPrefix(hex));
  }
  misc.removeHexLeadingZeros = removeHexLeadingZeros;
  misc.payloadId = jsonRpcUtils.payloadId;
  function uuid() {
      const result = ((a, b) => {
          for (b = a = ""; a++ < 36; b += (a * 51) & 52 ? (a ^ 15 ? 8 ^ (Math.random() * (a ^ 20 ? 16 : 4)) : 4).toString(16) : "-") {
          }
          return b;
      })();
      return result;
  }
  misc.uuid = uuid;
  function logDeprecationWarning() {
      console.warn("DEPRECATION WARNING: This WalletConnect client library will be deprecated in favor of @walletconnect/client. Please check docs.walletconnect.org to learn more about this migration!");
  }
  misc.logDeprecationWarning = logDeprecationWarning;
  function getInfuraRpcUrl(chainId, infuraId) {
      let rpcUrl;
      const network = constants_1$2.infuraNetworks[chainId];
      if (network) {
          rpcUrl = `https://${network}.infura.io/v3/${infuraId}`;
      }
      return rpcUrl;
  }
  misc.getInfuraRpcUrl = getInfuraRpcUrl;
  function getRpcUrl(chainId, rpc) {
      let rpcUrl;
      const infuraUrl = getInfuraRpcUrl(chainId, rpc.infuraId);
      if (rpc.custom && rpc.custom[chainId]) {
          rpcUrl = rpc.custom[chainId];
      }
      else if (infuraUrl) {
          rpcUrl = infuraUrl;
      }
      return rpcUrl;
  }
  misc.getRpcUrl = getRpcUrl;

  var validators$1 = {};

  Object.defineProperty(validators$1, "__esModule", { value: true });
  validators$1.isSilentPayload = validators$1.isReservedEvent = validators$1.isInternalEvent = validators$1.isJsonRpcResponseError = validators$1.isJsonRpcResponseSuccess = validators$1.isJsonRpcRequest = validators$1.isJsonRpcSubscription = validators$1.isHexString = validators$1.getEncoding = validators$1.getType = validators$1.isArrayBuffer = validators$1.isTypedArray = validators$1.isBuffer = validators$1.isEmptyArray = validators$1.isEmptyString = void 0;
  const tslib_1$b = require$$0$1;
  const encoding$2 = (0, tslib_1$b.__importStar)(cjs$5);
  const constants_1$1 = constants$9;
  function isEmptyString(value) {
      return value === "" || (typeof value === "string" && value.trim() === "");
  }
  validators$1.isEmptyString = isEmptyString;
  function isEmptyArray(array) {
      return !(array && array.length);
  }
  validators$1.isEmptyArray = isEmptyArray;
  function isBuffer$2(val) {
      return encoding$2.isBuffer(val);
  }
  validators$1.isBuffer = isBuffer$2;
  function isTypedArray$2(val) {
      return encoding$2.isTypedArray(val);
  }
  validators$1.isTypedArray = isTypedArray$2;
  function isArrayBuffer$1(val) {
      return encoding$2.isArrayBuffer(val);
  }
  validators$1.isArrayBuffer = isArrayBuffer$1;
  function getType(val) {
      return encoding$2.getType(val);
  }
  validators$1.getType = getType;
  function getEncoding(val) {
      return encoding$2.getEncoding(val);
  }
  validators$1.getEncoding = getEncoding;
  function isHexString$1(value, length) {
      return encoding$2.isHexString(value, length);
  }
  validators$1.isHexString = isHexString$1;
  function isJsonRpcSubscription(object) {
      return typeof object.params === "object";
  }
  validators$1.isJsonRpcSubscription = isJsonRpcSubscription;
  function isJsonRpcRequest(object) {
      return typeof object.method !== "undefined";
  }
  validators$1.isJsonRpcRequest = isJsonRpcRequest;
  function isJsonRpcResponseSuccess(object) {
      return typeof object.result !== "undefined";
  }
  validators$1.isJsonRpcResponseSuccess = isJsonRpcResponseSuccess;
  function isJsonRpcResponseError(object) {
      return typeof object.error !== "undefined";
  }
  validators$1.isJsonRpcResponseError = isJsonRpcResponseError;
  function isInternalEvent(object) {
      return typeof object.event !== "undefined";
  }
  validators$1.isInternalEvent = isInternalEvent;
  function isReservedEvent(event) {
      return constants_1$1.reservedEvents.includes(event) || event.startsWith("wc_");
  }
  validators$1.isReservedEvent = isReservedEvent;
  function isSilentPayload(request) {
      if (request.method.startsWith("wc_")) {
          return true;
      }
      if (constants_1$1.signingMethods.includes(request.method)) {
          return false;
      }
      return true;
  }
  validators$1.isSilentPayload = isSilentPayload;

  (function (exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.parseTransactionData = exports.parsePersonalSign = exports.isValidAddress = exports.toChecksumAddress = void 0;
  const js_sha3_1 = sha3.exports;
  const encoding_1 = cjs$5;
  const encoding_2 = encoding$5;
  const misc_1 = misc;
  const validators_1 = validators$1;
  function toChecksumAddress(address) {
      address = (0, encoding_1.removeHexPrefix)(address.toLowerCase());
      const hash = (0, encoding_1.removeHexPrefix)((0, js_sha3_1.keccak_256)((0, encoding_2.convertUtf8ToBuffer)(address)));
      let checksum = "";
      for (let i = 0; i < address.length; i++) {
          if (parseInt(hash[i], 16) > 7) {
              checksum += address[i].toUpperCase();
          }
          else {
              checksum += address[i];
          }
      }
      return (0, encoding_1.addHexPrefix)(checksum);
  }
  exports.toChecksumAddress = toChecksumAddress;
  const isValidAddress = (address) => {
      if (!address) {
          return false;
      }
      else if (address.toLowerCase().substring(0, 2) !== "0x") {
          return false;
      }
      else if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {
          return false;
      }
      else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {
          return true;
      }
      else {
          return address === toChecksumAddress(address);
      }
  };
  exports.isValidAddress = isValidAddress;
  function parsePersonalSign(params) {
      if (!(0, validators_1.isEmptyArray)(params) && !(0, validators_1.isHexString)(params[0])) {
          params[0] = (0, encoding_2.convertUtf8ToHex)(params[0]);
      }
      return params;
  }
  exports.parsePersonalSign = parsePersonalSign;
  function parseTransactionData(txData) {
      if (typeof txData.type !== "undefined" && txData.type !== "0")
          return txData;
      if (typeof txData.from === "undefined" || !(0, exports.isValidAddress)(txData.from)) {
          throw new Error(`Transaction object must include a valid 'from' value.`);
      }
      function parseHexValues(value) {
          let result = value;
          if (typeof value === "number" || (typeof value === "string" && !(0, validators_1.isEmptyString)(value))) {
              if (!(0, validators_1.isHexString)(value)) {
                  result = (0, encoding_2.convertNumberToHex)(value);
              }
              else if (typeof value === "string") {
                  result = (0, misc_1.sanitizeHex)(value);
              }
          }
          if (typeof result === "string") {
              result = (0, misc_1.removeHexLeadingZeros)(result);
          }
          return result;
      }
      const txDataRPC = {
          from: (0, misc_1.sanitizeHex)(txData.from),
          to: typeof txData.to === "undefined" ? "" : (0, misc_1.sanitizeHex)(txData.to),
          gasPrice: typeof txData.gasPrice === "undefined" ? "" : parseHexValues(txData.gasPrice),
          gas: typeof txData.gas === "undefined"
              ? typeof txData.gasLimit === "undefined"
                  ? ""
                  : parseHexValues(txData.gasLimit)
              : parseHexValues(txData.gas),
          value: typeof txData.value === "undefined" ? "" : parseHexValues(txData.value),
          nonce: typeof txData.nonce === "undefined" ? "" : parseHexValues(txData.nonce),
          data: typeof txData.data === "undefined" ? "" : (0, misc_1.sanitizeHex)(txData.data) || "0x",
      };
      const prunable = ["gasPrice", "gas", "value", "nonce"];
      Object.keys(txDataRPC).forEach((key) => {
          if (!txDataRPC[key].trim().length && prunable.includes(key)) {
              delete txDataRPC[key];
          }
      });
      return txDataRPC;
  }
  exports.parseTransactionData = parseTransactionData;

  }(ethereum));

  var payload = {};

  Object.defineProperty(payload, "__esModule", { value: true });
  payload.formatRpcError = payload.promisify = void 0;
  const tslib_1$a = require$$0$1;
  function promisify(originalFn, thisArg) {
      const promisifiedFunction = (...callArgs) => (0, tslib_1$a.__awaiter)(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
              const callback = (err, data) => {
                  if (err === null || typeof err === "undefined") {
                      reject(err);
                  }
                  resolve(data);
              };
              originalFn.apply(thisArg, [...callArgs, callback]);
          });
      });
      return promisifiedFunction;
  }
  payload.promisify = promisify;
  function formatRpcError(error) {
      const message = error.message || "Failed or Rejected Request";
      let code = -32000;
      if (error && !error.code) {
          switch (message) {
              case "Parse error":
                  code = -32700;
                  break;
              case "Invalid request":
                  code = -32600;
                  break;
              case "Method not found":
                  code = -32601;
                  break;
              case "Invalid params":
                  code = -32602;
                  break;
              case "Internal error":
                  code = -32603;
                  break;
              default:
                  code = -32000;
                  break;
          }
      }
      const result = {
          code,
          message,
      };
      return result;
  }
  payload.formatRpcError = formatRpcError;

  var session = {};

  var url$2 = {};

  var queryString = {};

  var strictUriEncode = str => encodeURIComponent(str).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);

  var token = '%[a-f0-9]{2}';
  var singleMatcher = new RegExp(token, 'gi');
  var multiMatcher = new RegExp('(' + token + ')+', 'gi');

  function decodeComponents(components, split) {
  	try {
  		// Try to decode the entire string first
  		return decodeURIComponent(components.join(''));
  	} catch (err) {
  		// Do nothing
  	}

  	if (components.length === 1) {
  		return components;
  	}

  	split = split || 1;

  	// Split the array in 2 parts
  	var left = components.slice(0, split);
  	var right = components.slice(split);

  	return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
  }

  function decode$1(input) {
  	try {
  		return decodeURIComponent(input);
  	} catch (err) {
  		var tokens = input.match(singleMatcher);

  		for (var i = 1; i < tokens.length; i++) {
  			input = decodeComponents(tokens, i).join('');

  			tokens = input.match(singleMatcher);
  		}

  		return input;
  	}
  }

  function customDecodeURIComponent(input) {
  	// Keep track of all the replacements and prefill the map with the `BOM`
  	var replaceMap = {
  		'%FE%FF': '\uFFFD\uFFFD',
  		'%FF%FE': '\uFFFD\uFFFD'
  	};

  	var match = multiMatcher.exec(input);
  	while (match) {
  		try {
  			// Decode as big chunks as possible
  			replaceMap[match[0]] = decodeURIComponent(match[0]);
  		} catch (err) {
  			var result = decode$1(match[0]);

  			if (result !== match[0]) {
  				replaceMap[match[0]] = result;
  			}
  		}

  		match = multiMatcher.exec(input);
  	}

  	// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else
  	replaceMap['%C2'] = '\uFFFD';

  	var entries = Object.keys(replaceMap);

  	for (var i = 0; i < entries.length; i++) {
  		// Replace all decoded components
  		var key = entries[i];
  		input = input.replace(new RegExp(key, 'g'), replaceMap[key]);
  	}

  	return input;
  }

  var decodeUriComponent = function (encodedURI) {
  	if (typeof encodedURI !== 'string') {
  		throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');
  	}

  	try {
  		encodedURI = encodedURI.replace(/\+/g, ' ');

  		// Try the built in decoder first
  		return decodeURIComponent(encodedURI);
  	} catch (err) {
  		// Fallback to a more advanced decoder
  		return customDecodeURIComponent(encodedURI);
  	}
  };

  var splitOnFirst = (string, separator) => {
  	if (!(typeof string === 'string' && typeof separator === 'string')) {
  		throw new TypeError('Expected the arguments to be of type `string`');
  	}

  	if (separator === '') {
  		return [string];
  	}

  	const separatorIndex = string.indexOf(separator);

  	if (separatorIndex === -1) {
  		return [string];
  	}

  	return [
  		string.slice(0, separatorIndex),
  		string.slice(separatorIndex + separator.length)
  	];
  };

  (function (exports) {
  const strictUriEncode$1 = strictUriEncode;
  const decodeComponent = decodeUriComponent;
  const splitOnFirst$1 = splitOnFirst;

  const isNullOrUndefined = value => value === null || value === undefined;

  function encoderForArrayFormat(options) {
  	switch (options.arrayFormat) {
  		case 'index':
  			return key => (result, value) => {
  				const index = result.length;

  				if (
  					value === undefined ||
  					(options.skipNull && value === null) ||
  					(options.skipEmptyString && value === '')
  				) {
  					return result;
  				}

  				if (value === null) {
  					return [...result, [encode(key, options), '[', index, ']'].join('')];
  				}

  				return [
  					...result,
  					[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')
  				];
  			};

  		case 'bracket':
  			return key => (result, value) => {
  				if (
  					value === undefined ||
  					(options.skipNull && value === null) ||
  					(options.skipEmptyString && value === '')
  				) {
  					return result;
  				}

  				if (value === null) {
  					return [...result, [encode(key, options), '[]'].join('')];
  				}

  				return [...result, [encode(key, options), '[]=', encode(value, options)].join('')];
  			};

  		case 'comma':
  		case 'separator':
  			return key => (result, value) => {
  				if (value === null || value === undefined || value.length === 0) {
  					return result;
  				}

  				if (result.length === 0) {
  					return [[encode(key, options), '=', encode(value, options)].join('')];
  				}

  				return [[result, encode(value, options)].join(options.arrayFormatSeparator)];
  			};

  		default:
  			return key => (result, value) => {
  				if (
  					value === undefined ||
  					(options.skipNull && value === null) ||
  					(options.skipEmptyString && value === '')
  				) {
  					return result;
  				}

  				if (value === null) {
  					return [...result, encode(key, options)];
  				}

  				return [...result, [encode(key, options), '=', encode(value, options)].join('')];
  			};
  	}
  }

  function parserForArrayFormat(options) {
  	let result;

  	switch (options.arrayFormat) {
  		case 'index':
  			return (key, value, accumulator) => {
  				result = /\[(\d*)\]$/.exec(key);

  				key = key.replace(/\[\d*\]$/, '');

  				if (!result) {
  					accumulator[key] = value;
  					return;
  				}

  				if (accumulator[key] === undefined) {
  					accumulator[key] = {};
  				}

  				accumulator[key][result[1]] = value;
  			};

  		case 'bracket':
  			return (key, value, accumulator) => {
  				result = /(\[\])$/.exec(key);
  				key = key.replace(/\[\]$/, '');

  				if (!result) {
  					accumulator[key] = value;
  					return;
  				}

  				if (accumulator[key] === undefined) {
  					accumulator[key] = [value];
  					return;
  				}

  				accumulator[key] = [].concat(accumulator[key], value);
  			};

  		case 'comma':
  		case 'separator':
  			return (key, value, accumulator) => {
  				const isArray = typeof value === 'string' && value.split('').indexOf(options.arrayFormatSeparator) > -1;
  				const newValue = isArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);
  				accumulator[key] = newValue;
  			};

  		default:
  			return (key, value, accumulator) => {
  				if (accumulator[key] === undefined) {
  					accumulator[key] = value;
  					return;
  				}

  				accumulator[key] = [].concat(accumulator[key], value);
  			};
  	}
  }

  function validateArrayFormatSeparator(value) {
  	if (typeof value !== 'string' || value.length !== 1) {
  		throw new TypeError('arrayFormatSeparator must be single character string');
  	}
  }

  function encode(value, options) {
  	if (options.encode) {
  		return options.strict ? strictUriEncode$1(value) : encodeURIComponent(value);
  	}

  	return value;
  }

  function decode(value, options) {
  	if (options.decode) {
  		return decodeComponent(value);
  	}

  	return value;
  }

  function keysSorter(input) {
  	if (Array.isArray(input)) {
  		return input.sort();
  	}

  	if (typeof input === 'object') {
  		return keysSorter(Object.keys(input))
  			.sort((a, b) => Number(a) - Number(b))
  			.map(key => input[key]);
  	}

  	return input;
  }

  function removeHash(input) {
  	const hashStart = input.indexOf('#');
  	if (hashStart !== -1) {
  		input = input.slice(0, hashStart);
  	}

  	return input;
  }

  function getHash(url) {
  	let hash = '';
  	const hashStart = url.indexOf('#');
  	if (hashStart !== -1) {
  		hash = url.slice(hashStart);
  	}

  	return hash;
  }

  function extract(input) {
  	input = removeHash(input);
  	const queryStart = input.indexOf('?');
  	if (queryStart === -1) {
  		return '';
  	}

  	return input.slice(queryStart + 1);
  }

  function parseValue(value, options) {
  	if (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {
  		value = Number(value);
  	} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {
  		value = value.toLowerCase() === 'true';
  	}

  	return value;
  }

  function parse(input, options) {
  	options = Object.assign({
  		decode: true,
  		sort: true,
  		arrayFormat: 'none',
  		arrayFormatSeparator: ',',
  		parseNumbers: false,
  		parseBooleans: false
  	}, options);

  	validateArrayFormatSeparator(options.arrayFormatSeparator);

  	const formatter = parserForArrayFormat(options);

  	// Create an object with no prototype
  	const ret = Object.create(null);

  	if (typeof input !== 'string') {
  		return ret;
  	}

  	input = input.trim().replace(/^[?#&]/, '');

  	if (!input) {
  		return ret;
  	}

  	for (const param of input.split('&')) {
  		let [key, value] = splitOnFirst$1(options.decode ? param.replace(/\+/g, ' ') : param, '=');

  		// Missing `=` should be `null`:
  		// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
  		value = value === undefined ? null : ['comma', 'separator'].includes(options.arrayFormat) ? value : decode(value, options);
  		formatter(decode(key, options), value, ret);
  	}

  	for (const key of Object.keys(ret)) {
  		const value = ret[key];
  		if (typeof value === 'object' && value !== null) {
  			for (const k of Object.keys(value)) {
  				value[k] = parseValue(value[k], options);
  			}
  		} else {
  			ret[key] = parseValue(value, options);
  		}
  	}

  	if (options.sort === false) {
  		return ret;
  	}

  	return (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {
  		const value = ret[key];
  		if (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {
  			// Sort object keys, not values
  			result[key] = keysSorter(value);
  		} else {
  			result[key] = value;
  		}

  		return result;
  	}, Object.create(null));
  }

  exports.extract = extract;
  exports.parse = parse;

  exports.stringify = (object, options) => {
  	if (!object) {
  		return '';
  	}

  	options = Object.assign({
  		encode: true,
  		strict: true,
  		arrayFormat: 'none',
  		arrayFormatSeparator: ','
  	}, options);

  	validateArrayFormatSeparator(options.arrayFormatSeparator);

  	const shouldFilter = key => (
  		(options.skipNull && isNullOrUndefined(object[key])) ||
  		(options.skipEmptyString && object[key] === '')
  	);

  	const formatter = encoderForArrayFormat(options);

  	const objectCopy = {};

  	for (const key of Object.keys(object)) {
  		if (!shouldFilter(key)) {
  			objectCopy[key] = object[key];
  		}
  	}

  	const keys = Object.keys(objectCopy);

  	if (options.sort !== false) {
  		keys.sort(options.sort);
  	}

  	return keys.map(key => {
  		const value = object[key];

  		if (value === undefined) {
  			return '';
  		}

  		if (value === null) {
  			return encode(key, options);
  		}

  		if (Array.isArray(value)) {
  			return value
  				.reduce(formatter(key), [])
  				.join('&');
  		}

  		return encode(key, options) + '=' + encode(value, options);
  	}).filter(x => x.length > 0).join('&');
  };

  exports.parseUrl = (input, options) => {
  	options = Object.assign({
  		decode: true
  	}, options);

  	const [url, hash] = splitOnFirst$1(input, '#');

  	return Object.assign(
  		{
  			url: url.split('?')[0] || '',
  			query: parse(extract(input), options)
  		},
  		options && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}
  	);
  };

  exports.stringifyUrl = (input, options) => {
  	options = Object.assign({
  		encode: true,
  		strict: true
  	}, options);

  	const url = removeHash(input.url).split('?')[0] || '';
  	const queryFromUrl = exports.extract(input.url);
  	const parsedQueryFromUrl = exports.parse(queryFromUrl, {sort: false});

  	const query = Object.assign(parsedQueryFromUrl, input.query);
  	let queryString = exports.stringify(query, options);
  	if (queryString) {
  		queryString = `?${queryString}`;
  	}

  	let hash = getHash(input.url);
  	if (input.fragmentIdentifier) {
  		hash = `#${encode(input.fragmentIdentifier, options)}`;
  	}

  	return `${url}${queryString}${hash}`;
  };
  }(queryString));

  Object.defineProperty(url$2, "__esModule", { value: true });
  url$2.formatQueryString = url$2.parseQueryString = url$2.appendToQueryString = url$2.getQueryString = void 0;
  const tslib_1$9 = require$$0$1;
  const queryStringUtils = (0, tslib_1$9.__importStar)(queryString);
  function getQueryString(url) {
      const pathEnd = url.indexOf("?") !== -1 ? url.indexOf("?") : undefined;
      const queryString = typeof pathEnd !== "undefined" ? url.substr(pathEnd) : "";
      return queryString;
  }
  url$2.getQueryString = getQueryString;
  function appendToQueryString(queryString, newQueryParams) {
      let queryParams = parseQueryString(queryString);
      queryParams = Object.assign(Object.assign({}, queryParams), newQueryParams);
      queryString = formatQueryString(queryParams);
      return queryString;
  }
  url$2.appendToQueryString = appendToQueryString;
  function parseQueryString(queryString) {
      return queryStringUtils.parse(queryString);
  }
  url$2.parseQueryString = parseQueryString;
  function formatQueryString(queryParams) {
      return queryStringUtils.stringify(queryParams);
  }
  url$2.formatQueryString = formatQueryString;

  Object.defineProperty(session, "__esModule", { value: true });
  session.parseWalletConnectUri = session.isWalletConnectSession = void 0;
  const url_1$1 = url$2;
  function isWalletConnectSession(object) {
      return typeof object.bridge !== "undefined";
  }
  session.isWalletConnectSession = isWalletConnectSession;
  function parseWalletConnectUri(str) {
      const pathStart = str.indexOf(":");
      const pathEnd = str.indexOf("?") !== -1 ? str.indexOf("?") : undefined;
      const protocol = str.substring(0, pathStart);
      const path = str.substring(pathStart + 1, pathEnd);
      function parseRequiredParams(path) {
          const separator = "@";
          const values = path.split(separator);
          const requiredParams = {
              handshakeTopic: values[0],
              version: parseInt(values[1], 10),
          };
          return requiredParams;
      }
      const requiredParams = parseRequiredParams(path);
      const queryString = typeof pathEnd !== "undefined" ? str.substr(pathEnd) : "";
      function parseQueryParams(queryString) {
          const result = (0, url_1$1.parseQueryString)(queryString);
          const parameters = {
              key: result.key || "",
              bridge: result.bridge || "",
          };
          return parameters;
      }
      const queryParams = parseQueryParams(queryString);
      const result = Object.assign(Object.assign({ protocol }, requiredParams), queryParams);
      return result;
  }
  session.parseWalletConnectUri = parseWalletConnectUri;

  (function (exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  const tslib_1 = require$$0$1;
  (0, tslib_1.__exportStar)(cjs$8, exports);
  (0, tslib_1.__exportStar)(constants$9, exports);
  (0, tslib_1.__exportStar)(encoding$5, exports);
  (0, tslib_1.__exportStar)(ethereum, exports);
  (0, tslib_1.__exportStar)(misc, exports);
  (0, tslib_1.__exportStar)(payload, exports);
  (0, tslib_1.__exportStar)(session, exports);
  (0, tslib_1.__exportStar)(url$2, exports);
  (0, tslib_1.__exportStar)(validators$1, exports);

  }(cjs$9));

  var cjs$3 = {};

  var network = {};

  Object.defineProperty(network, "__esModule", { value: true });
  class NetworkMonitor {
      constructor() {
          this._eventEmitters = [];
          if (typeof window !== "undefined" && typeof window.addEventListener !== "undefined") {
              window.addEventListener("online", () => this.trigger("online"));
              window.addEventListener("offline", () => this.trigger("offline"));
          }
      }
      on(event, callback) {
          this._eventEmitters.push({
              event,
              callback,
          });
      }
      trigger(event) {
          let eventEmitters = [];
          if (event) {
              eventEmitters = this._eventEmitters.filter((eventEmitter) => eventEmitter.event === event);
          }
          eventEmitters.forEach((eventEmitter) => {
              eventEmitter.callback();
          });
      }
  }
  network.default = NetworkMonitor;

  var bufferUtil$1 = {exports: {}};

  var constants$8 = {
    BINARY_TYPES: ['nodebuffer', 'arraybuffer', 'fragments'],
    GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',
    kStatusCode: Symbol('status-code'),
    kWebSocket: Symbol('websocket'),
    EMPTY_BUFFER: Buffer.alloc(0),
    NOOP: () => {}
  };

  const { EMPTY_BUFFER: EMPTY_BUFFER$3 } = constants$8;

  /**
   * Merges an array of buffers into a new buffer.
   *
   * @param {Buffer[]} list The array of buffers to concat
   * @param {Number} totalLength The total length of buffers in the list
   * @return {Buffer} The resulting buffer
   * @public
   */
  function concat$1(list, totalLength) {
    if (list.length === 0) return EMPTY_BUFFER$3;
    if (list.length === 1) return list[0];

    const target = Buffer.allocUnsafe(totalLength);
    let offset = 0;

    for (let i = 0; i < list.length; i++) {
      const buf = list[i];
      target.set(buf, offset);
      offset += buf.length;
    }

    if (offset < totalLength) return target.slice(0, offset);

    return target;
  }

  /**
   * Masks a buffer using the given mask.
   *
   * @param {Buffer} source The buffer to mask
   * @param {Buffer} mask The mask to use
   * @param {Buffer} output The buffer where to store the result
   * @param {Number} offset The offset at which to start writing
   * @param {Number} length The number of bytes to mask.
   * @public
   */
  function _mask(source, mask, output, offset, length) {
    for (let i = 0; i < length; i++) {
      output[offset + i] = source[i] ^ mask[i & 3];
    }
  }

  /**
   * Unmasks a buffer using the given mask.
   *
   * @param {Buffer} buffer The buffer to unmask
   * @param {Buffer} mask The mask to use
   * @public
   */
  function _unmask(buffer, mask) {
    // Required until https://github.com/nodejs/node/issues/9006 is resolved.
    const length = buffer.length;
    for (let i = 0; i < length; i++) {
      buffer[i] ^= mask[i & 3];
    }
  }

  /**
   * Converts a buffer to an `ArrayBuffer`.
   *
   * @param {Buffer} buf The buffer to convert
   * @return {ArrayBuffer} Converted buffer
   * @public
   */
  function toArrayBuffer$1(buf) {
    if (buf.byteLength === buf.buffer.byteLength) {
      return buf.buffer;
    }

    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
  }

  /**
   * Converts `data` to a `Buffer`.
   *
   * @param {*} data The data to convert
   * @return {Buffer} The buffer
   * @throws {TypeError}
   * @public
   */
  function toBuffer$3(data) {
    toBuffer$3.readOnly = true;

    if (Buffer.isBuffer(data)) return data;

    let buf;

    if (data instanceof ArrayBuffer) {
      buf = Buffer.from(data);
    } else if (ArrayBuffer.isView(data)) {
      buf = Buffer.from(data.buffer, data.byteOffset, data.byteLength);
    } else {
      buf = Buffer.from(data);
      toBuffer$3.readOnly = false;
    }

    return buf;
  }

  try {
    const bufferUtil = require('bufferutil');
    const bu = bufferUtil.BufferUtil || bufferUtil;

    bufferUtil$1.exports = {
      concat: concat$1,
      mask(source, mask, output, offset, length) {
        if (length < 48) _mask(source, mask, output, offset, length);
        else bu.mask(source, mask, output, offset, length);
      },
      toArrayBuffer: toArrayBuffer$1,
      toBuffer: toBuffer$3,
      unmask(buffer, mask) {
        if (buffer.length < 32) _unmask(buffer, mask);
        else bu.unmask(buffer, mask);
      }
    };
  } catch (e) /* istanbul ignore next */ {
    bufferUtil$1.exports = {
      concat: concat$1,
      mask: _mask,
      toArrayBuffer: toArrayBuffer$1,
      toBuffer: toBuffer$3,
      unmask: _unmask
    };
  }

  const kDone = Symbol('kDone');
  const kRun = Symbol('kRun');

  /**
   * A very simple job queue with adjustable concurrency. Adapted from
   * https://github.com/STRML/async-limiter
   */
  class Limiter$1 {
    /**
     * Creates a new `Limiter`.
     *
     * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed
     *     to run concurrently
     */
    constructor(concurrency) {
      this[kDone] = () => {
        this.pending--;
        this[kRun]();
      };
      this.concurrency = concurrency || Infinity;
      this.jobs = [];
      this.pending = 0;
    }

    /**
     * Adds a job to the queue.
     *
     * @param {Function} job The job to run
     * @public
     */
    add(job) {
      this.jobs.push(job);
      this[kRun]();
    }

    /**
     * Removes a job from the queue and runs it if possible.
     *
     * @private
     */
    [kRun]() {
      if (this.pending === this.concurrency) return;

      if (this.jobs.length) {
        const job = this.jobs.shift();

        this.pending++;
        job(this[kDone]);
      }
    }
  }

  var limiter = Limiter$1;

  const zlib$4 = require$$0__default["default"];

  const bufferUtil = bufferUtil$1.exports;
  const Limiter = limiter;
  const { kStatusCode: kStatusCode$2, NOOP: NOOP$1 } = constants$8;

  const TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);
  const kPerMessageDeflate = Symbol('permessage-deflate');
  const kTotalLength = Symbol('total-length');
  const kCallback = Symbol('callback');
  const kBuffers = Symbol('buffers');
  const kError$1 = Symbol('error');

  //
  // We limit zlib concurrency, which prevents severe memory fragmentation
  // as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913
  // and https://github.com/websockets/ws/issues/1202
  //
  // Intentionally global; it's the global thread pool that's an issue.
  //
  let zlibLimiter;

  /**
   * permessage-deflate implementation.
   */
  class PerMessageDeflate$4 {
    /**
     * Creates a PerMessageDeflate instance.
     *
     * @param {Object} [options] Configuration options
     * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept
     *     disabling of server context takeover
     * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/
     *     acknowledge disabling of client context takeover
     * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the
     *     use of a custom server window size
     * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support
     *     for, or request, a custom client window size
     * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on
     *     deflate
     * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on
     *     inflate
     * @param {Number} [options.threshold=1024] Size (in bytes) below which
     *     messages should not be compressed
     * @param {Number} [options.concurrencyLimit=10] The number of concurrent
     *     calls to zlib
     * @param {Boolean} [isServer=false] Create the instance in either server or
     *     client mode
     * @param {Number} [maxPayload=0] The maximum allowed message length
     */
    constructor(options, isServer, maxPayload) {
      this._maxPayload = maxPayload | 0;
      this._options = options || {};
      this._threshold =
        this._options.threshold !== undefined ? this._options.threshold : 1024;
      this._isServer = !!isServer;
      this._deflate = null;
      this._inflate = null;

      this.params = null;

      if (!zlibLimiter) {
        const concurrency =
          this._options.concurrencyLimit !== undefined
            ? this._options.concurrencyLimit
            : 10;
        zlibLimiter = new Limiter(concurrency);
      }
    }

    /**
     * @type {String}
     */
    static get extensionName() {
      return 'permessage-deflate';
    }

    /**
     * Create an extension negotiation offer.
     *
     * @return {Object} Extension parameters
     * @public
     */
    offer() {
      const params = {};

      if (this._options.serverNoContextTakeover) {
        params.server_no_context_takeover = true;
      }
      if (this._options.clientNoContextTakeover) {
        params.client_no_context_takeover = true;
      }
      if (this._options.serverMaxWindowBits) {
        params.server_max_window_bits = this._options.serverMaxWindowBits;
      }
      if (this._options.clientMaxWindowBits) {
        params.client_max_window_bits = this._options.clientMaxWindowBits;
      } else if (this._options.clientMaxWindowBits == null) {
        params.client_max_window_bits = true;
      }

      return params;
    }

    /**
     * Accept an extension negotiation offer/response.
     *
     * @param {Array} configurations The extension negotiation offers/reponse
     * @return {Object} Accepted configuration
     * @public
     */
    accept(configurations) {
      configurations = this.normalizeParams(configurations);

      this.params = this._isServer
        ? this.acceptAsServer(configurations)
        : this.acceptAsClient(configurations);

      return this.params;
    }

    /**
     * Releases all resources used by the extension.
     *
     * @public
     */
    cleanup() {
      if (this._inflate) {
        this._inflate.close();
        this._inflate = null;
      }

      if (this._deflate) {
        const callback = this._deflate[kCallback];

        this._deflate.close();
        this._deflate = null;

        if (callback) {
          callback(
            new Error(
              'The deflate stream was closed while data was being processed'
            )
          );
        }
      }
    }

    /**
     *  Accept an extension negotiation offer.
     *
     * @param {Array} offers The extension negotiation offers
     * @return {Object} Accepted configuration
     * @private
     */
    acceptAsServer(offers) {
      const opts = this._options;
      const accepted = offers.find((params) => {
        if (
          (opts.serverNoContextTakeover === false &&
            params.server_no_context_takeover) ||
          (params.server_max_window_bits &&
            (opts.serverMaxWindowBits === false ||
              (typeof opts.serverMaxWindowBits === 'number' &&
                opts.serverMaxWindowBits > params.server_max_window_bits))) ||
          (typeof opts.clientMaxWindowBits === 'number' &&
            !params.client_max_window_bits)
        ) {
          return false;
        }

        return true;
      });

      if (!accepted) {
        throw new Error('None of the extension offers can be accepted');
      }

      if (opts.serverNoContextTakeover) {
        accepted.server_no_context_takeover = true;
      }
      if (opts.clientNoContextTakeover) {
        accepted.client_no_context_takeover = true;
      }
      if (typeof opts.serverMaxWindowBits === 'number') {
        accepted.server_max_window_bits = opts.serverMaxWindowBits;
      }
      if (typeof opts.clientMaxWindowBits === 'number') {
        accepted.client_max_window_bits = opts.clientMaxWindowBits;
      } else if (
        accepted.client_max_window_bits === true ||
        opts.clientMaxWindowBits === false
      ) {
        delete accepted.client_max_window_bits;
      }

      return accepted;
    }

    /**
     * Accept the extension negotiation response.
     *
     * @param {Array} response The extension negotiation response
     * @return {Object} Accepted configuration
     * @private
     */
    acceptAsClient(response) {
      const params = response[0];

      if (
        this._options.clientNoContextTakeover === false &&
        params.client_no_context_takeover
      ) {
        throw new Error('Unexpected parameter "client_no_context_takeover"');
      }

      if (!params.client_max_window_bits) {
        if (typeof this._options.clientMaxWindowBits === 'number') {
          params.client_max_window_bits = this._options.clientMaxWindowBits;
        }
      } else if (
        this._options.clientMaxWindowBits === false ||
        (typeof this._options.clientMaxWindowBits === 'number' &&
          params.client_max_window_bits > this._options.clientMaxWindowBits)
      ) {
        throw new Error(
          'Unexpected or invalid parameter "client_max_window_bits"'
        );
      }

      return params;
    }

    /**
     * Normalize parameters.
     *
     * @param {Array} configurations The extension negotiation offers/reponse
     * @return {Array} The offers/response with normalized parameters
     * @private
     */
    normalizeParams(configurations) {
      configurations.forEach((params) => {
        Object.keys(params).forEach((key) => {
          let value = params[key];

          if (value.length > 1) {
            throw new Error(`Parameter "${key}" must have only a single value`);
          }

          value = value[0];

          if (key === 'client_max_window_bits') {
            if (value !== true) {
              const num = +value;
              if (!Number.isInteger(num) || num < 8 || num > 15) {
                throw new TypeError(
                  `Invalid value for parameter "${key}": ${value}`
                );
              }
              value = num;
            } else if (!this._isServer) {
              throw new TypeError(
                `Invalid value for parameter "${key}": ${value}`
              );
            }
          } else if (key === 'server_max_window_bits') {
            const num = +value;
            if (!Number.isInteger(num) || num < 8 || num > 15) {
              throw new TypeError(
                `Invalid value for parameter "${key}": ${value}`
              );
            }
            value = num;
          } else if (
            key === 'client_no_context_takeover' ||
            key === 'server_no_context_takeover'
          ) {
            if (value !== true) {
              throw new TypeError(
                `Invalid value for parameter "${key}": ${value}`
              );
            }
          } else {
            throw new Error(`Unknown parameter "${key}"`);
          }

          params[key] = value;
        });
      });

      return configurations;
    }

    /**
     * Decompress data. Concurrency limited.
     *
     * @param {Buffer} data Compressed data
     * @param {Boolean} fin Specifies whether or not this is the last fragment
     * @param {Function} callback Callback
     * @public
     */
    decompress(data, fin, callback) {
      zlibLimiter.add((done) => {
        this._decompress(data, fin, (err, result) => {
          done();
          callback(err, result);
        });
      });
    }

    /**
     * Compress data. Concurrency limited.
     *
     * @param {Buffer} data Data to compress
     * @param {Boolean} fin Specifies whether or not this is the last fragment
     * @param {Function} callback Callback
     * @public
     */
    compress(data, fin, callback) {
      zlibLimiter.add((done) => {
        this._compress(data, fin, (err, result) => {
          done();
          callback(err, result);
        });
      });
    }

    /**
     * Decompress data.
     *
     * @param {Buffer} data Compressed data
     * @param {Boolean} fin Specifies whether or not this is the last fragment
     * @param {Function} callback Callback
     * @private
     */
    _decompress(data, fin, callback) {
      const endpoint = this._isServer ? 'client' : 'server';

      if (!this._inflate) {
        const key = `${endpoint}_max_window_bits`;
        const windowBits =
          typeof this.params[key] !== 'number'
            ? zlib$4.Z_DEFAULT_WINDOWBITS
            : this.params[key];

        this._inflate = zlib$4.createInflateRaw({
          ...this._options.zlibInflateOptions,
          windowBits
        });
        this._inflate[kPerMessageDeflate] = this;
        this._inflate[kTotalLength] = 0;
        this._inflate[kBuffers] = [];
        this._inflate.on('error', inflateOnError);
        this._inflate.on('data', inflateOnData);
      }

      this._inflate[kCallback] = callback;

      this._inflate.write(data);
      if (fin) this._inflate.write(TRAILER);

      this._inflate.flush(() => {
        const err = this._inflate[kError$1];

        if (err) {
          this._inflate.close();
          this._inflate = null;
          callback(err);
          return;
        }

        const data = bufferUtil.concat(
          this._inflate[kBuffers],
          this._inflate[kTotalLength]
        );

        if (this._inflate._readableState.endEmitted) {
          this._inflate.close();
          this._inflate = null;
        } else {
          this._inflate[kTotalLength] = 0;
          this._inflate[kBuffers] = [];

          if (fin && this.params[`${endpoint}_no_context_takeover`]) {
            this._inflate.reset();
          }
        }

        callback(null, data);
      });
    }

    /**
     * Compress data.
     *
     * @param {Buffer} data Data to compress
     * @param {Boolean} fin Specifies whether or not this is the last fragment
     * @param {Function} callback Callback
     * @private
     */
    _compress(data, fin, callback) {
      const endpoint = this._isServer ? 'server' : 'client';

      if (!this._deflate) {
        const key = `${endpoint}_max_window_bits`;
        const windowBits =
          typeof this.params[key] !== 'number'
            ? zlib$4.Z_DEFAULT_WINDOWBITS
            : this.params[key];

        this._deflate = zlib$4.createDeflateRaw({
          ...this._options.zlibDeflateOptions,
          windowBits
        });

        this._deflate[kTotalLength] = 0;
        this._deflate[kBuffers] = [];

        //
        // An `'error'` event is emitted, only on Node.js < 10.0.0, if the
        // `zlib.DeflateRaw` instance is closed while data is being processed.
        // This can happen if `PerMessageDeflate#cleanup()` is called at the wrong
        // time due to an abnormal WebSocket closure.
        //
        this._deflate.on('error', NOOP$1);
        this._deflate.on('data', deflateOnData);
      }

      this._deflate[kCallback] = callback;

      this._deflate.write(data);
      this._deflate.flush(zlib$4.Z_SYNC_FLUSH, () => {
        if (!this._deflate) {
          //
          // The deflate stream was closed while data was being processed.
          //
          return;
        }

        let data = bufferUtil.concat(
          this._deflate[kBuffers],
          this._deflate[kTotalLength]
        );

        if (fin) data = data.slice(0, data.length - 4);

        //
        // Ensure that the callback will not be called again in
        // `PerMessageDeflate#cleanup()`.
        //
        this._deflate[kCallback] = null;

        this._deflate[kTotalLength] = 0;
        this._deflate[kBuffers] = [];

        if (fin && this.params[`${endpoint}_no_context_takeover`]) {
          this._deflate.reset();
        }

        callback(null, data);
      });
    }
  }

  var permessageDeflate = PerMessageDeflate$4;

  /**
   * The listener of the `zlib.DeflateRaw` stream `'data'` event.
   *
   * @param {Buffer} chunk A chunk of data
   * @private
   */
  function deflateOnData(chunk) {
    this[kBuffers].push(chunk);
    this[kTotalLength] += chunk.length;
  }

  /**
   * The listener of the `zlib.InflateRaw` stream `'data'` event.
   *
   * @param {Buffer} chunk A chunk of data
   * @private
   */
  function inflateOnData(chunk) {
    this[kTotalLength] += chunk.length;

    if (
      this[kPerMessageDeflate]._maxPayload < 1 ||
      this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload
    ) {
      this[kBuffers].push(chunk);
      return;
    }

    this[kError$1] = new RangeError('Max payload size exceeded');
    this[kError$1].code = 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH';
    this[kError$1][kStatusCode$2] = 1009;
    this.removeListener('data', inflateOnData);
    this.reset();
  }

  /**
   * The listener of the `zlib.InflateRaw` stream `'error'` event.
   *
   * @param {Error} err The emitted error
   * @private
   */
  function inflateOnError(err) {
    //
    // There is no need to call `Zlib#close()` as the handle is automatically
    // closed when an error is emitted.
    //
    this[kPerMessageDeflate]._inflate = null;
    err[kStatusCode$2] = 1007;
    this[kCallback](err);
  }

  var validation = {exports: {}};

  /**
   * Checks if a status code is allowed in a close frame.
   *
   * @param {Number} code The status code
   * @return {Boolean} `true` if the status code is valid, else `false`
   * @public
   */
  function isValidStatusCode$2(code) {
    return (
      (code >= 1000 &&
        code <= 1014 &&
        code !== 1004 &&
        code !== 1005 &&
        code !== 1006) ||
      (code >= 3000 && code <= 4999)
    );
  }

  /**
   * Checks if a given buffer contains only correct UTF-8.
   * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by
   * Markus Kuhn.
   *
   * @param {Buffer} buf The buffer to check
   * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`
   * @public
   */
  function _isValidUTF8(buf) {
    const len = buf.length;
    let i = 0;

    while (i < len) {
      if ((buf[i] & 0x80) === 0) {
        // 0xxxxxxx
        i++;
      } else if ((buf[i] & 0xe0) === 0xc0) {
        // 110xxxxx 10xxxxxx
        if (
          i + 1 === len ||
          (buf[i + 1] & 0xc0) !== 0x80 ||
          (buf[i] & 0xfe) === 0xc0 // Overlong
        ) {
          return false;
        }

        i += 2;
      } else if ((buf[i] & 0xf0) === 0xe0) {
        // 1110xxxx 10xxxxxx 10xxxxxx
        if (
          i + 2 >= len ||
          (buf[i + 1] & 0xc0) !== 0x80 ||
          (buf[i + 2] & 0xc0) !== 0x80 ||
          (buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80) || // Overlong
          (buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0) // Surrogate (U+D800 - U+DFFF)
        ) {
          return false;
        }

        i += 3;
      } else if ((buf[i] & 0xf8) === 0xf0) {
        // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
        if (
          i + 3 >= len ||
          (buf[i + 1] & 0xc0) !== 0x80 ||
          (buf[i + 2] & 0xc0) !== 0x80 ||
          (buf[i + 3] & 0xc0) !== 0x80 ||
          (buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80) || // Overlong
          (buf[i] === 0xf4 && buf[i + 1] > 0x8f) ||
          buf[i] > 0xf4 // > U+10FFFF
        ) {
          return false;
        }

        i += 4;
      } else {
        return false;
      }
    }

    return true;
  }

  try {
    let isValidUTF8 = require('utf-8-validate');

    /* istanbul ignore if */
    if (typeof isValidUTF8 === 'object') {
      isValidUTF8 = isValidUTF8.Validation.isValidUTF8; // utf-8-validate@<3.0.0
    }

    validation.exports = {
      isValidStatusCode: isValidStatusCode$2,
      isValidUTF8(buf) {
        return buf.length < 150 ? _isValidUTF8(buf) : isValidUTF8(buf);
      }
    };
  } catch (e) /* istanbul ignore next */ {
    validation.exports = {
      isValidStatusCode: isValidStatusCode$2,
      isValidUTF8: _isValidUTF8
    };
  }

  const { Writable: Writable$2 } = require$$0__default$1["default"];

  const PerMessageDeflate$3 = permessageDeflate;
  const {
    BINARY_TYPES: BINARY_TYPES$1,
    EMPTY_BUFFER: EMPTY_BUFFER$2,
    kStatusCode: kStatusCode$1,
    kWebSocket: kWebSocket$2
  } = constants$8;
  const { concat, toArrayBuffer, unmask } = bufferUtil$1.exports;
  const { isValidStatusCode: isValidStatusCode$1, isValidUTF8 } = validation.exports;

  const GET_INFO = 0;
  const GET_PAYLOAD_LENGTH_16 = 1;
  const GET_PAYLOAD_LENGTH_64 = 2;
  const GET_MASK = 3;
  const GET_DATA = 4;
  const INFLATING = 5;

  /**
   * HyBi Receiver implementation.
   *
   * @extends Writable
   */
  class Receiver$1 extends Writable$2 {
    /**
     * Creates a Receiver instance.
     *
     * @param {String} [binaryType=nodebuffer] The type for binary data
     * @param {Object} [extensions] An object containing the negotiated extensions
     * @param {Boolean} [isServer=false] Specifies whether to operate in client or
     *     server mode
     * @param {Number} [maxPayload=0] The maximum allowed message length
     */
    constructor(binaryType, extensions, isServer, maxPayload) {
      super();

      this._binaryType = binaryType || BINARY_TYPES$1[0];
      this[kWebSocket$2] = undefined;
      this._extensions = extensions || {};
      this._isServer = !!isServer;
      this._maxPayload = maxPayload | 0;

      this._bufferedBytes = 0;
      this._buffers = [];

      this._compressed = false;
      this._payloadLength = 0;
      this._mask = undefined;
      this._fragmented = 0;
      this._masked = false;
      this._fin = false;
      this._opcode = 0;

      this._totalPayloadLength = 0;
      this._messageLength = 0;
      this._fragments = [];

      this._state = GET_INFO;
      this._loop = false;
    }

    /**
     * Implements `Writable.prototype._write()`.
     *
     * @param {Buffer} chunk The chunk of data to write
     * @param {String} encoding The character encoding of `chunk`
     * @param {Function} cb Callback
     * @private
     */
    _write(chunk, encoding, cb) {
      if (this._opcode === 0x08 && this._state == GET_INFO) return cb();

      this._bufferedBytes += chunk.length;
      this._buffers.push(chunk);
      this.startLoop(cb);
    }

    /**
     * Consumes `n` bytes from the buffered data.
     *
     * @param {Number} n The number of bytes to consume
     * @return {Buffer} The consumed bytes
     * @private
     */
    consume(n) {
      this._bufferedBytes -= n;

      if (n === this._buffers[0].length) return this._buffers.shift();

      if (n < this._buffers[0].length) {
        const buf = this._buffers[0];
        this._buffers[0] = buf.slice(n);
        return buf.slice(0, n);
      }

      const dst = Buffer.allocUnsafe(n);

      do {
        const buf = this._buffers[0];
        const offset = dst.length - n;

        if (n >= buf.length) {
          dst.set(this._buffers.shift(), offset);
        } else {
          dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);
          this._buffers[0] = buf.slice(n);
        }

        n -= buf.length;
      } while (n > 0);

      return dst;
    }

    /**
     * Starts the parsing loop.
     *
     * @param {Function} cb Callback
     * @private
     */
    startLoop(cb) {
      let err;
      this._loop = true;

      do {
        switch (this._state) {
          case GET_INFO:
            err = this.getInfo();
            break;
          case GET_PAYLOAD_LENGTH_16:
            err = this.getPayloadLength16();
            break;
          case GET_PAYLOAD_LENGTH_64:
            err = this.getPayloadLength64();
            break;
          case GET_MASK:
            this.getMask();
            break;
          case GET_DATA:
            err = this.getData(cb);
            break;
          default:
            // `INFLATING`
            this._loop = false;
            return;
        }
      } while (this._loop);

      cb(err);
    }

    /**
     * Reads the first two bytes of a frame.
     *
     * @return {(RangeError|undefined)} A possible error
     * @private
     */
    getInfo() {
      if (this._bufferedBytes < 2) {
        this._loop = false;
        return;
      }

      const buf = this.consume(2);

      if ((buf[0] & 0x30) !== 0x00) {
        this._loop = false;
        return error$2(
          RangeError,
          'RSV2 and RSV3 must be clear',
          true,
          1002,
          'WS_ERR_UNEXPECTED_RSV_2_3'
        );
      }

      const compressed = (buf[0] & 0x40) === 0x40;

      if (compressed && !this._extensions[PerMessageDeflate$3.extensionName]) {
        this._loop = false;
        return error$2(
          RangeError,
          'RSV1 must be clear',
          true,
          1002,
          'WS_ERR_UNEXPECTED_RSV_1'
        );
      }

      this._fin = (buf[0] & 0x80) === 0x80;
      this._opcode = buf[0] & 0x0f;
      this._payloadLength = buf[1] & 0x7f;

      if (this._opcode === 0x00) {
        if (compressed) {
          this._loop = false;
          return error$2(
            RangeError,
            'RSV1 must be clear',
            true,
            1002,
            'WS_ERR_UNEXPECTED_RSV_1'
          );
        }

        if (!this._fragmented) {
          this._loop = false;
          return error$2(
            RangeError,
            'invalid opcode 0',
            true,
            1002,
            'WS_ERR_INVALID_OPCODE'
          );
        }

        this._opcode = this._fragmented;
      } else if (this._opcode === 0x01 || this._opcode === 0x02) {
        if (this._fragmented) {
          this._loop = false;
          return error$2(
            RangeError,
            `invalid opcode ${this._opcode}`,
            true,
            1002,
            'WS_ERR_INVALID_OPCODE'
          );
        }

        this._compressed = compressed;
      } else if (this._opcode > 0x07 && this._opcode < 0x0b) {
        if (!this._fin) {
          this._loop = false;
          return error$2(
            RangeError,
            'FIN must be set',
            true,
            1002,
            'WS_ERR_EXPECTED_FIN'
          );
        }

        if (compressed) {
          this._loop = false;
          return error$2(
            RangeError,
            'RSV1 must be clear',
            true,
            1002,
            'WS_ERR_UNEXPECTED_RSV_1'
          );
        }

        if (this._payloadLength > 0x7d) {
          this._loop = false;
          return error$2(
            RangeError,
            `invalid payload length ${this._payloadLength}`,
            true,
            1002,
            'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'
          );
        }
      } else {
        this._loop = false;
        return error$2(
          RangeError,
          `invalid opcode ${this._opcode}`,
          true,
          1002,
          'WS_ERR_INVALID_OPCODE'
        );
      }

      if (!this._fin && !this._fragmented) this._fragmented = this._opcode;
      this._masked = (buf[1] & 0x80) === 0x80;

      if (this._isServer) {
        if (!this._masked) {
          this._loop = false;
          return error$2(
            RangeError,
            'MASK must be set',
            true,
            1002,
            'WS_ERR_EXPECTED_MASK'
          );
        }
      } else if (this._masked) {
        this._loop = false;
        return error$2(
          RangeError,
          'MASK must be clear',
          true,
          1002,
          'WS_ERR_UNEXPECTED_MASK'
        );
      }

      if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;
      else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;
      else return this.haveLength();
    }

    /**
     * Gets extended payload length (7+16).
     *
     * @return {(RangeError|undefined)} A possible error
     * @private
     */
    getPayloadLength16() {
      if (this._bufferedBytes < 2) {
        this._loop = false;
        return;
      }

      this._payloadLength = this.consume(2).readUInt16BE(0);
      return this.haveLength();
    }

    /**
     * Gets extended payload length (7+64).
     *
     * @return {(RangeError|undefined)} A possible error
     * @private
     */
    getPayloadLength64() {
      if (this._bufferedBytes < 8) {
        this._loop = false;
        return;
      }

      const buf = this.consume(8);
      const num = buf.readUInt32BE(0);

      //
      // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned
      // if payload length is greater than this number.
      //
      if (num > Math.pow(2, 53 - 32) - 1) {
        this._loop = false;
        return error$2(
          RangeError,
          'Unsupported WebSocket frame: payload length > 2^53 - 1',
          false,
          1009,
          'WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH'
        );
      }

      this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);
      return this.haveLength();
    }

    /**
     * Payload length has been read.
     *
     * @return {(RangeError|undefined)} A possible error
     * @private
     */
    haveLength() {
      if (this._payloadLength && this._opcode < 0x08) {
        this._totalPayloadLength += this._payloadLength;
        if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {
          this._loop = false;
          return error$2(
            RangeError,
            'Max payload size exceeded',
            false,
            1009,
            'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'
          );
        }
      }

      if (this._masked) this._state = GET_MASK;
      else this._state = GET_DATA;
    }

    /**
     * Reads mask bytes.
     *
     * @private
     */
    getMask() {
      if (this._bufferedBytes < 4) {
        this._loop = false;
        return;
      }

      this._mask = this.consume(4);
      this._state = GET_DATA;
    }

    /**
     * Reads data bytes.
     *
     * @param {Function} cb Callback
     * @return {(Error|RangeError|undefined)} A possible error
     * @private
     */
    getData(cb) {
      let data = EMPTY_BUFFER$2;

      if (this._payloadLength) {
        if (this._bufferedBytes < this._payloadLength) {
          this._loop = false;
          return;
        }

        data = this.consume(this._payloadLength);
        if (this._masked) unmask(data, this._mask);
      }

      if (this._opcode > 0x07) return this.controlMessage(data);

      if (this._compressed) {
        this._state = INFLATING;
        this.decompress(data, cb);
        return;
      }

      if (data.length) {
        //
        // This message is not compressed so its lenght is the sum of the payload
        // length of all fragments.
        //
        this._messageLength = this._totalPayloadLength;
        this._fragments.push(data);
      }

      return this.dataMessage();
    }

    /**
     * Decompresses data.
     *
     * @param {Buffer} data Compressed data
     * @param {Function} cb Callback
     * @private
     */
    decompress(data, cb) {
      const perMessageDeflate = this._extensions[PerMessageDeflate$3.extensionName];

      perMessageDeflate.decompress(data, this._fin, (err, buf) => {
        if (err) return cb(err);

        if (buf.length) {
          this._messageLength += buf.length;
          if (this._messageLength > this._maxPayload && this._maxPayload > 0) {
            return cb(
              error$2(
                RangeError,
                'Max payload size exceeded',
                false,
                1009,
                'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'
              )
            );
          }

          this._fragments.push(buf);
        }

        const er = this.dataMessage();
        if (er) return cb(er);

        this.startLoop(cb);
      });
    }

    /**
     * Handles a data message.
     *
     * @return {(Error|undefined)} A possible error
     * @private
     */
    dataMessage() {
      if (this._fin) {
        const messageLength = this._messageLength;
        const fragments = this._fragments;

        this._totalPayloadLength = 0;
        this._messageLength = 0;
        this._fragmented = 0;
        this._fragments = [];

        if (this._opcode === 2) {
          let data;

          if (this._binaryType === 'nodebuffer') {
            data = concat(fragments, messageLength);
          } else if (this._binaryType === 'arraybuffer') {
            data = toArrayBuffer(concat(fragments, messageLength));
          } else {
            data = fragments;
          }

          this.emit('message', data);
        } else {
          const buf = concat(fragments, messageLength);

          if (!isValidUTF8(buf)) {
            this._loop = false;
            return error$2(
              Error,
              'invalid UTF-8 sequence',
              true,
              1007,
              'WS_ERR_INVALID_UTF8'
            );
          }

          this.emit('message', buf.toString());
        }
      }

      this._state = GET_INFO;
    }

    /**
     * Handles a control message.
     *
     * @param {Buffer} data Data to handle
     * @return {(Error|RangeError|undefined)} A possible error
     * @private
     */
    controlMessage(data) {
      if (this._opcode === 0x08) {
        this._loop = false;

        if (data.length === 0) {
          this.emit('conclude', 1005, '');
          this.end();
        } else if (data.length === 1) {
          return error$2(
            RangeError,
            'invalid payload length 1',
            true,
            1002,
            'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'
          );
        } else {
          const code = data.readUInt16BE(0);

          if (!isValidStatusCode$1(code)) {
            return error$2(
              RangeError,
              `invalid status code ${code}`,
              true,
              1002,
              'WS_ERR_INVALID_CLOSE_CODE'
            );
          }

          const buf = data.slice(2);

          if (!isValidUTF8(buf)) {
            return error$2(
              Error,
              'invalid UTF-8 sequence',
              true,
              1007,
              'WS_ERR_INVALID_UTF8'
            );
          }

          this.emit('conclude', code, buf.toString());
          this.end();
        }
      } else if (this._opcode === 0x09) {
        this.emit('ping', data);
      } else {
        this.emit('pong', data);
      }

      this._state = GET_INFO;
    }
  }

  var receiver = Receiver$1;

  /**
   * Builds an error object.
   *
   * @param {function(new:Error|RangeError)} ErrorCtor The error constructor
   * @param {String} message The error message
   * @param {Boolean} prefix Specifies whether or not to add a default prefix to
   *     `message`
   * @param {Number} statusCode The status code
   * @param {String} errorCode The exposed error code
   * @return {(Error|RangeError)} The error
   * @private
   */
  function error$2(ErrorCtor, message, prefix, statusCode, errorCode) {
    const err = new ErrorCtor(
      prefix ? `Invalid WebSocket frame: ${message}` : message
    );

    Error.captureStackTrace(err, error$2);
    err.code = errorCode;
    err[kStatusCode$1] = statusCode;
    return err;
  }

  /* eslint no-unused-vars: ["error", { "varsIgnorePattern": "^net|tls$" }] */
  const { randomFillSync } = require$$0__default$2["default"];

  const PerMessageDeflate$2 = permessageDeflate;
  const { EMPTY_BUFFER: EMPTY_BUFFER$1 } = constants$8;
  const { isValidStatusCode } = validation.exports;
  const { mask: applyMask, toBuffer: toBuffer$2 } = bufferUtil$1.exports;

  const mask = Buffer.alloc(4);

  /**
   * HyBi Sender implementation.
   */
  class Sender$1 {
    /**
     * Creates a Sender instance.
     *
     * @param {(net.Socket|tls.Socket)} socket The connection socket
     * @param {Object} [extensions] An object containing the negotiated extensions
     */
    constructor(socket, extensions) {
      this._extensions = extensions || {};
      this._socket = socket;

      this._firstFragment = true;
      this._compress = false;

      this._bufferedBytes = 0;
      this._deflating = false;
      this._queue = [];
    }

    /**
     * Frames a piece of data according to the HyBi WebSocket protocol.
     *
     * @param {Buffer} data The data to frame
     * @param {Object} options Options object
     * @param {Number} options.opcode The opcode
     * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be
     *     modified
     * @param {Boolean} [options.fin=false] Specifies whether or not to set the
     *     FIN bit
     * @param {Boolean} [options.mask=false] Specifies whether or not to mask
     *     `data`
     * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the
     *     RSV1 bit
     * @return {Buffer[]} The framed data as a list of `Buffer` instances
     * @public
     */
    static frame(data, options) {
      const merge = options.mask && options.readOnly;
      let offset = options.mask ? 6 : 2;
      let payloadLength = data.length;

      if (data.length >= 65536) {
        offset += 8;
        payloadLength = 127;
      } else if (data.length > 125) {
        offset += 2;
        payloadLength = 126;
      }

      const target = Buffer.allocUnsafe(merge ? data.length + offset : offset);

      target[0] = options.fin ? options.opcode | 0x80 : options.opcode;
      if (options.rsv1) target[0] |= 0x40;

      target[1] = payloadLength;

      if (payloadLength === 126) {
        target.writeUInt16BE(data.length, 2);
      } else if (payloadLength === 127) {
        target.writeUInt32BE(0, 2);
        target.writeUInt32BE(data.length, 6);
      }

      if (!options.mask) return [target, data];

      randomFillSync(mask, 0, 4);

      target[1] |= 0x80;
      target[offset - 4] = mask[0];
      target[offset - 3] = mask[1];
      target[offset - 2] = mask[2];
      target[offset - 1] = mask[3];

      if (merge) {
        applyMask(data, mask, target, offset, data.length);
        return [target];
      }

      applyMask(data, mask, data, 0, data.length);
      return [target, data];
    }

    /**
     * Sends a close message to the other peer.
     *
     * @param {Number} [code] The status code component of the body
     * @param {String} [data] The message component of the body
     * @param {Boolean} [mask=false] Specifies whether or not to mask the message
     * @param {Function} [cb] Callback
     * @public
     */
    close(code, data, mask, cb) {
      let buf;

      if (code === undefined) {
        buf = EMPTY_BUFFER$1;
      } else if (typeof code !== 'number' || !isValidStatusCode(code)) {
        throw new TypeError('First argument must be a valid error code number');
      } else if (data === undefined || data === '') {
        buf = Buffer.allocUnsafe(2);
        buf.writeUInt16BE(code, 0);
      } else {
        const length = Buffer.byteLength(data);

        if (length > 123) {
          throw new RangeError('The message must not be greater than 123 bytes');
        }

        buf = Buffer.allocUnsafe(2 + length);
        buf.writeUInt16BE(code, 0);
        buf.write(data, 2);
      }

      if (this._deflating) {
        this.enqueue([this.doClose, buf, mask, cb]);
      } else {
        this.doClose(buf, mask, cb);
      }
    }

    /**
     * Frames and sends a close message.
     *
     * @param {Buffer} data The message to send
     * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
     * @param {Function} [cb] Callback
     * @private
     */
    doClose(data, mask, cb) {
      this.sendFrame(
        Sender$1.frame(data, {
          fin: true,
          rsv1: false,
          opcode: 0x08,
          mask,
          readOnly: false
        }),
        cb
      );
    }

    /**
     * Sends a ping message to the other peer.
     *
     * @param {*} data The message to send
     * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
     * @param {Function} [cb] Callback
     * @public
     */
    ping(data, mask, cb) {
      const buf = toBuffer$2(data);

      if (buf.length > 125) {
        throw new RangeError('The data size must not be greater than 125 bytes');
      }

      if (this._deflating) {
        this.enqueue([this.doPing, buf, mask, toBuffer$2.readOnly, cb]);
      } else {
        this.doPing(buf, mask, toBuffer$2.readOnly, cb);
      }
    }

    /**
     * Frames and sends a ping message.
     *
     * @param {Buffer} data The message to send
     * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
     * @param {Boolean} [readOnly=false] Specifies whether `data` can be modified
     * @param {Function} [cb] Callback
     * @private
     */
    doPing(data, mask, readOnly, cb) {
      this.sendFrame(
        Sender$1.frame(data, {
          fin: true,
          rsv1: false,
          opcode: 0x09,
          mask,
          readOnly
        }),
        cb
      );
    }

    /**
     * Sends a pong message to the other peer.
     *
     * @param {*} data The message to send
     * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
     * @param {Function} [cb] Callback
     * @public
     */
    pong(data, mask, cb) {
      const buf = toBuffer$2(data);

      if (buf.length > 125) {
        throw new RangeError('The data size must not be greater than 125 bytes');
      }

      if (this._deflating) {
        this.enqueue([this.doPong, buf, mask, toBuffer$2.readOnly, cb]);
      } else {
        this.doPong(buf, mask, toBuffer$2.readOnly, cb);
      }
    }

    /**
     * Frames and sends a pong message.
     *
     * @param {Buffer} data The message to send
     * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
     * @param {Boolean} [readOnly=false] Specifies whether `data` can be modified
     * @param {Function} [cb] Callback
     * @private
     */
    doPong(data, mask, readOnly, cb) {
      this.sendFrame(
        Sender$1.frame(data, {
          fin: true,
          rsv1: false,
          opcode: 0x0a,
          mask,
          readOnly
        }),
        cb
      );
    }

    /**
     * Sends a data message to the other peer.
     *
     * @param {*} data The message to send
     * @param {Object} options Options object
     * @param {Boolean} [options.compress=false] Specifies whether or not to
     *     compress `data`
     * @param {Boolean} [options.binary=false] Specifies whether `data` is binary
     *     or text
     * @param {Boolean} [options.fin=false] Specifies whether the fragment is the
     *     last one
     * @param {Boolean} [options.mask=false] Specifies whether or not to mask
     *     `data`
     * @param {Function} [cb] Callback
     * @public
     */
    send(data, options, cb) {
      const buf = toBuffer$2(data);
      const perMessageDeflate = this._extensions[PerMessageDeflate$2.extensionName];
      let opcode = options.binary ? 2 : 1;
      let rsv1 = options.compress;

      if (this._firstFragment) {
        this._firstFragment = false;
        if (rsv1 && perMessageDeflate) {
          rsv1 = buf.length >= perMessageDeflate._threshold;
        }
        this._compress = rsv1;
      } else {
        rsv1 = false;
        opcode = 0;
      }

      if (options.fin) this._firstFragment = true;

      if (perMessageDeflate) {
        const opts = {
          fin: options.fin,
          rsv1,
          opcode,
          mask: options.mask,
          readOnly: toBuffer$2.readOnly
        };

        if (this._deflating) {
          this.enqueue([this.dispatch, buf, this._compress, opts, cb]);
        } else {
          this.dispatch(buf, this._compress, opts, cb);
        }
      } else {
        this.sendFrame(
          Sender$1.frame(buf, {
            fin: options.fin,
            rsv1: false,
            opcode,
            mask: options.mask,
            readOnly: toBuffer$2.readOnly
          }),
          cb
        );
      }
    }

    /**
     * Dispatches a data message.
     *
     * @param {Buffer} data The message to send
     * @param {Boolean} [compress=false] Specifies whether or not to compress
     *     `data`
     * @param {Object} options Options object
     * @param {Number} options.opcode The opcode
     * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be
     *     modified
     * @param {Boolean} [options.fin=false] Specifies whether or not to set the
     *     FIN bit
     * @param {Boolean} [options.mask=false] Specifies whether or not to mask
     *     `data`
     * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the
     *     RSV1 bit
     * @param {Function} [cb] Callback
     * @private
     */
    dispatch(data, compress, options, cb) {
      if (!compress) {
        this.sendFrame(Sender$1.frame(data, options), cb);
        return;
      }

      const perMessageDeflate = this._extensions[PerMessageDeflate$2.extensionName];

      this._bufferedBytes += data.length;
      this._deflating = true;
      perMessageDeflate.compress(data, options.fin, (_, buf) => {
        if (this._socket.destroyed) {
          const err = new Error(
            'The socket was closed while data was being compressed'
          );

          if (typeof cb === 'function') cb(err);

          for (let i = 0; i < this._queue.length; i++) {
            const callback = this._queue[i][4];

            if (typeof callback === 'function') callback(err);
          }

          return;
        }

        this._bufferedBytes -= data.length;
        this._deflating = false;
        options.readOnly = false;
        this.sendFrame(Sender$1.frame(buf, options), cb);
        this.dequeue();
      });
    }

    /**
     * Executes queued send operations.
     *
     * @private
     */
    dequeue() {
      while (!this._deflating && this._queue.length) {
        const params = this._queue.shift();

        this._bufferedBytes -= params[1].length;
        Reflect.apply(params[0], this, params.slice(1));
      }
    }

    /**
     * Enqueues a send operation.
     *
     * @param {Array} params Send operation parameters.
     * @private
     */
    enqueue(params) {
      this._bufferedBytes += params[1].length;
      this._queue.push(params);
    }

    /**
     * Sends a frame.
     *
     * @param {Buffer[]} list The frame to send
     * @param {Function} [cb] Callback
     * @private
     */
    sendFrame(list, cb) {
      if (list.length === 2) {
        this._socket.cork();
        this._socket.write(list[0]);
        this._socket.write(list[1], cb);
        this._socket.uncork();
      } else {
        this._socket.write(list[0], cb);
      }
    }
  }

  var sender = Sender$1;

  /**
   * Class representing an event.
   *
   * @private
   */
  class Event {
    /**
     * Create a new `Event`.
     *
     * @param {String} type The name of the event
     * @param {Object} target A reference to the target to which the event was
     *     dispatched
     */
    constructor(type, target) {
      this.target = target;
      this.type = type;
    }
  }

  /**
   * Class representing a message event.
   *
   * @extends Event
   * @private
   */
  class MessageEvent extends Event {
    /**
     * Create a new `MessageEvent`.
     *
     * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data
     * @param {WebSocket} target A reference to the target to which the event was
     *     dispatched
     */
    constructor(data, target) {
      super('message', target);

      this.data = data;
    }
  }

  /**
   * Class representing a close event.
   *
   * @extends Event
   * @private
   */
  class CloseEvent extends Event {
    /**
     * Create a new `CloseEvent`.
     *
     * @param {Number} code The status code explaining why the connection is being
     *     closed
     * @param {String} reason A human-readable string explaining why the
     *     connection is closing
     * @param {WebSocket} target A reference to the target to which the event was
     *     dispatched
     */
    constructor(code, reason, target) {
      super('close', target);

      this.wasClean = target._closeFrameReceived && target._closeFrameSent;
      this.reason = reason;
      this.code = code;
    }
  }

  /**
   * Class representing an open event.
   *
   * @extends Event
   * @private
   */
  class OpenEvent extends Event {
    /**
     * Create a new `OpenEvent`.
     *
     * @param {WebSocket} target A reference to the target to which the event was
     *     dispatched
     */
    constructor(target) {
      super('open', target);
    }
  }

  /**
   * Class representing an error event.
   *
   * @extends Event
   * @private
   */
  class ErrorEvent extends Event {
    /**
     * Create a new `ErrorEvent`.
     *
     * @param {Object} error The error that generated this event
     * @param {WebSocket} target A reference to the target to which the event was
     *     dispatched
     */
    constructor(error, target) {
      super('error', target);

      this.message = error.message;
      this.error = error;
    }
  }

  /**
   * This provides methods for emulating the `EventTarget` interface. It's not
   * meant to be used directly.
   *
   * @mixin
   */
  const EventTarget = {
    /**
     * Register an event listener.
     *
     * @param {String} type A string representing the event type to listen for
     * @param {Function} listener The listener to add
     * @param {Object} [options] An options object specifies characteristics about
     *     the event listener
     * @param {Boolean} [options.once=false] A `Boolean`` indicating that the
     *     listener should be invoked at most once after being added. If `true`,
     *     the listener would be automatically removed when invoked.
     * @public
     */
    addEventListener(type, listener, options) {
      if (typeof listener !== 'function') return;

      function onMessage(data) {
        listener.call(this, new MessageEvent(data, this));
      }

      function onClose(code, message) {
        listener.call(this, new CloseEvent(code, message, this));
      }

      function onError(error) {
        listener.call(this, new ErrorEvent(error, this));
      }

      function onOpen() {
        listener.call(this, new OpenEvent(this));
      }

      const method = options && options.once ? 'once' : 'on';

      if (type === 'message') {
        onMessage._listener = listener;
        this[method](type, onMessage);
      } else if (type === 'close') {
        onClose._listener = listener;
        this[method](type, onClose);
      } else if (type === 'error') {
        onError._listener = listener;
        this[method](type, onError);
      } else if (type === 'open') {
        onOpen._listener = listener;
        this[method](type, onOpen);
      } else {
        this[method](type, listener);
      }
    },

    /**
     * Remove an event listener.
     *
     * @param {String} type A string representing the event type to remove
     * @param {Function} listener The listener to remove
     * @public
     */
    removeEventListener(type, listener) {
      const listeners = this.listeners(type);

      for (let i = 0; i < listeners.length; i++) {
        if (listeners[i] === listener || listeners[i]._listener === listener) {
          this.removeListener(type, listeners[i]);
        }
      }
    }
  };

  var eventTarget = EventTarget;

  //
  // Allowed token characters:
  //
  // '!', '#', '$', '%', '&', ''', '*', '+', '-',
  // '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'
  //
  // tokenChars[32] === 0 // ' '
  // tokenChars[33] === 1 // '!'
  // tokenChars[34] === 0 // '"'
  // ...
  //
  // prettier-ignore
  const tokenChars = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31
    0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, // 32 - 47
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 80 - 95
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127
  ];

  /**
   * Adds an offer to the map of extension offers or a parameter to the map of
   * parameters.
   *
   * @param {Object} dest The map of extension offers or parameters
   * @param {String} name The extension or parameter name
   * @param {(Object|Boolean|String)} elem The extension parameters or the
   *     parameter value
   * @private
   */
  function push(dest, name, elem) {
    if (dest[name] === undefined) dest[name] = [elem];
    else dest[name].push(elem);
  }

  /**
   * Parses the `Sec-WebSocket-Extensions` header into an object.
   *
   * @param {String} header The field value of the header
   * @return {Object} The parsed object
   * @public
   */
  function parse$4(header) {
    const offers = Object.create(null);

    if (header === undefined || header === '') return offers;

    let params = Object.create(null);
    let mustUnescape = false;
    let isEscaping = false;
    let inQuotes = false;
    let extensionName;
    let paramName;
    let start = -1;
    let end = -1;
    let i = 0;

    for (; i < header.length; i++) {
      const code = header.charCodeAt(i);

      if (extensionName === undefined) {
        if (end === -1 && tokenChars[code] === 1) {
          if (start === -1) start = i;
        } else if (code === 0x20 /* ' ' */ || code === 0x09 /* '\t' */) {
          if (end === -1 && start !== -1) end = i;
        } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {
          if (start === -1) {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }

          if (end === -1) end = i;
          const name = header.slice(start, end);
          if (code === 0x2c) {
            push(offers, name, params);
            params = Object.create(null);
          } else {
            extensionName = name;
          }

          start = end = -1;
        } else {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
      } else if (paramName === undefined) {
        if (end === -1 && tokenChars[code] === 1) {
          if (start === -1) start = i;
        } else if (code === 0x20 || code === 0x09) {
          if (end === -1 && start !== -1) end = i;
        } else if (code === 0x3b || code === 0x2c) {
          if (start === -1) {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }

          if (end === -1) end = i;
          push(params, header.slice(start, end), true);
          if (code === 0x2c) {
            push(offers, extensionName, params);
            params = Object.create(null);
            extensionName = undefined;
          }

          start = end = -1;
        } else if (code === 0x3d /* '=' */ && start !== -1 && end === -1) {
          paramName = header.slice(start, i);
          start = end = -1;
        } else {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
      } else {
        //
        // The value of a quoted-string after unescaping must conform to the
        // token ABNF, so only token characters are valid.
        // Ref: https://tools.ietf.org/html/rfc6455#section-9.1
        //
        if (isEscaping) {
          if (tokenChars[code] !== 1) {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
          if (start === -1) start = i;
          else if (!mustUnescape) mustUnescape = true;
          isEscaping = false;
        } else if (inQuotes) {
          if (tokenChars[code] === 1) {
            if (start === -1) start = i;
          } else if (code === 0x22 /* '"' */ && start !== -1) {
            inQuotes = false;
            end = i;
          } else if (code === 0x5c /* '\' */) {
            isEscaping = true;
          } else {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
        } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {
          inQuotes = true;
        } else if (end === -1 && tokenChars[code] === 1) {
          if (start === -1) start = i;
        } else if (start !== -1 && (code === 0x20 || code === 0x09)) {
          if (end === -1) end = i;
        } else if (code === 0x3b || code === 0x2c) {
          if (start === -1) {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }

          if (end === -1) end = i;
          let value = header.slice(start, end);
          if (mustUnescape) {
            value = value.replace(/\\/g, '');
            mustUnescape = false;
          }
          push(params, paramName, value);
          if (code === 0x2c) {
            push(offers, extensionName, params);
            params = Object.create(null);
            extensionName = undefined;
          }

          paramName = undefined;
          start = end = -1;
        } else {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
      }
    }

    if (start === -1 || inQuotes) {
      throw new SyntaxError('Unexpected end of input');
    }

    if (end === -1) end = i;
    const token = header.slice(start, end);
    if (extensionName === undefined) {
      push(offers, token, params);
    } else {
      if (paramName === undefined) {
        push(params, token, true);
      } else if (mustUnescape) {
        push(params, paramName, token.replace(/\\/g, ''));
      } else {
        push(params, paramName, token);
      }
      push(offers, extensionName, params);
    }

    return offers;
  }

  /**
   * Builds the `Sec-WebSocket-Extensions` header field value.
   *
   * @param {Object} extensions The map of extensions and parameters to format
   * @return {String} A string representing the given object
   * @public
   */
  function format$3(extensions) {
    return Object.keys(extensions)
      .map((extension) => {
        let configurations = extensions[extension];
        if (!Array.isArray(configurations)) configurations = [configurations];
        return configurations
          .map((params) => {
            return [extension]
              .concat(
                Object.keys(params).map((k) => {
                  let values = params[k];
                  if (!Array.isArray(values)) values = [values];
                  return values
                    .map((v) => (v === true ? k : `${k}=${v}`))
                    .join('; ');
                })
              )
              .join('; ');
          })
          .join(', ');
      })
      .join(', ');
  }

  var extension = { format: format$3, parse: parse$4 };

  const EventEmitter$5 = require$$0__default$3["default"];
  const https$1 = require$$1__default["default"];
  const http$2 = require$$2__default["default"];
  const net = require$$3__default["default"];
  const tls = require$$4__default["default"];
  const { randomBytes: randomBytes$1, createHash: createHash$2 } = require$$0__default$2["default"];
  const { URL } = require$$6__default["default"];

  const PerMessageDeflate$1 = permessageDeflate;
  const Receiver = receiver;
  const Sender = sender;
  const {
    BINARY_TYPES,
    EMPTY_BUFFER,
    GUID: GUID$1,
    kStatusCode,
    kWebSocket: kWebSocket$1,
    NOOP
  } = constants$8;
  const { addEventListener, removeEventListener } = eventTarget;
  const { format: format$2, parse: parse$3 } = extension;
  const { toBuffer: toBuffer$1 } = bufferUtil$1.exports;

  const readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];
  const protocolVersions = [8, 13];
  const closeTimeout = 30 * 1000;

  /**
   * Class representing a WebSocket.
   *
   * @extends EventEmitter
   */
  class WebSocket$2 extends EventEmitter$5 {
    /**
     * Create a new `WebSocket`.
     *
     * @param {(String|URL)} address The URL to which to connect
     * @param {(String|String[])} [protocols] The subprotocols
     * @param {Object} [options] Connection options
     */
    constructor(address, protocols, options) {
      super();

      this._binaryType = BINARY_TYPES[0];
      this._closeCode = 1006;
      this._closeFrameReceived = false;
      this._closeFrameSent = false;
      this._closeMessage = '';
      this._closeTimer = null;
      this._extensions = {};
      this._protocol = '';
      this._readyState = WebSocket$2.CONNECTING;
      this._receiver = null;
      this._sender = null;
      this._socket = null;

      if (address !== null) {
        this._bufferedAmount = 0;
        this._isServer = false;
        this._redirects = 0;

        if (Array.isArray(protocols)) {
          protocols = protocols.join(', ');
        } else if (typeof protocols === 'object' && protocols !== null) {
          options = protocols;
          protocols = undefined;
        }

        initAsClient(this, address, protocols, options);
      } else {
        this._isServer = true;
      }
    }

    /**
     * This deviates from the WHATWG interface since ws doesn't support the
     * required default "blob" type (instead we define a custom "nodebuffer"
     * type).
     *
     * @type {String}
     */
    get binaryType() {
      return this._binaryType;
    }

    set binaryType(type) {
      if (!BINARY_TYPES.includes(type)) return;

      this._binaryType = type;

      //
      // Allow to change `binaryType` on the fly.
      //
      if (this._receiver) this._receiver._binaryType = type;
    }

    /**
     * @type {Number}
     */
    get bufferedAmount() {
      if (!this._socket) return this._bufferedAmount;

      return this._socket._writableState.length + this._sender._bufferedBytes;
    }

    /**
     * @type {String}
     */
    get extensions() {
      return Object.keys(this._extensions).join();
    }

    /**
     * @type {Function}
     */
    /* istanbul ignore next */
    get onclose() {
      return undefined;
    }

    /* istanbul ignore next */
    set onclose(listener) {}

    /**
     * @type {Function}
     */
    /* istanbul ignore next */
    get onerror() {
      return undefined;
    }

    /* istanbul ignore next */
    set onerror(listener) {}

    /**
     * @type {Function}
     */
    /* istanbul ignore next */
    get onopen() {
      return undefined;
    }

    /* istanbul ignore next */
    set onopen(listener) {}

    /**
     * @type {Function}
     */
    /* istanbul ignore next */
    get onmessage() {
      return undefined;
    }

    /* istanbul ignore next */
    set onmessage(listener) {}

    /**
     * @type {String}
     */
    get protocol() {
      return this._protocol;
    }

    /**
     * @type {Number}
     */
    get readyState() {
      return this._readyState;
    }

    /**
     * @type {String}
     */
    get url() {
      return this._url;
    }

    /**
     * Set up the socket and the internal resources.
     *
     * @param {(net.Socket|tls.Socket)} socket The network socket between the
     *     server and client
     * @param {Buffer} head The first packet of the upgraded stream
     * @param {Number} [maxPayload=0] The maximum allowed message size
     * @private
     */
    setSocket(socket, head, maxPayload) {
      const receiver = new Receiver(
        this.binaryType,
        this._extensions,
        this._isServer,
        maxPayload
      );

      this._sender = new Sender(socket, this._extensions);
      this._receiver = receiver;
      this._socket = socket;

      receiver[kWebSocket$1] = this;
      socket[kWebSocket$1] = this;

      receiver.on('conclude', receiverOnConclude);
      receiver.on('drain', receiverOnDrain);
      receiver.on('error', receiverOnError);
      receiver.on('message', receiverOnMessage);
      receiver.on('ping', receiverOnPing);
      receiver.on('pong', receiverOnPong);

      socket.setTimeout(0);
      socket.setNoDelay();

      if (head.length > 0) socket.unshift(head);

      socket.on('close', socketOnClose);
      socket.on('data', socketOnData);
      socket.on('end', socketOnEnd);
      socket.on('error', socketOnError$1);

      this._readyState = WebSocket$2.OPEN;
      this.emit('open');
    }

    /**
     * Emit the `'close'` event.
     *
     * @private
     */
    emitClose() {
      if (!this._socket) {
        this._readyState = WebSocket$2.CLOSED;
        this.emit('close', this._closeCode, this._closeMessage);
        return;
      }

      if (this._extensions[PerMessageDeflate$1.extensionName]) {
        this._extensions[PerMessageDeflate$1.extensionName].cleanup();
      }

      this._receiver.removeAllListeners();
      this._readyState = WebSocket$2.CLOSED;
      this.emit('close', this._closeCode, this._closeMessage);
    }

    /**
     * Start a closing handshake.
     *
     *          +----------+   +-----------+   +----------+
     *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -
     *    |     +----------+   +-----------+   +----------+     |
     *          +----------+   +-----------+         |
     * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING
     *          +----------+   +-----------+   |
     *    |           |                        |   +---+        |
     *                +------------------------+-->|fin| - - - -
     *    |         +---+                      |   +---+
     *     - - - - -|fin|<---------------------+
     *              +---+
     *
     * @param {Number} [code] Status code explaining why the connection is closing
     * @param {String} [data] A string explaining why the connection is closing
     * @public
     */
    close(code, data) {
      if (this.readyState === WebSocket$2.CLOSED) return;
      if (this.readyState === WebSocket$2.CONNECTING) {
        const msg = 'WebSocket was closed before the connection was established';
        return abortHandshake$1(this, this._req, msg);
      }

      if (this.readyState === WebSocket$2.CLOSING) {
        if (
          this._closeFrameSent &&
          (this._closeFrameReceived || this._receiver._writableState.errorEmitted)
        ) {
          this._socket.end();
        }

        return;
      }

      this._readyState = WebSocket$2.CLOSING;
      this._sender.close(code, data, !this._isServer, (err) => {
        //
        // This error is handled by the `'error'` listener on the socket. We only
        // want to know if the close frame has been sent here.
        //
        if (err) return;

        this._closeFrameSent = true;

        if (
          this._closeFrameReceived ||
          this._receiver._writableState.errorEmitted
        ) {
          this._socket.end();
        }
      });

      //
      // Specify a timeout for the closing handshake to complete.
      //
      this._closeTimer = setTimeout(
        this._socket.destroy.bind(this._socket),
        closeTimeout
      );
    }

    /**
     * Send a ping.
     *
     * @param {*} [data] The data to send
     * @param {Boolean} [mask] Indicates whether or not to mask `data`
     * @param {Function} [cb] Callback which is executed when the ping is sent
     * @public
     */
    ping(data, mask, cb) {
      if (this.readyState === WebSocket$2.CONNECTING) {
        throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
      }

      if (typeof data === 'function') {
        cb = data;
        data = mask = undefined;
      } else if (typeof mask === 'function') {
        cb = mask;
        mask = undefined;
      }

      if (typeof data === 'number') data = data.toString();

      if (this.readyState !== WebSocket$2.OPEN) {
        sendAfterClose(this, data, cb);
        return;
      }

      if (mask === undefined) mask = !this._isServer;
      this._sender.ping(data || EMPTY_BUFFER, mask, cb);
    }

    /**
     * Send a pong.
     *
     * @param {*} [data] The data to send
     * @param {Boolean} [mask] Indicates whether or not to mask `data`
     * @param {Function} [cb] Callback which is executed when the pong is sent
     * @public
     */
    pong(data, mask, cb) {
      if (this.readyState === WebSocket$2.CONNECTING) {
        throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
      }

      if (typeof data === 'function') {
        cb = data;
        data = mask = undefined;
      } else if (typeof mask === 'function') {
        cb = mask;
        mask = undefined;
      }

      if (typeof data === 'number') data = data.toString();

      if (this.readyState !== WebSocket$2.OPEN) {
        sendAfterClose(this, data, cb);
        return;
      }

      if (mask === undefined) mask = !this._isServer;
      this._sender.pong(data || EMPTY_BUFFER, mask, cb);
    }

    /**
     * Send a data message.
     *
     * @param {*} data The message to send
     * @param {Object} [options] Options object
     * @param {Boolean} [options.compress] Specifies whether or not to compress
     *     `data`
     * @param {Boolean} [options.binary] Specifies whether `data` is binary or
     *     text
     * @param {Boolean} [options.fin=true] Specifies whether the fragment is the
     *     last one
     * @param {Boolean} [options.mask] Specifies whether or not to mask `data`
     * @param {Function} [cb] Callback which is executed when data is written out
     * @public
     */
    send(data, options, cb) {
      if (this.readyState === WebSocket$2.CONNECTING) {
        throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
      }

      if (typeof options === 'function') {
        cb = options;
        options = {};
      }

      if (typeof data === 'number') data = data.toString();

      if (this.readyState !== WebSocket$2.OPEN) {
        sendAfterClose(this, data, cb);
        return;
      }

      const opts = {
        binary: typeof data !== 'string',
        mask: !this._isServer,
        compress: true,
        fin: true,
        ...options
      };

      if (!this._extensions[PerMessageDeflate$1.extensionName]) {
        opts.compress = false;
      }

      this._sender.send(data || EMPTY_BUFFER, opts, cb);
    }

    /**
     * Forcibly close the connection.
     *
     * @public
     */
    terminate() {
      if (this.readyState === WebSocket$2.CLOSED) return;
      if (this.readyState === WebSocket$2.CONNECTING) {
        const msg = 'WebSocket was closed before the connection was established';
        return abortHandshake$1(this, this._req, msg);
      }

      if (this._socket) {
        this._readyState = WebSocket$2.CLOSING;
        this._socket.destroy();
      }
    }
  }

  /**
   * @constant {Number} CONNECTING
   * @memberof WebSocket
   */
  Object.defineProperty(WebSocket$2, 'CONNECTING', {
    enumerable: true,
    value: readyStates.indexOf('CONNECTING')
  });

  /**
   * @constant {Number} CONNECTING
   * @memberof WebSocket.prototype
   */
  Object.defineProperty(WebSocket$2.prototype, 'CONNECTING', {
    enumerable: true,
    value: readyStates.indexOf('CONNECTING')
  });

  /**
   * @constant {Number} OPEN
   * @memberof WebSocket
   */
  Object.defineProperty(WebSocket$2, 'OPEN', {
    enumerable: true,
    value: readyStates.indexOf('OPEN')
  });

  /**
   * @constant {Number} OPEN
   * @memberof WebSocket.prototype
   */
  Object.defineProperty(WebSocket$2.prototype, 'OPEN', {
    enumerable: true,
    value: readyStates.indexOf('OPEN')
  });

  /**
   * @constant {Number} CLOSING
   * @memberof WebSocket
   */
  Object.defineProperty(WebSocket$2, 'CLOSING', {
    enumerable: true,
    value: readyStates.indexOf('CLOSING')
  });

  /**
   * @constant {Number} CLOSING
   * @memberof WebSocket.prototype
   */
  Object.defineProperty(WebSocket$2.prototype, 'CLOSING', {
    enumerable: true,
    value: readyStates.indexOf('CLOSING')
  });

  /**
   * @constant {Number} CLOSED
   * @memberof WebSocket
   */
  Object.defineProperty(WebSocket$2, 'CLOSED', {
    enumerable: true,
    value: readyStates.indexOf('CLOSED')
  });

  /**
   * @constant {Number} CLOSED
   * @memberof WebSocket.prototype
   */
  Object.defineProperty(WebSocket$2.prototype, 'CLOSED', {
    enumerable: true,
    value: readyStates.indexOf('CLOSED')
  });

  [
    'binaryType',
    'bufferedAmount',
    'extensions',
    'protocol',
    'readyState',
    'url'
  ].forEach((property) => {
    Object.defineProperty(WebSocket$2.prototype, property, { enumerable: true });
  });

  //
  // Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.
  // See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface
  //
  ['open', 'error', 'close', 'message'].forEach((method) => {
    Object.defineProperty(WebSocket$2.prototype, `on${method}`, {
      enumerable: true,
      get() {
        const listeners = this.listeners(method);
        for (let i = 0; i < listeners.length; i++) {
          if (listeners[i]._listener) return listeners[i]._listener;
        }

        return undefined;
      },
      set(listener) {
        const listeners = this.listeners(method);
        for (let i = 0; i < listeners.length; i++) {
          //
          // Remove only the listeners added via `addEventListener`.
          //
          if (listeners[i]._listener) this.removeListener(method, listeners[i]);
        }
        this.addEventListener(method, listener);
      }
    });
  });

  WebSocket$2.prototype.addEventListener = addEventListener;
  WebSocket$2.prototype.removeEventListener = removeEventListener;

  var websocket = WebSocket$2;

  /**
   * Initialize a WebSocket client.
   *
   * @param {WebSocket} websocket The client to initialize
   * @param {(String|URL)} address The URL to which to connect
   * @param {String} [protocols] The subprotocols
   * @param {Object} [options] Connection options
   * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable
   *     permessage-deflate
   * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the
   *     handshake request
   * @param {Number} [options.protocolVersion=13] Value of the
   *     `Sec-WebSocket-Version` header
   * @param {String} [options.origin] Value of the `Origin` or
   *     `Sec-WebSocket-Origin` header
   * @param {Number} [options.maxPayload=104857600] The maximum allowed message
   *     size
   * @param {Boolean} [options.followRedirects=false] Whether or not to follow
   *     redirects
   * @param {Number} [options.maxRedirects=10] The maximum number of redirects
   *     allowed
   * @private
   */
  function initAsClient(websocket, address, protocols, options) {
    const opts = {
      protocolVersion: protocolVersions[1],
      maxPayload: 100 * 1024 * 1024,
      perMessageDeflate: true,
      followRedirects: false,
      maxRedirects: 10,
      ...options,
      createConnection: undefined,
      socketPath: undefined,
      hostname: undefined,
      protocol: undefined,
      timeout: undefined,
      method: undefined,
      host: undefined,
      path: undefined,
      port: undefined
    };

    if (!protocolVersions.includes(opts.protocolVersion)) {
      throw new RangeError(
        `Unsupported protocol version: ${opts.protocolVersion} ` +
          `(supported versions: ${protocolVersions.join(', ')})`
      );
    }

    let parsedUrl;

    if (address instanceof URL) {
      parsedUrl = address;
      websocket._url = address.href;
    } else {
      parsedUrl = new URL(address);
      websocket._url = address;
    }

    const isUnixSocket = parsedUrl.protocol === 'ws+unix:';

    if (!parsedUrl.host && (!isUnixSocket || !parsedUrl.pathname)) {
      throw new Error(`Invalid URL: ${websocket.url}`);
    }

    const isSecure =
      parsedUrl.protocol === 'wss:' || parsedUrl.protocol === 'https:';
    const defaultPort = isSecure ? 443 : 80;
    const key = randomBytes$1(16).toString('base64');
    const get = isSecure ? https$1.get : http$2.get;
    let perMessageDeflate;

    opts.createConnection = isSecure ? tlsConnect : netConnect;
    opts.defaultPort = opts.defaultPort || defaultPort;
    opts.port = parsedUrl.port || defaultPort;
    opts.host = parsedUrl.hostname.startsWith('[')
      ? parsedUrl.hostname.slice(1, -1)
      : parsedUrl.hostname;
    opts.headers = {
      'Sec-WebSocket-Version': opts.protocolVersion,
      'Sec-WebSocket-Key': key,
      Connection: 'Upgrade',
      Upgrade: 'websocket',
      ...opts.headers
    };
    opts.path = parsedUrl.pathname + parsedUrl.search;
    opts.timeout = opts.handshakeTimeout;

    if (opts.perMessageDeflate) {
      perMessageDeflate = new PerMessageDeflate$1(
        opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},
        false,
        opts.maxPayload
      );
      opts.headers['Sec-WebSocket-Extensions'] = format$2({
        [PerMessageDeflate$1.extensionName]: perMessageDeflate.offer()
      });
    }
    if (protocols) {
      opts.headers['Sec-WebSocket-Protocol'] = protocols;
    }
    if (opts.origin) {
      if (opts.protocolVersion < 13) {
        opts.headers['Sec-WebSocket-Origin'] = opts.origin;
      } else {
        opts.headers.Origin = opts.origin;
      }
    }
    if (parsedUrl.username || parsedUrl.password) {
      opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;
    }

    if (isUnixSocket) {
      const parts = opts.path.split(':');

      opts.socketPath = parts[0];
      opts.path = parts[1];
    }

    let req = (websocket._req = get(opts));

    if (opts.timeout) {
      req.on('timeout', () => {
        abortHandshake$1(websocket, req, 'Opening handshake has timed out');
      });
    }

    req.on('error', (err) => {
      if (req === null || req.aborted) return;

      req = websocket._req = null;
      websocket._readyState = WebSocket$2.CLOSING;
      websocket.emit('error', err);
      websocket.emitClose();
    });

    req.on('response', (res) => {
      const location = res.headers.location;
      const statusCode = res.statusCode;

      if (
        location &&
        opts.followRedirects &&
        statusCode >= 300 &&
        statusCode < 400
      ) {
        if (++websocket._redirects > opts.maxRedirects) {
          abortHandshake$1(websocket, req, 'Maximum redirects exceeded');
          return;
        }

        req.abort();

        const addr = new URL(location, address);

        initAsClient(websocket, addr, protocols, options);
      } else if (!websocket.emit('unexpected-response', req, res)) {
        abortHandshake$1(
          websocket,
          req,
          `Unexpected server response: ${res.statusCode}`
        );
      }
    });

    req.on('upgrade', (res, socket, head) => {
      websocket.emit('upgrade', res);

      //
      // The user may have closed the connection from a listener of the `upgrade`
      // event.
      //
      if (websocket.readyState !== WebSocket$2.CONNECTING) return;

      req = websocket._req = null;

      const digest = createHash$2('sha1')
        .update(key + GUID$1)
        .digest('base64');

      if (res.headers['sec-websocket-accept'] !== digest) {
        abortHandshake$1(websocket, socket, 'Invalid Sec-WebSocket-Accept header');
        return;
      }

      const serverProt = res.headers['sec-websocket-protocol'];
      const protList = (protocols || '').split(/, */);
      let protError;

      if (!protocols && serverProt) {
        protError = 'Server sent a subprotocol but none was requested';
      } else if (protocols && !serverProt) {
        protError = 'Server sent no subprotocol';
      } else if (serverProt && !protList.includes(serverProt)) {
        protError = 'Server sent an invalid subprotocol';
      }

      if (protError) {
        abortHandshake$1(websocket, socket, protError);
        return;
      }

      if (serverProt) websocket._protocol = serverProt;

      const secWebSocketExtensions = res.headers['sec-websocket-extensions'];

      if (secWebSocketExtensions !== undefined) {
        if (!perMessageDeflate) {
          const message =
            'Server sent a Sec-WebSocket-Extensions header but no extension ' +
            'was requested';
          abortHandshake$1(websocket, socket, message);
          return;
        }

        let extensions;

        try {
          extensions = parse$3(secWebSocketExtensions);
        } catch (err) {
          const message = 'Invalid Sec-WebSocket-Extensions header';
          abortHandshake$1(websocket, socket, message);
          return;
        }

        const extensionNames = Object.keys(extensions);

        if (extensionNames.length) {
          if (
            extensionNames.length !== 1 ||
            extensionNames[0] !== PerMessageDeflate$1.extensionName
          ) {
            const message =
              'Server indicated an extension that was not requested';
            abortHandshake$1(websocket, socket, message);
            return;
          }

          try {
            perMessageDeflate.accept(extensions[PerMessageDeflate$1.extensionName]);
          } catch (err) {
            const message = 'Invalid Sec-WebSocket-Extensions header';
            abortHandshake$1(websocket, socket, message);
            return;
          }

          websocket._extensions[PerMessageDeflate$1.extensionName] =
            perMessageDeflate;
        }
      }

      websocket.setSocket(socket, head, opts.maxPayload);
    });
  }

  /**
   * Create a `net.Socket` and initiate a connection.
   *
   * @param {Object} options Connection options
   * @return {net.Socket} The newly created socket used to start the connection
   * @private
   */
  function netConnect(options) {
    options.path = options.socketPath;
    return net.connect(options);
  }

  /**
   * Create a `tls.TLSSocket` and initiate a connection.
   *
   * @param {Object} options Connection options
   * @return {tls.TLSSocket} The newly created socket used to start the connection
   * @private
   */
  function tlsConnect(options) {
    options.path = undefined;

    if (!options.servername && options.servername !== '') {
      options.servername = net.isIP(options.host) ? '' : options.host;
    }

    return tls.connect(options);
  }

  /**
   * Abort the handshake and emit an error.
   *
   * @param {WebSocket} websocket The WebSocket instance
   * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to
   *     abort or the socket to destroy
   * @param {String} message The error message
   * @private
   */
  function abortHandshake$1(websocket, stream, message) {
    websocket._readyState = WebSocket$2.CLOSING;

    const err = new Error(message);
    Error.captureStackTrace(err, abortHandshake$1);

    if (stream.setHeader) {
      stream.abort();

      if (stream.socket && !stream.socket.destroyed) {
        //
        // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if
        // called after the request completed. See
        // https://github.com/websockets/ws/issues/1869.
        //
        stream.socket.destroy();
      }

      stream.once('abort', websocket.emitClose.bind(websocket));
      websocket.emit('error', err);
    } else {
      stream.destroy(err);
      stream.once('error', websocket.emit.bind(websocket, 'error'));
      stream.once('close', websocket.emitClose.bind(websocket));
    }
  }

  /**
   * Handle cases where the `ping()`, `pong()`, or `send()` methods are called
   * when the `readyState` attribute is `CLOSING` or `CLOSED`.
   *
   * @param {WebSocket} websocket The WebSocket instance
   * @param {*} [data] The data to send
   * @param {Function} [cb] Callback
   * @private
   */
  function sendAfterClose(websocket, data, cb) {
    if (data) {
      const length = toBuffer$1(data).length;

      //
      // The `_bufferedAmount` property is used only when the peer is a client and
      // the opening handshake fails. Under these circumstances, in fact, the
      // `setSocket()` method is not called, so the `_socket` and `_sender`
      // properties are set to `null`.
      //
      if (websocket._socket) websocket._sender._bufferedBytes += length;
      else websocket._bufferedAmount += length;
    }

    if (cb) {
      const err = new Error(
        `WebSocket is not open: readyState ${websocket.readyState} ` +
          `(${readyStates[websocket.readyState]})`
      );
      cb(err);
    }
  }

  /**
   * The listener of the `Receiver` `'conclude'` event.
   *
   * @param {Number} code The status code
   * @param {String} reason The reason for closing
   * @private
   */
  function receiverOnConclude(code, reason) {
    const websocket = this[kWebSocket$1];

    websocket._socket.removeListener('data', socketOnData);
    websocket._socket.resume();

    websocket._closeFrameReceived = true;
    websocket._closeMessage = reason;
    websocket._closeCode = code;

    if (code === 1005) websocket.close();
    else websocket.close(code, reason);
  }

  /**
   * The listener of the `Receiver` `'drain'` event.
   *
   * @private
   */
  function receiverOnDrain() {
    this[kWebSocket$1]._socket.resume();
  }

  /**
   * The listener of the `Receiver` `'error'` event.
   *
   * @param {(RangeError|Error)} err The emitted error
   * @private
   */
  function receiverOnError(err) {
    const websocket = this[kWebSocket$1];

    websocket._socket.removeListener('data', socketOnData);
    websocket._socket.resume();

    websocket.close(err[kStatusCode]);
    websocket.emit('error', err);
  }

  /**
   * The listener of the `Receiver` `'finish'` event.
   *
   * @private
   */
  function receiverOnFinish() {
    this[kWebSocket$1].emitClose();
  }

  /**
   * The listener of the `Receiver` `'message'` event.
   *
   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The message
   * @private
   */
  function receiverOnMessage(data) {
    this[kWebSocket$1].emit('message', data);
  }

  /**
   * The listener of the `Receiver` `'ping'` event.
   *
   * @param {Buffer} data The data included in the ping frame
   * @private
   */
  function receiverOnPing(data) {
    const websocket = this[kWebSocket$1];

    websocket.pong(data, !websocket._isServer, NOOP);
    websocket.emit('ping', data);
  }

  /**
   * The listener of the `Receiver` `'pong'` event.
   *
   * @param {Buffer} data The data included in the pong frame
   * @private
   */
  function receiverOnPong(data) {
    this[kWebSocket$1].emit('pong', data);
  }

  /**
   * The listener of the `net.Socket` `'close'` event.
   *
   * @private
   */
  function socketOnClose() {
    const websocket = this[kWebSocket$1];

    this.removeListener('close', socketOnClose);
    this.removeListener('end', socketOnEnd);

    websocket._readyState = WebSocket$2.CLOSING;

    //
    // The close frame might not have been received or the `'end'` event emitted,
    // for example, if the socket was destroyed due to an error. Ensure that the
    // `receiver` stream is closed after writing any remaining buffered data to
    // it. If the readable side of the socket is in flowing mode then there is no
    // buffered data as everything has been already written and `readable.read()`
    // will return `null`. If instead, the socket is paused, any possible buffered
    // data will be read as a single chunk and emitted synchronously in a single
    // `'data'` event.
    //
    websocket._socket.read();
    websocket._receiver.end();

    this.removeListener('data', socketOnData);
    this[kWebSocket$1] = undefined;

    clearTimeout(websocket._closeTimer);

    if (
      websocket._receiver._writableState.finished ||
      websocket._receiver._writableState.errorEmitted
    ) {
      websocket.emitClose();
    } else {
      websocket._receiver.on('error', receiverOnFinish);
      websocket._receiver.on('finish', receiverOnFinish);
    }
  }

  /**
   * The listener of the `net.Socket` `'data'` event.
   *
   * @param {Buffer} chunk A chunk of data
   * @private
   */
  function socketOnData(chunk) {
    if (!this[kWebSocket$1]._receiver.write(chunk)) {
      this.pause();
    }
  }

  /**
   * The listener of the `net.Socket` `'end'` event.
   *
   * @private
   */
  function socketOnEnd() {
    const websocket = this[kWebSocket$1];

    websocket._readyState = WebSocket$2.CLOSING;
    websocket._receiver.end();
    this.end();
  }

  /**
   * The listener of the `net.Socket` `'error'` event.
   *
   * @private
   */
  function socketOnError$1() {
    const websocket = this[kWebSocket$1];

    this.removeListener('error', socketOnError$1);
    this.on('error', NOOP);

    if (websocket) {
      websocket._readyState = WebSocket$2.CLOSING;
      this.destroy();
    }
  }

  const { Duplex: Duplex$4 } = require$$0__default$1["default"];

  /**
   * Emits the `'close'` event on a stream.
   *
   * @param {Duplex} stream The stream.
   * @private
   */
  function emitClose$1(stream) {
    stream.emit('close');
  }

  /**
   * The listener of the `'end'` event.
   *
   * @private
   */
  function duplexOnEnd() {
    if (!this.destroyed && this._writableState.finished) {
      this.destroy();
    }
  }

  /**
   * The listener of the `'error'` event.
   *
   * @param {Error} err The error
   * @private
   */
  function duplexOnError(err) {
    this.removeListener('error', duplexOnError);
    this.destroy();
    if (this.listenerCount('error') === 0) {
      // Do not suppress the throwing behavior.
      this.emit('error', err);
    }
  }

  /**
   * Wraps a `WebSocket` in a duplex stream.
   *
   * @param {WebSocket} ws The `WebSocket` to wrap
   * @param {Object} [options] The options for the `Duplex` constructor
   * @return {Duplex} The duplex stream
   * @public
   */
  function createWebSocketStream(ws, options) {
    let resumeOnReceiverDrain = true;
    let terminateOnDestroy = true;

    function receiverOnDrain() {
      if (resumeOnReceiverDrain) ws._socket.resume();
    }

    if (ws.readyState === ws.CONNECTING) {
      ws.once('open', function open() {
        ws._receiver.removeAllListeners('drain');
        ws._receiver.on('drain', receiverOnDrain);
      });
    } else {
      ws._receiver.removeAllListeners('drain');
      ws._receiver.on('drain', receiverOnDrain);
    }

    const duplex = new Duplex$4({
      ...options,
      autoDestroy: false,
      emitClose: false,
      objectMode: false,
      writableObjectMode: false
    });

    ws.on('message', function message(msg) {
      if (!duplex.push(msg)) {
        resumeOnReceiverDrain = false;
        ws._socket.pause();
      }
    });

    ws.once('error', function error(err) {
      if (duplex.destroyed) return;

      // Prevent `ws.terminate()` from being called by `duplex._destroy()`.
      //
      // - If the `'error'` event is emitted before the `'open'` event, then
      //   `ws.terminate()` is a noop as no socket is assigned.
      // - Otherwise, the error is re-emitted by the listener of the `'error'`
      //   event of the `Receiver` object. The listener already closes the
      //   connection by calling `ws.close()`. This allows a close frame to be
      //   sent to the other peer. If `ws.terminate()` is called right after this,
      //   then the close frame might not be sent.
      terminateOnDestroy = false;
      duplex.destroy(err);
    });

    ws.once('close', function close() {
      if (duplex.destroyed) return;

      duplex.push(null);
    });

    duplex._destroy = function (err, callback) {
      if (ws.readyState === ws.CLOSED) {
        callback(err);
        process.nextTick(emitClose$1, duplex);
        return;
      }

      let called = false;

      ws.once('error', function error(err) {
        called = true;
        callback(err);
      });

      ws.once('close', function close() {
        if (!called) callback(err);
        process.nextTick(emitClose$1, duplex);
      });

      if (terminateOnDestroy) ws.terminate();
    };

    duplex._final = function (callback) {
      if (ws.readyState === ws.CONNECTING) {
        ws.once('open', function open() {
          duplex._final(callback);
        });
        return;
      }

      // If the value of the `_socket` property is `null` it means that `ws` is a
      // client websocket and the handshake failed. In fact, when this happens, a
      // socket is never assigned to the websocket. Wait for the `'error'` event
      // that will be emitted by the websocket.
      if (ws._socket === null) return;

      if (ws._socket._writableState.finished) {
        callback();
        if (duplex._readableState.endEmitted) duplex.destroy();
      } else {
        ws._socket.once('finish', function finish() {
          // `duplex` is not destroyed here because the `'end'` event will be
          // emitted on `duplex` after this `'finish'` event. The EOF signaling
          // `null` chunk is, in fact, pushed when the websocket emits `'close'`.
          callback();
        });
        ws.close();
      }
    };

    duplex._read = function () {
      if (ws.readyState === ws.OPEN && !resumeOnReceiverDrain) {
        resumeOnReceiverDrain = true;
        if (!ws._receiver._writableState.needDrain) ws._socket.resume();
      }
    };

    duplex._write = function (chunk, encoding, callback) {
      if (ws.readyState === ws.CONNECTING) {
        ws.once('open', function open() {
          duplex._write(chunk, encoding, callback);
        });
        return;
      }

      ws.send(chunk, callback);
    };

    duplex.on('end', duplexOnEnd);
    duplex.on('error', duplexOnError);
    return duplex;
  }

  var stream$1 = createWebSocketStream;

  /* eslint no-unused-vars: ["error", { "varsIgnorePattern": "^net|tls|https$" }] */

  const EventEmitter$4 = require$$0__default$3["default"];
  const http$1 = require$$2__default["default"];
  const { createHash: createHash$1 } = require$$0__default$2["default"];

  const PerMessageDeflate = permessageDeflate;
  const WebSocket$1 = websocket;
  const { format: format$1, parse: parse$2 } = extension;
  const { GUID, kWebSocket } = constants$8;

  const keyRegex = /^[+/0-9A-Za-z]{22}==$/;

  const RUNNING = 0;
  const CLOSING = 1;
  const CLOSED = 2;

  /**
   * Class representing a WebSocket server.
   *
   * @extends EventEmitter
   */
  class WebSocketServer extends EventEmitter$4 {
    /**
     * Create a `WebSocketServer` instance.
     *
     * @param {Object} options Configuration options
     * @param {Number} [options.backlog=511] The maximum length of the queue of
     *     pending connections
     * @param {Boolean} [options.clientTracking=true] Specifies whether or not to
     *     track clients
     * @param {Function} [options.handleProtocols] A hook to handle protocols
     * @param {String} [options.host] The hostname where to bind the server
     * @param {Number} [options.maxPayload=104857600] The maximum allowed message
     *     size
     * @param {Boolean} [options.noServer=false] Enable no server mode
     * @param {String} [options.path] Accept only connections matching this path
     * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable
     *     permessage-deflate
     * @param {Number} [options.port] The port where to bind the server
     * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S
     *     server to use
     * @param {Function} [options.verifyClient] A hook to reject connections
     * @param {Function} [callback] A listener for the `listening` event
     */
    constructor(options, callback) {
      super();

      options = {
        maxPayload: 100 * 1024 * 1024,
        perMessageDeflate: false,
        handleProtocols: null,
        clientTracking: true,
        verifyClient: null,
        noServer: false,
        backlog: null, // use default (511 as implemented in net.js)
        server: null,
        host: null,
        path: null,
        port: null,
        ...options
      };

      if (
        (options.port == null && !options.server && !options.noServer) ||
        (options.port != null && (options.server || options.noServer)) ||
        (options.server && options.noServer)
      ) {
        throw new TypeError(
          'One and only one of the "port", "server", or "noServer" options ' +
            'must be specified'
        );
      }

      if (options.port != null) {
        this._server = http$1.createServer((req, res) => {
          const body = http$1.STATUS_CODES[426];

          res.writeHead(426, {
            'Content-Length': body.length,
            'Content-Type': 'text/plain'
          });
          res.end(body);
        });
        this._server.listen(
          options.port,
          options.host,
          options.backlog,
          callback
        );
      } else if (options.server) {
        this._server = options.server;
      }

      if (this._server) {
        const emitConnection = this.emit.bind(this, 'connection');

        this._removeListeners = addListeners(this._server, {
          listening: this.emit.bind(this, 'listening'),
          error: this.emit.bind(this, 'error'),
          upgrade: (req, socket, head) => {
            this.handleUpgrade(req, socket, head, emitConnection);
          }
        });
      }

      if (options.perMessageDeflate === true) options.perMessageDeflate = {};
      if (options.clientTracking) this.clients = new Set();
      this.options = options;
      this._state = RUNNING;
    }

    /**
     * Returns the bound address, the address family name, and port of the server
     * as reported by the operating system if listening on an IP socket.
     * If the server is listening on a pipe or UNIX domain socket, the name is
     * returned as a string.
     *
     * @return {(Object|String|null)} The address of the server
     * @public
     */
    address() {
      if (this.options.noServer) {
        throw new Error('The server is operating in "noServer" mode');
      }

      if (!this._server) return null;
      return this._server.address();
    }

    /**
     * Close the server.
     *
     * @param {Function} [cb] Callback
     * @public
     */
    close(cb) {
      if (cb) this.once('close', cb);

      if (this._state === CLOSED) {
        process.nextTick(emitClose, this);
        return;
      }

      if (this._state === CLOSING) return;
      this._state = CLOSING;

      //
      // Terminate all associated clients.
      //
      if (this.clients) {
        for (const client of this.clients) client.terminate();
      }

      const server = this._server;

      if (server) {
        this._removeListeners();
        this._removeListeners = this._server = null;

        //
        // Close the http server if it was internally created.
        //
        if (this.options.port != null) {
          server.close(emitClose.bind(undefined, this));
          return;
        }
      }

      process.nextTick(emitClose, this);
    }

    /**
     * See if a given request should be handled by this server instance.
     *
     * @param {http.IncomingMessage} req Request object to inspect
     * @return {Boolean} `true` if the request is valid, else `false`
     * @public
     */
    shouldHandle(req) {
      if (this.options.path) {
        const index = req.url.indexOf('?');
        const pathname = index !== -1 ? req.url.slice(0, index) : req.url;

        if (pathname !== this.options.path) return false;
      }

      return true;
    }

    /**
     * Handle a HTTP Upgrade request.
     *
     * @param {http.IncomingMessage} req The request object
     * @param {(net.Socket|tls.Socket)} socket The network socket between the
     *     server and client
     * @param {Buffer} head The first packet of the upgraded stream
     * @param {Function} cb Callback
     * @public
     */
    handleUpgrade(req, socket, head, cb) {
      socket.on('error', socketOnError);

      const key =
        req.headers['sec-websocket-key'] !== undefined
          ? req.headers['sec-websocket-key'].trim()
          : false;
      const version = +req.headers['sec-websocket-version'];
      const extensions = {};

      if (
        req.method !== 'GET' ||
        req.headers.upgrade.toLowerCase() !== 'websocket' ||
        !key ||
        !keyRegex.test(key) ||
        (version !== 8 && version !== 13) ||
        !this.shouldHandle(req)
      ) {
        return abortHandshake(socket, 400);
      }

      if (this.options.perMessageDeflate) {
        const perMessageDeflate = new PerMessageDeflate(
          this.options.perMessageDeflate,
          true,
          this.options.maxPayload
        );

        try {
          const offers = parse$2(req.headers['sec-websocket-extensions']);

          if (offers[PerMessageDeflate.extensionName]) {
            perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);
            extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
          }
        } catch (err) {
          return abortHandshake(socket, 400);
        }
      }

      //
      // Optionally call external client verification handler.
      //
      if (this.options.verifyClient) {
        const info = {
          origin:
            req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],
          secure: !!(req.socket.authorized || req.socket.encrypted),
          req
        };

        if (this.options.verifyClient.length === 2) {
          this.options.verifyClient(info, (verified, code, message, headers) => {
            if (!verified) {
              return abortHandshake(socket, code || 401, message, headers);
            }

            this.completeUpgrade(key, extensions, req, socket, head, cb);
          });
          return;
        }

        if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);
      }

      this.completeUpgrade(key, extensions, req, socket, head, cb);
    }

    /**
     * Upgrade the connection to WebSocket.
     *
     * @param {String} key The value of the `Sec-WebSocket-Key` header
     * @param {Object} extensions The accepted extensions
     * @param {http.IncomingMessage} req The request object
     * @param {(net.Socket|tls.Socket)} socket The network socket between the
     *     server and client
     * @param {Buffer} head The first packet of the upgraded stream
     * @param {Function} cb Callback
     * @throws {Error} If called more than once with the same socket
     * @private
     */
    completeUpgrade(key, extensions, req, socket, head, cb) {
      //
      // Destroy the socket if the client has already sent a FIN packet.
      //
      if (!socket.readable || !socket.writable) return socket.destroy();

      if (socket[kWebSocket]) {
        throw new Error(
          'server.handleUpgrade() was called more than once with the same ' +
            'socket, possibly due to a misconfiguration'
        );
      }

      if (this._state > RUNNING) return abortHandshake(socket, 503);

      const digest = createHash$1('sha1')
        .update(key + GUID)
        .digest('base64');

      const headers = [
        'HTTP/1.1 101 Switching Protocols',
        'Upgrade: websocket',
        'Connection: Upgrade',
        `Sec-WebSocket-Accept: ${digest}`
      ];

      const ws = new WebSocket$1(null);
      let protocol = req.headers['sec-websocket-protocol'];

      if (protocol) {
        protocol = protocol.split(',').map(trim);

        //
        // Optionally call external protocol selection handler.
        //
        if (this.options.handleProtocols) {
          protocol = this.options.handleProtocols(protocol, req);
        } else {
          protocol = protocol[0];
        }

        if (protocol) {
          headers.push(`Sec-WebSocket-Protocol: ${protocol}`);
          ws._protocol = protocol;
        }
      }

      if (extensions[PerMessageDeflate.extensionName]) {
        const params = extensions[PerMessageDeflate.extensionName].params;
        const value = format$1({
          [PerMessageDeflate.extensionName]: [params]
        });
        headers.push(`Sec-WebSocket-Extensions: ${value}`);
        ws._extensions = extensions;
      }

      //
      // Allow external modification/inspection of handshake headers.
      //
      this.emit('headers', headers, req);

      socket.write(headers.concat('\r\n').join('\r\n'));
      socket.removeListener('error', socketOnError);

      ws.setSocket(socket, head, this.options.maxPayload);

      if (this.clients) {
        this.clients.add(ws);
        ws.on('close', () => this.clients.delete(ws));
      }

      cb(ws, req);
    }
  }

  var websocketServer = WebSocketServer;

  /**
   * Add event listeners on an `EventEmitter` using a map of <event, listener>
   * pairs.
   *
   * @param {EventEmitter} server The event emitter
   * @param {Object.<String, Function>} map The listeners to add
   * @return {Function} A function that will remove the added listeners when
   *     called
   * @private
   */
  function addListeners(server, map) {
    for (const event of Object.keys(map)) server.on(event, map[event]);

    return function removeListeners() {
      for (const event of Object.keys(map)) {
        server.removeListener(event, map[event]);
      }
    };
  }

  /**
   * Emit a `'close'` event on an `EventEmitter`.
   *
   * @param {EventEmitter} server The event emitter
   * @private
   */
  function emitClose(server) {
    server._state = CLOSED;
    server.emit('close');
  }

  /**
   * Handle premature socket errors.
   *
   * @private
   */
  function socketOnError() {
    this.destroy();
  }

  /**
   * Close the connection when preconditions are not fulfilled.
   *
   * @param {(net.Socket|tls.Socket)} socket The socket of the upgrade request
   * @param {Number} code The HTTP response status code
   * @param {String} [message] The HTTP response body
   * @param {Object} [headers] Additional HTTP response headers
   * @private
   */
  function abortHandshake(socket, code, message, headers) {
    if (socket.writable) {
      message = message || http$1.STATUS_CODES[code];
      headers = {
        Connection: 'close',
        'Content-Type': 'text/html',
        'Content-Length': Buffer.byteLength(message),
        ...headers
      };

      socket.write(
        `HTTP/1.1 ${code} ${http$1.STATUS_CODES[code]}\r\n` +
          Object.keys(headers)
            .map((h) => `${h}: ${headers[h]}`)
            .join('\r\n') +
          '\r\n\r\n' +
          message
      );
    }

    socket.removeListener('error', socketOnError);
    socket.destroy();
  }

  /**
   * Remove whitespace characters from both ends of a string.
   *
   * @param {String} str The string
   * @return {String} A new string representing `str` stripped of whitespace
   *     characters from both its beginning and end
   * @private
   */
  function trim(str) {
    return str.trim();
  }

  const WebSocket = websocket;

  WebSocket.createWebSocketStream = stream$1;
  WebSocket.Server = websocketServer;
  WebSocket.Receiver = receiver;
  WebSocket.Sender = sender;

  var ws = WebSocket;

  Object.defineProperty(cjs$3, "__esModule", { value: true });
  const tslib_1$8 = require$$0$1;
  const utils_1$7 = cjs$9;
  const network_1 = (0, tslib_1$8.__importDefault)(network);
  const WS = typeof commonjsGlobal.WebSocket !== "undefined" ? commonjsGlobal.WebSocket : ws;
  class SocketTransport {
      constructor(opts) {
          this.opts = opts;
          this._queue = [];
          this._events = [];
          this._subscriptions = [];
          this._protocol = opts.protocol;
          this._version = opts.version;
          this._url = "";
          this._netMonitor = null;
          this._socket = null;
          this._nextSocket = null;
          this._subscriptions = opts.subscriptions || [];
          this._netMonitor = opts.netMonitor || new network_1.default();
          if (!opts.url || typeof opts.url !== "string") {
              throw new Error("Missing or invalid WebSocket url");
          }
          this._url = opts.url;
          this._netMonitor.on("online", () => this._socketCreate());
      }
      set readyState(value) {
      }
      get readyState() {
          return this._socket ? this._socket.readyState : -1;
      }
      set connecting(value) {
      }
      get connecting() {
          return this.readyState === 0;
      }
      set connected(value) {
      }
      get connected() {
          return this.readyState === 1;
      }
      set closing(value) {
      }
      get closing() {
          return this.readyState === 2;
      }
      set closed(value) {
      }
      get closed() {
          return this.readyState === 3;
      }
      open() {
          this._socketCreate();
      }
      close() {
          this._socketClose();
      }
      send(message, topic, silent) {
          if (!topic || typeof topic !== "string") {
              throw new Error("Missing or invalid topic field");
          }
          this._socketSend({
              topic: topic,
              type: "pub",
              payload: message,
              silent: !!silent,
          });
      }
      subscribe(topic) {
          this._socketSend({
              topic: topic,
              type: "sub",
              payload: "",
              silent: true,
          });
      }
      on(event, callback) {
          this._events.push({ event, callback });
      }
      _socketCreate() {
          if (this._nextSocket) {
              return;
          }
          const url = getWebSocketUrl(this._url, this._protocol, this._version);
          this._nextSocket = new WS(url);
          if (!this._nextSocket) {
              throw new Error("Failed to create socket");
          }
          this._nextSocket.onmessage = (event) => this._socketReceive(event);
          this._nextSocket.onopen = () => this._socketOpen();
          this._nextSocket.onerror = (event) => this._socketError(event);
          this._nextSocket.onclose = () => {
              setTimeout(() => {
                  this._nextSocket = null;
                  this._socketCreate();
              }, 1000);
          };
      }
      _socketOpen() {
          this._socketClose();
          this._socket = this._nextSocket;
          this._nextSocket = null;
          this._queueSubscriptions();
          this._pushQueue();
      }
      _socketClose() {
          if (this._socket) {
              this._socket.onclose = () => {
              };
              this._socket.close();
          }
      }
      _socketSend(socketMessage) {
          const message = JSON.stringify(socketMessage);
          if (this._socket && this._socket.readyState === 1) {
              this._socket.send(message);
          }
          else {
              this._setToQueue(socketMessage);
              this._socketCreate();
          }
      }
      _socketReceive(event) {
          return (0, tslib_1$8.__awaiter)(this, void 0, void 0, function* () {
              let socketMessage;
              try {
                  socketMessage = JSON.parse(event.data);
              }
              catch (error) {
                  return;
              }
              this._socketSend({
                  topic: socketMessage.topic,
                  type: "ack",
                  payload: "",
                  silent: true,
              });
              if (this._socket && this._socket.readyState === 1) {
                  const events = this._events.filter(event => event.event === "message");
                  if (events && events.length) {
                      events.forEach(event => event.callback(socketMessage));
                  }
              }
          });
      }
      _socketError(e) {
          const events = this._events.filter(event => event.event === "error");
          if (events && events.length) {
              events.forEach(event => event.callback(e));
          }
      }
      _queueSubscriptions() {
          const subscriptions = this._subscriptions;
          subscriptions.forEach((topic) => this._queue.push({
              topic: topic,
              type: "sub",
              payload: "",
              silent: true,
          }));
          this._subscriptions = this.opts.subscriptions || [];
      }
      _setToQueue(socketMessage) {
          this._queue.push(socketMessage);
      }
      _pushQueue() {
          const queue = this._queue;
          queue.forEach((socketMessage) => this._socketSend(socketMessage));
          this._queue = [];
      }
  }
  function getWebSocketUrl(_url, protocol, version) {
      var _a, _b;
      const url = _url.startsWith("https")
          ? _url.replace("https", "wss")
          : _url.startsWith("http")
              ? _url.replace("http", "ws")
              : _url;
      const splitUrl = url.split("?");
      const params = (0, utils_1$7.isBrowser)()
          ? {
              protocol,
              version,
              env: "browser",
              host: ((_a = (0, utils_1$7.getLocation)()) === null || _a === void 0 ? void 0 : _a.host) || "",
          }
          : {
              protocol,
              version,
              env: ((_b = (0, utils_1$7.detectEnv)()) === null || _b === void 0 ? void 0 : _b.name) || "",
          };
      const queryString = (0, utils_1$7.appendToQueryString)((0, utils_1$7.getQueryString)(splitUrl[1] || ""), params);
      return splitUrl[0] + "?" + queryString;
  }
  cjs$3.default = SocketTransport;

  var errors$4 = {};

  Object.defineProperty(errors$4, "__esModule", { value: true });
  errors$4.ERROR_QRCODE_MODAL_USER_CLOSED = errors$4.ERROR_QRCODE_MODAL_NOT_PROVIDED = errors$4.ERROR_INVALID_URI = errors$4.ERROR_INVALID_RESPONSE = errors$4.ERROR_MISSING_REQUIRED = errors$4.ERROR_MISSING_ID = errors$4.ERROR_MISSING_METHOD = errors$4.ERROR_MISSING_ERROR = errors$4.ERROR_MISSING_RESULT = errors$4.ERROR_MISSING_JSON_RPC = errors$4.ERROR_SESSION_REJECTED = errors$4.ERROR_SESSION_DISCONNECTED = errors$4.ERROR_SESSION_CONNECTED = void 0;
  errors$4.ERROR_SESSION_CONNECTED = "Session currently connected";
  errors$4.ERROR_SESSION_DISCONNECTED = "Session currently disconnected";
  errors$4.ERROR_SESSION_REJECTED = "Session Rejected";
  errors$4.ERROR_MISSING_JSON_RPC = "Missing JSON RPC response";
  errors$4.ERROR_MISSING_RESULT = `JSON-RPC success response must include "result" field`;
  errors$4.ERROR_MISSING_ERROR = `JSON-RPC error response must include "error" field`;
  errors$4.ERROR_MISSING_METHOD = `JSON RPC request must have valid "method" value`;
  errors$4.ERROR_MISSING_ID = `JSON RPC request must have valid "id" value`;
  errors$4.ERROR_MISSING_REQUIRED = "Missing one of the required parameters: bridge / uri / session";
  errors$4.ERROR_INVALID_RESPONSE = "JSON RPC response format is invalid";
  errors$4.ERROR_INVALID_URI = "URI format is invalid";
  errors$4.ERROR_QRCODE_MODAL_NOT_PROVIDED = "QRCode Modal not provided";
  errors$4.ERROR_QRCODE_MODAL_USER_CLOSED = "User close QRCode Modal";

  var events$1 = {};

  Object.defineProperty(events$1, "__esModule", { value: true });
  const utils_1$6 = cjs$9;
  class EventManager {
      constructor() {
          this._eventEmitters = [];
      }
      subscribe(eventEmitter) {
          this._eventEmitters.push(eventEmitter);
      }
      unsubscribe(event) {
          this._eventEmitters = this._eventEmitters.filter(x => x.event !== event);
      }
      trigger(payload) {
          let eventEmitters = [];
          let event;
          if ((0, utils_1$6.isJsonRpcRequest)(payload)) {
              event = payload.method;
          }
          else if ((0, utils_1$6.isJsonRpcResponseSuccess)(payload) || (0, utils_1$6.isJsonRpcResponseError)(payload)) {
              event = `response:${payload.id}`;
          }
          else if ((0, utils_1$6.isInternalEvent)(payload)) {
              event = payload.event;
          }
          else {
              event = "";
          }
          if (event) {
              eventEmitters = this._eventEmitters.filter((eventEmitter) => eventEmitter.event === event);
          }
          if ((!eventEmitters || !eventEmitters.length) &&
              !(0, utils_1$6.isReservedEvent)(event) &&
              !(0, utils_1$6.isInternalEvent)(event)) {
              eventEmitters = this._eventEmitters.filter((eventEmitter) => eventEmitter.event === "call_request");
          }
          eventEmitters.forEach((eventEmitter) => {
              if ((0, utils_1$6.isJsonRpcResponseError)(payload)) {
                  const error = new Error(payload.error.message);
                  eventEmitter.callback(error, null);
              }
              else {
                  eventEmitter.callback(null, payload);
              }
          });
      }
  }
  events$1.default = EventManager;

  var storage = {};

  Object.defineProperty(storage, "__esModule", { value: true });
  const utils_1$5 = cjs$9;
  class SessionStorage {
      constructor(storageId = "walletconnect") {
          this.storageId = storageId;
      }
      getSession() {
          let session = null;
          const json = (0, utils_1$5.getLocal)(this.storageId);
          if (json && (0, utils_1$5.isWalletConnectSession)(json)) {
              session = json;
          }
          return session;
      }
      setSession(session) {
          (0, utils_1$5.setLocal)(this.storageId, session);
          return session;
      }
      removeSession() {
          (0, utils_1$5.removeLocal)(this.storageId);
      }
  }
  storage.default = SessionStorage;

  var url$1 = {};

  Object.defineProperty(url$1, "__esModule", { value: true });
  url$1.getBridgeUrl = url$1.shouldSelectRandomly = url$1.selectRandomBridgeUrl = url$1.randomBridgeIndex = url$1.extractRootDomain = url$1.extractHostname = void 0;
  const domain = "walletconnect.org";
  const alphanumerical = "abcdefghijklmnopqrstuvwxyz0123456789";
  const bridges = alphanumerical.split("").map(char => `https://${char}.bridge.walletconnect.org`);
  function extractHostname(url) {
      let hostname = url.indexOf("//") > -1 ? url.split("/")[2] : url.split("/")[0];
      hostname = hostname.split(":")[0];
      hostname = hostname.split("?")[0];
      return hostname;
  }
  url$1.extractHostname = extractHostname;
  function extractRootDomain(url) {
      return extractHostname(url)
          .split(".")
          .slice(-2)
          .join(".");
  }
  url$1.extractRootDomain = extractRootDomain;
  function randomBridgeIndex() {
      return Math.floor(Math.random() * bridges.length);
  }
  url$1.randomBridgeIndex = randomBridgeIndex;
  function selectRandomBridgeUrl() {
      return bridges[randomBridgeIndex()];
  }
  url$1.selectRandomBridgeUrl = selectRandomBridgeUrl;
  function shouldSelectRandomly(url) {
      return extractRootDomain(url) === domain;
  }
  url$1.shouldSelectRandomly = shouldSelectRandomly;
  function getBridgeUrl(url) {
      if (shouldSelectRandomly(url)) {
          return selectRandomBridgeUrl();
      }
      return url;
  }
  url$1.getBridgeUrl = getBridgeUrl;

  Object.defineProperty(cjs$a, "__esModule", { value: true });
  const tslib_1$7 = require$$0$1;
  const utils_1$4 = cjs$9;
  const socket_transport_1 = (0, tslib_1$7.__importDefault)(cjs$3);
  const errors_1$1 = errors$4;
  const events_1$1 = (0, tslib_1$7.__importDefault)(events$1);
  const storage_1 = (0, tslib_1$7.__importDefault)(storage);
  const url_1 = url$1;
  class Connector {
      constructor(opts) {
          this.protocol = "wc";
          this.version = 1;
          this._bridge = "";
          this._key = null;
          this._clientId = "";
          this._clientMeta = null;
          this._peerId = "";
          this._peerMeta = null;
          this._handshakeId = 0;
          this._handshakeTopic = "";
          this._connected = false;
          this._accounts = [];
          this._chainId = 0;
          this._networkId = 0;
          this._rpcUrl = "";
          this._eventManager = new events_1$1.default();
          this._clientMeta = (0, utils_1$4.getClientMeta)() || opts.connectorOpts.clientMeta || null;
          this._cryptoLib = opts.cryptoLib;
          this._sessionStorage = opts.sessionStorage || new storage_1.default(opts.connectorOpts.storageId);
          this._qrcodeModal = opts.connectorOpts.qrcodeModal;
          this._qrcodeModalOptions = opts.connectorOpts.qrcodeModalOptions;
          this._signingMethods = [...utils_1$4.signingMethods, ...(opts.connectorOpts.signingMethods || [])];
          if (!opts.connectorOpts.bridge && !opts.connectorOpts.uri && !opts.connectorOpts.session) {
              throw new Error(errors_1$1.ERROR_MISSING_REQUIRED);
          }
          if (opts.connectorOpts.bridge) {
              this.bridge = (0, url_1.getBridgeUrl)(opts.connectorOpts.bridge);
          }
          if (opts.connectorOpts.uri) {
              this.uri = opts.connectorOpts.uri;
          }
          const session = opts.connectorOpts.session || this._getStorageSession();
          if (session) {
              this.session = session;
          }
          if (this.handshakeId) {
              this._subscribeToSessionResponse(this.handshakeId, "Session request rejected");
          }
          this._transport =
              opts.transport ||
                  new socket_transport_1.default({
                      protocol: this.protocol,
                      version: this.version,
                      url: this.bridge,
                      subscriptions: [this.clientId],
                  });
          this._subscribeToInternalEvents();
          this._initTransport();
          if (opts.connectorOpts.uri) {
              this._subscribeToSessionRequest();
          }
          if (opts.pushServerOpts) {
              this._registerPushServer(opts.pushServerOpts);
          }
      }
      set bridge(value) {
          if (!value) {
              return;
          }
          this._bridge = value;
      }
      get bridge() {
          return this._bridge;
      }
      set key(value) {
          if (!value) {
              return;
          }
          const key = (0, utils_1$4.convertHexToArrayBuffer)(value);
          this._key = key;
      }
      get key() {
          if (this._key) {
              const key = (0, utils_1$4.convertArrayBufferToHex)(this._key, true);
              return key;
          }
          return "";
      }
      set clientId(value) {
          if (!value) {
              return;
          }
          this._clientId = value;
      }
      get clientId() {
          let clientId = this._clientId;
          if (!clientId) {
              clientId = this._clientId = (0, utils_1$4.uuid)();
          }
          return this._clientId;
      }
      set peerId(value) {
          if (!value) {
              return;
          }
          this._peerId = value;
      }
      get peerId() {
          return this._peerId;
      }
      set clientMeta(value) {
      }
      get clientMeta() {
          let clientMeta = this._clientMeta;
          if (!clientMeta) {
              clientMeta = this._clientMeta = (0, utils_1$4.getClientMeta)();
          }
          return clientMeta;
      }
      set peerMeta(value) {
          this._peerMeta = value;
      }
      get peerMeta() {
          const peerMeta = this._peerMeta;
          return peerMeta;
      }
      set handshakeTopic(value) {
          if (!value) {
              return;
          }
          this._handshakeTopic = value;
      }
      get handshakeTopic() {
          return this._handshakeTopic;
      }
      set handshakeId(value) {
          if (!value) {
              return;
          }
          this._handshakeId = value;
      }
      get handshakeId() {
          return this._handshakeId;
      }
      get uri() {
          const _uri = this._formatUri();
          return _uri;
      }
      set uri(value) {
          if (!value) {
              return;
          }
          const { handshakeTopic, bridge, key } = this._parseUri(value);
          this.handshakeTopic = handshakeTopic;
          this.bridge = bridge;
          this.key = key;
      }
      set chainId(value) {
          this._chainId = value;
      }
      get chainId() {
          const chainId = this._chainId;
          return chainId;
      }
      set networkId(value) {
          this._networkId = value;
      }
      get networkId() {
          const networkId = this._networkId;
          return networkId;
      }
      set accounts(value) {
          this._accounts = value;
      }
      get accounts() {
          const accounts = this._accounts;
          return accounts;
      }
      set rpcUrl(value) {
          this._rpcUrl = value;
      }
      get rpcUrl() {
          const rpcUrl = this._rpcUrl;
          return rpcUrl;
      }
      set connected(value) {
      }
      get connected() {
          return this._connected;
      }
      set pending(value) {
      }
      get pending() {
          return !!this._handshakeTopic;
      }
      get session() {
          return {
              connected: this.connected,
              accounts: this.accounts,
              chainId: this.chainId,
              bridge: this.bridge,
              key: this.key,
              clientId: this.clientId,
              clientMeta: this.clientMeta,
              peerId: this.peerId,
              peerMeta: this.peerMeta,
              handshakeId: this.handshakeId,
              handshakeTopic: this.handshakeTopic,
          };
      }
      set session(value) {
          if (!value) {
              return;
          }
          this._connected = value.connected;
          this.accounts = value.accounts;
          this.chainId = value.chainId;
          this.bridge = value.bridge;
          this.key = value.key;
          this.clientId = value.clientId;
          this.clientMeta = value.clientMeta;
          this.peerId = value.peerId;
          this.peerMeta = value.peerMeta;
          this.handshakeId = value.handshakeId;
          this.handshakeTopic = value.handshakeTopic;
      }
      on(event, callback) {
          const eventEmitter = {
              event,
              callback,
          };
          this._eventManager.subscribe(eventEmitter);
      }
      off(event) {
          this._eventManager.unsubscribe(event);
      }
      createInstantRequest(instantRequest) {
          return (0, tslib_1$7.__awaiter)(this, void 0, void 0, function* () {
              this._key = yield this._generateKey();
              const request = this._formatRequest({
                  method: "wc_instantRequest",
                  params: [
                      {
                          peerId: this.clientId,
                          peerMeta: this.clientMeta,
                          request: this._formatRequest(instantRequest),
                      },
                  ],
              });
              this.handshakeId = request.id;
              this.handshakeTopic = (0, utils_1$4.uuid)();
              this._eventManager.trigger({
                  event: "display_uri",
                  params: [this.uri],
              });
              this.on("modal_closed", () => {
                  throw new Error(errors_1$1.ERROR_QRCODE_MODAL_USER_CLOSED);
              });
              const endInstantRequest = () => {
                  this.killSession();
              };
              try {
                  const result = yield this._sendCallRequest(request);
                  if (result) {
                      endInstantRequest();
                  }
                  return result;
              }
              catch (error) {
                  endInstantRequest();
                  throw error;
              }
          });
      }
      connect(opts) {
          return (0, tslib_1$7.__awaiter)(this, void 0, void 0, function* () {
              if (!this._qrcodeModal) {
                  throw new Error(errors_1$1.ERROR_QRCODE_MODAL_NOT_PROVIDED);
              }
              if (this.connected) {
                  return {
                      chainId: this.chainId,
                      accounts: this.accounts,
                  };
              }
              yield this.createSession(opts);
              return new Promise((resolve, reject) => (0, tslib_1$7.__awaiter)(this, void 0, void 0, function* () {
                  this.on("modal_closed", () => reject(new Error(errors_1$1.ERROR_QRCODE_MODAL_USER_CLOSED)));
                  this.on("connect", (error, payload) => {
                      if (error) {
                          return reject(error);
                      }
                      resolve(payload.params[0]);
                  });
              }));
          });
      }
      createSession(opts) {
          return (0, tslib_1$7.__awaiter)(this, void 0, void 0, function* () {
              if (this._connected) {
                  throw new Error(errors_1$1.ERROR_SESSION_CONNECTED);
              }
              if (this.pending) {
                  return;
              }
              this._key = yield this._generateKey();
              const request = this._formatRequest({
                  method: "wc_sessionRequest",
                  params: [
                      {
                          peerId: this.clientId,
                          peerMeta: this.clientMeta,
                          chainId: opts && opts.chainId ? opts.chainId : null,
                      },
                  ],
              });
              this.handshakeId = request.id;
              this.handshakeTopic = (0, utils_1$4.uuid)();
              this._sendSessionRequest(request, "Session update rejected", {
                  topic: this.handshakeTopic,
              });
              this._eventManager.trigger({
                  event: "display_uri",
                  params: [this.uri],
              });
          });
      }
      approveSession(sessionStatus) {
          if (this._connected) {
              throw new Error(errors_1$1.ERROR_SESSION_CONNECTED);
          }
          this.chainId = sessionStatus.chainId;
          this.accounts = sessionStatus.accounts;
          this.networkId = sessionStatus.networkId || 0;
          this.rpcUrl = sessionStatus.rpcUrl || "";
          const sessionParams = {
              approved: true,
              chainId: this.chainId,
              networkId: this.networkId,
              accounts: this.accounts,
              rpcUrl: this.rpcUrl,
              peerId: this.clientId,
              peerMeta: this.clientMeta,
          };
          const response = {
              id: this.handshakeId,
              jsonrpc: "2.0",
              result: sessionParams,
          };
          this._sendResponse(response);
          this._connected = true;
          this._setStorageSession();
          this._eventManager.trigger({
              event: "connect",
              params: [
                  {
                      peerId: this.peerId,
                      peerMeta: this.peerMeta,
                      chainId: this.chainId,
                      accounts: this.accounts,
                  },
              ],
          });
      }
      rejectSession(sessionError) {
          if (this._connected) {
              throw new Error(errors_1$1.ERROR_SESSION_CONNECTED);
          }
          const message = sessionError && sessionError.message ? sessionError.message : errors_1$1.ERROR_SESSION_REJECTED;
          const response = this._formatResponse({
              id: this.handshakeId,
              error: { message },
          });
          this._sendResponse(response);
          this._connected = false;
          this._eventManager.trigger({
              event: "disconnect",
              params: [{ message }],
          });
          this._removeStorageSession();
      }
      updateSession(sessionStatus) {
          if (!this._connected) {
              throw new Error(errors_1$1.ERROR_SESSION_DISCONNECTED);
          }
          this.chainId = sessionStatus.chainId;
          this.accounts = sessionStatus.accounts;
          this.networkId = sessionStatus.networkId || 0;
          this.rpcUrl = sessionStatus.rpcUrl || "";
          const sessionParams = {
              approved: true,
              chainId: this.chainId,
              networkId: this.networkId,
              accounts: this.accounts,
              rpcUrl: this.rpcUrl,
          };
          const request = this._formatRequest({
              method: "wc_sessionUpdate",
              params: [sessionParams],
          });
          this._sendSessionRequest(request, "Session update rejected");
          this._eventManager.trigger({
              event: "session_update",
              params: [
                  {
                      chainId: this.chainId,
                      accounts: this.accounts,
                  },
              ],
          });
          this._manageStorageSession();
      }
      killSession(sessionError) {
          return (0, tslib_1$7.__awaiter)(this, void 0, void 0, function* () {
              const message = sessionError ? sessionError.message : "Session Disconnected";
              const sessionParams = {
                  approved: false,
                  chainId: null,
                  networkId: null,
                  accounts: null,
              };
              const request = this._formatRequest({
                  method: "wc_sessionUpdate",
                  params: [sessionParams],
              });
              yield this._sendRequest(request);
              this._handleSessionDisconnect(message);
          });
      }
      sendTransaction(tx) {
          return (0, tslib_1$7.__awaiter)(this, void 0, void 0, function* () {
              if (!this._connected) {
                  throw new Error(errors_1$1.ERROR_SESSION_DISCONNECTED);
              }
              const parsedTx = (0, utils_1$4.parseTransactionData)(tx);
              const request = this._formatRequest({
                  method: "eth_sendTransaction",
                  params: [parsedTx],
              });
              const result = yield this._sendCallRequest(request);
              return result;
          });
      }
      signTransaction(tx) {
          return (0, tslib_1$7.__awaiter)(this, void 0, void 0, function* () {
              if (!this._connected) {
                  throw new Error(errors_1$1.ERROR_SESSION_DISCONNECTED);
              }
              const parsedTx = (0, utils_1$4.parseTransactionData)(tx);
              const request = this._formatRequest({
                  method: "eth_signTransaction",
                  params: [parsedTx],
              });
              const result = yield this._sendCallRequest(request);
              return result;
          });
      }
      signMessage(params) {
          return (0, tslib_1$7.__awaiter)(this, void 0, void 0, function* () {
              if (!this._connected) {
                  throw new Error(errors_1$1.ERROR_SESSION_DISCONNECTED);
              }
              const request = this._formatRequest({
                  method: "eth_sign",
                  params,
              });
              const result = yield this._sendCallRequest(request);
              return result;
          });
      }
      signPersonalMessage(params) {
          return (0, tslib_1$7.__awaiter)(this, void 0, void 0, function* () {
              if (!this._connected) {
                  throw new Error(errors_1$1.ERROR_SESSION_DISCONNECTED);
              }
              params = (0, utils_1$4.parsePersonalSign)(params);
              const request = this._formatRequest({
                  method: "personal_sign",
                  params,
              });
              const result = yield this._sendCallRequest(request);
              return result;
          });
      }
      signTypedData(params) {
          return (0, tslib_1$7.__awaiter)(this, void 0, void 0, function* () {
              if (!this._connected) {
                  throw new Error(errors_1$1.ERROR_SESSION_DISCONNECTED);
              }
              const request = this._formatRequest({
                  method: "eth_signTypedData",
                  params,
              });
              const result = yield this._sendCallRequest(request);
              return result;
          });
      }
      updateChain(chainParams) {
          return (0, tslib_1$7.__awaiter)(this, void 0, void 0, function* () {
              if (!this._connected) {
                  throw new Error("Session currently disconnected");
              }
              const request = this._formatRequest({
                  method: "wallet_updateChain",
                  params: [chainParams],
              });
              const result = yield this._sendCallRequest(request);
              return result;
          });
      }
      unsafeSend(request, options) {
          this._sendRequest(request, options);
          this._eventManager.trigger({
              event: "call_request_sent",
              params: [{ request, options }],
          });
          return new Promise((resolve, reject) => {
              this._subscribeToResponse(request.id, (error, payload) => {
                  if (error) {
                      reject(error);
                      return;
                  }
                  if (!payload) {
                      throw new Error(errors_1$1.ERROR_MISSING_JSON_RPC);
                  }
                  resolve(payload);
              });
          });
      }
      sendCustomRequest(request, options) {
          return (0, tslib_1$7.__awaiter)(this, void 0, void 0, function* () {
              if (!this._connected) {
                  throw new Error(errors_1$1.ERROR_SESSION_DISCONNECTED);
              }
              switch (request.method) {
                  case "eth_accounts":
                      return this.accounts;
                  case "eth_chainId":
                      return (0, utils_1$4.convertNumberToHex)(this.chainId);
                  case "eth_sendTransaction":
                  case "eth_signTransaction":
                      if (request.params) {
                          request.params[0] = (0, utils_1$4.parseTransactionData)(request.params[0]);
                      }
                      break;
                  case "personal_sign":
                      if (request.params) {
                          request.params = (0, utils_1$4.parsePersonalSign)(request.params);
                      }
                      break;
              }
              const formattedRequest = this._formatRequest(request);
              const result = yield this._sendCallRequest(formattedRequest, options);
              return result;
          });
      }
      approveRequest(response) {
          if ((0, utils_1$4.isJsonRpcResponseSuccess)(response)) {
              const formattedResponse = this._formatResponse(response);
              this._sendResponse(formattedResponse);
          }
          else {
              throw new Error(errors_1$1.ERROR_MISSING_RESULT);
          }
      }
      rejectRequest(response) {
          if ((0, utils_1$4.isJsonRpcResponseError)(response)) {
              const formattedResponse = this._formatResponse(response);
              this._sendResponse(formattedResponse);
          }
          else {
              throw new Error(errors_1$1.ERROR_MISSING_ERROR);
          }
      }
      transportClose() {
          this._transport.close();
      }
      _sendRequest(request, options) {
          return (0, tslib_1$7.__awaiter)(this, void 0, void 0, function* () {
              const callRequest = this._formatRequest(request);
              const encryptionPayload = yield this._encrypt(callRequest);
              const topic = typeof (options === null || options === void 0 ? void 0 : options.topic) !== "undefined" ? options.topic : this.peerId;
              const payload = JSON.stringify(encryptionPayload);
              const silent = typeof (options === null || options === void 0 ? void 0 : options.forcePushNotification) !== "undefined"
                  ? !options.forcePushNotification
                  : (0, utils_1$4.isSilentPayload)(callRequest);
              this._transport.send(payload, topic, silent);
          });
      }
      _sendResponse(response) {
          return (0, tslib_1$7.__awaiter)(this, void 0, void 0, function* () {
              const encryptionPayload = yield this._encrypt(response);
              const topic = this.peerId;
              const payload = JSON.stringify(encryptionPayload);
              const silent = true;
              this._transport.send(payload, topic, silent);
          });
      }
      _sendSessionRequest(request, errorMsg, options) {
          return (0, tslib_1$7.__awaiter)(this, void 0, void 0, function* () {
              this._sendRequest(request, options);
              this._subscribeToSessionResponse(request.id, errorMsg);
          });
      }
      _sendCallRequest(request, options) {
          this._sendRequest(request, options);
          this._eventManager.trigger({
              event: "call_request_sent",
              params: [{ request, options }],
          });
          return this._subscribeToCallResponse(request.id);
      }
      _formatRequest(request) {
          if (typeof request.method === "undefined") {
              throw new Error(errors_1$1.ERROR_MISSING_METHOD);
          }
          const formattedRequest = {
              id: typeof request.id === "undefined" ? (0, utils_1$4.payloadId)() : request.id,
              jsonrpc: "2.0",
              method: request.method,
              params: typeof request.params === "undefined" ? [] : request.params,
          };
          return formattedRequest;
      }
      _formatResponse(response) {
          if (typeof response.id === "undefined") {
              throw new Error(errors_1$1.ERROR_MISSING_ID);
          }
          const baseResponse = { id: response.id, jsonrpc: "2.0" };
          if ((0, utils_1$4.isJsonRpcResponseError)(response)) {
              const error = (0, utils_1$4.formatRpcError)(response.error);
              const errorResponse = Object.assign(Object.assign(Object.assign({}, baseResponse), response), { error });
              return errorResponse;
          }
          else if ((0, utils_1$4.isJsonRpcResponseSuccess)(response)) {
              const successResponse = Object.assign(Object.assign({}, baseResponse), response);
              return successResponse;
          }
          throw new Error(errors_1$1.ERROR_INVALID_RESPONSE);
      }
      _handleSessionDisconnect(errorMsg) {
          const message = errorMsg || "Session Disconnected";
          if (!this._connected) {
              if (this._qrcodeModal) {
                  this._qrcodeModal.close();
              }
              (0, utils_1$4.removeLocal)(utils_1$4.mobileLinkChoiceKey);
          }
          if (this._connected) {
              this._connected = false;
          }
          if (this._handshakeId) {
              this._handshakeId = 0;
          }
          if (this._handshakeTopic) {
              this._handshakeTopic = "";
          }
          if (this._peerId) {
              this._peerId = "";
          }
          this._eventManager.trigger({
              event: "disconnect",
              params: [{ message }],
          });
          this._removeStorageSession();
          this.transportClose();
      }
      _handleSessionResponse(errorMsg, sessionParams) {
          if (sessionParams) {
              if (sessionParams.approved) {
                  if (!this._connected) {
                      this._connected = true;
                      if (sessionParams.chainId) {
                          this.chainId = sessionParams.chainId;
                      }
                      if (sessionParams.accounts) {
                          this.accounts = sessionParams.accounts;
                      }
                      if (sessionParams.peerId && !this.peerId) {
                          this.peerId = sessionParams.peerId;
                      }
                      if (sessionParams.peerMeta && !this.peerMeta) {
                          this.peerMeta = sessionParams.peerMeta;
                      }
                      this._eventManager.trigger({
                          event: "connect",
                          params: [
                              {
                                  peerId: this.peerId,
                                  peerMeta: this.peerMeta,
                                  chainId: this.chainId,
                                  accounts: this.accounts,
                              },
                          ],
                      });
                  }
                  else {
                      if (sessionParams.chainId) {
                          this.chainId = sessionParams.chainId;
                      }
                      if (sessionParams.accounts) {
                          this.accounts = sessionParams.accounts;
                      }
                      this._eventManager.trigger({
                          event: "session_update",
                          params: [
                              {
                                  chainId: this.chainId,
                                  accounts: this.accounts,
                              },
                          ],
                      });
                  }
                  this._manageStorageSession();
              }
              else {
                  this._handleSessionDisconnect(errorMsg);
              }
          }
          else {
              this._handleSessionDisconnect(errorMsg);
          }
      }
      _handleIncomingMessages(socketMessage) {
          return (0, tslib_1$7.__awaiter)(this, void 0, void 0, function* () {
              const activeTopics = [this.clientId, this.handshakeTopic];
              if (!activeTopics.includes(socketMessage.topic)) {
                  return;
              }
              let encryptionPayload;
              try {
                  encryptionPayload = JSON.parse(socketMessage.payload);
              }
              catch (error) {
                  return;
              }
              const payload = yield this._decrypt(encryptionPayload);
              if (payload) {
                  this._eventManager.trigger(payload);
              }
          });
      }
      _subscribeToSessionRequest() {
          this._transport.subscribe(this.handshakeTopic);
      }
      _subscribeToResponse(id, callback) {
          this.on(`response:${id}`, callback);
      }
      _subscribeToSessionResponse(id, errorMsg) {
          this._subscribeToResponse(id, (error, payload) => {
              if (error) {
                  this._handleSessionResponse(error.message);
                  return;
              }
              if (payload.result) {
                  this._handleSessionResponse(errorMsg, payload.result);
              }
              else if (payload.error && payload.error.message) {
                  this._handleSessionResponse(payload.error.message);
              }
              else {
                  this._handleSessionResponse(errorMsg);
              }
          });
      }
      _subscribeToCallResponse(id) {
          return new Promise((resolve, reject) => {
              this._subscribeToResponse(id, (error, payload) => {
                  if (error) {
                      reject(error);
                      return;
                  }
                  if (payload.result) {
                      resolve(payload.result);
                  }
                  else if (payload.error && payload.error.message) {
                      reject(new Error(payload.error.message));
                  }
                  else {
                      reject(new Error(errors_1$1.ERROR_INVALID_RESPONSE));
                  }
              });
          });
      }
      _subscribeToInternalEvents() {
          this.on("display_uri", () => {
              if (this._qrcodeModal) {
                  this._qrcodeModal.open(this.uri, () => {
                      this._eventManager.trigger({
                          event: "modal_closed",
                          params: [],
                      });
                  }, this._qrcodeModalOptions);
              }
          });
          this.on("connect", () => {
              if (this._qrcodeModal) {
                  this._qrcodeModal.close();
              }
          });
          this.on("call_request_sent", (error, payload) => {
              const { request } = payload.params[0];
              if ((0, utils_1$4.isMobile)() && this._signingMethods.includes(request.method)) {
                  const mobileLinkUrl = (0, utils_1$4.getLocal)(utils_1$4.mobileLinkChoiceKey);
                  if (mobileLinkUrl) {
                      window.location.href = mobileLinkUrl.href;
                  }
              }
          });
          this.on("wc_sessionRequest", (error, payload) => {
              if (error) {
                  this._eventManager.trigger({
                      event: "error",
                      params: [
                          {
                              code: "SESSION_REQUEST_ERROR",
                              message: error.toString(),
                          },
                      ],
                  });
              }
              this.handshakeId = payload.id;
              this.peerId = payload.params[0].peerId;
              this.peerMeta = payload.params[0].peerMeta;
              const internalPayload = Object.assign(Object.assign({}, payload), { method: "session_request" });
              this._eventManager.trigger(internalPayload);
          });
          this.on("wc_sessionUpdate", (error, payload) => {
              if (error) {
                  this._handleSessionResponse(error.message);
              }
              this._handleSessionResponse("Session disconnected", payload.params[0]);
          });
      }
      _initTransport() {
          this._transport.on("message", (socketMessage) => this._handleIncomingMessages(socketMessage));
          this._transport.on("open", () => this._eventManager.trigger({ event: "transport_open", params: [] }));
          this._transport.on("close", () => this._eventManager.trigger({ event: "transport_close", params: [] }));
          this._transport.on("error", () => this._eventManager.trigger({
              event: "transport_error",
              params: ["Websocket connection failed"],
          }));
          this._transport.open();
      }
      _formatUri() {
          const protocol = this.protocol;
          const handshakeTopic = this.handshakeTopic;
          const version = this.version;
          const bridge = encodeURIComponent(this.bridge);
          const key = this.key;
          const uri = `${protocol}:${handshakeTopic}@${version}?bridge=${bridge}&key=${key}`;
          return uri;
      }
      _parseUri(uri) {
          const result = (0, utils_1$4.parseWalletConnectUri)(uri);
          if (result.protocol === this.protocol) {
              if (!result.handshakeTopic) {
                  throw Error("Invalid or missing handshakeTopic parameter value");
              }
              const handshakeTopic = result.handshakeTopic;
              if (!result.bridge) {
                  throw Error("Invalid or missing bridge url parameter value");
              }
              const bridge = decodeURIComponent(result.bridge);
              if (!result.key) {
                  throw Error("Invalid or missing key parameter value");
              }
              const key = result.key;
              return { handshakeTopic, bridge, key };
          }
          else {
              throw new Error(errors_1$1.ERROR_INVALID_URI);
          }
      }
      _generateKey() {
          return (0, tslib_1$7.__awaiter)(this, void 0, void 0, function* () {
              if (this._cryptoLib) {
                  const result = yield this._cryptoLib.generateKey();
                  return result;
              }
              return null;
          });
      }
      _encrypt(data) {
          return (0, tslib_1$7.__awaiter)(this, void 0, void 0, function* () {
              const key = this._key;
              if (this._cryptoLib && key) {
                  const result = yield this._cryptoLib.encrypt(data, key);
                  return result;
              }
              return null;
          });
      }
      _decrypt(payload) {
          return (0, tslib_1$7.__awaiter)(this, void 0, void 0, function* () {
              const key = this._key;
              if (this._cryptoLib && key) {
                  const result = yield this._cryptoLib.decrypt(payload, key);
                  return result;
              }
              return null;
          });
      }
      _getStorageSession() {
          let result = null;
          if (this._sessionStorage) {
              result = this._sessionStorage.getSession();
          }
          return result;
      }
      _setStorageSession() {
          if (this._sessionStorage) {
              this._sessionStorage.setSession(this.session);
          }
      }
      _removeStorageSession() {
          if (this._sessionStorage) {
              this._sessionStorage.removeSession();
          }
      }
      _manageStorageSession() {
          if (this._connected) {
              this._setStorageSession();
          }
          else {
              this._removeStorageSession();
          }
      }
      _registerPushServer(pushServerOpts) {
          if (!pushServerOpts.url || typeof pushServerOpts.url !== "string") {
              throw Error("Invalid or missing pushServerOpts.url parameter value");
          }
          if (!pushServerOpts.type || typeof pushServerOpts.type !== "string") {
              throw Error("Invalid or missing pushServerOpts.type parameter value");
          }
          if (!pushServerOpts.token || typeof pushServerOpts.token !== "string") {
              throw Error("Invalid or missing pushServerOpts.token parameter value");
          }
          const pushSubscription = {
              bridge: this.bridge,
              topic: this.clientId,
              type: pushServerOpts.type,
              token: pushServerOpts.token,
              peerName: "",
              language: pushServerOpts.language || "",
          };
          this.on("connect", (error, payload) => (0, tslib_1$7.__awaiter)(this, void 0, void 0, function* () {
              if (error) {
                  throw error;
              }
              if (pushServerOpts.peerMeta) {
                  const peerName = payload.params[0].peerMeta.name;
                  pushSubscription.peerName = peerName;
              }
              try {
                  const response = yield fetch(`${pushServerOpts.url}/new`, {
                      method: "POST",
                      headers: {
                          Accept: "application/json",
                          "Content-Type": "application/json",
                      },
                      body: JSON.stringify(pushSubscription),
                  });
                  const json = yield response.json();
                  if (!json.success) {
                      throw Error("Failed to register in Push Server");
                  }
              }
              catch (error) {
                  throw Error("Failed to register in Push Server");
              }
          }));
      }
  }
  cjs$a.default = Connector;

  var cjs$2 = {};

  var node$3 = {};

  var node$2 = {};

  var __importDefault$3 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
      return (mod && mod.__esModule) ? mod : { "default": mod };
  };
  Object.defineProperty(node$2, "__esModule", { value: true });
  node$2.randomBytes = void 0;
  const crypto_1$1 = __importDefault$3(require$$0__default$2["default"]);
  const encoding_1$1 = cjs$5;
  function randomBytes(length) {
      const buf = crypto_1$1.default.randomBytes(length);
      return encoding_1$1.bufferToArray(buf);
  }
  node$2.randomBytes = randomBytes;

  var aes = {};

  var node$1 = {};

  var constants$7 = {};

  var _default$1 = {};

  var length = {};

  Object.defineProperty(length, "__esModule", { value: true });
  length.LENGTH_1024 = length.LENGTH_512 = length.LENGTH_256 = length.LENGTH_128 = length.LENGTH_64 = length.LENGTH_32 = length.LENGTH_16 = length.LENGTH_1 = length.LENGTH_0 = void 0;
  length.LENGTH_0 = 0;
  length.LENGTH_1 = 1;
  length.LENGTH_16 = 16;
  length.LENGTH_32 = 32;
  length.LENGTH_64 = 64;
  length.LENGTH_128 = 128;
  length.LENGTH_256 = 256;
  length.LENGTH_512 = 512;
  length.LENGTH_1024 = 1024;

  (function (exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.MAC_LENGTH = exports.IV_LENGTH = exports.KEY_LENGTH = exports.PREFIX_LENGTH = exports.RIPEMD160_NODE_ALGO = exports.SHA512_NODE_ALGO = exports.SHA256_NODE_ALGO = exports.HMAC_NODE_ALGO = exports.AES_NODE_ALGO = exports.SHA512_BROWSER_ALGO = exports.SHA256_BROWSER_ALGO = exports.HMAC_BROWSER = exports.HMAC_BROWSER_ALGO = exports.AES_BROWSER_ALGO = exports.HMAC_LENGTH = exports.AES_LENGTH = void 0;
  const length_1 = length;
  exports.AES_LENGTH = length_1.LENGTH_256;
  exports.HMAC_LENGTH = length_1.LENGTH_256;
  exports.AES_BROWSER_ALGO = "AES-CBC";
  exports.HMAC_BROWSER_ALGO = `SHA-${exports.AES_LENGTH}`;
  exports.HMAC_BROWSER = "HMAC";
  exports.SHA256_BROWSER_ALGO = "SHA-256";
  exports.SHA512_BROWSER_ALGO = "SHA-512";
  exports.AES_NODE_ALGO = `aes-${exports.AES_LENGTH}-cbc`;
  exports.HMAC_NODE_ALGO = `sha${exports.HMAC_LENGTH}`;
  exports.SHA256_NODE_ALGO = "sha256";
  exports.SHA512_NODE_ALGO = "sha512";
  exports.RIPEMD160_NODE_ALGO = "ripemd160";
  exports.PREFIX_LENGTH = length_1.LENGTH_1;
  exports.KEY_LENGTH = length_1.LENGTH_32;
  exports.IV_LENGTH = length_1.LENGTH_16;
  exports.MAC_LENGTH = length_1.LENGTH_32;

  }(_default$1));

  var encoding$1 = {};

  Object.defineProperty(encoding$1, "__esModule", { value: true });
  encoding$1.UTF8_ENC = encoding$1.HEX_ENC = void 0;
  encoding$1.HEX_ENC = "hex";
  encoding$1.UTF8_ENC = "utf8";

  var error$1 = {};

  Object.defineProperty(error$1, "__esModule", { value: true });
  error$1.ERROR_BAD_MAC = void 0;
  error$1.ERROR_BAD_MAC = "Bad MAC";

  var operations = {};

  Object.defineProperty(operations, "__esModule", { value: true });
  operations.VERIFY_OP = operations.SIGN_OP = operations.DECRYPT_OP = operations.ENCRYPT_OP = void 0;
  operations.ENCRYPT_OP = "encrypt";
  operations.DECRYPT_OP = "decrypt";
  operations.SIGN_OP = "sign";
  operations.VERIFY_OP = "verify";

  (function (exports) {
  var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
  }) : (function(o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
  }));
  var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
      for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  __exportStar(_default$1, exports);
  __exportStar(encoding$1, exports);
  __exportStar(error$1, exports);
  __exportStar(length, exports);
  __exportStar(operations, exports);

  }(constants$7));

  var __importDefault$2 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
      return (mod && mod.__esModule) ? mod : { "default": mod };
  };
  Object.defineProperty(node$1, "__esModule", { value: true });
  node$1.nodeRipemd160 = node$1.nodeSha512 = node$1.nodeSha256 = node$1.nodeHmacSha512Sign = node$1.nodeHmacSha256Sign = node$1.nodeAesDecrypt = node$1.nodeAesEncrypt = void 0;
  const crypto_1 = __importDefault$2(require$$0__default$2["default"]);
  const encoding_1 = cjs$5;
  const constants_1 = constants$7;
  function nodeAesEncrypt(iv, key, data) {
      const cipher = crypto_1.default.createCipheriv(constants_1.AES_NODE_ALGO, Buffer.from(key), Buffer.from(iv));
      return encoding_1.bufferToArray(encoding_1.concatBuffers(cipher.update(Buffer.from(data)), cipher.final()));
  }
  node$1.nodeAesEncrypt = nodeAesEncrypt;
  function nodeAesDecrypt(iv, key, data) {
      const decipher = crypto_1.default.createDecipheriv(constants_1.AES_NODE_ALGO, Buffer.from(key), Buffer.from(iv));
      return encoding_1.bufferToArray(encoding_1.concatBuffers(decipher.update(Buffer.from(data)), decipher.final()));
  }
  node$1.nodeAesDecrypt = nodeAesDecrypt;
  function nodeHmacSha256Sign(key, data) {
      const buf = crypto_1.default
          .createHmac(constants_1.HMAC_NODE_ALGO, Buffer.from(key))
          .update(Buffer.from(data))
          .digest();
      return encoding_1.bufferToArray(buf);
  }
  node$1.nodeHmacSha256Sign = nodeHmacSha256Sign;
  function nodeHmacSha512Sign(key, data) {
      const buf = crypto_1.default
          .createHmac(constants_1.SHA512_NODE_ALGO, Buffer.from(key))
          .update(Buffer.from(data))
          .digest();
      return encoding_1.bufferToArray(buf);
  }
  node$1.nodeHmacSha512Sign = nodeHmacSha512Sign;
  function nodeSha256(data) {
      const buf = crypto_1.default
          .createHash(constants_1.SHA256_NODE_ALGO)
          .update(Buffer.from(data))
          .digest();
      return encoding_1.bufferToArray(buf);
  }
  node$1.nodeSha256 = nodeSha256;
  function nodeSha512(data) {
      const buf = crypto_1.default
          .createHash(constants_1.SHA512_NODE_ALGO)
          .update(Buffer.from(data))
          .digest();
      return encoding_1.bufferToArray(buf);
  }
  node$1.nodeSha512 = nodeSha512;
  function nodeRipemd160(data) {
      const buf = crypto_1.default
          .createHash(constants_1.RIPEMD160_NODE_ALGO)
          .update(Buffer.from(data))
          .digest();
      return encoding_1.bufferToArray(buf);
  }
  node$1.nodeRipemd160 = nodeRipemd160;

  var __awaiter$2 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  Object.defineProperty(aes, "__esModule", { value: true });
  aes.aesCbcDecrypt = aes.aesCbcEncrypt = void 0;
  const node_1$2 = node$1;
  function aesCbcEncrypt(iv, key, data) {
      return __awaiter$2(this, void 0, void 0, function* () {
          const result = node_1$2.nodeAesEncrypt(iv, key, data);
          return result;
      });
  }
  aes.aesCbcEncrypt = aesCbcEncrypt;
  function aesCbcDecrypt(iv, key, data) {
      return __awaiter$2(this, void 0, void 0, function* () {
          const result = node_1$2.nodeAesDecrypt(iv, key, data);
          return result;
      });
  }
  aes.aesCbcDecrypt = aesCbcDecrypt;

  var hmac$1 = {};

  var helpers = {};

  var env = {};

  (function (exports) {
  var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
  }) : (function(o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
  }));
  var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
      for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  __exportStar(cjs$4, exports);

  }(env));

  var pkcs7 = {};

  Object.defineProperty(pkcs7, "__esModule", { value: true });
  pkcs7.pkcs7 = void 0;
  const PADDING = [
      [16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16],
      [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15],
      [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14],
      [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13],
      [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12],
      [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11],
      [10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
      [9, 9, 9, 9, 9, 9, 9, 9, 9],
      [8, 8, 8, 8, 8, 8, 8, 8],
      [7, 7, 7, 7, 7, 7, 7],
      [6, 6, 6, 6, 6, 6],
      [5, 5, 5, 5, 5],
      [4, 4, 4, 4],
      [3, 3, 3],
      [2, 2],
      [1],
  ];
  pkcs7.pkcs7 = {
      pad(plaintext) {
          const padding = PADDING[plaintext.byteLength % 16 || 0];
          const result = new Uint8Array(plaintext.byteLength + padding.length);
          result.set(plaintext);
          result.set(padding, plaintext.byteLength);
          return result;
      },
      unpad(padded) {
          return padded.subarray(0, padded.byteLength - padded[padded.byteLength - 1]);
      },
  };

  var types = {};

  Object.defineProperty(types, "__esModule", { value: true });

  var validators = {};

  Object.defineProperty(validators, "__esModule", { value: true });
  validators.isConstantTime = validators.assert = void 0;
  function assert$i(condition, message) {
      if (!condition) {
          throw new Error(message || "Assertion failed");
      }
  }
  validators.assert = assert$i;
  function isConstantTime(arr1, arr2) {
      if (arr1.length !== arr2.length) {
          return false;
      }
      let res = 0;
      for (let i = 0; i < arr1.length; i++) {
          res |= arr1[i] ^ arr2[i];
      }
      return res === 0;
  }
  validators.isConstantTime = isConstantTime;

  (function (exports) {
  var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
  }) : (function(o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
  }));
  var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
      for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  __exportStar(env, exports);
  __exportStar(pkcs7, exports);
  __exportStar(types, exports);
  __exportStar(validators, exports);

  }(helpers));

  var __awaiter$1 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  Object.defineProperty(hmac$1, "__esModule", { value: true });
  hmac$1.hmacSha512Verify = hmac$1.hmacSha512Sign = hmac$1.hmacSha256Verify = hmac$1.hmacSha256Sign = void 0;
  const helpers_1 = helpers;
  const node_1$1 = node$1;
  function hmacSha256Sign(key, msg) {
      return __awaiter$1(this, void 0, void 0, function* () {
          const result = node_1$1.nodeHmacSha256Sign(key, msg);
          return result;
      });
  }
  hmac$1.hmacSha256Sign = hmacSha256Sign;
  function hmacSha256Verify(key, msg, sig) {
      return __awaiter$1(this, void 0, void 0, function* () {
          const expectedSig = node_1$1.nodeHmacSha256Sign(key, msg);
          const result = helpers_1.isConstantTime(expectedSig, sig);
          return result;
      });
  }
  hmac$1.hmacSha256Verify = hmacSha256Verify;
  function hmacSha512Sign(key, msg) {
      return __awaiter$1(this, void 0, void 0, function* () {
          const result = node_1$1.nodeHmacSha512Sign(key, msg);
          return result;
      });
  }
  hmac$1.hmacSha512Sign = hmacSha512Sign;
  function hmacSha512Verify(key, msg, sig) {
      return __awaiter$1(this, void 0, void 0, function* () {
          const expectedSig = node_1$1.nodeHmacSha512Sign(key, msg);
          const result = helpers_1.isConstantTime(expectedSig, sig);
          return result;
      });
  }
  hmac$1.hmacSha512Verify = hmacSha512Verify;

  var sha2 = {};

  var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  Object.defineProperty(sha2, "__esModule", { value: true });
  sha2.ripemd160 = sha2.sha512 = sha2.sha256 = void 0;
  const node_1 = node$1;
  function sha256(msg) {
      return __awaiter(this, void 0, void 0, function* () {
          const result = node_1.nodeSha256(msg);
          return result;
      });
  }
  sha2.sha256 = sha256;
  function sha512(msg) {
      return __awaiter(this, void 0, void 0, function* () {
          const result = node_1.nodeSha512(msg);
          return result;
      });
  }
  sha2.sha512 = sha512;
  function ripemd160(msg) {
      return __awaiter(this, void 0, void 0, function* () {
          const result = node_1.nodeRipemd160(msg);
          return result;
      });
  }
  sha2.ripemd160 = ripemd160;

  (function (exports) {
  var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
  }) : (function(o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
  }));
  var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
      for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  __exportStar(node$2, exports);
  __exportStar(aes, exports);
  __exportStar(hmac$1, exports);
  __exportStar(sha2, exports);
  __exportStar(helpers, exports);
  __exportStar(constants$7, exports);

  }(node$3));

  Object.defineProperty(cjs$2, "__esModule", { value: true });
  cjs$2.decrypt = cjs$2.encrypt = cjs$2.verifyHmac = cjs$2.generateKey = void 0;
  const tslib_1$6 = require$$0$1;
  const crypto$1 = (0, tslib_1$6.__importStar)(node$3);
  const encoding = (0, tslib_1$6.__importStar)(cjs$5);
  const utils_1$3 = cjs$9;
  function generateKey(length) {
      return (0, tslib_1$6.__awaiter)(this, void 0, void 0, function* () {
          const _length = (length || 256) / 8;
          const bytes = crypto$1.randomBytes(_length);
          const result = (0, utils_1$3.convertBufferToArrayBuffer)(encoding.arrayToBuffer(bytes));
          return result;
      });
  }
  cjs$2.generateKey = generateKey;
  function verifyHmac(payload, key) {
      return (0, tslib_1$6.__awaiter)(this, void 0, void 0, function* () {
          const cipherText = encoding.hexToArray(payload.data);
          const iv = encoding.hexToArray(payload.iv);
          const hmac = encoding.hexToArray(payload.hmac);
          const hmacHex = encoding.arrayToHex(hmac, false);
          const unsigned = encoding.concatArrays(cipherText, iv);
          const chmac = yield crypto$1.hmacSha256Sign(key, unsigned);
          const chmacHex = encoding.arrayToHex(chmac, false);
          if (encoding.removeHexPrefix(hmacHex) === encoding.removeHexPrefix(chmacHex)) {
              return true;
          }
          return false;
      });
  }
  cjs$2.verifyHmac = verifyHmac;
  function encrypt(data, key, providedIv) {
      return (0, tslib_1$6.__awaiter)(this, void 0, void 0, function* () {
          const _key = encoding.bufferToArray((0, utils_1$3.convertArrayBufferToBuffer)(key));
          const ivArrayBuffer = providedIv || (yield generateKey(128));
          const iv = encoding.bufferToArray((0, utils_1$3.convertArrayBufferToBuffer)(ivArrayBuffer));
          const ivHex = encoding.arrayToHex(iv, false);
          const contentString = JSON.stringify(data);
          const content = encoding.utf8ToArray(contentString);
          const cipherText = yield crypto$1.aesCbcEncrypt(iv, _key, content);
          const cipherTextHex = encoding.arrayToHex(cipherText, false);
          const unsigned = encoding.concatArrays(cipherText, iv);
          const hmac = yield crypto$1.hmacSha256Sign(_key, unsigned);
          const hmacHex = encoding.arrayToHex(hmac, false);
          return {
              data: cipherTextHex,
              hmac: hmacHex,
              iv: ivHex,
          };
      });
  }
  cjs$2.encrypt = encrypt;
  function decrypt(payload, key) {
      return (0, tslib_1$6.__awaiter)(this, void 0, void 0, function* () {
          const _key = encoding.bufferToArray((0, utils_1$3.convertArrayBufferToBuffer)(key));
          if (!_key) {
              throw new Error("Missing key: required for decryption");
          }
          const verified = yield verifyHmac(payload, _key);
          if (!verified) {
              return null;
          }
          const cipherText = encoding.hexToArray(payload.data);
          const iv = encoding.hexToArray(payload.iv);
          const buffer = yield crypto$1.aesCbcDecrypt(iv, _key, cipherText);
          const utf8 = encoding.arrayToUtf8(buffer);
          let data;
          try {
              data = JSON.parse(utf8);
          }
          catch (error) {
              return null;
          }
          return data;
      });
  }
  cjs$2.decrypt = decrypt;

  Object.defineProperty(cjs$b, "__esModule", { value: true });
  const tslib_1$5 = require$$0$1;
  const core_1 = (0, tslib_1$5.__importDefault)(cjs$a);
  const cryptoLib = (0, tslib_1$5.__importStar)(cjs$2);
  class WalletConnect extends core_1.default {
      constructor(connectorOpts, pushServerOpts) {
          super({
              cryptoLib,
              connectorOpts,
              pushServerOpts,
          });
      }
  }
  cjs$b.default = WalletConnect;

  var server = {};

  // can-promise has a crash in some versions of react native that dont have
  // standard global objects
  // https://github.com/soldair/node-qrcode/issues/157

  var canPromise$2 = function () {
    return typeof Promise === 'function' && Promise.prototype && Promise.prototype.then
  };

  var qrcode = {};

  var buffer = {};

  /* Node.js 6.4.0 and up has full support */

  var hasFullSupport = (function () {
    try {
      if (!Buffer.isEncoding('latin1')) {
        return false
      }

      var buf = Buffer.alloc ? Buffer.alloc(4) : new Buffer(4);

      buf.fill('ab', 'ucs2');

      return (buf.toString('hex') === '61006200')
    } catch (_) {
      return false
    }
  }());

  function isSingleByte (val) {
    return (val.length === 1 && val.charCodeAt(0) < 256)
  }

  function fillWithNumber (buffer, val, start, end) {
    if (start < 0 || end > buffer.length) {
      throw new RangeError('Out of range index')
    }

    start = start >>> 0;
    end = end === undefined ? buffer.length : end >>> 0;

    if (end > start) {
      buffer.fill(val, start, end);
    }

    return buffer
  }

  function fillWithBuffer (buffer, val, start, end) {
    if (start < 0 || end > buffer.length) {
      throw new RangeError('Out of range index')
    }

    if (end <= start) {
      return buffer
    }

    start = start >>> 0;
    end = end === undefined ? buffer.length : end >>> 0;

    var pos = start;
    var len = val.length;
    while (pos <= (end - len)) {
      val.copy(buffer, pos);
      pos += len;
    }

    if (pos !== end) {
      val.copy(buffer, pos, 0, end - pos);
    }

    return buffer
  }

  function fill (buffer, val, start, end, encoding) {
    if (hasFullSupport) {
      return buffer.fill(val, start, end, encoding)
    }

    if (typeof val === 'number') {
      return fillWithNumber(buffer, val, start, end)
    }

    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start;
        start = 0;
        end = buffer.length;
      } else if (typeof end === 'string') {
        encoding = end;
        end = buffer.length;
      }

      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string')
      }

      if (encoding === 'latin1') {
        encoding = 'binary';
      }

      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding)
      }

      if (val === '') {
        return fillWithNumber(buffer, 0, start, end)
      }

      if (isSingleByte(val)) {
        return fillWithNumber(buffer, val.charCodeAt(0), start, end)
      }

      val = new Buffer(val, encoding);
    }

    if (Buffer.isBuffer(val)) {
      return fillWithBuffer(buffer, val, start, end)
    }

    // Other values (e.g. undefined, boolean, object) results in zero-fill
    return fillWithNumber(buffer, 0, start, end)
  }

  var bufferFill$1 = fill;

  function allocUnsafe$1 (size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be a number')
    }

    if (size < 0) {
      throw new RangeError('"size" argument must not be negative')
    }

    if (Buffer.allocUnsafe) {
      return Buffer.allocUnsafe(size)
    } else {
      return new Buffer(size)
    }
  }

  var bufferAllocUnsafe = allocUnsafe$1;

  var bufferFill = bufferFill$1;
  var allocUnsafe = bufferAllocUnsafe;

  var bufferAlloc = function alloc (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be a number')
    }

    if (size < 0) {
      throw new RangeError('"size" argument must not be negative')
    }

    if (Buffer.alloc) {
      return Buffer.alloc(size, fill, encoding)
    }

    var buffer = allocUnsafe(size);

    if (size === 0) {
      return buffer
    }

    if (fill === undefined) {
      return bufferFill(buffer, 0)
    }

    if (typeof encoding !== 'string') {
      encoding = undefined;
    }

    return bufferFill(buffer, fill, encoding)
  };

  /* eslint-disable node/no-deprecated-api */

  var toString$1 = Object.prototype.toString;

  var isModern = (
    typeof Buffer !== 'undefined' &&
    typeof Buffer.alloc === 'function' &&
    typeof Buffer.allocUnsafe === 'function' &&
    typeof Buffer.from === 'function'
  );

  function isArrayBuffer (input) {
    return toString$1.call(input).slice(8, -1) === 'ArrayBuffer'
  }

  function fromArrayBuffer (obj, byteOffset, length) {
    byteOffset >>>= 0;

    var maxLength = obj.byteLength - byteOffset;

    if (maxLength < 0) {
      throw new RangeError("'offset' is out of bounds")
    }

    if (length === undefined) {
      length = maxLength;
    } else {
      length >>>= 0;

      if (length > maxLength) {
        throw new RangeError("'length' is out of bounds")
      }
    }

    return isModern
      ? Buffer.from(obj.slice(byteOffset, byteOffset + length))
      : new Buffer(new Uint8Array(obj.slice(byteOffset, byteOffset + length)))
  }

  function fromString (string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8';
    }

    if (!Buffer.isEncoding(encoding)) {
      throw new TypeError('"encoding" must be a valid string encoding')
    }

    return isModern
      ? Buffer.from(string, encoding)
      : new Buffer(string, encoding)
  }

  function bufferFrom (value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('"value" argument must not be a number')
    }

    if (isArrayBuffer(value)) {
      return fromArrayBuffer(value, encodingOrOffset, length)
    }

    if (typeof value === 'string') {
      return fromString(value, encodingOrOffset)
    }

    return isModern
      ? Buffer.from(value)
      : new Buffer(value)
  }

  var bufferFrom_1 = bufferFrom;

  buffer.alloc = bufferAlloc;
  buffer.from = bufferFrom_1;

  var utils$q = {};

  var toSJISFunction;
  var CODEWORDS_COUNT = [
    0, // Not used
    26, 44, 70, 100, 134, 172, 196, 242, 292, 346,
    404, 466, 532, 581, 655, 733, 815, 901, 991, 1085,
    1156, 1258, 1364, 1474, 1588, 1706, 1828, 1921, 2051, 2185,
    2323, 2465, 2611, 2761, 2876, 3034, 3196, 3362, 3532, 3706
  ];

  /**
   * Returns the QR Code size for the specified version
   *
   * @param  {Number} version QR Code version
   * @return {Number}         size of QR code
   */
  utils$q.getSymbolSize = function getSymbolSize (version) {
    if (!version) throw new Error('"version" cannot be null or undefined')
    if (version < 1 || version > 40) throw new Error('"version" should be in range from 1 to 40')
    return version * 4 + 17
  };

  /**
   * Returns the total number of codewords used to store data and EC information.
   *
   * @param  {Number} version QR Code version
   * @return {Number}         Data length in bits
   */
  utils$q.getSymbolTotalCodewords = function getSymbolTotalCodewords (version) {
    return CODEWORDS_COUNT[version]
  };

  /**
   * Encode data with Bose-Chaudhuri-Hocquenghem
   *
   * @param  {Number} data Value to encode
   * @return {Number}      Encoded value
   */
  utils$q.getBCHDigit = function (data) {
    var digit = 0;

    while (data !== 0) {
      digit++;
      data >>>= 1;
    }

    return digit
  };

  utils$q.setToSJISFunction = function setToSJISFunction (f) {
    if (typeof f !== 'function') {
      throw new Error('"toSJISFunc" is not a valid function.')
    }

    toSJISFunction = f;
  };

  utils$q.isKanjiModeEnabled = function () {
    return typeof toSJISFunction !== 'undefined'
  };

  utils$q.toSJIS = function toSJIS (kanji) {
    return toSJISFunction(kanji)
  };

  var errorCorrectionLevel = {};

  (function (exports) {
  exports.L = { bit: 1 };
  exports.M = { bit: 0 };
  exports.Q = { bit: 3 };
  exports.H = { bit: 2 };

  function fromString (string) {
    if (typeof string !== 'string') {
      throw new Error('Param is not a string')
    }

    var lcStr = string.toLowerCase();

    switch (lcStr) {
      case 'l':
      case 'low':
        return exports.L

      case 'm':
      case 'medium':
        return exports.M

      case 'q':
      case 'quartile':
        return exports.Q

      case 'h':
      case 'high':
        return exports.H

      default:
        throw new Error('Unknown EC Level: ' + string)
    }
  }

  exports.isValid = function isValid (level) {
    return level && typeof level.bit !== 'undefined' &&
      level.bit >= 0 && level.bit < 4
  };

  exports.from = function from (value, defaultValue) {
    if (exports.isValid(value)) {
      return value
    }

    try {
      return fromString(value)
    } catch (e) {
      return defaultValue
    }
  };
  }(errorCorrectionLevel));

  function BitBuffer$1 () {
    this.buffer = [];
    this.length = 0;
  }

  BitBuffer$1.prototype = {

    get: function (index) {
      var bufIndex = Math.floor(index / 8);
      return ((this.buffer[bufIndex] >>> (7 - index % 8)) & 1) === 1
    },

    put: function (num, length) {
      for (var i = 0; i < length; i++) {
        this.putBit(((num >>> (length - i - 1)) & 1) === 1);
      }
    },

    getLengthInBits: function () {
      return this.length
    },

    putBit: function (bit) {
      var bufIndex = Math.floor(this.length / 8);
      if (this.buffer.length <= bufIndex) {
        this.buffer.push(0);
      }

      if (bit) {
        this.buffer[bufIndex] |= (0x80 >>> (this.length % 8));
      }

      this.length++;
    }
  };

  var bitBuffer = BitBuffer$1;

  var BufferUtil$4 = buffer;

  /**
   * Helper class to handle QR Code symbol modules
   *
   * @param {Number} size Symbol size
   */
  function BitMatrix$1 (size) {
    if (!size || size < 1) {
      throw new Error('BitMatrix size must be defined and greater than 0')
    }

    this.size = size;
    this.data = BufferUtil$4.alloc(size * size);
    this.reservedBit = BufferUtil$4.alloc(size * size);
  }

  /**
   * Set bit value at specified location
   * If reserved flag is set, this bit will be ignored during masking process
   *
   * @param {Number}  row
   * @param {Number}  col
   * @param {Boolean} value
   * @param {Boolean} reserved
   */
  BitMatrix$1.prototype.set = function (row, col, value, reserved) {
    var index = row * this.size + col;
    this.data[index] = value;
    if (reserved) this.reservedBit[index] = true;
  };

  /**
   * Returns bit value at specified location
   *
   * @param  {Number}  row
   * @param  {Number}  col
   * @return {Boolean}
   */
  BitMatrix$1.prototype.get = function (row, col) {
    return this.data[row * this.size + col]
  };

  /**
   * Applies xor operator at specified location
   * (used during masking process)
   *
   * @param {Number}  row
   * @param {Number}  col
   * @param {Boolean} value
   */
  BitMatrix$1.prototype.xor = function (row, col, value) {
    this.data[row * this.size + col] ^= value;
  };

  /**
   * Check if bit at specified location is reserved
   *
   * @param {Number}   row
   * @param {Number}   col
   * @return {Boolean}
   */
  BitMatrix$1.prototype.isReserved = function (row, col) {
    return this.reservedBit[row * this.size + col]
  };

  var bitMatrix = BitMatrix$1;

  var alignmentPattern = {};

  /**
   * Alignment pattern are fixed reference pattern in defined positions
   * in a matrix symbology, which enables the decode software to re-synchronise
   * the coordinate mapping of the image modules in the event of moderate amounts
   * of distortion of the image.
   *
   * Alignment patterns are present only in QR Code symbols of version 2 or larger
   * and their number depends on the symbol version.
   */

  (function (exports) {
  var getSymbolSize = utils$q.getSymbolSize;

  /**
   * Calculate the row/column coordinates of the center module of each alignment pattern
   * for the specified QR Code version.
   *
   * The alignment patterns are positioned symmetrically on either side of the diagonal
   * running from the top left corner of the symbol to the bottom right corner.
   *
   * Since positions are simmetrical only half of the coordinates are returned.
   * Each item of the array will represent in turn the x and y coordinate.
   * @see {@link getPositions}
   *
   * @param  {Number} version QR Code version
   * @return {Array}          Array of coordinate
   */
  exports.getRowColCoords = function getRowColCoords (version) {
    if (version === 1) return []

    var posCount = Math.floor(version / 7) + 2;
    var size = getSymbolSize(version);
    var intervals = size === 145 ? 26 : Math.ceil((size - 13) / (2 * posCount - 2)) * 2;
    var positions = [size - 7]; // Last coord is always (size - 7)

    for (var i = 1; i < posCount - 1; i++) {
      positions[i] = positions[i - 1] - intervals;
    }

    positions.push(6); // First coord is always 6

    return positions.reverse()
  };

  /**
   * Returns an array containing the positions of each alignment pattern.
   * Each array's element represent the center point of the pattern as (x, y) coordinates
   *
   * Coordinates are calculated expanding the row/column coordinates returned by {@link getRowColCoords}
   * and filtering out the items that overlaps with finder pattern
   *
   * @example
   * For a Version 7 symbol {@link getRowColCoords} returns values 6, 22 and 38.
   * The alignment patterns, therefore, are to be centered on (row, column)
   * positions (6,22), (22,6), (22,22), (22,38), (38,22), (38,38).
   * Note that the coordinates (6,6), (6,38), (38,6) are occupied by finder patterns
   * and are not therefore used for alignment patterns.
   *
   * var pos = getPositions(7)
   * // [[6,22], [22,6], [22,22], [22,38], [38,22], [38,38]]
   *
   * @param  {Number} version QR Code version
   * @return {Array}          Array of coordinates
   */
  exports.getPositions = function getPositions (version) {
    var coords = [];
    var pos = exports.getRowColCoords(version);
    var posLength = pos.length;

    for (var i = 0; i < posLength; i++) {
      for (var j = 0; j < posLength; j++) {
        // Skip if position is occupied by finder patterns
        if ((i === 0 && j === 0) ||             // top-left
            (i === 0 && j === posLength - 1) || // bottom-left
            (i === posLength - 1 && j === 0)) { // top-right
          continue
        }

        coords.push([pos[i], pos[j]]);
      }
    }

    return coords
  };
  }(alignmentPattern));

  var finderPattern = {};

  var getSymbolSize = utils$q.getSymbolSize;
  var FINDER_PATTERN_SIZE = 7;

  /**
   * Returns an array containing the positions of each finder pattern.
   * Each array's element represent the top-left point of the pattern as (x, y) coordinates
   *
   * @param  {Number} version QR Code version
   * @return {Array}          Array of coordinates
   */
  finderPattern.getPositions = function getPositions (version) {
    var size = getSymbolSize(version);

    return [
      // top-left
      [0, 0],
      // top-right
      [size - FINDER_PATTERN_SIZE, 0],
      // bottom-left
      [0, size - FINDER_PATTERN_SIZE]
    ]
  };

  var maskPattern = {};

  /**
   * Data mask pattern reference
   * @type {Object}
   */

  (function (exports) {
  exports.Patterns = {
    PATTERN000: 0,
    PATTERN001: 1,
    PATTERN010: 2,
    PATTERN011: 3,
    PATTERN100: 4,
    PATTERN101: 5,
    PATTERN110: 6,
    PATTERN111: 7
  };

  /**
   * Weighted penalty scores for the undesirable features
   * @type {Object}
   */
  var PenaltyScores = {
    N1: 3,
    N2: 3,
    N3: 40,
    N4: 10
  };

  /**
   * Check if mask pattern value is valid
   *
   * @param  {Number}  mask    Mask pattern
   * @return {Boolean}         true if valid, false otherwise
   */
  exports.isValid = function isValid (mask) {
    return mask != null && mask !== '' && !isNaN(mask) && mask >= 0 && mask <= 7
  };

  /**
   * Returns mask pattern from a value.
   * If value is not valid, returns undefined
   *
   * @param  {Number|String} value        Mask pattern value
   * @return {Number}                     Valid mask pattern or undefined
   */
  exports.from = function from (value) {
    return exports.isValid(value) ? parseInt(value, 10) : undefined
  };

  /**
  * Find adjacent modules in row/column with the same color
  * and assign a penalty value.
  *
  * Points: N1 + i
  * i is the amount by which the number of adjacent modules of the same color exceeds 5
  */
  exports.getPenaltyN1 = function getPenaltyN1 (data) {
    var size = data.size;
    var points = 0;
    var sameCountCol = 0;
    var sameCountRow = 0;
    var lastCol = null;
    var lastRow = null;

    for (var row = 0; row < size; row++) {
      sameCountCol = sameCountRow = 0;
      lastCol = lastRow = null;

      for (var col = 0; col < size; col++) {
        var module = data.get(row, col);
        if (module === lastCol) {
          sameCountCol++;
        } else {
          if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);
          lastCol = module;
          sameCountCol = 1;
        }

        module = data.get(col, row);
        if (module === lastRow) {
          sameCountRow++;
        } else {
          if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);
          lastRow = module;
          sameCountRow = 1;
        }
      }

      if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);
      if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);
    }

    return points
  };

  /**
   * Find 2x2 blocks with the same color and assign a penalty value
   *
   * Points: N2 * (m - 1) * (n - 1)
   */
  exports.getPenaltyN2 = function getPenaltyN2 (data) {
    var size = data.size;
    var points = 0;

    for (var row = 0; row < size - 1; row++) {
      for (var col = 0; col < size - 1; col++) {
        var last = data.get(row, col) +
          data.get(row, col + 1) +
          data.get(row + 1, col) +
          data.get(row + 1, col + 1);

        if (last === 4 || last === 0) points++;
      }
    }

    return points * PenaltyScores.N2
  };

  /**
   * Find 1:1:3:1:1 ratio (dark:light:dark:light:dark) pattern in row/column,
   * preceded or followed by light area 4 modules wide
   *
   * Points: N3 * number of pattern found
   */
  exports.getPenaltyN3 = function getPenaltyN3 (data) {
    var size = data.size;
    var points = 0;
    var bitsCol = 0;
    var bitsRow = 0;

    for (var row = 0; row < size; row++) {
      bitsCol = bitsRow = 0;
      for (var col = 0; col < size; col++) {
        bitsCol = ((bitsCol << 1) & 0x7FF) | data.get(row, col);
        if (col >= 10 && (bitsCol === 0x5D0 || bitsCol === 0x05D)) points++;

        bitsRow = ((bitsRow << 1) & 0x7FF) | data.get(col, row);
        if (col >= 10 && (bitsRow === 0x5D0 || bitsRow === 0x05D)) points++;
      }
    }

    return points * PenaltyScores.N3
  };

  /**
   * Calculate proportion of dark modules in entire symbol
   *
   * Points: N4 * k
   *
   * k is the rating of the deviation of the proportion of dark modules
   * in the symbol from 50% in steps of 5%
   */
  exports.getPenaltyN4 = function getPenaltyN4 (data) {
    var darkCount = 0;
    var modulesCount = data.data.length;

    for (var i = 0; i < modulesCount; i++) darkCount += data.data[i];

    var k = Math.abs(Math.ceil((darkCount * 100 / modulesCount) / 5) - 10);

    return k * PenaltyScores.N4
  };

  /**
   * Return mask value at given position
   *
   * @param  {Number} maskPattern Pattern reference value
   * @param  {Number} i           Row
   * @param  {Number} j           Column
   * @return {Boolean}            Mask value
   */
  function getMaskAt (maskPattern, i, j) {
    switch (maskPattern) {
      case exports.Patterns.PATTERN000: return (i + j) % 2 === 0
      case exports.Patterns.PATTERN001: return i % 2 === 0
      case exports.Patterns.PATTERN010: return j % 3 === 0
      case exports.Patterns.PATTERN011: return (i + j) % 3 === 0
      case exports.Patterns.PATTERN100: return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0
      case exports.Patterns.PATTERN101: return (i * j) % 2 + (i * j) % 3 === 0
      case exports.Patterns.PATTERN110: return ((i * j) % 2 + (i * j) % 3) % 2 === 0
      case exports.Patterns.PATTERN111: return ((i * j) % 3 + (i + j) % 2) % 2 === 0

      default: throw new Error('bad maskPattern:' + maskPattern)
    }
  }

  /**
   * Apply a mask pattern to a BitMatrix
   *
   * @param  {Number}    pattern Pattern reference number
   * @param  {BitMatrix} data    BitMatrix data
   */
  exports.applyMask = function applyMask (pattern, data) {
    var size = data.size;

    for (var col = 0; col < size; col++) {
      for (var row = 0; row < size; row++) {
        if (data.isReserved(row, col)) continue
        data.xor(row, col, getMaskAt(pattern, row, col));
      }
    }
  };

  /**
   * Returns the best mask pattern for data
   *
   * @param  {BitMatrix} data
   * @return {Number} Mask pattern reference number
   */
  exports.getBestMask = function getBestMask (data, setupFormatFunc) {
    var numPatterns = Object.keys(exports.Patterns).length;
    var bestPattern = 0;
    var lowerPenalty = Infinity;

    for (var p = 0; p < numPatterns; p++) {
      setupFormatFunc(p);
      exports.applyMask(p, data);

      // Calculate penalty
      var penalty =
        exports.getPenaltyN1(data) +
        exports.getPenaltyN2(data) +
        exports.getPenaltyN3(data) +
        exports.getPenaltyN4(data);

      // Undo previously applied mask
      exports.applyMask(p, data);

      if (penalty < lowerPenalty) {
        lowerPenalty = penalty;
        bestPattern = p;
      }
    }

    return bestPattern
  };
  }(maskPattern));

  var errorCorrectionCode = {};

  var ECLevel$1 = errorCorrectionLevel;

  var EC_BLOCKS_TABLE = [
  // L  M  Q  H
    1, 1, 1, 1,
    1, 1, 1, 1,
    1, 1, 2, 2,
    1, 2, 2, 4,
    1, 2, 4, 4,
    2, 4, 4, 4,
    2, 4, 6, 5,
    2, 4, 6, 6,
    2, 5, 8, 8,
    4, 5, 8, 8,
    4, 5, 8, 11,
    4, 8, 10, 11,
    4, 9, 12, 16,
    4, 9, 16, 16,
    6, 10, 12, 18,
    6, 10, 17, 16,
    6, 11, 16, 19,
    6, 13, 18, 21,
    7, 14, 21, 25,
    8, 16, 20, 25,
    8, 17, 23, 25,
    9, 17, 23, 34,
    9, 18, 25, 30,
    10, 20, 27, 32,
    12, 21, 29, 35,
    12, 23, 34, 37,
    12, 25, 34, 40,
    13, 26, 35, 42,
    14, 28, 38, 45,
    15, 29, 40, 48,
    16, 31, 43, 51,
    17, 33, 45, 54,
    18, 35, 48, 57,
    19, 37, 51, 60,
    19, 38, 53, 63,
    20, 40, 56, 66,
    21, 43, 59, 70,
    22, 45, 62, 74,
    24, 47, 65, 77,
    25, 49, 68, 81
  ];

  var EC_CODEWORDS_TABLE = [
  // L  M  Q  H
    7, 10, 13, 17,
    10, 16, 22, 28,
    15, 26, 36, 44,
    20, 36, 52, 64,
    26, 48, 72, 88,
    36, 64, 96, 112,
    40, 72, 108, 130,
    48, 88, 132, 156,
    60, 110, 160, 192,
    72, 130, 192, 224,
    80, 150, 224, 264,
    96, 176, 260, 308,
    104, 198, 288, 352,
    120, 216, 320, 384,
    132, 240, 360, 432,
    144, 280, 408, 480,
    168, 308, 448, 532,
    180, 338, 504, 588,
    196, 364, 546, 650,
    224, 416, 600, 700,
    224, 442, 644, 750,
    252, 476, 690, 816,
    270, 504, 750, 900,
    300, 560, 810, 960,
    312, 588, 870, 1050,
    336, 644, 952, 1110,
    360, 700, 1020, 1200,
    390, 728, 1050, 1260,
    420, 784, 1140, 1350,
    450, 812, 1200, 1440,
    480, 868, 1290, 1530,
    510, 924, 1350, 1620,
    540, 980, 1440, 1710,
    570, 1036, 1530, 1800,
    570, 1064, 1590, 1890,
    600, 1120, 1680, 1980,
    630, 1204, 1770, 2100,
    660, 1260, 1860, 2220,
    720, 1316, 1950, 2310,
    750, 1372, 2040, 2430
  ];

  /**
   * Returns the number of error correction block that the QR Code should contain
   * for the specified version and error correction level.
   *
   * @param  {Number} version              QR Code version
   * @param  {Number} errorCorrectionLevel Error correction level
   * @return {Number}                      Number of error correction blocks
   */
  errorCorrectionCode.getBlocksCount = function getBlocksCount (version, errorCorrectionLevel) {
    switch (errorCorrectionLevel) {
      case ECLevel$1.L:
        return EC_BLOCKS_TABLE[(version - 1) * 4 + 0]
      case ECLevel$1.M:
        return EC_BLOCKS_TABLE[(version - 1) * 4 + 1]
      case ECLevel$1.Q:
        return EC_BLOCKS_TABLE[(version - 1) * 4 + 2]
      case ECLevel$1.H:
        return EC_BLOCKS_TABLE[(version - 1) * 4 + 3]
      default:
        return undefined
    }
  };

  /**
   * Returns the number of error correction codewords to use for the specified
   * version and error correction level.
   *
   * @param  {Number} version              QR Code version
   * @param  {Number} errorCorrectionLevel Error correction level
   * @return {Number}                      Number of error correction codewords
   */
  errorCorrectionCode.getTotalCodewordsCount = function getTotalCodewordsCount (version, errorCorrectionLevel) {
    switch (errorCorrectionLevel) {
      case ECLevel$1.L:
        return EC_CODEWORDS_TABLE[(version - 1) * 4 + 0]
      case ECLevel$1.M:
        return EC_CODEWORDS_TABLE[(version - 1) * 4 + 1]
      case ECLevel$1.Q:
        return EC_CODEWORDS_TABLE[(version - 1) * 4 + 2]
      case ECLevel$1.H:
        return EC_CODEWORDS_TABLE[(version - 1) * 4 + 3]
      default:
        return undefined
    }
  };

  var polynomial = {};

  var galoisField = {};

  var BufferUtil$3 = buffer;

  var EXP_TABLE = BufferUtil$3.alloc(512);
  var LOG_TABLE = BufferUtil$3.alloc(256)
  /**
   * Precompute the log and anti-log tables for faster computation later
   *
   * For each possible value in the galois field 2^8, we will pre-compute
   * the logarithm and anti-logarithm (exponential) of this value
   *
   * ref {@link https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders#Introduction_to_mathematical_fields}
   */
  ;(function initTables () {
    var x = 1;
    for (var i = 0; i < 255; i++) {
      EXP_TABLE[i] = x;
      LOG_TABLE[x] = i;

      x <<= 1; // multiply by 2

      // The QR code specification says to use byte-wise modulo 100011101 arithmetic.
      // This means that when a number is 256 or larger, it should be XORed with 0x11D.
      if (x & 0x100) { // similar to x >= 256, but a lot faster (because 0x100 == 256)
        x ^= 0x11D;
      }
    }

    // Optimization: double the size of the anti-log table so that we don't need to mod 255 to
    // stay inside the bounds (because we will mainly use this table for the multiplication of
    // two GF numbers, no more).
    // @see {@link mul}
    for (i = 255; i < 512; i++) {
      EXP_TABLE[i] = EXP_TABLE[i - 255];
    }
  }());

  /**
   * Returns log value of n inside Galois Field
   *
   * @param  {Number} n
   * @return {Number}
   */
  galoisField.log = function log (n) {
    if (n < 1) throw new Error('log(' + n + ')')
    return LOG_TABLE[n]
  };

  /**
   * Returns anti-log value of n inside Galois Field
   *
   * @param  {Number} n
   * @return {Number}
   */
  galoisField.exp = function exp (n) {
    return EXP_TABLE[n]
  };

  /**
   * Multiplies two number inside Galois Field
   *
   * @param  {Number} x
   * @param  {Number} y
   * @return {Number}
   */
  galoisField.mul = function mul (x, y) {
    if (x === 0 || y === 0) return 0

    // should be EXP_TABLE[(LOG_TABLE[x] + LOG_TABLE[y]) % 255] if EXP_TABLE wasn't oversized
    // @see {@link initTables}
    return EXP_TABLE[LOG_TABLE[x] + LOG_TABLE[y]]
  };

  (function (exports) {
  var BufferUtil = buffer;
  var GF = galoisField;

  /**
   * Multiplies two polynomials inside Galois Field
   *
   * @param  {Buffer} p1 Polynomial
   * @param  {Buffer} p2 Polynomial
   * @return {Buffer}    Product of p1 and p2
   */
  exports.mul = function mul (p1, p2) {
    var coeff = BufferUtil.alloc(p1.length + p2.length - 1);

    for (var i = 0; i < p1.length; i++) {
      for (var j = 0; j < p2.length; j++) {
        coeff[i + j] ^= GF.mul(p1[i], p2[j]);
      }
    }

    return coeff
  };

  /**
   * Calculate the remainder of polynomials division
   *
   * @param  {Buffer} divident Polynomial
   * @param  {Buffer} divisor  Polynomial
   * @return {Buffer}          Remainder
   */
  exports.mod = function mod (divident, divisor) {
    var result = BufferUtil.from(divident);

    while ((result.length - divisor.length) >= 0) {
      var coeff = result[0];

      for (var i = 0; i < divisor.length; i++) {
        result[i] ^= GF.mul(divisor[i], coeff);
      }

      // remove all zeros from buffer head
      var offset = 0;
      while (offset < result.length && result[offset] === 0) offset++;
      result = result.slice(offset);
    }

    return result
  };

  /**
   * Generate an irreducible generator polynomial of specified degree
   * (used by Reed-Solomon encoder)
   *
   * @param  {Number} degree Degree of the generator polynomial
   * @return {Buffer}        Buffer containing polynomial coefficients
   */
  exports.generateECPolynomial = function generateECPolynomial (degree) {
    var poly = BufferUtil.from([1]);
    for (var i = 0; i < degree; i++) {
      poly = exports.mul(poly, [1, GF.exp(i)]);
    }

    return poly
  };
  }(polynomial));

  var BufferUtil$2 = buffer;
  var Polynomial = polynomial;
  var Buffer$5 = require$$2__default$1["default"].Buffer;

  function ReedSolomonEncoder$1 (degree) {
    this.genPoly = undefined;
    this.degree = degree;

    if (this.degree) this.initialize(this.degree);
  }

  /**
   * Initialize the encoder.
   * The input param should correspond to the number of error correction codewords.
   *
   * @param  {Number} degree
   */
  ReedSolomonEncoder$1.prototype.initialize = function initialize (degree) {
    // create an irreducible generator polynomial
    this.degree = degree;
    this.genPoly = Polynomial.generateECPolynomial(this.degree);
  };

  /**
   * Encodes a chunk of data
   *
   * @param  {Buffer} data Buffer containing input data
   * @return {Buffer}      Buffer containing encoded data
   */
  ReedSolomonEncoder$1.prototype.encode = function encode (data) {
    if (!this.genPoly) {
      throw new Error('Encoder not initialized')
    }

    // Calculate EC for this data block
    // extends data size to data+genPoly size
    var pad = BufferUtil$2.alloc(this.degree);
    var paddedData = Buffer$5.concat([data, pad], data.length + this.degree);

    // The error correction codewords are the remainder after dividing the data codewords
    // by a generator polynomial
    var remainder = Polynomial.mod(paddedData, this.genPoly);

    // return EC data blocks (last n byte, where n is the degree of genPoly)
    // If coefficients number in remainder are less than genPoly degree,
    // pad with 0s to the left to reach the needed number of coefficients
    var start = this.degree - remainder.length;
    if (start > 0) {
      var buff = BufferUtil$2.alloc(this.degree);
      remainder.copy(buff, start);

      return buff
    }

    return remainder
  };

  var reedSolomonEncoder = ReedSolomonEncoder$1;

  var version$1 = {};

  var mode = {};

  var versionCheck = {};

  /**
   * Check if QR Code version is valid
   *
   * @param  {Number}  version QR Code version
   * @return {Boolean}         true if valid version, false otherwise
   */

  versionCheck.isValid = function isValid (version) {
    return !isNaN(version) && version >= 1 && version <= 40
  };

  var regex = {};

  var numeric = '[0-9]+';
  var alphanumeric = '[A-Z $%*+\\-./:]+';
  var kanji = '(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|' +
    '[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|' +
    '[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|' +
    '[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+';
  kanji = kanji.replace(/u/g, '\\u');

  var byte = '(?:(?![A-Z0-9 $%*+\\-./:]|' + kanji + ')(?:.|[\r\n]))+';

  regex.KANJI = new RegExp(kanji, 'g');
  regex.BYTE_KANJI = new RegExp('[^A-Z0-9 $%*+\\-./:]+', 'g');
  regex.BYTE = new RegExp(byte, 'g');
  regex.NUMERIC = new RegExp(numeric, 'g');
  regex.ALPHANUMERIC = new RegExp(alphanumeric, 'g');

  var TEST_KANJI = new RegExp('^' + kanji + '$');
  var TEST_NUMERIC = new RegExp('^' + numeric + '$');
  var TEST_ALPHANUMERIC = new RegExp('^[A-Z0-9 $%*+\\-./:]+$');

  regex.testKanji = function testKanji (str) {
    return TEST_KANJI.test(str)
  };

  regex.testNumeric = function testNumeric (str) {
    return TEST_NUMERIC.test(str)
  };

  regex.testAlphanumeric = function testAlphanumeric (str) {
    return TEST_ALPHANUMERIC.test(str)
  };

  (function (exports) {
  var VersionCheck = versionCheck;
  var Regex = regex;

  /**
   * Numeric mode encodes data from the decimal digit set (0 - 9)
   * (byte values 30HEX to 39HEX).
   * Normally, 3 data characters are represented by 10 bits.
   *
   * @type {Object}
   */
  exports.NUMERIC = {
    id: 'Numeric',
    bit: 1 << 0,
    ccBits: [10, 12, 14]
  };

  /**
   * Alphanumeric mode encodes data from a set of 45 characters,
   * i.e. 10 numeric digits (0 - 9),
   *      26 alphabetic characters (A - Z),
   *   and 9 symbols (SP, $, %, *, +, -, ., /, :).
   * Normally, two input characters are represented by 11 bits.
   *
   * @type {Object}
   */
  exports.ALPHANUMERIC = {
    id: 'Alphanumeric',
    bit: 1 << 1,
    ccBits: [9, 11, 13]
  };

  /**
   * In byte mode, data is encoded at 8 bits per character.
   *
   * @type {Object}
   */
  exports.BYTE = {
    id: 'Byte',
    bit: 1 << 2,
    ccBits: [8, 16, 16]
  };

  /**
   * The Kanji mode efficiently encodes Kanji characters in accordance with
   * the Shift JIS system based on JIS X 0208.
   * The Shift JIS values are shifted from the JIS X 0208 values.
   * JIS X 0208 gives details of the shift coded representation.
   * Each two-byte character value is compacted to a 13-bit binary codeword.
   *
   * @type {Object}
   */
  exports.KANJI = {
    id: 'Kanji',
    bit: 1 << 3,
    ccBits: [8, 10, 12]
  };

  /**
   * Mixed mode will contain a sequences of data in a combination of any of
   * the modes described above
   *
   * @type {Object}
   */
  exports.MIXED = {
    bit: -1
  };

  /**
   * Returns the number of bits needed to store the data length
   * according to QR Code specifications.
   *
   * @param  {Mode}   mode    Data mode
   * @param  {Number} version QR Code version
   * @return {Number}         Number of bits
   */
  exports.getCharCountIndicator = function getCharCountIndicator (mode, version) {
    if (!mode.ccBits) throw new Error('Invalid mode: ' + mode)

    if (!VersionCheck.isValid(version)) {
      throw new Error('Invalid version: ' + version)
    }

    if (version >= 1 && version < 10) return mode.ccBits[0]
    else if (version < 27) return mode.ccBits[1]
    return mode.ccBits[2]
  };

  /**
   * Returns the most efficient mode to store the specified data
   *
   * @param  {String} dataStr Input data string
   * @return {Mode}           Best mode
   */
  exports.getBestModeForData = function getBestModeForData (dataStr) {
    if (Regex.testNumeric(dataStr)) return exports.NUMERIC
    else if (Regex.testAlphanumeric(dataStr)) return exports.ALPHANUMERIC
    else if (Regex.testKanji(dataStr)) return exports.KANJI
    else return exports.BYTE
  };

  /**
   * Return mode name as string
   *
   * @param {Mode} mode Mode object
   * @returns {String}  Mode name
   */
  exports.toString = function toString (mode) {
    if (mode && mode.id) return mode.id
    throw new Error('Invalid mode')
  };

  /**
   * Check if input param is a valid mode object
   *
   * @param   {Mode}    mode Mode object
   * @returns {Boolean} True if valid mode, false otherwise
   */
  exports.isValid = function isValid (mode) {
    return mode && mode.bit && mode.ccBits
  };

  /**
   * Get mode object from its name
   *
   * @param   {String} string Mode name
   * @returns {Mode}          Mode object
   */
  function fromString (string) {
    if (typeof string !== 'string') {
      throw new Error('Param is not a string')
    }

    var lcStr = string.toLowerCase();

    switch (lcStr) {
      case 'numeric':
        return exports.NUMERIC
      case 'alphanumeric':
        return exports.ALPHANUMERIC
      case 'kanji':
        return exports.KANJI
      case 'byte':
        return exports.BYTE
      default:
        throw new Error('Unknown mode: ' + string)
    }
  }

  /**
   * Returns mode from a value.
   * If value is not a valid mode, returns defaultValue
   *
   * @param  {Mode|String} value        Encoding mode
   * @param  {Mode}        defaultValue Fallback value
   * @return {Mode}                     Encoding mode
   */
  exports.from = function from (value, defaultValue) {
    if (exports.isValid(value)) {
      return value
    }

    try {
      return fromString(value)
    } catch (e) {
      return defaultValue
    }
  };
  }(mode));

  var toString = {}.toString;

  var isarray = Array.isArray || function (arr) {
    return toString.call(arr) == '[object Array]';
  };

  (function (exports) {
  var Utils = utils$q;
  var ECCode = errorCorrectionCode;
  var ECLevel = errorCorrectionLevel;
  var Mode = mode;
  var VersionCheck = versionCheck;
  var isArray = isarray;

  // Generator polynomial used to encode version information
  var G18 = (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0);
  var G18_BCH = Utils.getBCHDigit(G18);

  function getBestVersionForDataLength (mode, length, errorCorrectionLevel) {
    for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {
      if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {
        return currentVersion
      }
    }

    return undefined
  }

  function getReservedBitsCount (mode, version) {
    // Character count indicator + mode indicator bits
    return Mode.getCharCountIndicator(mode, version) + 4
  }

  function getTotalBitsFromDataArray (segments, version) {
    var totalBits = 0;

    segments.forEach(function (data) {
      var reservedBits = getReservedBitsCount(data.mode, version);
      totalBits += reservedBits + data.getBitsLength();
    });

    return totalBits
  }

  function getBestVersionForMixedData (segments, errorCorrectionLevel) {
    for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {
      var length = getTotalBitsFromDataArray(segments, currentVersion);
      if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, Mode.MIXED)) {
        return currentVersion
      }
    }

    return undefined
  }

  /**
   * Returns version number from a value.
   * If value is not a valid version, returns defaultValue
   *
   * @param  {Number|String} value        QR Code version
   * @param  {Number}        defaultValue Fallback value
   * @return {Number}                     QR Code version number
   */
  exports.from = function from (value, defaultValue) {
    if (VersionCheck.isValid(value)) {
      return parseInt(value, 10)
    }

    return defaultValue
  };

  /**
   * Returns how much data can be stored with the specified QR code version
   * and error correction level
   *
   * @param  {Number} version              QR Code version (1-40)
   * @param  {Number} errorCorrectionLevel Error correction level
   * @param  {Mode}   mode                 Data mode
   * @return {Number}                      Quantity of storable data
   */
  exports.getCapacity = function getCapacity (version, errorCorrectionLevel, mode) {
    if (!VersionCheck.isValid(version)) {
      throw new Error('Invalid QR Code version')
    }

    // Use Byte mode as default
    if (typeof mode === 'undefined') mode = Mode.BYTE;

    // Total codewords for this QR code version (Data + Error correction)
    var totalCodewords = Utils.getSymbolTotalCodewords(version);

    // Total number of error correction codewords
    var ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel);

    // Total number of data codewords
    var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;

    if (mode === Mode.MIXED) return dataTotalCodewordsBits

    var usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode, version);

    // Return max number of storable codewords
    switch (mode) {
      case Mode.NUMERIC:
        return Math.floor((usableBits / 10) * 3)

      case Mode.ALPHANUMERIC:
        return Math.floor((usableBits / 11) * 2)

      case Mode.KANJI:
        return Math.floor(usableBits / 13)

      case Mode.BYTE:
      default:
        return Math.floor(usableBits / 8)
    }
  };

  /**
   * Returns the minimum version needed to contain the amount of data
   *
   * @param  {Segment} data                    Segment of data
   * @param  {Number} [errorCorrectionLevel=H] Error correction level
   * @param  {Mode} mode                       Data mode
   * @return {Number}                          QR Code version
   */
  exports.getBestVersionForData = function getBestVersionForData (data, errorCorrectionLevel) {
    var seg;

    var ecl = ECLevel.from(errorCorrectionLevel, ECLevel.M);

    if (isArray(data)) {
      if (data.length > 1) {
        return getBestVersionForMixedData(data, ecl)
      }

      if (data.length === 0) {
        return 1
      }

      seg = data[0];
    } else {
      seg = data;
    }

    return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl)
  };

  /**
   * Returns version information with relative error correction bits
   *
   * The version information is included in QR Code symbols of version 7 or larger.
   * It consists of an 18-bit sequence containing 6 data bits,
   * with 12 error correction bits calculated using the (18, 6) Golay code.
   *
   * @param  {Number} version QR Code version
   * @return {Number}         Encoded version info bits
   */
  exports.getEncodedBits = function getEncodedBits (version) {
    if (!VersionCheck.isValid(version) || version < 7) {
      throw new Error('Invalid QR Code version')
    }

    var d = version << 12;

    while (Utils.getBCHDigit(d) - G18_BCH >= 0) {
      d ^= (G18 << (Utils.getBCHDigit(d) - G18_BCH));
    }

    return (version << 12) | d
  };
  }(version$1));

  var formatInfo = {};

  var Utils$3 = utils$q;

  var G15 = (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0);
  var G15_MASK = (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1);
  var G15_BCH = Utils$3.getBCHDigit(G15);

  /**
   * Returns format information with relative error correction bits
   *
   * The format information is a 15-bit sequence containing 5 data bits,
   * with 10 error correction bits calculated using the (15, 5) BCH code.
   *
   * @param  {Number} errorCorrectionLevel Error correction level
   * @param  {Number} mask                 Mask pattern
   * @return {Number}                      Encoded format information bits
   */
  formatInfo.getEncodedBits = function getEncodedBits (errorCorrectionLevel, mask) {
    var data = ((errorCorrectionLevel.bit << 3) | mask);
    var d = data << 10;

    while (Utils$3.getBCHDigit(d) - G15_BCH >= 0) {
      d ^= (G15 << (Utils$3.getBCHDigit(d) - G15_BCH));
    }

    // xor final data with mask pattern in order to ensure that
    // no combination of Error Correction Level and data mask pattern
    // will result in an all-zero data string
    return ((data << 10) | d) ^ G15_MASK
  };

  var segments = {};

  var Mode$4 = mode;

  function NumericData (data) {
    this.mode = Mode$4.NUMERIC;
    this.data = data.toString();
  }

  NumericData.getBitsLength = function getBitsLength (length) {
    return 10 * Math.floor(length / 3) + ((length % 3) ? ((length % 3) * 3 + 1) : 0)
  };

  NumericData.prototype.getLength = function getLength () {
    return this.data.length
  };

  NumericData.prototype.getBitsLength = function getBitsLength () {
    return NumericData.getBitsLength(this.data.length)
  };

  NumericData.prototype.write = function write (bitBuffer) {
    var i, group, value;

    // The input data string is divided into groups of three digits,
    // and each group is converted to its 10-bit binary equivalent.
    for (i = 0; i + 3 <= this.data.length; i += 3) {
      group = this.data.substr(i, 3);
      value = parseInt(group, 10);

      bitBuffer.put(value, 10);
    }

    // If the number of input digits is not an exact multiple of three,
    // the final one or two digits are converted to 4 or 7 bits respectively.
    var remainingNum = this.data.length - i;
    if (remainingNum > 0) {
      group = this.data.substr(i);
      value = parseInt(group, 10);

      bitBuffer.put(value, remainingNum * 3 + 1);
    }
  };

  var numericData = NumericData;

  var Mode$3 = mode;

  /**
   * Array of characters available in alphanumeric mode
   *
   * As per QR Code specification, to each character
   * is assigned a value from 0 to 44 which in this case coincides
   * with the array index
   *
   * @type {Array}
   */
  var ALPHA_NUM_CHARS = [
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
    'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
    ' ', '$', '%', '*', '+', '-', '.', '/', ':'
  ];

  function AlphanumericData (data) {
    this.mode = Mode$3.ALPHANUMERIC;
    this.data = data;
  }

  AlphanumericData.getBitsLength = function getBitsLength (length) {
    return 11 * Math.floor(length / 2) + 6 * (length % 2)
  };

  AlphanumericData.prototype.getLength = function getLength () {
    return this.data.length
  };

  AlphanumericData.prototype.getBitsLength = function getBitsLength () {
    return AlphanumericData.getBitsLength(this.data.length)
  };

  AlphanumericData.prototype.write = function write (bitBuffer) {
    var i;

    // Input data characters are divided into groups of two characters
    // and encoded as 11-bit binary codes.
    for (i = 0; i + 2 <= this.data.length; i += 2) {
      // The character value of the first character is multiplied by 45
      var value = ALPHA_NUM_CHARS.indexOf(this.data[i]) * 45;

      // The character value of the second digit is added to the product
      value += ALPHA_NUM_CHARS.indexOf(this.data[i + 1]);

      // The sum is then stored as 11-bit binary number
      bitBuffer.put(value, 11);
    }

    // If the number of input data characters is not a multiple of two,
    // the character value of the final character is encoded as a 6-bit binary number.
    if (this.data.length % 2) {
      bitBuffer.put(ALPHA_NUM_CHARS.indexOf(this.data[i]), 6);
    }
  };

  var alphanumericData = AlphanumericData;

  var BufferUtil$1 = buffer;
  var Mode$2 = mode;

  function ByteData (data) {
    this.mode = Mode$2.BYTE;
    this.data = BufferUtil$1.from(data);
  }

  ByteData.getBitsLength = function getBitsLength (length) {
    return length * 8
  };

  ByteData.prototype.getLength = function getLength () {
    return this.data.length
  };

  ByteData.prototype.getBitsLength = function getBitsLength () {
    return ByteData.getBitsLength(this.data.length)
  };

  ByteData.prototype.write = function (bitBuffer) {
    for (var i = 0, l = this.data.length; i < l; i++) {
      bitBuffer.put(this.data[i], 8);
    }
  };

  var byteData = ByteData;

  var Mode$1 = mode;
  var Utils$2 = utils$q;

  function KanjiData (data) {
    this.mode = Mode$1.KANJI;
    this.data = data;
  }

  KanjiData.getBitsLength = function getBitsLength (length) {
    return length * 13
  };

  KanjiData.prototype.getLength = function getLength () {
    return this.data.length
  };

  KanjiData.prototype.getBitsLength = function getBitsLength () {
    return KanjiData.getBitsLength(this.data.length)
  };

  KanjiData.prototype.write = function (bitBuffer) {
    var i;

    // In the Shift JIS system, Kanji characters are represented by a two byte combination.
    // These byte values are shifted from the JIS X 0208 values.
    // JIS X 0208 gives details of the shift coded representation.
    for (i = 0; i < this.data.length; i++) {
      var value = Utils$2.toSJIS(this.data[i]);

      // For characters with Shift JIS values from 0x8140 to 0x9FFC:
      if (value >= 0x8140 && value <= 0x9FFC) {
        // Subtract 0x8140 from Shift JIS value
        value -= 0x8140;

      // For characters with Shift JIS values from 0xE040 to 0xEBBF
      } else if (value >= 0xE040 && value <= 0xEBBF) {
        // Subtract 0xC140 from Shift JIS value
        value -= 0xC140;
      } else {
        throw new Error(
          'Invalid SJIS character: ' + this.data[i] + '\n' +
          'Make sure your charset is UTF-8')
      }

      // Multiply most significant byte of result by 0xC0
      // and add least significant byte to product
      value = (((value >>> 8) & 0xff) * 0xC0) + (value & 0xff);

      // Convert result to a 13-bit binary string
      bitBuffer.put(value, 13);
    }
  };

  var kanjiData = KanjiData;

  var dijkstra = {exports: {}};

  (function (module) {

  /******************************************************************************
   * Created 2008-08-19.
   *
   * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.
   *
   * Copyright (C) 2008
   *   Wyatt Baldwin <self@wyattbaldwin.com>
   *   All rights reserved
   *
   * Licensed under the MIT license.
   *
   *   http://www.opensource.org/licenses/mit-license.php
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *****************************************************************************/
  var dijkstra = {
    single_source_shortest_paths: function(graph, s, d) {
      // Predecessor map for each node that has been encountered.
      // node ID => predecessor node ID
      var predecessors = {};

      // Costs of shortest paths from s to all nodes encountered.
      // node ID => cost
      var costs = {};
      costs[s] = 0;

      // Costs of shortest paths from s to all nodes encountered; differs from
      // `costs` in that it provides easy access to the node that currently has
      // the known shortest path from s.
      // XXX: Do we actually need both `costs` and `open`?
      var open = dijkstra.PriorityQueue.make();
      open.push(s, 0);

      var closest,
          u, v,
          cost_of_s_to_u,
          adjacent_nodes,
          cost_of_e,
          cost_of_s_to_u_plus_cost_of_e,
          cost_of_s_to_v,
          first_visit;
      while (!open.empty()) {
        // In the nodes remaining in graph that have a known cost from s,
        // find the node, u, that currently has the shortest path from s.
        closest = open.pop();
        u = closest.value;
        cost_of_s_to_u = closest.cost;

        // Get nodes adjacent to u...
        adjacent_nodes = graph[u] || {};

        // ...and explore the edges that connect u to those nodes, updating
        // the cost of the shortest paths to any or all of those nodes as
        // necessary. v is the node across the current edge from u.
        for (v in adjacent_nodes) {
          if (adjacent_nodes.hasOwnProperty(v)) {
            // Get the cost of the edge running from u to v.
            cost_of_e = adjacent_nodes[v];

            // Cost of s to u plus the cost of u to v across e--this is *a*
            // cost from s to v that may or may not be less than the current
            // known cost to v.
            cost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e;

            // If we haven't visited v yet OR if the current known cost from s to
            // v is greater than the new cost we just found (cost of s to u plus
            // cost of u to v across e), update v's cost in the cost list and
            // update v's predecessor in the predecessor list (it's now u).
            cost_of_s_to_v = costs[v];
            first_visit = (typeof costs[v] === 'undefined');
            if (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {
              costs[v] = cost_of_s_to_u_plus_cost_of_e;
              open.push(v, cost_of_s_to_u_plus_cost_of_e);
              predecessors[v] = u;
            }
          }
        }
      }

      if (typeof d !== 'undefined' && typeof costs[d] === 'undefined') {
        var msg = ['Could not find a path from ', s, ' to ', d, '.'].join('');
        throw new Error(msg);
      }

      return predecessors;
    },

    extract_shortest_path_from_predecessor_list: function(predecessors, d) {
      var nodes = [];
      var u = d;
      while (u) {
        nodes.push(u);
        u = predecessors[u];
      }
      nodes.reverse();
      return nodes;
    },

    find_path: function(graph, s, d) {
      var predecessors = dijkstra.single_source_shortest_paths(graph, s, d);
      return dijkstra.extract_shortest_path_from_predecessor_list(
        predecessors, d);
    },

    /**
     * A very naive priority queue implementation.
     */
    PriorityQueue: {
      make: function (opts) {
        var T = dijkstra.PriorityQueue,
            t = {},
            key;
        opts = opts || {};
        for (key in T) {
          if (T.hasOwnProperty(key)) {
            t[key] = T[key];
          }
        }
        t.queue = [];
        t.sorter = opts.sorter || T.default_sorter;
        return t;
      },

      default_sorter: function (a, b) {
        return a.cost - b.cost;
      },

      /**
       * Add a new item to the queue and ensure the highest priority element
       * is at the front of the queue.
       */
      push: function (value, cost) {
        var item = {value: value, cost: cost};
        this.queue.push(item);
        this.queue.sort(this.sorter);
      },

      /**
       * Return the highest priority element in the queue.
       */
      pop: function () {
        return this.queue.shift();
      },

      empty: function () {
        return this.queue.length === 0;
      }
    }
  };


  // node.js module exports
  {
    module.exports = dijkstra;
  }
  }(dijkstra));

  (function (exports) {
  var Mode = mode;
  var NumericData = numericData;
  var AlphanumericData = alphanumericData;
  var ByteData = byteData;
  var KanjiData = kanjiData;
  var Regex = regex;
  var Utils = utils$q;
  var dijkstra$1 = dijkstra.exports;

  /**
   * Returns UTF8 byte length
   *
   * @param  {String} str Input string
   * @return {Number}     Number of byte
   */
  function getStringByteLength (str) {
    return unescape(encodeURIComponent(str)).length
  }

  /**
   * Get a list of segments of the specified mode
   * from a string
   *
   * @param  {Mode}   mode Segment mode
   * @param  {String} str  String to process
   * @return {Array}       Array of object with segments data
   */
  function getSegments (regex, mode, str) {
    var segments = [];
    var result;

    while ((result = regex.exec(str)) !== null) {
      segments.push({
        data: result[0],
        index: result.index,
        mode: mode,
        length: result[0].length
      });
    }

    return segments
  }

  /**
   * Extracts a series of segments with the appropriate
   * modes from a string
   *
   * @param  {String} dataStr Input string
   * @return {Array}          Array of object with segments data
   */
  function getSegmentsFromString (dataStr) {
    var numSegs = getSegments(Regex.NUMERIC, Mode.NUMERIC, dataStr);
    var alphaNumSegs = getSegments(Regex.ALPHANUMERIC, Mode.ALPHANUMERIC, dataStr);
    var byteSegs;
    var kanjiSegs;

    if (Utils.isKanjiModeEnabled()) {
      byteSegs = getSegments(Regex.BYTE, Mode.BYTE, dataStr);
      kanjiSegs = getSegments(Regex.KANJI, Mode.KANJI, dataStr);
    } else {
      byteSegs = getSegments(Regex.BYTE_KANJI, Mode.BYTE, dataStr);
      kanjiSegs = [];
    }

    var segs = numSegs.concat(alphaNumSegs, byteSegs, kanjiSegs);

    return segs
      .sort(function (s1, s2) {
        return s1.index - s2.index
      })
      .map(function (obj) {
        return {
          data: obj.data,
          mode: obj.mode,
          length: obj.length
        }
      })
  }

  /**
   * Returns how many bits are needed to encode a string of
   * specified length with the specified mode
   *
   * @param  {Number} length String length
   * @param  {Mode} mode     Segment mode
   * @return {Number}        Bit length
   */
  function getSegmentBitsLength (length, mode) {
    switch (mode) {
      case Mode.NUMERIC:
        return NumericData.getBitsLength(length)
      case Mode.ALPHANUMERIC:
        return AlphanumericData.getBitsLength(length)
      case Mode.KANJI:
        return KanjiData.getBitsLength(length)
      case Mode.BYTE:
        return ByteData.getBitsLength(length)
    }
  }

  /**
   * Merges adjacent segments which have the same mode
   *
   * @param  {Array} segs Array of object with segments data
   * @return {Array}      Array of object with segments data
   */
  function mergeSegments (segs) {
    return segs.reduce(function (acc, curr) {
      var prevSeg = acc.length - 1 >= 0 ? acc[acc.length - 1] : null;
      if (prevSeg && prevSeg.mode === curr.mode) {
        acc[acc.length - 1].data += curr.data;
        return acc
      }

      acc.push(curr);
      return acc
    }, [])
  }

  /**
   * Generates a list of all possible nodes combination which
   * will be used to build a segments graph.
   *
   * Nodes are divided by groups. Each group will contain a list of all the modes
   * in which is possible to encode the given text.
   *
   * For example the text '12345' can be encoded as Numeric, Alphanumeric or Byte.
   * The group for '12345' will contain then 3 objects, one for each
   * possible encoding mode.
   *
   * Each node represents a possible segment.
   *
   * @param  {Array} segs Array of object with segments data
   * @return {Array}      Array of object with segments data
   */
  function buildNodes (segs) {
    var nodes = [];
    for (var i = 0; i < segs.length; i++) {
      var seg = segs[i];

      switch (seg.mode) {
        case Mode.NUMERIC:
          nodes.push([seg,
            { data: seg.data, mode: Mode.ALPHANUMERIC, length: seg.length },
            { data: seg.data, mode: Mode.BYTE, length: seg.length }
          ]);
          break
        case Mode.ALPHANUMERIC:
          nodes.push([seg,
            { data: seg.data, mode: Mode.BYTE, length: seg.length }
          ]);
          break
        case Mode.KANJI:
          nodes.push([seg,
            { data: seg.data, mode: Mode.BYTE, length: getStringByteLength(seg.data) }
          ]);
          break
        case Mode.BYTE:
          nodes.push([
            { data: seg.data, mode: Mode.BYTE, length: getStringByteLength(seg.data) }
          ]);
      }
    }

    return nodes
  }

  /**
   * Builds a graph from a list of nodes.
   * All segments in each node group will be connected with all the segments of
   * the next group and so on.
   *
   * At each connection will be assigned a weight depending on the
   * segment's byte length.
   *
   * @param  {Array} nodes    Array of object with segments data
   * @param  {Number} version QR Code version
   * @return {Object}         Graph of all possible segments
   */
  function buildGraph (nodes, version) {
    var table = {};
    var graph = {'start': {}};
    var prevNodeIds = ['start'];

    for (var i = 0; i < nodes.length; i++) {
      var nodeGroup = nodes[i];
      var currentNodeIds = [];

      for (var j = 0; j < nodeGroup.length; j++) {
        var node = nodeGroup[j];
        var key = '' + i + j;

        currentNodeIds.push(key);
        table[key] = { node: node, lastCount: 0 };
        graph[key] = {};

        for (var n = 0; n < prevNodeIds.length; n++) {
          var prevNodeId = prevNodeIds[n];

          if (table[prevNodeId] && table[prevNodeId].node.mode === node.mode) {
            graph[prevNodeId][key] =
              getSegmentBitsLength(table[prevNodeId].lastCount + node.length, node.mode) -
              getSegmentBitsLength(table[prevNodeId].lastCount, node.mode);

            table[prevNodeId].lastCount += node.length;
          } else {
            if (table[prevNodeId]) table[prevNodeId].lastCount = node.length;

            graph[prevNodeId][key] = getSegmentBitsLength(node.length, node.mode) +
              4 + Mode.getCharCountIndicator(node.mode, version); // switch cost
          }
        }
      }

      prevNodeIds = currentNodeIds;
    }

    for (n = 0; n < prevNodeIds.length; n++) {
      graph[prevNodeIds[n]]['end'] = 0;
    }

    return { map: graph, table: table }
  }

  /**
   * Builds a segment from a specified data and mode.
   * If a mode is not specified, the more suitable will be used.
   *
   * @param  {String} data             Input data
   * @param  {Mode | String} modesHint Data mode
   * @return {Segment}                 Segment
   */
  function buildSingleSegment (data, modesHint) {
    var mode;
    var bestMode = Mode.getBestModeForData(data);

    mode = Mode.from(modesHint, bestMode);

    // Make sure data can be encoded
    if (mode !== Mode.BYTE && mode.bit < bestMode.bit) {
      throw new Error('"' + data + '"' +
        ' cannot be encoded with mode ' + Mode.toString(mode) +
        '.\n Suggested mode is: ' + Mode.toString(bestMode))
    }

    // Use Mode.BYTE if Kanji support is disabled
    if (mode === Mode.KANJI && !Utils.isKanjiModeEnabled()) {
      mode = Mode.BYTE;
    }

    switch (mode) {
      case Mode.NUMERIC:
        return new NumericData(data)

      case Mode.ALPHANUMERIC:
        return new AlphanumericData(data)

      case Mode.KANJI:
        return new KanjiData(data)

      case Mode.BYTE:
        return new ByteData(data)
    }
  }

  /**
   * Builds a list of segments from an array.
   * Array can contain Strings or Objects with segment's info.
   *
   * For each item which is a string, will be generated a segment with the given
   * string and the more appropriate encoding mode.
   *
   * For each item which is an object, will be generated a segment with the given
   * data and mode.
   * Objects must contain at least the property "data".
   * If property "mode" is not present, the more suitable mode will be used.
   *
   * @param  {Array} array Array of objects with segments data
   * @return {Array}       Array of Segments
   */
  exports.fromArray = function fromArray (array) {
    return array.reduce(function (acc, seg) {
      if (typeof seg === 'string') {
        acc.push(buildSingleSegment(seg, null));
      } else if (seg.data) {
        acc.push(buildSingleSegment(seg.data, seg.mode));
      }

      return acc
    }, [])
  };

  /**
   * Builds an optimized sequence of segments from a string,
   * which will produce the shortest possible bitstream.
   *
   * @param  {String} data    Input string
   * @param  {Number} version QR Code version
   * @return {Array}          Array of segments
   */
  exports.fromString = function fromString (data, version) {
    var segs = getSegmentsFromString(data, Utils.isKanjiModeEnabled());

    var nodes = buildNodes(segs);
    var graph = buildGraph(nodes, version);
    var path = dijkstra$1.find_path(graph.map, 'start', 'end');

    var optimizedSegs = [];
    for (var i = 1; i < path.length - 1; i++) {
      optimizedSegs.push(graph.table[path[i]].node);
    }

    return exports.fromArray(mergeSegments(optimizedSegs))
  };

  /**
   * Splits a string in various segments with the modes which
   * best represent their content.
   * The produced segments are far from being optimized.
   * The output of this function is only used to estimate a QR Code version
   * which may contain the data.
   *
   * @param  {string} data Input string
   * @return {Array}       Array of segments
   */
  exports.rawSplit = function rawSplit (data) {
    return exports.fromArray(
      getSegmentsFromString(data, Utils.isKanjiModeEnabled())
    )
  };
  }(segments));

  var BufferUtil = buffer;
  var Utils$1 = utils$q;
  var ECLevel = errorCorrectionLevel;
  var BitBuffer = bitBuffer;
  var BitMatrix = bitMatrix;
  var AlignmentPattern = alignmentPattern;
  var FinderPattern = finderPattern;
  var MaskPattern = maskPattern;
  var ECCode = errorCorrectionCode;
  var ReedSolomonEncoder = reedSolomonEncoder;
  var Version = version$1;
  var FormatInfo = formatInfo;
  var Mode = mode;
  var Segments = segments;
  var isArray$4 = isarray;

  /**
   * QRCode for JavaScript
   *
   * modified by Ryan Day for nodejs support
   * Copyright (c) 2011 Ryan Day
   *
   * Licensed under the MIT license:
   *   http://www.opensource.org/licenses/mit-license.php
   *
  //---------------------------------------------------------------------
  // QRCode for JavaScript
  //
  // Copyright (c) 2009 Kazuhiko Arase
  //
  // URL: http://www.d-project.com/
  //
  // Licensed under the MIT license:
  //   http://www.opensource.org/licenses/mit-license.php
  //
  // The word "QR Code" is registered trademark of
  // DENSO WAVE INCORPORATED
  //   http://www.denso-wave.com/qrcode/faqpatent-e.html
  //
  //---------------------------------------------------------------------
  */

  /**
   * Add finder patterns bits to matrix
   *
   * @param  {BitMatrix} matrix  Modules matrix
   * @param  {Number}    version QR Code version
   */
  function setupFinderPattern (matrix, version) {
    var size = matrix.size;
    var pos = FinderPattern.getPositions(version);

    for (var i = 0; i < pos.length; i++) {
      var row = pos[i][0];
      var col = pos[i][1];

      for (var r = -1; r <= 7; r++) {
        if (row + r <= -1 || size <= row + r) continue

        for (var c = -1; c <= 7; c++) {
          if (col + c <= -1 || size <= col + c) continue

          if ((r >= 0 && r <= 6 && (c === 0 || c === 6)) ||
            (c >= 0 && c <= 6 && (r === 0 || r === 6)) ||
            (r >= 2 && r <= 4 && c >= 2 && c <= 4)) {
            matrix.set(row + r, col + c, true, true);
          } else {
            matrix.set(row + r, col + c, false, true);
          }
        }
      }
    }
  }

  /**
   * Add timing pattern bits to matrix
   *
   * Note: this function must be called before {@link setupAlignmentPattern}
   *
   * @param  {BitMatrix} matrix Modules matrix
   */
  function setupTimingPattern (matrix) {
    var size = matrix.size;

    for (var r = 8; r < size - 8; r++) {
      var value = r % 2 === 0;
      matrix.set(r, 6, value, true);
      matrix.set(6, r, value, true);
    }
  }

  /**
   * Add alignment patterns bits to matrix
   *
   * Note: this function must be called after {@link setupTimingPattern}
   *
   * @param  {BitMatrix} matrix  Modules matrix
   * @param  {Number}    version QR Code version
   */
  function setupAlignmentPattern (matrix, version) {
    var pos = AlignmentPattern.getPositions(version);

    for (var i = 0; i < pos.length; i++) {
      var row = pos[i][0];
      var col = pos[i][1];

      for (var r = -2; r <= 2; r++) {
        for (var c = -2; c <= 2; c++) {
          if (r === -2 || r === 2 || c === -2 || c === 2 ||
            (r === 0 && c === 0)) {
            matrix.set(row + r, col + c, true, true);
          } else {
            matrix.set(row + r, col + c, false, true);
          }
        }
      }
    }
  }

  /**
   * Add version info bits to matrix
   *
   * @param  {BitMatrix} matrix  Modules matrix
   * @param  {Number}    version QR Code version
   */
  function setupVersionInfo (matrix, version) {
    var size = matrix.size;
    var bits = Version.getEncodedBits(version);
    var row, col, mod;

    for (var i = 0; i < 18; i++) {
      row = Math.floor(i / 3);
      col = i % 3 + size - 8 - 3;
      mod = ((bits >> i) & 1) === 1;

      matrix.set(row, col, mod, true);
      matrix.set(col, row, mod, true);
    }
  }

  /**
   * Add format info bits to matrix
   *
   * @param  {BitMatrix} matrix               Modules matrix
   * @param  {ErrorCorrectionLevel}    errorCorrectionLevel Error correction level
   * @param  {Number}    maskPattern          Mask pattern reference value
   */
  function setupFormatInfo (matrix, errorCorrectionLevel, maskPattern) {
    var size = matrix.size;
    var bits = FormatInfo.getEncodedBits(errorCorrectionLevel, maskPattern);
    var i, mod;

    for (i = 0; i < 15; i++) {
      mod = ((bits >> i) & 1) === 1;

      // vertical
      if (i < 6) {
        matrix.set(i, 8, mod, true);
      } else if (i < 8) {
        matrix.set(i + 1, 8, mod, true);
      } else {
        matrix.set(size - 15 + i, 8, mod, true);
      }

      // horizontal
      if (i < 8) {
        matrix.set(8, size - i - 1, mod, true);
      } else if (i < 9) {
        matrix.set(8, 15 - i - 1 + 1, mod, true);
      } else {
        matrix.set(8, 15 - i - 1, mod, true);
      }
    }

    // fixed module
    matrix.set(size - 8, 8, 1, true);
  }

  /**
   * Add encoded data bits to matrix
   *
   * @param  {BitMatrix} matrix Modules matrix
   * @param  {Buffer}    data   Data codewords
   */
  function setupData (matrix, data) {
    var size = matrix.size;
    var inc = -1;
    var row = size - 1;
    var bitIndex = 7;
    var byteIndex = 0;

    for (var col = size - 1; col > 0; col -= 2) {
      if (col === 6) col--;

      while (true) {
        for (var c = 0; c < 2; c++) {
          if (!matrix.isReserved(row, col - c)) {
            var dark = false;

            if (byteIndex < data.length) {
              dark = (((data[byteIndex] >>> bitIndex) & 1) === 1);
            }

            matrix.set(row, col - c, dark);
            bitIndex--;

            if (bitIndex === -1) {
              byteIndex++;
              bitIndex = 7;
            }
          }
        }

        row += inc;

        if (row < 0 || size <= row) {
          row -= inc;
          inc = -inc;
          break
        }
      }
    }
  }

  /**
   * Create encoded codewords from data input
   *
   * @param  {Number}   version              QR Code version
   * @param  {ErrorCorrectionLevel}   errorCorrectionLevel Error correction level
   * @param  {ByteData} data                 Data input
   * @return {Buffer}                        Buffer containing encoded codewords
   */
  function createData (version, errorCorrectionLevel, segments) {
    // Prepare data buffer
    var buffer = new BitBuffer();

    segments.forEach(function (data) {
      // prefix data with mode indicator (4 bits)
      buffer.put(data.mode.bit, 4);

      // Prefix data with character count indicator.
      // The character count indicator is a string of bits that represents the
      // number of characters that are being encoded.
      // The character count indicator must be placed after the mode indicator
      // and must be a certain number of bits long, depending on the QR version
      // and data mode
      // @see {@link Mode.getCharCountIndicator}.
      buffer.put(data.getLength(), Mode.getCharCountIndicator(data.mode, version));

      // add binary data sequence to buffer
      data.write(buffer);
    });

    // Calculate required number of bits
    var totalCodewords = Utils$1.getSymbolTotalCodewords(version);
    var ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel);
    var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;

    // Add a terminator.
    // If the bit string is shorter than the total number of required bits,
    // a terminator of up to four 0s must be added to the right side of the string.
    // If the bit string is more than four bits shorter than the required number of bits,
    // add four 0s to the end.
    if (buffer.getLengthInBits() + 4 <= dataTotalCodewordsBits) {
      buffer.put(0, 4);
    }

    // If the bit string is fewer than four bits shorter, add only the number of 0s that
    // are needed to reach the required number of bits.

    // After adding the terminator, if the number of bits in the string is not a multiple of 8,
    // pad the string on the right with 0s to make the string's length a multiple of 8.
    while (buffer.getLengthInBits() % 8 !== 0) {
      buffer.putBit(0);
    }

    // Add pad bytes if the string is still shorter than the total number of required bits.
    // Extend the buffer to fill the data capacity of the symbol corresponding to
    // the Version and Error Correction Level by adding the Pad Codewords 11101100 (0xEC)
    // and 00010001 (0x11) alternately.
    var remainingByte = (dataTotalCodewordsBits - buffer.getLengthInBits()) / 8;
    for (var i = 0; i < remainingByte; i++) {
      buffer.put(i % 2 ? 0x11 : 0xEC, 8);
    }

    return createCodewords(buffer, version, errorCorrectionLevel)
  }

  /**
   * Encode input data with Reed-Solomon and return codewords with
   * relative error correction bits
   *
   * @param  {BitBuffer} bitBuffer            Data to encode
   * @param  {Number}    version              QR Code version
   * @param  {ErrorCorrectionLevel} errorCorrectionLevel Error correction level
   * @return {Buffer}                         Buffer containing encoded codewords
   */
  function createCodewords (bitBuffer, version, errorCorrectionLevel) {
    // Total codewords for this QR code version (Data + Error correction)
    var totalCodewords = Utils$1.getSymbolTotalCodewords(version);

    // Total number of error correction codewords
    var ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel);

    // Total number of data codewords
    var dataTotalCodewords = totalCodewords - ecTotalCodewords;

    // Total number of blocks
    var ecTotalBlocks = ECCode.getBlocksCount(version, errorCorrectionLevel);

    // Calculate how many blocks each group should contain
    var blocksInGroup2 = totalCodewords % ecTotalBlocks;
    var blocksInGroup1 = ecTotalBlocks - blocksInGroup2;

    var totalCodewordsInGroup1 = Math.floor(totalCodewords / ecTotalBlocks);

    var dataCodewordsInGroup1 = Math.floor(dataTotalCodewords / ecTotalBlocks);
    var dataCodewordsInGroup2 = dataCodewordsInGroup1 + 1;

    // Number of EC codewords is the same for both groups
    var ecCount = totalCodewordsInGroup1 - dataCodewordsInGroup1;

    // Initialize a Reed-Solomon encoder with a generator polynomial of degree ecCount
    var rs = new ReedSolomonEncoder(ecCount);

    var offset = 0;
    var dcData = new Array(ecTotalBlocks);
    var ecData = new Array(ecTotalBlocks);
    var maxDataSize = 0;
    var buffer = BufferUtil.from(bitBuffer.buffer);

    // Divide the buffer into the required number of blocks
    for (var b = 0; b < ecTotalBlocks; b++) {
      var dataSize = b < blocksInGroup1 ? dataCodewordsInGroup1 : dataCodewordsInGroup2;

      // extract a block of data from buffer
      dcData[b] = buffer.slice(offset, offset + dataSize);

      // Calculate EC codewords for this data block
      ecData[b] = rs.encode(dcData[b]);

      offset += dataSize;
      maxDataSize = Math.max(maxDataSize, dataSize);
    }

    // Create final data
    // Interleave the data and error correction codewords from each block
    var data = BufferUtil.alloc(totalCodewords);
    var index = 0;
    var i, r;

    // Add data codewords
    for (i = 0; i < maxDataSize; i++) {
      for (r = 0; r < ecTotalBlocks; r++) {
        if (i < dcData[r].length) {
          data[index++] = dcData[r][i];
        }
      }
    }

    // Apped EC codewords
    for (i = 0; i < ecCount; i++) {
      for (r = 0; r < ecTotalBlocks; r++) {
        data[index++] = ecData[r][i];
      }
    }

    return data
  }

  /**
   * Build QR Code symbol
   *
   * @param  {String} data                 Input string
   * @param  {Number} version              QR Code version
   * @param  {ErrorCorretionLevel} errorCorrectionLevel Error level
   * @param  {MaskPattern} maskPattern     Mask pattern
   * @return {Object}                      Object containing symbol data
   */
  function createSymbol (data, version, errorCorrectionLevel, maskPattern) {
    var segments;

    if (isArray$4(data)) {
      segments = Segments.fromArray(data);
    } else if (typeof data === 'string') {
      var estimatedVersion = version;

      if (!estimatedVersion) {
        var rawSegments = Segments.rawSplit(data);

        // Estimate best version that can contain raw splitted segments
        estimatedVersion = Version.getBestVersionForData(rawSegments,
          errorCorrectionLevel);
      }

      // Build optimized segments
      // If estimated version is undefined, try with the highest version
      segments = Segments.fromString(data, estimatedVersion || 40);
    } else {
      throw new Error('Invalid data')
    }

    // Get the min version that can contain data
    var bestVersion = Version.getBestVersionForData(segments,
        errorCorrectionLevel);

    // If no version is found, data cannot be stored
    if (!bestVersion) {
      throw new Error('The amount of data is too big to be stored in a QR Code')
    }

    // If not specified, use min version as default
    if (!version) {
      version = bestVersion;

    // Check if the specified version can contain the data
    } else if (version < bestVersion) {
      throw new Error('\n' +
        'The chosen QR Code version cannot contain this amount of data.\n' +
        'Minimum version required to store current data is: ' + bestVersion + '.\n'
      )
    }

    var dataBits = createData(version, errorCorrectionLevel, segments);

    // Allocate matrix buffer
    var moduleCount = Utils$1.getSymbolSize(version);
    var modules = new BitMatrix(moduleCount);

    // Add function modules
    setupFinderPattern(modules, version);
    setupTimingPattern(modules);
    setupAlignmentPattern(modules, version);

    // Add temporary dummy bits for format info just to set them as reserved.
    // This is needed to prevent these bits from being masked by {@link MaskPattern.applyMask}
    // since the masking operation must be performed only on the encoding region.
    // These blocks will be replaced with correct values later in code.
    setupFormatInfo(modules, errorCorrectionLevel, 0);

    if (version >= 7) {
      setupVersionInfo(modules, version);
    }

    // Add data codewords
    setupData(modules, dataBits);

    if (isNaN(maskPattern)) {
      // Find best mask pattern
      maskPattern = MaskPattern.getBestMask(modules,
        setupFormatInfo.bind(null, modules, errorCorrectionLevel));
    }

    // Apply mask pattern
    MaskPattern.applyMask(maskPattern, modules);

    // Replace format info bits with correct values
    setupFormatInfo(modules, errorCorrectionLevel, maskPattern);

    return {
      modules: modules,
      version: version,
      errorCorrectionLevel: errorCorrectionLevel,
      maskPattern: maskPattern,
      segments: segments
    }
  }

  /**
   * QR Code
   *
   * @param {String | Array} data                 Input data
   * @param {Object} options                      Optional configurations
   * @param {Number} options.version              QR Code version
   * @param {String} options.errorCorrectionLevel Error correction level
   * @param {Function} options.toSJISFunc         Helper func to convert utf8 to sjis
   */
  qrcode.create = function create (data, options) {
    if (typeof data === 'undefined' || data === '') {
      throw new Error('No input text')
    }

    var errorCorrectionLevel = ECLevel.M;
    var version;
    var mask;

    if (typeof options !== 'undefined') {
      // Use higher error correction level as default
      errorCorrectionLevel = ECLevel.from(options.errorCorrectionLevel, ECLevel.M);
      version = Version.from(options.version);
      mask = MaskPattern.from(options.maskPattern);

      if (options.toSJISFunc) {
        Utils$1.setToSJISFunction(options.toSJISFunc);
      }
    }

    return createSymbol(data, version, errorCorrectionLevel, mask)
  };

  var png$1 = {};

  var png = {};

  var parserAsync = {exports: {}};

  var chunkstream = {exports: {}};

  var util$6 = require$$0__default$4["default"];
  var Stream$4 = require$$0__default$1["default"];


  var ChunkStream$2 = chunkstream.exports = function() {
    Stream$4.call(this);

    this._buffers = [];
    this._buffered = 0;

    this._reads = [];
    this._paused = false;

    this._encoding = 'utf8';
    this.writable = true;
  };
  util$6.inherits(ChunkStream$2, Stream$4);


  ChunkStream$2.prototype.read = function(length, callback) {

    this._reads.push({
      length: Math.abs(length), // if length < 0 then at most this length
      allowLess: length < 0,
      func: callback
    });

    process.nextTick(function() {
      this._process();

      // its paused and there is not enought data then ask for more
      if (this._paused && this._reads.length > 0) {
        this._paused = false;

        this.emit('drain');
      }
    }.bind(this));
  };

  ChunkStream$2.prototype.write = function(data, encoding) {

    if (!this.writable) {
      this.emit('error', new Error('Stream not writable'));
      return false;
    }

    var dataBuffer;
    if (Buffer.isBuffer(data)) {
      dataBuffer = data;
    }
    else {
      dataBuffer = new Buffer(data, encoding || this._encoding);
    }

    this._buffers.push(dataBuffer);
    this._buffered += dataBuffer.length;

    this._process();

    // ok if there are no more read requests
    if (this._reads && this._reads.length === 0) {
      this._paused = true;
    }

    return this.writable && !this._paused;
  };

  ChunkStream$2.prototype.end = function(data, encoding) {

    if (data) {
      this.write(data, encoding);
    }

    this.writable = false;

    // already destroyed
    if (!this._buffers) {
      return;
    }

    // enqueue or handle end
    if (this._buffers.length === 0) {
      this._end();
    }
    else {
      this._buffers.push(null);
      this._process();
    }
  };

  ChunkStream$2.prototype.destroySoon = ChunkStream$2.prototype.end;

  ChunkStream$2.prototype._end = function() {

    if (this._reads.length > 0) {
      this.emit('error',
        new Error('Unexpected end of input')
      );
    }

    this.destroy();
  };

  ChunkStream$2.prototype.destroy = function() {

    if (!this._buffers) {
      return;
    }

    this.writable = false;
    this._reads = null;
    this._buffers = null;

    this.emit('close');
  };

  ChunkStream$2.prototype._processReadAllowingLess = function(read) {
    // ok there is any data so that we can satisfy this request
    this._reads.shift(); // == read

    // first we need to peek into first buffer
    var smallerBuf = this._buffers[0];

    // ok there is more data than we need
    if (smallerBuf.length > read.length) {

      this._buffered -= read.length;
      this._buffers[0] = smallerBuf.slice(read.length);

      read.func.call(this, smallerBuf.slice(0, read.length));

    }
    else {
      // ok this is less than maximum length so use it all
      this._buffered -= smallerBuf.length;
      this._buffers.shift(); // == smallerBuf

      read.func.call(this, smallerBuf);
    }
  };

  ChunkStream$2.prototype._processRead = function(read) {
    this._reads.shift(); // == read

    var pos = 0;
    var count = 0;
    var data = new Buffer(read.length);

    // create buffer for all data
    while (pos < read.length) {

      var buf = this._buffers[count++];
      var len = Math.min(buf.length, read.length - pos);

      buf.copy(data, pos, 0, len);
      pos += len;

      // last buffer wasn't used all so just slice it and leave
      if (len !== buf.length) {
        this._buffers[--count] = buf.slice(len);
      }
    }

    // remove all used buffers
    if (count > 0) {
      this._buffers.splice(0, count);
    }

    this._buffered -= read.length;

    read.func.call(this, data);
  };

  ChunkStream$2.prototype._process = function() {

    try {
      // as long as there is any data and read requests
      while (this._buffered > 0 && this._reads && this._reads.length > 0) {

        var read = this._reads[0];

        // read any data (but no more than length)
        if (read.allowLess) {
          this._processReadAllowingLess(read);

        }
        else if (this._buffered >= read.length) {
          // ok we can meet some expectations

          this._processRead(read);
        }
        else {
          // not enought data to satisfy first request in queue
          // so we need to wait for more
          break;
        }
      }

      if (this._buffers && !this.writable) {
        this._end();
      }
    }
    catch (ex) {
      this.emit('error', ex);
    }
  };

  var filterParseAsync = {exports: {}};

  var filterParse = {exports: {}};

  var interlace = {};

  // Adam 7
  //   0 1 2 3 4 5 6 7
  // 0 x 6 4 6 x 6 4 6
  // 1 7 7 7 7 7 7 7 7
  // 2 5 6 5 6 5 6 5 6
  // 3 7 7 7 7 7 7 7 7
  // 4 3 6 4 6 3 6 4 6
  // 5 7 7 7 7 7 7 7 7
  // 6 5 6 5 6 5 6 5 6
  // 7 7 7 7 7 7 7 7 7


  var imagePasses = [
    { // pass 1 - 1px
      x: [0],
      y: [0]
    },
    { // pass 2 - 1px
      x: [4],
      y: [0]
    },
    { // pass 3 - 2px
      x: [0, 4],
      y: [4]
    },
    { // pass 4 - 4px
      x: [2, 6],
      y: [0, 4]
    },
    { // pass 5 - 8px
      x: [0, 2, 4, 6],
      y: [2, 6]
    },
    { // pass 6 - 16px
      x: [1, 3, 5, 7],
      y: [0, 2, 4, 6]
    },
    { // pass 7 - 32px
      x: [0, 1, 2, 3, 4, 5, 6, 7],
      y: [1, 3, 5, 7]
    }
  ];

  interlace.getImagePasses = function(width, height) {
    var images = [];
    var xLeftOver = width % 8;
    var yLeftOver = height % 8;
    var xRepeats = (width - xLeftOver) / 8;
    var yRepeats = (height - yLeftOver) / 8;
    for (var i = 0; i < imagePasses.length; i++) {
      var pass = imagePasses[i];
      var passWidth = xRepeats * pass.x.length;
      var passHeight = yRepeats * pass.y.length;
      for (var j = 0; j < pass.x.length; j++) {
        if (pass.x[j] < xLeftOver) {
          passWidth++;
        }
        else {
          break;
        }
      }
      for (j = 0; j < pass.y.length; j++) {
        if (pass.y[j] < yLeftOver) {
          passHeight++;
        }
        else {
          break;
        }
      }
      if (passWidth > 0 && passHeight > 0) {
        images.push({ width: passWidth, height: passHeight, index: i });
      }
    }
    return images;
  };

  interlace.getInterlaceIterator = function(width) {
    return function(x, y, pass) {
      var outerXLeftOver = x % imagePasses[pass].x.length;
      var outerX = (((x - outerXLeftOver) / imagePasses[pass].x.length) * 8) + imagePasses[pass].x[outerXLeftOver];
      var outerYLeftOver = y % imagePasses[pass].y.length;
      var outerY = (((y - outerYLeftOver) / imagePasses[pass].y.length) * 8) + imagePasses[pass].y[outerYLeftOver];
      return (outerX * 4) + (outerY * width * 4);
    };
  };

  var paethPredictor$2 = function paethPredictor(left, above, upLeft) {

    var paeth = left + above - upLeft;
    var pLeft = Math.abs(paeth - left);
    var pAbove = Math.abs(paeth - above);
    var pUpLeft = Math.abs(paeth - upLeft);

    if (pLeft <= pAbove && pLeft <= pUpLeft) {
      return left;
    }
    if (pAbove <= pUpLeft) {
      return above;
    }
    return upLeft;
  };

  var interlaceUtils$1 = interlace;
  var paethPredictor$1 = paethPredictor$2;

  function getByteWidth(width, bpp, depth) {
    var byteWidth = width * bpp;
    if (depth !== 8) {
      byteWidth = Math.ceil(byteWidth / (8 / depth));
    }
    return byteWidth;
  }

  var Filter$2 = filterParse.exports = function(bitmapInfo, dependencies) {

    var width = bitmapInfo.width;
    var height = bitmapInfo.height;
    var interlace = bitmapInfo.interlace;
    var bpp = bitmapInfo.bpp;
    var depth = bitmapInfo.depth;

    this.read = dependencies.read;
    this.write = dependencies.write;
    this.complete = dependencies.complete;

    this._imageIndex = 0;
    this._images = [];
    if (interlace) {
      var passes = interlaceUtils$1.getImagePasses(width, height);
      for (var i = 0; i < passes.length; i++) {
        this._images.push({
          byteWidth: getByteWidth(passes[i].width, bpp, depth),
          height: passes[i].height,
          lineIndex: 0
        });
      }
    }
    else {
      this._images.push({
        byteWidth: getByteWidth(width, bpp, depth),
        height: height,
        lineIndex: 0
      });
    }

    // when filtering the line we look at the pixel to the left
    // the spec also says it is done on a byte level regardless of the number of pixels
    // so if the depth is byte compatible (8 or 16) we subtract the bpp in order to compare back
    // a pixel rather than just a different byte part. However if we are sub byte, we ignore.
    if (depth === 8) {
      this._xComparison = bpp;
    }
    else if (depth === 16) {
      this._xComparison = bpp * 2;
    }
    else {
      this._xComparison = 1;
    }
  };

  Filter$2.prototype.start = function() {
    this.read(this._images[this._imageIndex].byteWidth + 1, this._reverseFilterLine.bind(this));
  };

  Filter$2.prototype._unFilterType1 = function(rawData, unfilteredLine, byteWidth) {

    var xComparison = this._xComparison;
    var xBiggerThan = xComparison - 1;

    for (var x = 0; x < byteWidth; x++) {
      var rawByte = rawData[1 + x];
      var f1Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;
      unfilteredLine[x] = rawByte + f1Left;
    }
  };

  Filter$2.prototype._unFilterType2 = function(rawData, unfilteredLine, byteWidth) {

    var lastLine = this._lastLine;

    for (var x = 0; x < byteWidth; x++) {
      var rawByte = rawData[1 + x];
      var f2Up = lastLine ? lastLine[x] : 0;
      unfilteredLine[x] = rawByte + f2Up;
    }
  };

  Filter$2.prototype._unFilterType3 = function(rawData, unfilteredLine, byteWidth) {

    var xComparison = this._xComparison;
    var xBiggerThan = xComparison - 1;
    var lastLine = this._lastLine;

    for (var x = 0; x < byteWidth; x++) {
      var rawByte = rawData[1 + x];
      var f3Up = lastLine ? lastLine[x] : 0;
      var f3Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;
      var f3Add = Math.floor((f3Left + f3Up) / 2);
      unfilteredLine[x] = rawByte + f3Add;
    }
  };

  Filter$2.prototype._unFilterType4 = function(rawData, unfilteredLine, byteWidth) {

    var xComparison = this._xComparison;
    var xBiggerThan = xComparison - 1;
    var lastLine = this._lastLine;

    for (var x = 0; x < byteWidth; x++) {
      var rawByte = rawData[1 + x];
      var f4Up = lastLine ? lastLine[x] : 0;
      var f4Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;
      var f4UpLeft = x > xBiggerThan && lastLine ? lastLine[x - xComparison] : 0;
      var f4Add = paethPredictor$1(f4Left, f4Up, f4UpLeft);
      unfilteredLine[x] = rawByte + f4Add;
    }
  };

  Filter$2.prototype._reverseFilterLine = function(rawData) {

    var filter = rawData[0];
    var unfilteredLine;
    var currentImage = this._images[this._imageIndex];
    var byteWidth = currentImage.byteWidth;

    if (filter === 0) {
      unfilteredLine = rawData.slice(1, byteWidth + 1);
    }
    else {

      unfilteredLine = new Buffer(byteWidth);

      switch (filter) {
        case 1:
          this._unFilterType1(rawData, unfilteredLine, byteWidth);
          break;
        case 2:
          this._unFilterType2(rawData, unfilteredLine, byteWidth);
          break;
        case 3:
          this._unFilterType3(rawData, unfilteredLine, byteWidth);
          break;
        case 4:
          this._unFilterType4(rawData, unfilteredLine, byteWidth);
          break;
        default:
          throw new Error('Unrecognised filter type - ' + filter);
      }
    }

    this.write(unfilteredLine);

    currentImage.lineIndex++;
    if (currentImage.lineIndex >= currentImage.height) {
      this._lastLine = null;
      this._imageIndex++;
      currentImage = this._images[this._imageIndex];
    }
    else {
      this._lastLine = unfilteredLine;
    }

    if (currentImage) {
      // read, using the byte width that may be from the new current image
      this.read(currentImage.byteWidth + 1, this._reverseFilterLine.bind(this));
    }
    else {
      this._lastLine = null;
      this.complete();
    }
  };

  var util$5 = require$$0__default$4["default"];
  var ChunkStream$1 = chunkstream.exports;
  var Filter$1 = filterParse.exports;


  var FilterAsync$1 = filterParseAsync.exports = function(bitmapInfo) {
    ChunkStream$1.call(this);

    var buffers = [];
    var that = this;
    this._filter = new Filter$1(bitmapInfo, {
      read: this.read.bind(this),
      write: function(buffer) {
        buffers.push(buffer);
      },
      complete: function() {
        that.emit('complete', Buffer.concat(buffers));
      }
    });

    this._filter.start();
  };
  util$5.inherits(FilterAsync$1, ChunkStream$1);

  var parser = {exports: {}};

  var constants$6 = {

    PNG_SIGNATURE: [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a],

    TYPE_IHDR: 0x49484452,
    TYPE_IEND: 0x49454e44,
    TYPE_IDAT: 0x49444154,
    TYPE_PLTE: 0x504c5445,
    TYPE_tRNS: 0x74524e53, // eslint-disable-line camelcase
    TYPE_gAMA: 0x67414d41, // eslint-disable-line camelcase

    // color-type bits
    COLORTYPE_GRAYSCALE: 0,
    COLORTYPE_PALETTE: 1,
    COLORTYPE_COLOR: 2,
    COLORTYPE_ALPHA: 4, // e.g. grayscale and alpha

    // color-type combinations
    COLORTYPE_PALETTE_COLOR: 3,
    COLORTYPE_COLOR_ALPHA: 6,

    COLORTYPE_TO_BPP_MAP: {
      0: 1,
      2: 3,
      3: 1,
      4: 2,
      6: 4
    },

    GAMMA_DIVISION: 100000
  };

  var crc = {exports: {}};

  var crcTable = [];

  (function() {
    for (var i = 0; i < 256; i++) {
      var currentCrc = i;
      for (var j = 0; j < 8; j++) {
        if (currentCrc & 1) {
          currentCrc = 0xedb88320 ^ (currentCrc >>> 1);
        }
        else {
          currentCrc = currentCrc >>> 1;
        }
      }
      crcTable[i] = currentCrc;
    }
  }());

  var CrcCalculator$1 = crc.exports = function() {
    this._crc = -1;
  };

  CrcCalculator$1.prototype.write = function(data) {

    for (var i = 0; i < data.length; i++) {
      this._crc = crcTable[(this._crc ^ data[i]) & 0xff] ^ (this._crc >>> 8);
    }
    return true;
  };

  CrcCalculator$1.prototype.crc32 = function() {
    return this._crc ^ -1;
  };


  CrcCalculator$1.crc32 = function(buf) {

    var crc = -1;
    for (var i = 0; i < buf.length; i++) {
      crc = crcTable[(crc ^ buf[i]) & 0xff] ^ (crc >>> 8);
    }
    return crc ^ -1;
  };

  var constants$5 = constants$6;
  var CrcCalculator = crc.exports;


  var Parser$3 = parser.exports = function(options, dependencies) {

    this._options = options;
    options.checkCRC = options.checkCRC !== false;

    this._hasIHDR = false;
    this._hasIEND = false;
    this._emittedHeadersFinished = false;

    // input flags/metadata
    this._palette = [];
    this._colorType = 0;

    this._chunks = {};
    this._chunks[constants$5.TYPE_IHDR] = this._handleIHDR.bind(this);
    this._chunks[constants$5.TYPE_IEND] = this._handleIEND.bind(this);
    this._chunks[constants$5.TYPE_IDAT] = this._handleIDAT.bind(this);
    this._chunks[constants$5.TYPE_PLTE] = this._handlePLTE.bind(this);
    this._chunks[constants$5.TYPE_tRNS] = this._handleTRNS.bind(this);
    this._chunks[constants$5.TYPE_gAMA] = this._handleGAMA.bind(this);

    this.read = dependencies.read;
    this.error = dependencies.error;
    this.metadata = dependencies.metadata;
    this.gamma = dependencies.gamma;
    this.transColor = dependencies.transColor;
    this.palette = dependencies.palette;
    this.parsed = dependencies.parsed;
    this.inflateData = dependencies.inflateData;
    this.finished = dependencies.finished;
    this.simpleTransparency = dependencies.simpleTransparency;
    this.headersFinished = dependencies.headersFinished || function() {};
  };

  Parser$3.prototype.start = function() {
    this.read(constants$5.PNG_SIGNATURE.length,
      this._parseSignature.bind(this)
    );
  };

  Parser$3.prototype._parseSignature = function(data) {

    var signature = constants$5.PNG_SIGNATURE;

    for (var i = 0; i < signature.length; i++) {
      if (data[i] !== signature[i]) {
        this.error(new Error('Invalid file signature'));
        return;
      }
    }
    this.read(8, this._parseChunkBegin.bind(this));
  };

  Parser$3.prototype._parseChunkBegin = function(data) {

    // chunk content length
    var length = data.readUInt32BE(0);

    // chunk type
    var type = data.readUInt32BE(4);
    var name = '';
    for (var i = 4; i < 8; i++) {
      name += String.fromCharCode(data[i]);
    }

    //console.log('chunk ', name, length);

    // chunk flags
    var ancillary = Boolean(data[4] & 0x20); // or critical
    //    priv = Boolean(data[5] & 0x20), // or public
    //    safeToCopy = Boolean(data[7] & 0x20); // or unsafe

    if (!this._hasIHDR && type !== constants$5.TYPE_IHDR) {
      this.error(new Error('Expected IHDR on beggining'));
      return;
    }

    this._crc = new CrcCalculator();
    this._crc.write(new Buffer(name));

    if (this._chunks[type]) {
      return this._chunks[type](length);
    }

    if (!ancillary) {
      this.error(new Error('Unsupported critical chunk type ' + name));
      return;
    }

    this.read(length + 4, this._skipChunk.bind(this));
  };

  Parser$3.prototype._skipChunk = function(/*data*/) {
    this.read(8, this._parseChunkBegin.bind(this));
  };

  Parser$3.prototype._handleChunkEnd = function() {
    this.read(4, this._parseChunkEnd.bind(this));
  };

  Parser$3.prototype._parseChunkEnd = function(data) {

    var fileCrc = data.readInt32BE(0);
    var calcCrc = this._crc.crc32();

    // check CRC
    if (this._options.checkCRC && calcCrc !== fileCrc) {
      this.error(new Error('Crc error - ' + fileCrc + ' - ' + calcCrc));
      return;
    }

    if (!this._hasIEND) {
      this.read(8, this._parseChunkBegin.bind(this));
    }
  };

  Parser$3.prototype._handleIHDR = function(length) {
    this.read(length, this._parseIHDR.bind(this));
  };
  Parser$3.prototype._parseIHDR = function(data) {

    this._crc.write(data);

    var width = data.readUInt32BE(0);
    var height = data.readUInt32BE(4);
    var depth = data[8];
    var colorType = data[9]; // bits: 1 palette, 2 color, 4 alpha
    var compr = data[10];
    var filter = data[11];
    var interlace = data[12];

    // console.log('    width', width, 'height', height,
    //     'depth', depth, 'colorType', colorType,
    //     'compr', compr, 'filter', filter, 'interlace', interlace
    // );

    if (depth !== 8 && depth !== 4 && depth !== 2 && depth !== 1 && depth !== 16) {
      this.error(new Error('Unsupported bit depth ' + depth));
      return;
    }
    if (!(colorType in constants$5.COLORTYPE_TO_BPP_MAP)) {
      this.error(new Error('Unsupported color type'));
      return;
    }
    if (compr !== 0) {
      this.error(new Error('Unsupported compression method'));
      return;
    }
    if (filter !== 0) {
      this.error(new Error('Unsupported filter method'));
      return;
    }
    if (interlace !== 0 && interlace !== 1) {
      this.error(new Error('Unsupported interlace method'));
      return;
    }

    this._colorType = colorType;

    var bpp = constants$5.COLORTYPE_TO_BPP_MAP[this._colorType];

    this._hasIHDR = true;

    this.metadata({
      width: width,
      height: height,
      depth: depth,
      interlace: Boolean(interlace),
      palette: Boolean(colorType & constants$5.COLORTYPE_PALETTE),
      color: Boolean(colorType & constants$5.COLORTYPE_COLOR),
      alpha: Boolean(colorType & constants$5.COLORTYPE_ALPHA),
      bpp: bpp,
      colorType: colorType
    });

    this._handleChunkEnd();
  };


  Parser$3.prototype._handlePLTE = function(length) {
    this.read(length, this._parsePLTE.bind(this));
  };
  Parser$3.prototype._parsePLTE = function(data) {

    this._crc.write(data);

    var entries = Math.floor(data.length / 3);
    // console.log('Palette:', entries);

    for (var i = 0; i < entries; i++) {
      this._palette.push([
        data[i * 3],
        data[i * 3 + 1],
        data[i * 3 + 2],
        0xff
      ]);
    }

    this.palette(this._palette);

    this._handleChunkEnd();
  };

  Parser$3.prototype._handleTRNS = function(length) {
    this.simpleTransparency();
    this.read(length, this._parseTRNS.bind(this));
  };
  Parser$3.prototype._parseTRNS = function(data) {

    this._crc.write(data);

    // palette
    if (this._colorType === constants$5.COLORTYPE_PALETTE_COLOR) {
      if (this._palette.length === 0) {
        this.error(new Error('Transparency chunk must be after palette'));
        return;
      }
      if (data.length > this._palette.length) {
        this.error(new Error('More transparent colors than palette size'));
        return;
      }
      for (var i = 0; i < data.length; i++) {
        this._palette[i][3] = data[i];
      }
      this.palette(this._palette);
    }

    // for colorType 0 (grayscale) and 2 (rgb)
    // there might be one gray/color defined as transparent
    if (this._colorType === constants$5.COLORTYPE_GRAYSCALE) {
      // grey, 2 bytes
      this.transColor([data.readUInt16BE(0)]);
    }
    if (this._colorType === constants$5.COLORTYPE_COLOR) {
      this.transColor([data.readUInt16BE(0), data.readUInt16BE(2), data.readUInt16BE(4)]);
    }

    this._handleChunkEnd();
  };

  Parser$3.prototype._handleGAMA = function(length) {
    this.read(length, this._parseGAMA.bind(this));
  };
  Parser$3.prototype._parseGAMA = function(data) {

    this._crc.write(data);
    this.gamma(data.readUInt32BE(0) / constants$5.GAMMA_DIVISION);

    this._handleChunkEnd();
  };

  Parser$3.prototype._handleIDAT = function(length) {
    if (!this._emittedHeadersFinished) {
      this._emittedHeadersFinished = true;
      this.headersFinished();
    }
    this.read(-length, this._parseIDAT.bind(this, length));
  };
  Parser$3.prototype._parseIDAT = function(length, data) {

    this._crc.write(data);

    if (this._colorType === constants$5.COLORTYPE_PALETTE_COLOR && this._palette.length === 0) {
      throw new Error('Expected palette not found');
    }

    this.inflateData(data);
    var leftOverLength = length - data.length;

    if (leftOverLength > 0) {
      this._handleIDAT(leftOverLength);
    }
    else {
      this._handleChunkEnd();
    }
  };

  Parser$3.prototype._handleIEND = function(length) {
    this.read(length, this._parseIEND.bind(this));
  };
  Parser$3.prototype._parseIEND = function(data) {

    this._crc.write(data);

    this._hasIEND = true;
    this._handleChunkEnd();

    if (this.finished) {
      this.finished();
    }
  };

  var bitmapper$2 = {};

  var interlaceUtils = interlace;

  var pixelBppMapper = [
    // 0 - dummy entry
    function() {},

    // 1 - L
    // 0: 0, 1: 0, 2: 0, 3: 0xff
    function(pxData, data, pxPos, rawPos) {
      if (rawPos === data.length) {
        throw new Error('Ran out of data');
      }

      var pixel = data[rawPos];
      pxData[pxPos] = pixel;
      pxData[pxPos + 1] = pixel;
      pxData[pxPos + 2] = pixel;
      pxData[pxPos + 3] = 0xff;
    },

    // 2 - LA
    // 0: 0, 1: 0, 2: 0, 3: 1
    function(pxData, data, pxPos, rawPos) {
      if (rawPos + 1 >= data.length) {
        throw new Error('Ran out of data');
      }

      var pixel = data[rawPos];
      pxData[pxPos] = pixel;
      pxData[pxPos + 1] = pixel;
      pxData[pxPos + 2] = pixel;
      pxData[pxPos + 3] = data[rawPos + 1];
    },

    // 3 - RGB
    // 0: 0, 1: 1, 2: 2, 3: 0xff
    function(pxData, data, pxPos, rawPos) {
      if (rawPos + 2 >= data.length) {
        throw new Error('Ran out of data');
      }

      pxData[pxPos] = data[rawPos];
      pxData[pxPos + 1] = data[rawPos + 1];
      pxData[pxPos + 2] = data[rawPos + 2];
      pxData[pxPos + 3] = 0xff;
    },

    // 4 - RGBA
    // 0: 0, 1: 1, 2: 2, 3: 3
    function(pxData, data, pxPos, rawPos) {
      if (rawPos + 3 >= data.length) {
        throw new Error('Ran out of data');
      }

      pxData[pxPos] = data[rawPos];
      pxData[pxPos + 1] = data[rawPos + 1];
      pxData[pxPos + 2] = data[rawPos + 2];
      pxData[pxPos + 3] = data[rawPos + 3];
    }
  ];

  var pixelBppCustomMapper = [
    // 0 - dummy entry
    function() {},

    // 1 - L
    // 0: 0, 1: 0, 2: 0, 3: 0xff
    function(pxData, pixelData, pxPos, maxBit) {
      var pixel = pixelData[0];
      pxData[pxPos] = pixel;
      pxData[pxPos + 1] = pixel;
      pxData[pxPos + 2] = pixel;
      pxData[pxPos + 3] = maxBit;
    },

    // 2 - LA
    // 0: 0, 1: 0, 2: 0, 3: 1
    function(pxData, pixelData, pxPos) {
      var pixel = pixelData[0];
      pxData[pxPos] = pixel;
      pxData[pxPos + 1] = pixel;
      pxData[pxPos + 2] = pixel;
      pxData[pxPos + 3] = pixelData[1];
    },

    // 3 - RGB
    // 0: 0, 1: 1, 2: 2, 3: 0xff
    function(pxData, pixelData, pxPos, maxBit) {
      pxData[pxPos] = pixelData[0];
      pxData[pxPos + 1] = pixelData[1];
      pxData[pxPos + 2] = pixelData[2];
      pxData[pxPos + 3] = maxBit;
    },

    // 4 - RGBA
    // 0: 0, 1: 1, 2: 2, 3: 3
    function(pxData, pixelData, pxPos) {
      pxData[pxPos] = pixelData[0];
      pxData[pxPos + 1] = pixelData[1];
      pxData[pxPos + 2] = pixelData[2];
      pxData[pxPos + 3] = pixelData[3];
    }
  ];

  function bitRetriever(data, depth) {

    var leftOver = [];
    var i = 0;

    function split() {
      if (i === data.length) {
        throw new Error('Ran out of data');
      }
      var byte = data[i];
      i++;
      var byte8, byte7, byte6, byte5, byte4, byte3, byte2, byte1;
      switch (depth) {
        default:
          throw new Error('unrecognised depth');
        case 16:
          byte2 = data[i];
          i++;
          leftOver.push(((byte << 8) + byte2));
          break;
        case 4:
          byte2 = byte & 0x0f;
          byte1 = byte >> 4;
          leftOver.push(byte1, byte2);
          break;
        case 2:
          byte4 = byte & 3;
          byte3 = byte >> 2 & 3;
          byte2 = byte >> 4 & 3;
          byte1 = byte >> 6 & 3;
          leftOver.push(byte1, byte2, byte3, byte4);
          break;
        case 1:
          byte8 = byte & 1;
          byte7 = byte >> 1 & 1;
          byte6 = byte >> 2 & 1;
          byte5 = byte >> 3 & 1;
          byte4 = byte >> 4 & 1;
          byte3 = byte >> 5 & 1;
          byte2 = byte >> 6 & 1;
          byte1 = byte >> 7 & 1;
          leftOver.push(byte1, byte2, byte3, byte4, byte5, byte6, byte7, byte8);
          break;
      }
    }

    return {
      get: function(count) {
        while (leftOver.length < count) {
          split();
        }
        var returner = leftOver.slice(0, count);
        leftOver = leftOver.slice(count);
        return returner;
      },
      resetAfterLine: function() {
        leftOver.length = 0;
      },
      end: function() {
        if (i !== data.length) {
          throw new Error('extra data found');
        }
      }
    };
  }

  function mapImage8Bit(image, pxData, getPxPos, bpp, data, rawPos) { // eslint-disable-line max-params
    var imageWidth = image.width;
    var imageHeight = image.height;
    var imagePass = image.index;
    for (var y = 0; y < imageHeight; y++) {
      for (var x = 0; x < imageWidth; x++) {
        var pxPos = getPxPos(x, y, imagePass);
        pixelBppMapper[bpp](pxData, data, pxPos, rawPos);
        rawPos += bpp; //eslint-disable-line no-param-reassign
      }
    }
    return rawPos;
  }

  function mapImageCustomBit(image, pxData, getPxPos, bpp, bits, maxBit) { // eslint-disable-line max-params
    var imageWidth = image.width;
    var imageHeight = image.height;
    var imagePass = image.index;
    for (var y = 0; y < imageHeight; y++) {
      for (var x = 0; x < imageWidth; x++) {
        var pixelData = bits.get(bpp);
        var pxPos = getPxPos(x, y, imagePass);
        pixelBppCustomMapper[bpp](pxData, pixelData, pxPos, maxBit);
      }
      bits.resetAfterLine();
    }
  }

  bitmapper$2.dataToBitMap = function(data, bitmapInfo) {

    var width = bitmapInfo.width;
    var height = bitmapInfo.height;
    var depth = bitmapInfo.depth;
    var bpp = bitmapInfo.bpp;
    var interlace = bitmapInfo.interlace;

    if (depth !== 8) {
      var bits = bitRetriever(data, depth);
    }
    var pxData;
    if (depth <= 8) {
      pxData = new Buffer(width * height * 4);
    }
    else {
      pxData = new Uint16Array(width * height * 4);
    }
    var maxBit = Math.pow(2, depth) - 1;
    var rawPos = 0;
    var images;
    var getPxPos;

    if (interlace) {
      images = interlaceUtils.getImagePasses(width, height);
      getPxPos = interlaceUtils.getInterlaceIterator(width, height);
    }
    else {
      var nonInterlacedPxPos = 0;
      getPxPos = function() {
        var returner = nonInterlacedPxPos;
        nonInterlacedPxPos += 4;
        return returner;
      };
      images = [{ width: width, height: height }];
    }

    for (var imageIndex = 0; imageIndex < images.length; imageIndex++) {
      if (depth === 8) {
        rawPos = mapImage8Bit(images[imageIndex], pxData, getPxPos, bpp, data, rawPos);
      }
      else {
        mapImageCustomBit(images[imageIndex], pxData, getPxPos, bpp, bits, maxBit);
      }
    }
    if (depth === 8) {
      if (rawPos !== data.length) {
        throw new Error('extra data found');
      }
    }
    else {
      bits.end();
    }

    return pxData;
  };

  function dePalette(indata, outdata, width, height, palette) {
    var pxPos = 0;
    // use values from palette
    for (var y = 0; y < height; y++) {
      for (var x = 0; x < width; x++) {
        var color = palette[indata[pxPos]];

        if (!color) {
          throw new Error('index ' + indata[pxPos] + ' not in palette');
        }

        for (var i = 0; i < 4; i++) {
          outdata[pxPos + i] = color[i];
        }
        pxPos += 4;
      }
    }
  }

  function replaceTransparentColor(indata, outdata, width, height, transColor) {
    var pxPos = 0;
    for (var y = 0; y < height; y++) {
      for (var x = 0; x < width; x++) {
        var makeTrans = false;

        if (transColor.length === 1) {
          if (transColor[0] === indata[pxPos]) {
            makeTrans = true;
          }
        }
        else if (transColor[0] === indata[pxPos] && transColor[1] === indata[pxPos + 1] && transColor[2] === indata[pxPos + 2]) {
          makeTrans = true;
        }
        if (makeTrans) {
          for (var i = 0; i < 4; i++) {
            outdata[pxPos + i] = 0;
          }
        }
        pxPos += 4;
      }
    }
  }

  function scaleDepth(indata, outdata, width, height, depth) {
    var maxOutSample = 255;
    var maxInSample = Math.pow(2, depth) - 1;
    var pxPos = 0;

    for (var y = 0; y < height; y++) {
      for (var x = 0; x < width; x++) {
        for (var i = 0; i < 4; i++) {
          outdata[pxPos + i] = Math.floor((indata[pxPos + i] * maxOutSample) / maxInSample + 0.5);
        }
        pxPos += 4;
      }
    }
  }

  var formatNormaliser$2 = function(indata, imageData) {

    var depth = imageData.depth;
    var width = imageData.width;
    var height = imageData.height;
    var colorType = imageData.colorType;
    var transColor = imageData.transColor;
    var palette = imageData.palette;

    var outdata = indata; // only different for 16 bits

    if (colorType === 3) { // paletted
      dePalette(indata, outdata, width, height, palette);
    }
    else {
      if (transColor) {
        replaceTransparentColor(indata, outdata, width, height, transColor);
      }
      // if it needs scaling
      if (depth !== 8) {
        // if we need to change the buffer size
        if (depth === 16) {
          outdata = new Buffer(width * height * 4);
        }
        scaleDepth(indata, outdata, width, height, depth);
      }
    }
    return outdata;
  };

  var util$4 = require$$0__default$4["default"];
  var zlib$3 = require$$0__default["default"];
  var ChunkStream = chunkstream.exports;
  var FilterAsync = filterParseAsync.exports;
  var Parser$2 = parser.exports;
  var bitmapper$1 = bitmapper$2;
  var formatNormaliser$1 = formatNormaliser$2;

  var ParserAsync = parserAsync.exports = function(options) {
    ChunkStream.call(this);

    this._parser = new Parser$2(options, {
      read: this.read.bind(this),
      error: this._handleError.bind(this),
      metadata: this._handleMetaData.bind(this),
      gamma: this.emit.bind(this, 'gamma'),
      palette: this._handlePalette.bind(this),
      transColor: this._handleTransColor.bind(this),
      finished: this._finished.bind(this),
      inflateData: this._inflateData.bind(this),
      simpleTransparency: this._simpleTransparency.bind(this),
      headersFinished: this._headersFinished.bind(this)
    });
    this._options = options;
    this.writable = true;

    this._parser.start();
  };
  util$4.inherits(ParserAsync, ChunkStream);


  ParserAsync.prototype._handleError = function(err) {

    this.emit('error', err);

    this.writable = false;

    this.destroy();

    if (this._inflate && this._inflate.destroy) {
      this._inflate.destroy();
    }

    if (this._filter) {
      this._filter.destroy();
      // For backward compatibility with Node 7 and below.
      // Suppress errors due to _inflate calling write() even after
      // it's destroy()'ed.
      this._filter.on('error', function() {});
    }

    this.errord = true;
  };

  ParserAsync.prototype._inflateData = function(data) {
    if (!this._inflate) {
      if (this._bitmapInfo.interlace) {
        this._inflate = zlib$3.createInflate();

        this._inflate.on('error', this.emit.bind(this, 'error'));
        this._filter.on('complete', this._complete.bind(this));

        this._inflate.pipe(this._filter);
      }
      else {
        var rowSize = ((this._bitmapInfo.width * this._bitmapInfo.bpp * this._bitmapInfo.depth + 7) >> 3) + 1;
        var imageSize = rowSize * this._bitmapInfo.height;
        var chunkSize = Math.max(imageSize, zlib$3.Z_MIN_CHUNK);

        this._inflate = zlib$3.createInflate({ chunkSize: chunkSize });
        var leftToInflate = imageSize;

        var emitError = this.emit.bind(this, 'error');
        this._inflate.on('error', function(err) {
          if (!leftToInflate) {
            return;
          }

          emitError(err);
        });
        this._filter.on('complete', this._complete.bind(this));

        var filterWrite = this._filter.write.bind(this._filter);
        this._inflate.on('data', function(chunk) {
          if (!leftToInflate) {
            return;
          }

          if (chunk.length > leftToInflate) {
            chunk = chunk.slice(0, leftToInflate);
          }

          leftToInflate -= chunk.length;

          filterWrite(chunk);
        });

        this._inflate.on('end', this._filter.end.bind(this._filter));
      }
    }
    this._inflate.write(data);
  };

  ParserAsync.prototype._handleMetaData = function(metaData) {
    this._metaData = metaData;
    this._bitmapInfo = Object.create(metaData);

    this._filter = new FilterAsync(this._bitmapInfo);
  };

  ParserAsync.prototype._handleTransColor = function(transColor) {
    this._bitmapInfo.transColor = transColor;
  };

  ParserAsync.prototype._handlePalette = function(palette) {
    this._bitmapInfo.palette = palette;
  };

  ParserAsync.prototype._simpleTransparency = function() {
    this._metaData.alpha = true;
  };

  ParserAsync.prototype._headersFinished = function() {
    // Up until this point, we don't know if we have a tRNS chunk (alpha)
    // so we can't emit metadata any earlier
    this.emit('metadata', this._metaData);
  };

  ParserAsync.prototype._finished = function() {
    if (this.errord) {
      return;
    }

    if (!this._inflate) {
      this.emit('error', 'No Inflate block');
    }
    else {
      // no more data to inflate
      this._inflate.end();
    }
    this.destroySoon();
  };

  ParserAsync.prototype._complete = function(filteredData) {

    if (this.errord) {
      return;
    }

    try {
      var bitmapData = bitmapper$1.dataToBitMap(filteredData, this._bitmapInfo);

      var normalisedBitmapData = formatNormaliser$1(bitmapData, this._bitmapInfo);
      bitmapData = null;
    }
    catch (ex) {
      this._handleError(ex);
      return;
    }

    this.emit('parsed', normalisedBitmapData);
  };

  var packerAsync = {exports: {}};

  var packer = {exports: {}};

  var constants$4 = constants$6;

  var bitpacker = function(dataIn, width, height, options) {
    var outHasAlpha = [constants$4.COLORTYPE_COLOR_ALPHA, constants$4.COLORTYPE_ALPHA].indexOf(options.colorType) !== -1;
    if (options.colorType === options.inputColorType) {
      var bigEndian = (function() {
        var buffer = new ArrayBuffer(2);
        new DataView(buffer).setInt16(0, 256, true /* littleEndian */);
        // Int16Array uses the platform's endianness.
        return new Int16Array(buffer)[0] !== 256;
      })();
      // If no need to convert to grayscale and alpha is present/absent in both, take a fast route
      if (options.bitDepth === 8 || (options.bitDepth === 16 && bigEndian)) {
        return dataIn;
      }
    }

    // map to a UInt16 array if data is 16bit, fix endianness below
    var data = options.bitDepth !== 16 ? dataIn : new Uint16Array(dataIn.buffer);

    var maxValue = 255;
    var inBpp = constants$4.COLORTYPE_TO_BPP_MAP[options.inputColorType];
    if (inBpp === 4 && !options.inputHasAlpha) {
      inBpp = 3;
    }
    var outBpp = constants$4.COLORTYPE_TO_BPP_MAP[options.colorType];
    if (options.bitDepth === 16) {
      maxValue = 65535;
      outBpp *= 2;
    }
    var outData = new Buffer(width * height * outBpp);

    var inIndex = 0;
    var outIndex = 0;

    var bgColor = options.bgColor || {};
    if (bgColor.red === undefined) {
      bgColor.red = maxValue;
    }
    if (bgColor.green === undefined) {
      bgColor.green = maxValue;
    }
    if (bgColor.blue === undefined) {
      bgColor.blue = maxValue;
    }

    function getRGBA() {
      var red;
      var green;
      var blue;
      var alpha = maxValue;
      switch (options.inputColorType) {
        case constants$4.COLORTYPE_COLOR_ALPHA:
          alpha = data[inIndex + 3];
          red = data[inIndex];
          green = data[inIndex + 1];
          blue = data[inIndex + 2];
          break;
        case constants$4.COLORTYPE_COLOR:
          red = data[inIndex];
          green = data[inIndex + 1];
          blue = data[inIndex + 2];
          break;
        case constants$4.COLORTYPE_ALPHA:
          alpha = data[inIndex + 1];
          red = data[inIndex];
          green = red;
          blue = red;
          break;
        case constants$4.COLORTYPE_GRAYSCALE:
          red = data[inIndex];
          green = red;
          blue = red;
          break;
        default:
          throw new Error('input color type:' + options.inputColorType + ' is not supported at present');
      }

      if (options.inputHasAlpha) {
        if (!outHasAlpha) {
          alpha /= maxValue;
          red = Math.min(Math.max(Math.round((1 - alpha) * bgColor.red + alpha * red), 0), maxValue);
          green = Math.min(Math.max(Math.round((1 - alpha) * bgColor.green + alpha * green), 0), maxValue);
          blue = Math.min(Math.max(Math.round((1 - alpha) * bgColor.blue + alpha * blue), 0), maxValue);
        }
      }
      return { red: red, green: green, blue: blue, alpha: alpha };
    }

    for (var y = 0; y < height; y++) {
      for (var x = 0; x < width; x++) {
        var rgba = getRGBA();

        switch (options.colorType) {
          case constants$4.COLORTYPE_COLOR_ALPHA:
          case constants$4.COLORTYPE_COLOR:
            if (options.bitDepth === 8) {
              outData[outIndex] = rgba.red;
              outData[outIndex + 1] = rgba.green;
              outData[outIndex + 2] = rgba.blue;
              if (outHasAlpha) {
                outData[outIndex + 3] = rgba.alpha;
              }
            }
            else {
              outData.writeUInt16BE(rgba.red, outIndex);
              outData.writeUInt16BE(rgba.green, outIndex + 2);
              outData.writeUInt16BE(rgba.blue, outIndex + 4);
              if (outHasAlpha) {
                outData.writeUInt16BE(rgba.alpha, outIndex + 6);
              }
            }
            break;
          case constants$4.COLORTYPE_ALPHA:
          case constants$4.COLORTYPE_GRAYSCALE:
            // Convert to grayscale and alpha
            var grayscale = (rgba.red + rgba.green + rgba.blue) / 3;
            if (options.bitDepth === 8) {
              outData[outIndex] = grayscale;
              if (outHasAlpha) {
                outData[outIndex + 1] = rgba.alpha;
              }
            }
            else {
              outData.writeUInt16BE(grayscale, outIndex);
              if (outHasAlpha) {
                outData.writeUInt16BE(rgba.alpha, outIndex + 2);
              }
            }
            break;
          default:
            throw new Error('unrecognised color Type ' + options.colorType);
        }

        inIndex += inBpp;
        outIndex += outBpp;
      }
    }

    return outData;
  };

  var paethPredictor = paethPredictor$2;

  function filterNone(pxData, pxPos, byteWidth, rawData, rawPos) {

    for (var x = 0; x < byteWidth; x++) {
      rawData[rawPos + x] = pxData[pxPos + x];
    }
  }

  function filterSumNone(pxData, pxPos, byteWidth) {

    var sum = 0;
    var length = pxPos + byteWidth;

    for (var i = pxPos; i < length; i++) {
      sum += Math.abs(pxData[i]);
    }
    return sum;
  }

  function filterSub(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {

    for (var x = 0; x < byteWidth; x++) {

      var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
      var val = pxData[pxPos + x] - left;

      rawData[rawPos + x] = val;
    }
  }

  function filterSumSub(pxData, pxPos, byteWidth, bpp) {

    var sum = 0;
    for (var x = 0; x < byteWidth; x++) {

      var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
      var val = pxData[pxPos + x] - left;

      sum += Math.abs(val);
    }

    return sum;
  }

  function filterUp(pxData, pxPos, byteWidth, rawData, rawPos) {

    for (var x = 0; x < byteWidth; x++) {

      var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
      var val = pxData[pxPos + x] - up;

      rawData[rawPos + x] = val;
    }
  }

  function filterSumUp(pxData, pxPos, byteWidth) {

    var sum = 0;
    var length = pxPos + byteWidth;
    for (var x = pxPos; x < length; x++) {

      var up = pxPos > 0 ? pxData[x - byteWidth] : 0;
      var val = pxData[x] - up;

      sum += Math.abs(val);
    }

    return sum;
  }

  function filterAvg(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {

    for (var x = 0; x < byteWidth; x++) {

      var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
      var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
      var val = pxData[pxPos + x] - ((left + up) >> 1);

      rawData[rawPos + x] = val;
    }
  }

  function filterSumAvg(pxData, pxPos, byteWidth, bpp) {

    var sum = 0;
    for (var x = 0; x < byteWidth; x++) {

      var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
      var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
      var val = pxData[pxPos + x] - ((left + up) >> 1);

      sum += Math.abs(val);
    }

    return sum;
  }

  function filterPaeth(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {

    for (var x = 0; x < byteWidth; x++) {

      var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
      var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
      var upleft = pxPos > 0 && x >= bpp ? pxData[pxPos + x - (byteWidth + bpp)] : 0;
      var val = pxData[pxPos + x] - paethPredictor(left, up, upleft);

      rawData[rawPos + x] = val;
    }
  }

  function filterSumPaeth(pxData, pxPos, byteWidth, bpp) {
    var sum = 0;
    for (var x = 0; x < byteWidth; x++) {

      var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
      var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
      var upleft = pxPos > 0 && x >= bpp ? pxData[pxPos + x - (byteWidth + bpp)] : 0;
      var val = pxData[pxPos + x] - paethPredictor(left, up, upleft);

      sum += Math.abs(val);
    }

    return sum;
  }

  var filters$1 = {
    0: filterNone,
    1: filterSub,
    2: filterUp,
    3: filterAvg,
    4: filterPaeth
  };

  var filterSums = {
    0: filterSumNone,
    1: filterSumSub,
    2: filterSumUp,
    3: filterSumAvg,
    4: filterSumPaeth
  };

  var filterPack = function(pxData, width, height, options, bpp) {

    var filterTypes;
    if (!('filterType' in options) || options.filterType === -1) {
      filterTypes = [0, 1, 2, 3, 4];
    }
    else if (typeof options.filterType === 'number') {
      filterTypes = [options.filterType];
    }
    else {
      throw new Error('unrecognised filter types');
    }

    if (options.bitDepth === 16) {
      bpp *= 2;
    }
    var byteWidth = width * bpp;
    var rawPos = 0;
    var pxPos = 0;
    var rawData = new Buffer((byteWidth + 1) * height);

    var sel = filterTypes[0];

    for (var y = 0; y < height; y++) {

      if (filterTypes.length > 1) {
        // find best filter for this line (with lowest sum of values)
        var min = Infinity;

        for (var i = 0; i < filterTypes.length; i++) {
          var sum = filterSums[filterTypes[i]](pxData, pxPos, byteWidth, bpp);
          if (sum < min) {
            sel = filterTypes[i];
            min = sum;
          }
        }
      }

      rawData[rawPos] = sel;
      rawPos++;
      filters$1[sel](pxData, pxPos, byteWidth, rawData, rawPos, bpp);
      rawPos += byteWidth;
      pxPos += byteWidth;
    }
    return rawData;
  };

  var constants$3 = constants$6;
  var CrcStream = crc.exports;
  var bitPacker = bitpacker;
  var filter = filterPack;
  var zlib$2 = require$$0__default["default"];

  var Packer$3 = packer.exports = function(options) {
    this._options = options;

    options.deflateChunkSize = options.deflateChunkSize || 32 * 1024;
    options.deflateLevel = options.deflateLevel != null ? options.deflateLevel : 9;
    options.deflateStrategy = options.deflateStrategy != null ? options.deflateStrategy : 3;
    options.inputHasAlpha = options.inputHasAlpha != null ? options.inputHasAlpha : true;
    options.deflateFactory = options.deflateFactory || zlib$2.createDeflate;
    options.bitDepth = options.bitDepth || 8;
    // This is outputColorType
    options.colorType = (typeof options.colorType === 'number') ? options.colorType : constants$3.COLORTYPE_COLOR_ALPHA;
    options.inputColorType = (typeof options.inputColorType === 'number') ? options.inputColorType : constants$3.COLORTYPE_COLOR_ALPHA;

    if ([
      constants$3.COLORTYPE_GRAYSCALE,
      constants$3.COLORTYPE_COLOR,
      constants$3.COLORTYPE_COLOR_ALPHA,
      constants$3.COLORTYPE_ALPHA
    ].indexOf(options.colorType) === -1) {
      throw new Error('option color type:' + options.colorType + ' is not supported at present');
    }
    if ([
      constants$3.COLORTYPE_GRAYSCALE,
      constants$3.COLORTYPE_COLOR,
      constants$3.COLORTYPE_COLOR_ALPHA,
      constants$3.COLORTYPE_ALPHA
    ].indexOf(options.inputColorType) === -1) {
      throw new Error('option input color type:' + options.inputColorType + ' is not supported at present');
    }
    if (options.bitDepth !== 8 && options.bitDepth !== 16) {
      throw new Error('option bit depth:' + options.bitDepth + ' is not supported at present');
    }
  };

  Packer$3.prototype.getDeflateOptions = function() {
    return {
      chunkSize: this._options.deflateChunkSize,
      level: this._options.deflateLevel,
      strategy: this._options.deflateStrategy
    };
  };

  Packer$3.prototype.createDeflate = function() {
    return this._options.deflateFactory(this.getDeflateOptions());
  };

  Packer$3.prototype.filterData = function(data, width, height) {
    // convert to correct format for filtering (e.g. right bpp and bit depth)
    var packedData = bitPacker(data, width, height, this._options);

    // filter pixel data
    var bpp = constants$3.COLORTYPE_TO_BPP_MAP[this._options.colorType];
    var filteredData = filter(packedData, width, height, this._options, bpp);
    return filteredData;
  };

  Packer$3.prototype._packChunk = function(type, data) {

    var len = (data ? data.length : 0);
    var buf = new Buffer(len + 12);

    buf.writeUInt32BE(len, 0);
    buf.writeUInt32BE(type, 4);

    if (data) {
      data.copy(buf, 8);
    }

    buf.writeInt32BE(CrcStream.crc32(buf.slice(4, buf.length - 4)), buf.length - 4);
    return buf;
  };

  Packer$3.prototype.packGAMA = function(gamma) {
    var buf = new Buffer(4);
    buf.writeUInt32BE(Math.floor(gamma * constants$3.GAMMA_DIVISION), 0);
    return this._packChunk(constants$3.TYPE_gAMA, buf);
  };

  Packer$3.prototype.packIHDR = function(width, height) {

    var buf = new Buffer(13);
    buf.writeUInt32BE(width, 0);
    buf.writeUInt32BE(height, 4);
    buf[8] = this._options.bitDepth; // Bit depth
    buf[9] = this._options.colorType; // colorType
    buf[10] = 0; // compression
    buf[11] = 0; // filter
    buf[12] = 0; // interlace

    return this._packChunk(constants$3.TYPE_IHDR, buf);
  };

  Packer$3.prototype.packIDAT = function(data) {
    return this._packChunk(constants$3.TYPE_IDAT, data);
  };

  Packer$3.prototype.packIEND = function() {
    return this._packChunk(constants$3.TYPE_IEND, null);
  };

  var util$3 = require$$0__default$4["default"];
  var Stream$3 = require$$0__default$1["default"];
  var constants$2 = constants$6;
  var Packer$2 = packer.exports;

  var PackerAsync = packerAsync.exports = function(opt) {
    Stream$3.call(this);

    var options = opt || {};

    this._packer = new Packer$2(options);
    this._deflate = this._packer.createDeflate();

    this.readable = true;
  };
  util$3.inherits(PackerAsync, Stream$3);


  PackerAsync.prototype.pack = function(data, width, height, gamma) {
    // Signature
    this.emit('data', new Buffer(constants$2.PNG_SIGNATURE));
    this.emit('data', this._packer.packIHDR(width, height));

    if (gamma) {
      this.emit('data', this._packer.packGAMA(gamma));
    }

    var filteredData = this._packer.filterData(data, width, height);

    // compress it
    this._deflate.on('error', this.emit.bind(this, 'error'));

    this._deflate.on('data', function(compressedData) {
      this.emit('data', this._packer.packIDAT(compressedData));
    }.bind(this));

    this._deflate.on('end', function() {
      this.emit('data', this._packer.packIEND());
      this.emit('end');
    }.bind(this));

    this._deflate.end(filteredData);
  };

  var pngSync = {};

  var syncInflate = {exports: {}};

  (function (module, exports) {

  var assert = require$$0__default$5["default"].ok;
  var zlib = require$$0__default["default"];
  var util = require$$0__default$4["default"];

  var kMaxLength = require$$2__default$1["default"].kMaxLength;

  function Inflate(opts) {
    if (!(this instanceof Inflate)) {
      return new Inflate(opts);
    }

    if (opts && opts.chunkSize < zlib.Z_MIN_CHUNK) {
      opts.chunkSize = zlib.Z_MIN_CHUNK;
    }

    zlib.Inflate.call(this, opts);

    // Node 8 --> 9 compatibility check
    this._offset = this._offset === undefined ? this._outOffset : this._offset;
    this._buffer = this._buffer || this._outBuffer;

    if (opts && opts.maxLength != null) {
      this._maxLength = opts.maxLength;
    }
  }

  function createInflate(opts) {
    return new Inflate(opts);
  }

  function _close(engine, callback) {
    if (callback) {
      process.nextTick(callback);
    }

    // Caller may invoke .close after a zlib error (which will null _handle).
    if (!engine._handle) {
      return;
    }

    engine._handle.close();
    engine._handle = null;
  }

  Inflate.prototype._processChunk = function(chunk, flushFlag, asyncCb) {
    if (typeof asyncCb === 'function') {
      return zlib.Inflate._processChunk.call(this, chunk, flushFlag, asyncCb);
    }

    var self = this;

    var availInBefore = chunk && chunk.length;
    var availOutBefore = this._chunkSize - this._offset;
    var leftToInflate = this._maxLength;
    var inOff = 0;

    var buffers = [];
    var nread = 0;

    var error;
    this.on('error', function(err) {
      error = err;
    });

    function handleChunk(availInAfter, availOutAfter) {
      if (self._hadError) {
        return;
      }

      var have = availOutBefore - availOutAfter;
      assert(have >= 0, 'have should not go down');

      if (have > 0) {
        var out = self._buffer.slice(self._offset, self._offset + have);
        self._offset += have;

        if (out.length > leftToInflate) {
          out = out.slice(0, leftToInflate);
        }

        buffers.push(out);
        nread += out.length;
        leftToInflate -= out.length;

        if (leftToInflate === 0) {
          return false;
        }
      }

      if (availOutAfter === 0 || self._offset >= self._chunkSize) {
        availOutBefore = self._chunkSize;
        self._offset = 0;
        self._buffer = Buffer.allocUnsafe(self._chunkSize);
      }

      if (availOutAfter === 0) {
        inOff += (availInBefore - availInAfter);
        availInBefore = availInAfter;

        return true;
      }

      return false;
    }

    assert(this._handle, 'zlib binding closed');
    do {
      var res = this._handle.writeSync(flushFlag,
        chunk, // in
        inOff, // in_off
        availInBefore, // in_len
        this._buffer, // out
        this._offset, //out_off
        availOutBefore); // out_len
      // Node 8 --> 9 compatibility check
      res = res || this._writeState;
    } while (!this._hadError && handleChunk(res[0], res[1]));

    if (this._hadError) {
      throw error;
    }

    if (nread >= kMaxLength) {
      _close(this);
      throw new RangeError('Cannot create final Buffer. It would be larger than 0x' + kMaxLength.toString(16) + ' bytes');
    }

    var buf = Buffer.concat(buffers, nread);
    _close(this);

    return buf;
  };

  util.inherits(Inflate, zlib.Inflate);

  function zlibBufferSync(engine, buffer) {
    if (typeof buffer === 'string') {
      buffer = Buffer.from(buffer);
    }
    if (!(buffer instanceof Buffer)) {
      throw new TypeError('Not a string or buffer');
    }

    var flushFlag = engine._finishFlushFlag;
    if (flushFlag == null) {
      flushFlag = zlib.Z_FINISH;
    }

    return engine._processChunk(buffer, flushFlag);
  }

  function inflateSync(buffer, opts) {
    return zlibBufferSync(new Inflate(opts), buffer);
  }

  module.exports = exports = inflateSync;
  exports.Inflate = Inflate;
  exports.createInflate = createInflate;
  exports.inflateSync = inflateSync;
  }(syncInflate, syncInflate.exports));

  var syncReader = {exports: {}};

  var SyncReader$2 = syncReader.exports = function(buffer) {

    this._buffer = buffer;
    this._reads = [];
  };

  SyncReader$2.prototype.read = function(length, callback) {

    this._reads.push({
      length: Math.abs(length), // if length < 0 then at most this length
      allowLess: length < 0,
      func: callback
    });
  };

  SyncReader$2.prototype.process = function() {

    // as long as there is any data and read requests
    while (this._reads.length > 0 && this._buffer.length) {

      var read = this._reads[0];

      if (this._buffer.length && (this._buffer.length >= read.length || read.allowLess)) {

        // ok there is any data so that we can satisfy this request
        this._reads.shift(); // == read

        var buf = this._buffer;

        this._buffer = buf.slice(read.length);

        read.func.call(this, buf.slice(0, read.length));

      }
      else {
        break;
      }

    }

    if (this._reads.length > 0) {
      return new Error('There are some read requests waitng on finished stream');
    }

    if (this._buffer.length > 0) {
      return new Error('unrecognised content at end of stream');
    }

  };

  var filterParseSync = {};

  var SyncReader$1 = syncReader.exports;
  var Filter = filterParse.exports;


  filterParseSync.process = function(inBuffer, bitmapInfo) {

    var outBuffers = [];
    var reader = new SyncReader$1(inBuffer);
    var filter = new Filter(bitmapInfo, {
      read: reader.read.bind(reader),
      write: function(bufferPart) {
        outBuffers.push(bufferPart);
      },
      complete: function() {
      }
    });

    filter.start();
    reader.process();

    return Buffer.concat(outBuffers);
  };

  var hasSyncZlib$1 = true;
  var zlib$1 = require$$0__default["default"];
  var inflateSync = syncInflate.exports;
  if (!zlib$1.deflateSync) {
    hasSyncZlib$1 = false;
  }
  var SyncReader = syncReader.exports;
  var FilterSync = filterParseSync;
  var Parser$1 = parser.exports;
  var bitmapper = bitmapper$2;
  var formatNormaliser = formatNormaliser$2;


  var parserSync = function(buffer, options) {

    if (!hasSyncZlib$1) {
      throw new Error('To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0');
    }

    var err;
    function handleError(_err_) {
      err = _err_;
    }

    var metaData;
    function handleMetaData(_metaData_) {
      metaData = _metaData_;
    }

    function handleTransColor(transColor) {
      metaData.transColor = transColor;
    }

    function handlePalette(palette) {
      metaData.palette = palette;
    }

    function handleSimpleTransparency() {
      metaData.alpha = true;
    }

    var gamma;
    function handleGamma(_gamma_) {
      gamma = _gamma_;
    }

    var inflateDataList = [];
    function handleInflateData(inflatedData) {
      inflateDataList.push(inflatedData);
    }

    var reader = new SyncReader(buffer);

    var parser = new Parser$1(options, {
      read: reader.read.bind(reader),
      error: handleError,
      metadata: handleMetaData,
      gamma: handleGamma,
      palette: handlePalette,
      transColor: handleTransColor,
      inflateData: handleInflateData,
      simpleTransparency: handleSimpleTransparency
    });

    parser.start();
    reader.process();

    if (err) {
      throw err;
    }

    //join together the inflate datas
    var inflateData = Buffer.concat(inflateDataList);
    inflateDataList.length = 0;

    var inflatedData;
    if (metaData.interlace) {
      inflatedData = zlib$1.inflateSync(inflateData);
    }
    else {
      var rowSize = ((metaData.width * metaData.bpp * metaData.depth + 7) >> 3) + 1;
      var imageSize = rowSize * metaData.height;
      inflatedData = inflateSync(inflateData, { chunkSize: imageSize, maxLength: imageSize });
    }
    inflateData = null;

    if (!inflatedData || !inflatedData.length) {
      throw new Error('bad png - invalid inflate data response');
    }

    var unfilteredData = FilterSync.process(inflatedData, metaData);
    inflateData = null;

    var bitmapData = bitmapper.dataToBitMap(unfilteredData, metaData);
    unfilteredData = null;

    var normalisedBitmapData = formatNormaliser(bitmapData, metaData);

    metaData.data = normalisedBitmapData;
    metaData.gamma = gamma || 0;

    return metaData;
  };

  var hasSyncZlib = true;
  var zlib = require$$0__default["default"];
  if (!zlib.deflateSync) {
    hasSyncZlib = false;
  }
  var constants$1 = constants$6;
  var Packer$1 = packer.exports;

  var packerSync = function(metaData, opt) {

    if (!hasSyncZlib) {
      throw new Error('To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0');
    }

    var options = opt || {};

    var packer = new Packer$1(options);

    var chunks = [];

    // Signature
    chunks.push(new Buffer(constants$1.PNG_SIGNATURE));

    // Header
    chunks.push(packer.packIHDR(metaData.width, metaData.height));

    if (metaData.gamma) {
      chunks.push(packer.packGAMA(metaData.gamma));
    }

    var filteredData = packer.filterData(metaData.data, metaData.width, metaData.height);

    // compress it
    var compressedData = zlib.deflateSync(filteredData, packer.getDeflateOptions());
    filteredData = null;

    if (!compressedData || !compressedData.length) {
      throw new Error('bad png - invalid compressed data response');
    }
    chunks.push(packer.packIDAT(compressedData));

    // End
    chunks.push(packer.packIEND());

    return Buffer.concat(chunks);
  };

  var parse$1 = parserSync;
  var pack = packerSync;


  pngSync.read = function(buffer, options) {

    return parse$1(buffer, options || {});
  };

  pngSync.write = function(png, options) {

    return pack(png, options);
  };

  var util$2 = require$$0__default$4["default"];
  var Stream$2 = require$$0__default$1["default"];
  var Parser = parserAsync.exports;
  var Packer = packerAsync.exports;
  var PNGSync = pngSync;


  var PNG = png.PNG = function(options) {
    Stream$2.call(this);

    options = options || {}; // eslint-disable-line no-param-reassign

    // coerce pixel dimensions to integers (also coerces undefined -> 0):
    this.width = options.width | 0;
    this.height = options.height | 0;

    this.data = this.width > 0 && this.height > 0 ?
      new Buffer(4 * this.width * this.height) : null;

    if (options.fill && this.data) {
      this.data.fill(0);
    }

    this.gamma = 0;
    this.readable = this.writable = true;

    this._parser = new Parser(options);

    this._parser.on('error', this.emit.bind(this, 'error'));
    this._parser.on('close', this._handleClose.bind(this));
    this._parser.on('metadata', this._metadata.bind(this));
    this._parser.on('gamma', this._gamma.bind(this));
    this._parser.on('parsed', function(data) {
      this.data = data;
      this.emit('parsed', data);
    }.bind(this));

    this._packer = new Packer(options);
    this._packer.on('data', this.emit.bind(this, 'data'));
    this._packer.on('end', this.emit.bind(this, 'end'));
    this._parser.on('close', this._handleClose.bind(this));
    this._packer.on('error', this.emit.bind(this, 'error'));

  };
  util$2.inherits(PNG, Stream$2);

  PNG.sync = PNGSync;

  PNG.prototype.pack = function() {

    if (!this.data || !this.data.length) {
      this.emit('error', 'No data provided');
      return this;
    }

    process.nextTick(function() {
      this._packer.pack(this.data, this.width, this.height, this.gamma);
    }.bind(this));

    return this;
  };


  PNG.prototype.parse = function(data, callback) {

    if (callback) {
      var onParsed, onError;

      onParsed = function(parsedData) {
        this.removeListener('error', onError);

        this.data = parsedData;
        callback(null, this);
      }.bind(this);

      onError = function(err) {
        this.removeListener('parsed', onParsed);

        callback(err, null);
      }.bind(this);

      this.once('parsed', onParsed);
      this.once('error', onError);
    }

    this.end(data);
    return this;
  };

  PNG.prototype.write = function(data) {
    this._parser.write(data);
    return true;
  };

  PNG.prototype.end = function(data) {
    this._parser.end(data);
  };

  PNG.prototype._metadata = function(metadata) {
    this.width = metadata.width;
    this.height = metadata.height;

    this.emit('metadata', metadata);
  };

  PNG.prototype._gamma = function(gamma) {
    this.gamma = gamma;
  };

  PNG.prototype._handleClose = function() {
    if (!this._parser.writable && !this._packer.readable) {
      this.emit('close');
    }
  };


  PNG.bitblt = function(src, dst, srcX, srcY, width, height, deltaX, deltaY) { // eslint-disable-line max-params
    // coerce pixel dimensions to integers (also coerces undefined -> 0):
    /* eslint-disable no-param-reassign */
    srcX |= 0;
    srcY |= 0;
    width |= 0;
    height |= 0;
    deltaX |= 0;
    deltaY |= 0;
    /* eslint-enable no-param-reassign */

    if (srcX > src.width || srcY > src.height || srcX + width > src.width || srcY + height > src.height) {
      throw new Error('bitblt reading outside image');
    }

    if (deltaX > dst.width || deltaY > dst.height || deltaX + width > dst.width || deltaY + height > dst.height) {
      throw new Error('bitblt writing outside image');
    }

    for (var y = 0; y < height; y++) {
      src.data.copy(dst.data,
        ((deltaY + y) * dst.width + deltaX) << 2,
        ((srcY + y) * src.width + srcX) << 2,
        ((srcY + y) * src.width + srcX + width) << 2
      );
    }
  };


  PNG.prototype.bitblt = function(dst, srcX, srcY, width, height, deltaX, deltaY) { // eslint-disable-line max-params

    PNG.bitblt(this, dst, srcX, srcY, width, height, deltaX, deltaY);
    return this;
  };

  PNG.adjustGamma = function(src) {
    if (src.gamma) {
      for (var y = 0; y < src.height; y++) {
        for (var x = 0; x < src.width; x++) {
          var idx = (src.width * y + x) << 2;

          for (var i = 0; i < 3; i++) {
            var sample = src.data[idx + i] / 255;
            sample = Math.pow(sample, 1 / 2.2 / src.gamma);
            src.data[idx + i] = Math.round(sample * 255);
          }
        }
      }
      src.gamma = 0;
    }
  };

  PNG.prototype.adjustGamma = function() {
    PNG.adjustGamma(this);
  };

  var utils$p = {};

  (function (exports) {
  function hex2rgba (hex) {
    if (typeof hex === 'number') {
      hex = hex.toString();
    }

    if (typeof hex !== 'string') {
      throw new Error('Color should be defined as hex string')
    }

    var hexCode = hex.slice().replace('#', '').split('');
    if (hexCode.length < 3 || hexCode.length === 5 || hexCode.length > 8) {
      throw new Error('Invalid hex color: ' + hex)
    }

    // Convert from short to long form (fff -> ffffff)
    if (hexCode.length === 3 || hexCode.length === 4) {
      hexCode = Array.prototype.concat.apply([], hexCode.map(function (c) {
        return [c, c]
      }));
    }

    // Add default alpha value
    if (hexCode.length === 6) hexCode.push('F', 'F');

    var hexValue = parseInt(hexCode.join(''), 16);

    return {
      r: (hexValue >> 24) & 255,
      g: (hexValue >> 16) & 255,
      b: (hexValue >> 8) & 255,
      a: hexValue & 255,
      hex: '#' + hexCode.slice(0, 6).join('')
    }
  }

  exports.getOptions = function getOptions (options) {
    if (!options) options = {};
    if (!options.color) options.color = {};

    var margin = typeof options.margin === 'undefined' ||
      options.margin === null ||
      options.margin < 0 ? 4 : options.margin;

    var width = options.width && options.width >= 21 ? options.width : undefined;
    var scale = options.scale || 4;

    return {
      width: width,
      scale: width ? 4 : scale,
      margin: margin,
      color: {
        dark: hex2rgba(options.color.dark || '#000000ff'),
        light: hex2rgba(options.color.light || '#ffffffff')
      },
      type: options.type,
      rendererOpts: options.rendererOpts || {}
    }
  };

  exports.getScale = function getScale (qrSize, opts) {
    return opts.width && opts.width >= qrSize + opts.margin * 2
      ? opts.width / (qrSize + opts.margin * 2)
      : opts.scale
  };

  exports.getImageWidth = function getImageWidth (qrSize, opts) {
    var scale = exports.getScale(qrSize, opts);
    return Math.floor((qrSize + opts.margin * 2) * scale)
  };

  exports.qrToImageData = function qrToImageData (imgData, qr, opts) {
    var size = qr.modules.size;
    var data = qr.modules.data;
    var scale = exports.getScale(size, opts);
    var symbolSize = Math.floor((size + opts.margin * 2) * scale);
    var scaledMargin = opts.margin * scale;
    var palette = [opts.color.light, opts.color.dark];

    for (var i = 0; i < symbolSize; i++) {
      for (var j = 0; j < symbolSize; j++) {
        var posDst = (i * symbolSize + j) * 4;
        var pxColor = opts.color.light;

        if (i >= scaledMargin && j >= scaledMargin &&
          i < symbolSize - scaledMargin && j < symbolSize - scaledMargin) {
          var iSrc = Math.floor((i - scaledMargin) / scale);
          var jSrc = Math.floor((j - scaledMargin) / scale);
          pxColor = palette[data[iSrc * size + jSrc] ? 1 : 0];
        }

        imgData[posDst++] = pxColor.r;
        imgData[posDst++] = pxColor.g;
        imgData[posDst++] = pxColor.b;
        imgData[posDst] = pxColor.a;
      }
    }
  };
  }(utils$p));

  (function (exports) {
  var fs = require$$1__default$1["default"];
  var PNG = png.PNG;
  var Utils = utils$p;

  exports.render = function render (qrData, options) {
    var opts = Utils.getOptions(options);
    var pngOpts = opts.rendererOpts;
    var size = Utils.getImageWidth(qrData.modules.size, opts);

    pngOpts.width = size;
    pngOpts.height = size;

    var pngImage = new PNG(pngOpts);
    Utils.qrToImageData(pngImage.data, qrData, opts);

    return pngImage
  };

  exports.renderToDataURL = function renderToDataURL (qrData, options, cb) {
    if (typeof cb === 'undefined') {
      cb = options;
      options = undefined;
    }

    exports.renderToBuffer(qrData, options, function (err, output) {
      if (err) cb(err);
      var url = 'data:image/png;base64,';
      url += output.toString('base64');
      cb(null, url);
    });
  };

  exports.renderToBuffer = function renderToBuffer (qrData, options, cb) {
    if (typeof cb === 'undefined') {
      cb = options;
      options = undefined;
    }

    var png = exports.render(qrData, options);
    var buffer = [];

    png.on('error', cb);

    png.on('data', function (data) {
      buffer.push(data);
    });

    png.on('end', function () {
      cb(null, Buffer.concat(buffer));
    });

    png.pack();
  };

  exports.renderToFile = function renderToFile (path, qrData, options, cb) {
    if (typeof cb === 'undefined') {
      cb = options;
      options = undefined;
    }

    var stream = fs.createWriteStream(path);
    stream.on('error', cb);
    stream.on('close', cb);

    exports.renderToFileStream(stream, qrData, options);
  };

  exports.renderToFileStream = function renderToFileStream (stream, qrData, options) {
    var png = exports.render(qrData, options);
    png.pack().pipe(stream);
  };
  }(png$1));

  var utf8 = {};

  (function (exports) {
  var Utils = utils$p;

  var BLOCK_CHAR = {
    WW: ' ',
    WB: '▄',
    BB: '█',
    BW: '▀'
  };

  var INVERTED_BLOCK_CHAR = {
    BB: ' ',
    BW: '▄',
    WW: '█',
    WB: '▀'
  };

  function getBlockChar (top, bottom, blocks) {
    if (top && bottom) return blocks.BB
    if (top && !bottom) return blocks.BW
    if (!top && bottom) return blocks.WB
    return blocks.WW
  }

  exports.render = function (qrData, options, cb) {
    var opts = Utils.getOptions(options);
    var blocks = BLOCK_CHAR;
    if (opts.color.dark.hex === '#ffffff' || opts.color.light.hex === '#000000') {
      blocks = INVERTED_BLOCK_CHAR;
    }

    var size = qrData.modules.size;
    var data = qrData.modules.data;

    var output = '';
    var hMargin = Array(size + (opts.margin * 2) + 1).join(blocks.WW);
    hMargin = Array((opts.margin / 2) + 1).join(hMargin + '\n');

    var vMargin = Array(opts.margin + 1).join(blocks.WW);

    output += hMargin;
    for (var i = 0; i < size; i += 2) {
      output += vMargin;
      for (var j = 0; j < size; j++) {
        var topModule = data[i * size + j];
        var bottomModule = data[(i + 1) * size + j];

        output += getBlockChar(topModule, bottomModule, blocks);
      }

      output += vMargin + '\n';
    }

    output += hMargin.slice(0, -1);

    if (typeof cb === 'function') {
      cb(null, output);
    }

    return output
  };

  exports.renderToFile = function renderToFile (path, qrData, options, cb) {
    if (typeof cb === 'undefined') {
      cb = options;
      options = undefined;
    }

    var fs = require$$1__default$1["default"];
    var utf8 = exports.render(qrData, options);
    fs.writeFile(path, utf8, cb);
  };
  }(utf8));

  var terminal = {};

  // var Utils = require('./utils')

  terminal.render = function (qrData, options, cb) {
    var size = qrData.modules.size;
    var data = qrData.modules.data;

    // var opts = Utils.getOptions(options)

    // use same scheme as https://github.com/gtanner/qrcode-terminal because it actually works! =)
    var black = '\x1b[40m  \x1b[0m';
    var white = '\x1b[47m  \x1b[0m';

    var output = '';
    var hMargin = Array(size + 3).join(white);
    var vMargin = Array(2).join(white);

    output += hMargin + '\n';
    for (var i = 0; i < size; ++i) {
      output += white;
      for (var j = 0; j < size; j++) {
        // var topModule = data[i * size + j]
        // var bottomModule = data[(i + 1) * size + j]

        output += data[i * size + j] ? black : white;// getBlockChar(topModule, bottomModule)
      }
      // output += white+'\n'
      output += vMargin + '\n';
    }

    output += hMargin + '\n';

    if (typeof cb === 'function') {
      cb(null, output);
    }

    return output
  };

  var svg = {};

  var svgTag = {};

  var Utils = utils$p;

  function getColorAttrib (color, attrib) {
    var alpha = color.a / 255;
    var str = attrib + '="' + color.hex + '"';

    return alpha < 1
      ? str + ' ' + attrib + '-opacity="' + alpha.toFixed(2).slice(1) + '"'
      : str
  }

  function svgCmd (cmd, x, y) {
    var str = cmd + x;
    if (typeof y !== 'undefined') str += ' ' + y;

    return str
  }

  function qrToPath (data, size, margin) {
    var path = '';
    var moveBy = 0;
    var newRow = false;
    var lineLength = 0;

    for (var i = 0; i < data.length; i++) {
      var col = Math.floor(i % size);
      var row = Math.floor(i / size);

      if (!col && !newRow) newRow = true;

      if (data[i]) {
        lineLength++;

        if (!(i > 0 && col > 0 && data[i - 1])) {
          path += newRow
            ? svgCmd('M', col + margin, 0.5 + row + margin)
            : svgCmd('m', moveBy, 0);

          moveBy = 0;
          newRow = false;
        }

        if (!(col + 1 < size && data[i + 1])) {
          path += svgCmd('h', lineLength);
          lineLength = 0;
        }
      } else {
        moveBy++;
      }
    }

    return path
  }

  svgTag.render = function render (qrData, options, cb) {
    var opts = Utils.getOptions(options);
    var size = qrData.modules.size;
    var data = qrData.modules.data;
    var qrcodesize = size + opts.margin * 2;

    var bg = !opts.color.light.a
      ? ''
      : '<path ' + getColorAttrib(opts.color.light, 'fill') +
        ' d="M0 0h' + qrcodesize + 'v' + qrcodesize + 'H0z"/>';

    var path =
      '<path ' + getColorAttrib(opts.color.dark, 'stroke') +
      ' d="' + qrToPath(data, size, opts.margin) + '"/>';

    var viewBox = 'viewBox="' + '0 0 ' + qrcodesize + ' ' + qrcodesize + '"';

    var width = !opts.width ? '' : 'width="' + opts.width + '" height="' + opts.width + '" ';

    var svgTag = '<svg xmlns="http://www.w3.org/2000/svg" ' + width + viewBox + ' shape-rendering="crispEdges">' + bg + path + '</svg>\n';

    if (typeof cb === 'function') {
      cb(null, svgTag);
    }

    return svgTag
  };

  (function (exports) {
  var svgTagRenderer = svgTag;

  exports.render = svgTagRenderer.render;

  exports.renderToFile = function renderToFile (path, qrData, options, cb) {
    if (typeof cb === 'undefined') {
      cb = options;
      options = undefined;
    }

    var fs = require$$1__default$1["default"];
    var svgTag = exports.render(qrData, options);

    var xmlStr = '<?xml version="1.0" encoding="utf-8"?>' +
      '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">' +
      svgTag;

    fs.writeFile(path, xmlStr, cb);
  };
  }(svg));

  var browser = {};

  var canvas = {};

  (function (exports) {
  var Utils = utils$p;

  function clearCanvas (ctx, canvas, size) {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    if (!canvas.style) canvas.style = {};
    canvas.height = size;
    canvas.width = size;
    canvas.style.height = size + 'px';
    canvas.style.width = size + 'px';
  }

  function getCanvasElement () {
    try {
      return document.createElement('canvas')
    } catch (e) {
      throw new Error('You need to specify a canvas element')
    }
  }

  exports.render = function render (qrData, canvas, options) {
    var opts = options;
    var canvasEl = canvas;

    if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {
      opts = canvas;
      canvas = undefined;
    }

    if (!canvas) {
      canvasEl = getCanvasElement();
    }

    opts = Utils.getOptions(opts);
    var size = Utils.getImageWidth(qrData.modules.size, opts);

    var ctx = canvasEl.getContext('2d');
    var image = ctx.createImageData(size, size);
    Utils.qrToImageData(image.data, qrData, opts);

    clearCanvas(ctx, canvasEl, size);
    ctx.putImageData(image, 0, 0);

    return canvasEl
  };

  exports.renderToDataURL = function renderToDataURL (qrData, canvas, options) {
    var opts = options;

    if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {
      opts = canvas;
      canvas = undefined;
    }

    if (!opts) opts = {};

    var canvasEl = exports.render(qrData, canvas, opts);

    var type = opts.type || 'image/png';
    var rendererOpts = opts.rendererOpts || {};

    return canvasEl.toDataURL(type, rendererOpts.quality)
  };
  }(canvas));

  var canPromise$1 = canPromise$2;

  var QRCode$2 = qrcode;
  var CanvasRenderer = canvas;
  var SvgRenderer$1 = svgTag;

  function renderCanvas (renderFunc, canvas, text, opts, cb) {
    var args = [].slice.call(arguments, 1);
    var argsNum = args.length;
    var isLastArgCb = typeof args[argsNum - 1] === 'function';

    if (!isLastArgCb && !canPromise$1()) {
      throw new Error('Callback required as last argument')
    }

    if (isLastArgCb) {
      if (argsNum < 2) {
        throw new Error('Too few arguments provided')
      }

      if (argsNum === 2) {
        cb = text;
        text = canvas;
        canvas = opts = undefined;
      } else if (argsNum === 3) {
        if (canvas.getContext && typeof cb === 'undefined') {
          cb = opts;
          opts = undefined;
        } else {
          cb = opts;
          opts = text;
          text = canvas;
          canvas = undefined;
        }
      }
    } else {
      if (argsNum < 1) {
        throw new Error('Too few arguments provided')
      }

      if (argsNum === 1) {
        text = canvas;
        canvas = opts = undefined;
      } else if (argsNum === 2 && !canvas.getContext) {
        opts = text;
        text = canvas;
        canvas = undefined;
      }

      return new Promise(function (resolve, reject) {
        try {
          var data = QRCode$2.create(text, opts);
          resolve(renderFunc(data, canvas, opts));
        } catch (e) {
          reject(e);
        }
      })
    }

    try {
      var data = QRCode$2.create(text, opts);
      cb(null, renderFunc(data, canvas, opts));
    } catch (e) {
      cb(e);
    }
  }

  browser.create = QRCode$2.create;
  browser.toCanvas = renderCanvas.bind(null, CanvasRenderer.render);
  browser.toDataURL = renderCanvas.bind(null, CanvasRenderer.renderToDataURL);

  // only svg for now.
  browser.toString = renderCanvas.bind(null, function (data, _, opts) {
    return SvgRenderer$1.render(data, opts)
  });

  var canPromise = canPromise$2;
  var QRCode$1 = qrcode;
  var PngRenderer = png$1;
  var Utf8Renderer = utf8;
  var TerminalRenderer = terminal;
  var SvgRenderer = svg;

  function checkParams (text, opts, cb) {
    if (typeof text === 'undefined') {
      throw new Error('String required as first argument')
    }

    if (typeof cb === 'undefined') {
      cb = opts;
      opts = {};
    }

    if (typeof cb !== 'function') {
      if (!canPromise()) {
        throw new Error('Callback required as last argument')
      } else {
        opts = cb || {};
        cb = null;
      }
    }

    return {
      opts: opts,
      cb: cb
    }
  }

  function getTypeFromFilename (path) {
    return path.slice((path.lastIndexOf('.') - 1 >>> 0) + 2).toLowerCase()
  }

  function getRendererFromType (type) {
    switch (type) {
      case 'svg':
        return SvgRenderer

      case 'txt':
      case 'utf8':
        return Utf8Renderer

      case 'png':
      case 'image/png':
      default:
        return PngRenderer
    }
  }

  function getStringRendererFromType (type) {
    switch (type) {
      case 'svg':
        return SvgRenderer

      case 'terminal':
        return TerminalRenderer

      case 'utf8':
      default:
        return Utf8Renderer
    }
  }

  function render (renderFunc, text, params) {
    if (!params.cb) {
      return new Promise(function (resolve, reject) {
        try {
          var data = QRCode$1.create(text, params.opts);
          return renderFunc(data, params.opts, function (err, data) {
            return err ? reject(err) : resolve(data)
          })
        } catch (e) {
          reject(e);
        }
      })
    }

    try {
      var data = QRCode$1.create(text, params.opts);
      return renderFunc(data, params.opts, params.cb)
    } catch (e) {
      params.cb(e);
    }
  }

  server.create = QRCode$1.create;

  server.toCanvas = browser.toCanvas;

  server.toString = function toString (text, opts, cb) {
    var params = checkParams(text, opts, cb);
    var renderer = getStringRendererFromType(params.opts.type);
    return render(renderer.render, text, params)
  };

  server.toDataURL = function toDataURL (text, opts, cb) {
    var params = checkParams(text, opts, cb);
    var renderer = getRendererFromType(params.opts.type);
    return render(renderer.renderToDataURL, text, params)
  };

  server.toBuffer = function toBuffer (text, opts, cb) {
    var params = checkParams(text, opts, cb);
    var renderer = getRendererFromType(params.opts.type);
    return render(renderer.renderToBuffer, text, params)
  };

  server.toFile = function toFile (path, text, opts, cb) {
    if (typeof path !== 'string' || !(typeof text === 'string' || typeof text === 'object')) {
      throw new Error('Invalid argument')
    }

    if ((arguments.length < 3) && !canPromise()) {
      throw new Error('Too few arguments provided')
    }

    var params = checkParams(text, opts, cb);
    var type = params.opts.type || getTypeFromFilename(path);
    var renderer = getRendererFromType(type);
    var renderToFile = renderer.renderToFile.bind(null, path);

    return render(renderToFile, text, params)
  };

  server.toFileStream = function toFileStream (stream, text, opts) {
    if (arguments.length < 2) {
      throw new Error('Too few arguments provided')
    }

    var params = checkParams(text, opts, stream.emit.bind(stream, 'error'));
    var renderer = getRendererFromType('png'); // Only png support for now
    var renderToFileStream = renderer.renderToFileStream.bind(null, stream);
    render(renderToFileStream, text, params);
  };

  /*
  *copyright Ryan Day 2012
  *
  * Licensed under the MIT license:
  *   http://www.opensource.org/licenses/mit-license.php
  *
  * this is the main server side application file for node-qrcode.
  * these exports use serverside canvas api methods for file IO and buffers
  *
  */

  var lib$4 = server;

  var toggleSelection = function () {
    var selection = document.getSelection();
    if (!selection.rangeCount) {
      return function () {};
    }
    var active = document.activeElement;

    var ranges = [];
    for (var i = 0; i < selection.rangeCount; i++) {
      ranges.push(selection.getRangeAt(i));
    }

    switch (active.tagName.toUpperCase()) { // .toUpperCase handles XHTML
      case 'INPUT':
      case 'TEXTAREA':
        active.blur();
        break;

      default:
        active = null;
        break;
    }

    selection.removeAllRanges();
    return function () {
      selection.type === 'Caret' &&
      selection.removeAllRanges();

      if (!selection.rangeCount) {
        ranges.forEach(function(range) {
          selection.addRange(range);
        });
      }

      active &&
      active.focus();
    };
  };

  var deselectCurrent = toggleSelection;

  var clipboardToIE11Formatting = {
    "text/plain": "Text",
    "text/html": "Url",
    "default": "Text"
  };

  var defaultMessage = "Copy to clipboard: #{key}, Enter";

  function format(message) {
    var copyKey = (/mac os x/i.test(navigator.userAgent) ? "⌘" : "Ctrl") + "+C";
    return message.replace(/#{\s*key\s*}/g, copyKey);
  }

  function copy$1(text, options) {
    var debug,
      message,
      reselectPrevious,
      range,
      selection,
      mark,
      success = false;
    if (!options) {
      options = {};
    }
    debug = options.debug || false;
    try {
      reselectPrevious = deselectCurrent();

      range = document.createRange();
      selection = document.getSelection();

      mark = document.createElement("span");
      mark.textContent = text;
      // reset user styles for span element
      mark.style.all = "unset";
      // prevents scrolling to the end of the page
      mark.style.position = "fixed";
      mark.style.top = 0;
      mark.style.clip = "rect(0, 0, 0, 0)";
      // used to preserve spaces and line breaks
      mark.style.whiteSpace = "pre";
      // do not inherit user-select (it may be `none`)
      mark.style.webkitUserSelect = "text";
      mark.style.MozUserSelect = "text";
      mark.style.msUserSelect = "text";
      mark.style.userSelect = "text";
      mark.addEventListener("copy", function(e) {
        e.stopPropagation();
        if (options.format) {
          e.preventDefault();
          if (typeof e.clipboardData === "undefined") { // IE 11
            debug && console.warn("unable to use e.clipboardData");
            debug && console.warn("trying IE specific stuff");
            window.clipboardData.clearData();
            var format = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting["default"];
            window.clipboardData.setData(format, text);
          } else { // all other browsers
            e.clipboardData.clearData();
            e.clipboardData.setData(options.format, text);
          }
        }
        if (options.onCopy) {
          e.preventDefault();
          options.onCopy(e.clipboardData);
        }
      });

      document.body.appendChild(mark);

      range.selectNodeContents(mark);
      selection.addRange(range);

      var successful = document.execCommand("copy");
      if (!successful) {
        throw new Error("copy command was unsuccessful");
      }
      success = true;
    } catch (err) {
      debug && console.error("unable to copy using execCommand: ", err);
      debug && console.warn("trying IE specific stuff");
      try {
        window.clipboardData.setData(options.format || "text", text);
        options.onCopy && options.onCopy(window.clipboardData);
        success = true;
      } catch (err) {
        debug && console.error("unable to copy using clipboardData: ", err);
        debug && console.error("falling back to prompt");
        message = format("message" in options ? options.message : defaultMessage);
        window.prompt(message, text);
      }
    } finally {
      if (selection) {
        if (typeof selection.removeRange == "function") {
          selection.removeRange(range);
        } else {
          selection.removeAllRanges();
        }
      }

      if (mark) {
        document.body.removeChild(mark);
      }
      reselectPrevious();
    }

    return success;
  }

  var copyToClipboard = copy$1;

  var compat = {};

  var hooks = {};

  var preact = {};

  var n$1,l$1,u$1,t$1,i$1,r$3,o$1,f$2,e$1={},c$1=[],s$2=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord/i;function a$1(n,l){for(var u in l)n[u]=l[u];return n}function p$1(n){var l=n.parentNode;l&&l.removeChild(n);}function v$2(n,l,u){var t,i=arguments,r={};for(t in l)"key"!==t&&"ref"!==t&&(r[t]=l[t]);if(arguments.length>3)for(u=[u],t=3;t<arguments.length;t++)u.push(i[t]);if(null!=u&&(r.children=u),"function"==typeof n&&null!=n.defaultProps)for(t in n.defaultProps)void 0===r[t]&&(r[t]=n.defaultProps[t]);return h$1(n,r,l&&l.key,l&&l.ref,null)}function h$1(l,u,t,i,r){var o={type:l,props:u,key:t,ref:i,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,constructor:void 0,__v:r};return null==r&&(o.__v=o),n$1.vnode&&n$1.vnode(o),o}function y$1(n){return n.children}function d$1(n,l){this.props=n,this.context=l;}function x$1(n,l){if(null==l)return n.__?x$1(n.__,n.__.__k.indexOf(n)+1):null;for(var u;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e)return u.__e;return "function"==typeof n.type?x$1(n):null}function m$1(n){var l,u;if(null!=(n=n.__)&&null!=n.__c){for(n.__e=n.__c.base=null,l=0;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e){n.__e=n.__c.base=u.__e;break}return m$1(n)}}function w(l){(!l.__d&&(l.__d=!0)&&u$1.push(l)&&!t$1++||r$3!==n$1.debounceRendering)&&((r$3=n$1.debounceRendering)||i$1)(k);}function k(){for(var n;t$1=u$1.length;)n=u$1.sort(function(n,l){return n.__v.__b-l.__v.__b}),u$1=[],n.some(function(n){var l,u,t,i,r,o,f;n.__d&&(o=(r=(l=n).__v).__e,(f=l.__P)&&(u=[],(t=a$1({},r)).__v=t,i=z(f,r,t,l.__n,void 0!==f.ownerSVGElement,null,u,null==o?x$1(r):o),A(u,r),i!=o&&m$1(r)));});}function g(n,l,u,t,i,r,o,f,s){var a,v,h,y,d,m,w,k=u&&u.__k||c$1,g=k.length;if(f==e$1&&(f=null!=r?r[0]:g?x$1(u,0):null),a=0,l.__k=_(l.__k,function(u){if(null!=u){if(u.__=l,u.__b=l.__b+1,null===(h=k[a])||h&&u.key==h.key&&u.type===h.type)k[a]=void 0;else for(v=0;v<g;v++){if((h=k[v])&&u.key==h.key&&u.type===h.type){k[v]=void 0;break}h=null;}if(y=z(n,u,h=h||e$1,t,i,r,o,f,s),(v=u.ref)&&h.ref!=v&&(w||(w=[]),h.ref&&w.push(h.ref,null,u),w.push(v,u.__c||y,u)),null!=y){var c;if(null==m&&(m=y),void 0!==u.__d)c=u.__d,u.__d=void 0;else if(r==h||y!=f||null==y.parentNode){n:if(null==f||f.parentNode!==n)n.appendChild(y),c=null;else {for(d=f,v=0;(d=d.nextSibling)&&v<g;v+=2)if(d==y)break n;n.insertBefore(y,f),c=f;}"option"==l.type&&(n.value="");}f=void 0!==c?c:y.nextSibling,"function"==typeof l.type&&(l.__d=f);}else f&&h.__e==f&&f.parentNode!=n&&(f=x$1(h));}return a++,u}),l.__e=m,null!=r&&"function"!=typeof l.type)for(a=r.length;a--;)null!=r[a]&&p$1(r[a]);for(a=g;a--;)null!=k[a]&&j(k[a],k[a]);if(w)for(a=0;a<w.length;a++)$(w[a],w[++a],w[++a]);}function _(n,l,u){if(null==u&&(u=[]),null==n||"boolean"==typeof n)l&&u.push(l(null));else if(Array.isArray(n))for(var t=0;t<n.length;t++)_(n[t],l,u);else u.push(l?l("string"==typeof n||"number"==typeof n?h$1(null,n,null,null,n):null!=n.__e||null!=n.__c?h$1(n.type,n.props,n.key,null,n.__v):n):n);return u}function b(n,l,u,t,i){var r;for(r in u)"children"===r||"key"===r||r in l||C(n,r,null,u[r],t);for(r in l)i&&"function"!=typeof l[r]||"children"===r||"key"===r||"value"===r||"checked"===r||u[r]===l[r]||C(n,r,l[r],u[r],t);}function P(n,l,u){"-"===l[0]?n.setProperty(l,u):n[l]="number"==typeof u&&!1===s$2.test(l)?u+"px":null==u?"":u;}function C(n,l,u,t,i){var r,o,f,e,c;if(i?"className"===l&&(l="class"):"class"===l&&(l="className"),"style"===l)if(r=n.style,"string"==typeof u)r.cssText=u;else {if("string"==typeof t&&(r.cssText="",t=null),t)for(e in t)u&&e in u||P(r,e,"");if(u)for(c in u)t&&u[c]===t[c]||P(r,c,u[c]);}else "o"===l[0]&&"n"===l[1]?(o=l!==(l=l.replace(/Capture$/,"")),f=l.toLowerCase(),l=(f in n?f:l).slice(2),u?(t||n.addEventListener(l,N,o),(n.l||(n.l={}))[l]=u):n.removeEventListener(l,N,o)):"list"!==l&&"tagName"!==l&&"form"!==l&&"type"!==l&&"size"!==l&&!i&&l in n?n[l]=null==u?"":u:"function"!=typeof u&&"dangerouslySetInnerHTML"!==l&&(l!==(l=l.replace(/^xlink:?/,""))?null==u||!1===u?n.removeAttributeNS("http://www.w3.org/1999/xlink",l.toLowerCase()):n.setAttributeNS("http://www.w3.org/1999/xlink",l.toLowerCase(),u):null==u||!1===u&&!/^ar/.test(l)?n.removeAttribute(l):n.setAttribute(l,u));}function N(l){this.l[l.type](n$1.event?n$1.event(l):l);}function z(l,u,t,i,r,o,f,e,c){var s,p,v,h,x,m,w,k,_,b,P=u.type;if(void 0!==u.constructor)return null;(s=n$1.__b)&&s(u);try{n:if("function"==typeof P){if(k=u.props,_=(s=P.contextType)&&i[s.__c],b=s?_?_.props.value:s.__:i,t.__c?w=(p=u.__c=t.__c).__=p.__E:("prototype"in P&&P.prototype.render?u.__c=p=new P(k,b):(u.__c=p=new d$1(k,b),p.constructor=P,p.render=D),_&&_.sub(p),p.props=k,p.state||(p.state={}),p.context=b,p.__n=i,v=p.__d=!0,p.__h=[]),null==p.__s&&(p.__s=p.state),null!=P.getDerivedStateFromProps&&(p.__s==p.state&&(p.__s=a$1({},p.__s)),a$1(p.__s,P.getDerivedStateFromProps(k,p.__s))),h=p.props,x=p.state,v)null==P.getDerivedStateFromProps&&null!=p.componentWillMount&&p.componentWillMount(),null!=p.componentDidMount&&p.__h.push(p.componentDidMount);else {if(null==P.getDerivedStateFromProps&&k!==h&&null!=p.componentWillReceiveProps&&p.componentWillReceiveProps(k,b),!p.__e&&null!=p.shouldComponentUpdate&&!1===p.shouldComponentUpdate(k,p.__s,b)||u.__v===t.__v&&!p.__){for(p.props=k,p.state=p.__s,u.__v!==t.__v&&(p.__d=!1),p.__v=u,u.__e=t.__e,u.__k=t.__k,p.__h.length&&f.push(p),s=0;s<u.__k.length;s++)u.__k[s]&&(u.__k[s].__=u);break n}null!=p.componentWillUpdate&&p.componentWillUpdate(k,p.__s,b),null!=p.componentDidUpdate&&p.__h.push(function(){p.componentDidUpdate(h,x,m);});}p.context=b,p.props=k,p.state=p.__s,(s=n$1.__r)&&s(u),p.__d=!1,p.__v=u,p.__P=l,s=p.render(p.props,p.state,p.context),u.__k=null!=s&&s.type==y$1&&null==s.key?s.props.children:Array.isArray(s)?s:[s],null!=p.getChildContext&&(i=a$1(a$1({},i),p.getChildContext())),v||null==p.getSnapshotBeforeUpdate||(m=p.getSnapshotBeforeUpdate(h,x)),g(l,u,t,i,r,o,f,e,c),p.base=u.__e,p.__h.length&&f.push(p),w&&(p.__E=p.__=null),p.__e=!1;}else null==o&&u.__v===t.__v?(u.__k=t.__k,u.__e=t.__e):u.__e=T$1(t.__e,u,t,i,r,o,f,c);(s=n$1.diffed)&&s(u);}catch(l){u.__v=null,n$1.__e(l,u,t);}return u.__e}function A(l,u){n$1.__c&&n$1.__c(u,l),l.some(function(u){try{l=u.__h,u.__h=[],l.some(function(n){n.call(u);});}catch(l){n$1.__e(l,u.__v);}});}function T$1(n,l,u,t,i,r,o,f){var s,a,p,v,h,y=u.props,d=l.props;if(i="svg"===l.type||i,null!=r)for(s=0;s<r.length;s++)if(null!=(a=r[s])&&((null===l.type?3===a.nodeType:a.localName===l.type)||n==a)){n=a,r[s]=null;break}if(null==n){if(null===l.type)return document.createTextNode(d);n=i?document.createElementNS("http://www.w3.org/2000/svg",l.type):document.createElement(l.type,d.is&&{is:d.is}),r=null,f=!1;}if(null===l.type)y!==d&&n.data!=d&&(n.data=d);else {if(null!=r&&(r=c$1.slice.call(n.childNodes)),p=(y=u.props||e$1).dangerouslySetInnerHTML,v=d.dangerouslySetInnerHTML,!f){if(y===e$1)for(y={},h=0;h<n.attributes.length;h++)y[n.attributes[h].name]=n.attributes[h].value;(v||p)&&(v&&p&&v.__html==p.__html||(n.innerHTML=v&&v.__html||""));}b(n,d,y,i,f),v?l.__k=[]:(l.__k=l.props.children,g(n,l,u,t,"foreignObject"!==l.type&&i,r,o,e$1,f)),f||("value"in d&&void 0!==(s=d.value)&&s!==n.value&&C(n,"value",s,y.value,!1),"checked"in d&&void 0!==(s=d.checked)&&s!==n.checked&&C(n,"checked",s,y.checked,!1));}return n}function $(l,u,t){try{"function"==typeof l?l(u):l.current=u;}catch(l){n$1.__e(l,t);}}function j(l,u,t){var i,r,o;if(n$1.unmount&&n$1.unmount(l),(i=l.ref)&&(i.current&&i.current!==l.__e||$(i,null,u)),t||"function"==typeof l.type||(t=null!=(r=l.__e)),l.__e=l.__d=void 0,null!=(i=l.__c)){if(i.componentWillUnmount)try{i.componentWillUnmount();}catch(l){n$1.__e(l,u);}i.base=i.__P=null;}if(i=l.__k)for(o=0;o<i.length;o++)i[o]&&j(i[o],u,t);null!=r&&p$1(r);}function D(n,l,u){return this.constructor(n,u)}function E(l,u,t){var i,r,f;n$1.__&&n$1.__(l,u),r=(i=t===o$1)?null:t&&t.__k||u.__k,l=v$2(y$1,null,[l]),f=[],z(u,(i?u:t||u).__k=l,r||e$1,e$1,void 0!==u.ownerSVGElement,t&&!i?[t]:r?null:c$1.slice.call(u.childNodes),f,t||e$1,i),A(f,l);}n$1={__e:function(n,l){for(var u,t;l=l.__;)if((u=l.__c)&&!u.__)try{if(u.constructor&&null!=u.constructor.getDerivedStateFromError&&(t=!0,u.setState(u.constructor.getDerivedStateFromError(n))),null!=u.componentDidCatch&&(t=!0,u.componentDidCatch(n)),t)return w(u.__E=u)}catch(l){n=l;}throw n}},l$1=function(n){return null!=n&&void 0===n.constructor},d$1.prototype.setState=function(n,l){var u;u=this.__s!==this.state?this.__s:this.__s=a$1({},this.state),"function"==typeof n&&(n=n(u,this.props)),n&&a$1(u,n),null!=n&&this.__v&&(l&&this.__h.push(l),w(this));},d$1.prototype.forceUpdate=function(n){this.__v&&(this.__e=!0,n&&this.__h.push(n),w(this));},d$1.prototype.render=y$1,u$1=[],t$1=0,i$1="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,o$1=e$1,f$2=0,preact.render=E,preact.hydrate=function(n,l){E(n,l,o$1);},preact.createElement=v$2,preact.h=v$2,preact.Fragment=y$1,preact.createRef=function(){return {}},preact.isValidElement=l$1,preact.Component=d$1,preact.cloneElement=function(n,l){var u,t;for(t in l=a$1(a$1({},n.props),l),arguments.length>2&&(l.children=c$1.slice.call(arguments,2)),u={},l)"key"!==t&&"ref"!==t&&(u[t]=l[t]);return h$1(n.type,u,l.key||n.key,l.ref||n.ref,null)},preact.createContext=function(n){var l={},u={__c:"__cC"+f$2++,__:n,Consumer:function(n,l){return n.children(l)},Provider:function(n){var t,i=this;return this.getChildContext||(t=[],this.getChildContext=function(){return l[u.__c]=i,l},this.shouldComponentUpdate=function(n){i.props.value!==n.value&&t.some(function(l){l.context=n.value,w(l);});},this.sub=function(n){t.push(n);var l=n.componentWillUnmount;n.componentWillUnmount=function(){t.splice(t.indexOf(n),1),l&&l.call(n);};}),n.children}};return u.Consumer.contextType=u,u.Provider.__=u,u},preact.toChildArray=_,preact._e=j,preact.options=n$1;

  var n,t,r$2,u=preact,o=0,i=[],c=u.options.__r,e=u.options.diffed,f$1=u.options.__c,a=u.options.unmount;function p(n,r){u.options.__h&&u.options.__h(t,n,o||r),o=0;var i=t.__H||(t.__H={__:[],__h:[]});return n>=i.__.length&&i.__.push({}),i.__[n]}function v$1(n){return o=1,s$1(T,n)}function s$1(r,u,o){var i=p(n++,2);return i.__c||(i.__c=t,i.__=[o?o(u):T(void 0,u),function(n){var t=r(i.__[0],n);i.__[0]!==t&&(i.__[0]=t,i.__c.setState({}));}]),i.__}function x(r,o){var i=p(n++,4);!u.options.__s&&h(i.__H,o)&&(i.__=r,i.__H=o,t.__h.push(i));}function l(t,r){var u=p(n++,7);return h(u.__H,r)?(u.__H=r,u.__h=t,u.__=t()):u.__}function m(){i.some(function(n){if(n.__P)try{n.__H.__h.forEach(y),n.__H.__h.forEach(d),n.__H.__h=[];}catch(t){return n.__H.__h=[],u.options.__e(t,n.__v),!0}}),i=[];}function y(n){n.t&&n.t();}function d(n){var t=n.__();"function"==typeof t&&(n.t=t);}function h(n,t){return !n||t.some(function(t,r){return t!==n[r]})}function T(n,t){return "function"==typeof t?t(n):t}u.options.__r=function(r){c&&c(r),n=0,(t=r.__c).__H&&(t.__H.__h.forEach(y),t.__H.__h.forEach(d),t.__H.__h=[]);},u.options.diffed=function(n){e&&e(n);var t=n.__c;if(t){var o=t.__H;o&&o.__h.length&&(1!==i.push(t)&&r$2===u.options.requestAnimationFrame||((r$2=u.options.requestAnimationFrame)||function(n){var t,r=function(){clearTimeout(u),cancelAnimationFrame(t),setTimeout(n);},u=setTimeout(r,100);"undefined"!=typeof window&&(t=requestAnimationFrame(r));})(m));}},u.options.__c=function(n,t){t.some(function(n){try{n.__h.forEach(y),n.__h=n.__h.filter(function(n){return !n.__||d(n)});}catch(r){t.some(function(n){n.__h&&(n.__h=[]);}),t=[],u.options.__e(r,n.__v);}}),f$1&&f$1(n,t);},u.options.unmount=function(n){a&&a(n);var t=n.__c;if(t){var r=t.__H;if(r)try{r.__.forEach(function(n){return n.t&&n.t()});}catch(n){u.options.__e(n,t.__v);}}},hooks.useState=v$1,hooks.useReducer=s$1,hooks.useEffect=function(r,o){var i=p(n++,3);!u.options.__s&&h(i.__H,o)&&(i.__=r,i.__H=o,t.__H.__h.push(i));},hooks.useLayoutEffect=x,hooks.useRef=function(n){return o=5,l(function(){return {current:n}},[])},hooks.useImperativeHandle=function(n,t,r){o=6,x(function(){"function"==typeof n?n(t()):n&&(n.current=t());},null==r?r:r.concat(n));},hooks.useMemo=l,hooks.useCallback=function(n,t){return o=8,l(function(){return n},t)},hooks.useContext=function(r){var u=t.context[r.__c],o=p(n++,9);return o.__c=r,u?(null==o.__&&(o.__=!0,u.sub(t)),u.props.value):r.__},hooks.useDebugValue=function(n,t){u.options.useDebugValue&&u.options.useDebugValue(t?t(n):n);},hooks.useErrorBoundary=function(r){var u=p(n++,10),o=v$1();return u.__=r,t.componentDidCatch||(t.componentDidCatch=function(n){u.__&&u.__(n),o[1](n);}),[o[0],function(){o[1](void 0);}]};

  (function (exports) {
  var n=hooks,t=preact;function e(n,t){for(var e in t)n[e]=t[e];return n}function r(n,t){for(var e in n)if("__source"!==e&&!(e in t))return !0;for(var r in t)if("__source"!==r&&n[r]!==t[r])return !0;return !1}var o=function(n){var t,e;function o(t){var e;return (e=n.call(this,t)||this).isPureReactComponent=!0,e}return e=n,(t=o).prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e,o.prototype.shouldComponentUpdate=function(n,t){return r(this.props,n)||r(this.state,t)},o}(t.Component);function u(n,o){function u(n){var t=this.props.ref,e=t==n.ref;return !e&&t&&(t.call?t(null):t.current=null),o?!o(this.props,n)||!e:r(this.props,n)}function i(r){return this.shouldComponentUpdate=u,t.createElement(n,e({},r))}return i.prototype.isReactComponent=!0,i.displayName="Memo("+(n.displayName||n.name)+")",i.t=!0,i}var i=t.options.__b;function f(n){function t(t){var r=e({},t);return delete r.ref,n(r,t.ref)}return t.prototype.isReactComponent=t.t=!0,t.displayName="ForwardRef("+(n.displayName||n.name)+")",t}t.options.__b=function(n){n.type&&n.type.t&&n.ref&&(n.props.ref=n.ref,n.ref=null),i&&i(n);};var c=function(n,e){return n?t.toChildArray(n).reduce(function(n,t,r){return n.concat(e(t,r))},[]):null},l={map:c,forEach:c,count:function(n){return n?t.toChildArray(n).length:0},only:function(n){if(1!==(n=t.toChildArray(n)).length)throw new Error("Children.only() expects only one child.");return n[0]},toArray:t.toChildArray},a=t.options.__e;function s(n){return n&&((n=e({},n)).__c=null,n.__k=n.__k&&n.__k.map(s)),n}function p(){this.__u=0,this.o=null,this.__b=null;}function v(n){var t=n.__.__c;return t&&t.u&&t.u(n)}function h(n){var e,r,o;function u(u){if(e||(e=n()).then(function(n){r=n.default||n;},function(n){o=n;}),o)throw o;if(!r)throw e;return t.createElement(r,u)}return u.displayName="Lazy",u.t=!0,u}function d(){this.i=null,this.l=null;}t.options.__e=function(n,t,e){if(n.then)for(var r,o=t;o=o.__;)if((r=o.__c)&&r.__c)return r.__c(n,t.__c);a(n,t,e);},(p.prototype=new t.Component).__c=function(n,t){var e=this;null==e.o&&(e.o=[]),e.o.push(t);var r=v(e.__v),o=!1,u=function(){o||(o=!0,r?r(i):i());};t.__c=t.componentWillUnmount,t.componentWillUnmount=function(){u(),t.__c&&t.__c();};var i=function(){var n;if(!--e.__u)for(e.__v.__k[0]=e.state.u,e.setState({u:e.__b=null});n=e.o.pop();)n.forceUpdate();};e.__u++||e.setState({u:e.__b=e.__v.__k[0]}),n.then(u,u);},p.prototype.render=function(n,e){return this.__b&&(this.__v.__k[0]=s(this.__b),this.__b=null),[t.createElement(t.Component,null,e.u?null:n.children),e.u&&n.fallback]};var x=function(n,t,e){if(++e[1]===e[0]&&n.l.delete(t),n.props.revealOrder&&("t"!==n.props.revealOrder[0]||!n.l.size))for(e=n.i;e;){for(;e.length>3;)e.pop()();if(e[1]<e[0])break;n.i=e=e[2];}};(d.prototype=new t.Component).u=function(n){var t=this,e=v(t.__v),r=t.l.get(n);return r[0]++,function(o){var u=function(){t.props.revealOrder?(r.push(o),x(t,n,r)):o();};e?e(u):u();}},d.prototype.render=function(n){this.i=null,this.l=new Map;var e=t.toChildArray(n.children);n.revealOrder&&"b"===n.revealOrder[0]&&e.reverse();for(var r=e.length;r--;)this.l.set(e[r],this.i=[1,0,this.i]);return n.children},d.prototype.componentDidUpdate=d.prototype.componentDidMount=function(){var n=this;n.l.forEach(function(t,e){x(n,e,t);});};var m=function(){function n(){}var t=n.prototype;return t.getChildContext=function(){return this.props.context},t.render=function(n){return n.children},n}();function y(n){var e=this,r=n.container,o=t.createElement(m,{context:e.context},n.vnode);return e.s&&e.s!==r&&(e.p.parentNode&&e.s.removeChild(e.p),t._e(e.v),e.h=!1),n.vnode?e.h?(r.__k=e.__k,t.render(o,r),e.__k=r.__k):(e.p=document.createTextNode(""),t.hydrate("",r),r.appendChild(e.p),e.h=!0,e.s=r,t.render(o,r,e.p),e.__k=e.p.__k):e.h&&(e.p.parentNode&&e.s.removeChild(e.p),t._e(e.v)),e.v=o,e.componentWillUnmount=function(){e.p.parentNode&&e.s.removeChild(e.p),t._e(e.v);},null}function b(n,e){return t.createElement(y,{vnode:n,container:e})}var g=/^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|fill|flood|font|glyph(?!R)|horiz|marker(?!H|W|U)|overline|paint|stop|strikethrough|stroke|text(?!L)|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/;t.Component.prototype.isReactComponent={};var w="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103;function E(n,e,r){if(null==e.__k)for(;e.firstChild;)e.removeChild(e.firstChild);return t.render(n,e),"function"==typeof r&&r(),n?n.__c:null}var _=t.options.event;function A(n,t){n["UNSAFE_"+t]&&!n[t]&&Object.defineProperty(n,t,{configurable:!1,get:function(){return this["UNSAFE_"+t]},set:function(n){this["UNSAFE_"+t]=n;}});}t.options.event=function(n){_&&(n=_(n)),n.persist=function(){};var t=!1,e=!1,r=n.stopPropagation;n.stopPropagation=function(){r.call(n),t=!0;};var o=n.preventDefault;return n.preventDefault=function(){o.call(n),e=!0;},n.isPropagationStopped=function(){return t},n.isDefaultPrevented=function(){return e},n.nativeEvent=n};var C={configurable:!0,get:function(){return this.class}},S=t.options.vnode;function k(n){return t.createElement.bind(null,n)}function N(n){return !!n&&n.$$typeof===w}function R(n){return N(n)?t.cloneElement.apply(null,arguments):n}function U(n){return !!n.__k&&(t.render(null,n),!0)}function F(n){return n&&(n.base||1===n.nodeType&&n)||null}t.options.vnode=function(n){n.$$typeof=w;var e=n.type,r=n.props;if(e){if(r.class!=r.className&&(C.enumerable="className"in r,null!=r.className&&(r.class=r.className),Object.defineProperty(r,"className",C)),"function"!=typeof e){var o,u,i;for(i in r.defaultValue&&void 0!==r.value&&(r.value||0===r.value||(r.value=r.defaultValue),delete r.defaultValue),Array.isArray(r.value)&&r.multiple&&"select"===e&&(t.toChildArray(r.children).forEach(function(n){-1!=r.value.indexOf(n.props.value)&&(n.props.selected=!0);}),delete r.value),r)if(o=g.test(i))break;if(o)for(i in u=n.props={},r)u[g.test(i)?i.replace(/[A-Z0-9]/,"-$&").toLowerCase():i]=r[i];}!function(t){var e=n.type,r=n.props;if(r&&"string"==typeof e){var o={};for(var u in r)/^on(Ani|Tra|Tou)/.test(u)&&(r[u.toLowerCase()]=r[u],delete r[u]),o[u.toLowerCase()]=u;if(o.ondoubleclick&&(r.ondblclick=r[o.ondoubleclick],delete r[o.ondoubleclick]),o.onbeforeinput&&(r.onbeforeinput=r[o.onbeforeinput],delete r[o.onbeforeinput]),o.onchange&&("textarea"===e||"input"===e.toLowerCase()&&!/^fil|che|ra/i.test(r.type))){var i=o.oninput||"oninput";r[i]||(r[i]=r[o.onchange],delete r[o.onchange]);}}}(),"function"==typeof e&&!e.m&&e.prototype&&(A(e.prototype,"componentWillMount"),A(e.prototype,"componentWillReceiveProps"),A(e.prototype,"componentWillUpdate"),e.m=!0);}S&&S(n);};var M=function(n,t){return n(t)},O={useState:n.useState,useReducer:n.useReducer,useEffect:n.useEffect,useLayoutEffect:n.useLayoutEffect,useRef:n.useRef,useImperativeHandle:n.useImperativeHandle,useMemo:n.useMemo,useCallback:n.useCallback,useContext:n.useContext,useDebugValue:n.useDebugValue,version:"16.8.0",Children:l,render:E,hydrate:E,unmountComponentAtNode:U,createPortal:b,createElement:t.createElement,createContext:t.createContext,createFactory:k,cloneElement:R,createRef:t.createRef,Fragment:t.Fragment,isValidElement:N,findDOMNode:F,Component:t.Component,PureComponent:o,memo:u,forwardRef:f,unstable_batchedUpdates:M,Suspense:p,SuspenseList:d,lazy:h};Object.keys(n).forEach(function(t){exports[t]=n[t];}),exports.createElement=t.createElement,exports.createContext=t.createContext,exports.createRef=t.createRef,exports.Fragment=t.Fragment,exports.Component=t.Component,exports.version="16.8.0",exports.Children=l,exports.render=E,exports.hydrate=function(n,e,r){return t.hydrate(n,e),"function"==typeof r&&r(),n?n.__c:null},exports.unmountComponentAtNode=U,exports.createPortal=b,exports.createFactory=k,exports.cloneElement=R,exports.isValidElement=N,exports.findDOMNode=F,exports.PureComponent=o,exports.memo=u,exports.forwardRef=f,exports.unstable_batchedUpdates=M,exports.Suspense=p,exports.SuspenseList=d,exports.lazy=h,exports.default=O;

  }(compat));

  function _interopDefault$1 (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

  var browserUtils = cjs$8;
  var QRCode = _interopDefault$1(lib$4);
  var copy = _interopDefault$1(copyToClipboard);
  var React = compat;

  function open(uri) {
    QRCode.toString(uri, {
      type: "terminal"
    }).then(console.log);
  }

  var WALLETCONNECT_STYLE_SHEET = ":root {\n  --animation-duration: 300ms;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes fadeOut {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n\n.animated {\n  animation-duration: var(--animation-duration);\n  animation-fill-mode: both;\n}\n\n.fadeIn {\n  animation-name: fadeIn;\n}\n\n.fadeOut {\n  animation-name: fadeOut;\n}\n\n#walletconnect-wrapper {\n  -webkit-user-select: none;\n  align-items: center;\n  display: flex;\n  height: 100%;\n  justify-content: center;\n  left: 0;\n  pointer-events: none;\n  position: fixed;\n  top: 0;\n  user-select: none;\n  width: 100%;\n  z-index: 99999999999999;\n}\n\n.walletconnect-modal__headerLogo {\n  height: 21px;\n}\n\n.walletconnect-modal__header p {\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n  margin: 0;\n  align-items: flex-start;\n  display: flex;\n  flex: 1;\n  margin-left: 5px;\n}\n\n.walletconnect-modal__close__wrapper {\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  z-index: 10000;\n  background: white;\n  border-radius: 26px;\n  padding: 6px;\n  box-sizing: border-box;\n  width: 26px;\n  height: 26px;\n  cursor: pointer;\n}\n\n.walletconnect-modal__close__icon {\n  position: relative;\n  top: 7px;\n  right: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transform: rotate(45deg);\n}\n\n.walletconnect-modal__close__line1 {\n  position: absolute;\n  width: 100%;\n  border: 1px solid rgb(48, 52, 59);\n}\n\n.walletconnect-modal__close__line2 {\n  position: absolute;\n  width: 100%;\n  border: 1px solid rgb(48, 52, 59);\n  transform: rotate(90deg);\n}\n\n.walletconnect-qrcode__base {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  background: rgba(37, 41, 46, 0.95);\n  height: 100%;\n  left: 0;\n  pointer-events: auto;\n  position: fixed;\n  top: 0;\n  transition: 0.4s cubic-bezier(0.19, 1, 0.22, 1);\n  width: 100%;\n  will-change: opacity;\n  padding: 40px;\n  box-sizing: border-box;\n}\n\n.walletconnect-qrcode__text {\n  color: rgba(60, 66, 82, 0.6);\n  font-size: 16px;\n  font-weight: 600;\n  letter-spacing: 0;\n  line-height: 1.1875em;\n  margin: 10px 0 20px 0;\n  text-align: center;\n  width: 100%;\n}\n\n@media only screen and (max-width: 768px) {\n  .walletconnect-qrcode__text {\n    font-size: 4vw;\n  }\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-qrcode__text {\n    font-size: 14px;\n  }\n}\n\n.walletconnect-qrcode__image {\n  width: calc(100% - 30px);\n  box-sizing: border-box;\n  cursor: none;\n  margin: 0 auto;\n}\n\n.walletconnect-qrcode__notification {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  font-size: 16px;\n  padding: 16px 20px;\n  border-radius: 16px;\n  text-align: center;\n  transition: all 0.1s ease-in-out;\n  background: white;\n  color: black;\n  margin-bottom: -60px;\n  opacity: 0;\n}\n\n.walletconnect-qrcode__notification.notification__show {\n  opacity: 1;\n}\n\n@media only screen and (max-width: 768px) {\n  .walletconnect-modal__header {\n    height: 130px;\n  }\n  .walletconnect-modal__base {\n    overflow: auto;\n  }\n}\n\n@media only screen and (min-device-width: 415px) and (max-width: 768px) {\n  #content {\n    max-width: 768px;\n    box-sizing: border-box;\n  }\n}\n\n@media only screen and (min-width: 375px) and (max-width: 415px) {\n  #content {\n    max-width: 414px;\n    box-sizing: border-box;\n  }\n}\n\n@media only screen and (min-width: 320px) and (max-width: 375px) {\n  #content {\n    max-width: 375px;\n    box-sizing: border-box;\n  }\n}\n\n@media only screen and (max-width: 320px) {\n  #content {\n    max-width: 320px;\n    box-sizing: border-box;\n  }\n}\n\n.walletconnect-modal__base {\n  -webkit-font-smoothing: antialiased;\n  background: #ffffff;\n  border-radius: 24px;\n  box-shadow: 0 10px 50px 5px rgba(0, 0, 0, 0.4);\n  font-family: ui-rounded, \"SF Pro Rounded\", \"SF Pro Text\", medium-content-sans-serif-font,\n    -apple-system, BlinkMacSystemFont, ui-sans-serif, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell,\n    \"Open Sans\", \"Helvetica Neue\", sans-serif;\n  margin-top: 41px;\n  padding: 24px 24px 22px;\n  pointer-events: auto;\n  position: relative;\n  text-align: center;\n  transition: 0.4s cubic-bezier(0.19, 1, 0.22, 1);\n  will-change: transform;\n  overflow: visible;\n  transform: translateY(-50%);\n  top: 50%;\n  max-width: 500px;\n  margin: auto;\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-modal__base {\n    padding: 24px 12px;\n  }\n}\n\n.walletconnect-modal__base .hidden {\n  transform: translateY(150%);\n  transition: 0.125s cubic-bezier(0.4, 0, 1, 1);\n}\n\n.walletconnect-modal__header {\n  align-items: center;\n  display: flex;\n  height: 26px;\n  left: 0;\n  justify-content: space-between;\n  position: absolute;\n  top: -42px;\n  width: 100%;\n}\n\n.walletconnect-modal__base .wc-logo {\n  align-items: center;\n  display: flex;\n  height: 26px;\n  margin-top: 15px;\n  padding-bottom: 15px;\n  pointer-events: auto;\n}\n\n.walletconnect-modal__base .wc-logo div {\n  background-color: #3399ff;\n  height: 21px;\n  margin-right: 5px;\n  mask-image: url(\"images/wc-logo.svg\") center no-repeat;\n  width: 32px;\n}\n\n.walletconnect-modal__base .wc-logo p {\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n  margin: 0;\n}\n\n.walletconnect-modal__base h2 {\n  color: rgba(60, 66, 82, 0.6);\n  font-size: 16px;\n  font-weight: 600;\n  letter-spacing: 0;\n  line-height: 1.1875em;\n  margin: 0 0 19px 0;\n  text-align: center;\n  width: 100%;\n}\n\n.walletconnect-modal__base__row {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  align-items: center;\n  border-radius: 20px;\n  cursor: pointer;\n  display: flex;\n  height: 56px;\n  justify-content: space-between;\n  padding: 0 15px;\n  position: relative;\n  margin: 0px 0px 8px;\n  text-align: left;\n  transition: 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  will-change: transform;\n  text-decoration: none;\n}\n\n.walletconnect-modal__base__row:hover {\n  background: rgba(60, 66, 82, 0.06);\n}\n\n.walletconnect-modal__base__row:active {\n  background: rgba(60, 66, 82, 0.06);\n  transform: scale(0.975);\n  transition: 0.1s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n\n.walletconnect-modal__base__row__h3 {\n  color: #25292e;\n  font-size: 20px;\n  font-weight: 700;\n  margin: 0;\n  padding-bottom: 3px;\n}\n\n.walletconnect-modal__base__row__right {\n  align-items: center;\n  display: flex;\n  justify-content: center;\n}\n\n.walletconnect-modal__base__row__right__app-icon {\n  border-radius: 8px;\n  height: 34px;\n  margin: 0 11px 2px 0;\n  width: 34px;\n  background-size: 100%;\n  box-shadow: 0 4px 12px 0 rgba(37, 41, 46, 0.25);\n}\n\n.walletconnect-modal__base__row__right__caret {\n  height: 18px;\n  opacity: 0.3;\n  transition: 0.1s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  width: 8px;\n  will-change: opacity;\n}\n\n.walletconnect-modal__base__row:hover .caret,\n.walletconnect-modal__base__row:active .caret {\n  opacity: 0.6;\n}\n\n.walletconnect-modal__mobile__toggle {\n  width: 80%;\n  display: flex;\n  margin: 0 auto;\n  position: relative;\n  overflow: hidden;\n  border-radius: 8px;\n  margin-bottom: 18px;\n  background: #d4d5d9;\n}\n\n.walletconnect-modal__single_wallet {\n  display: flex;\n  justify-content: center;\n  margin-top: 7px;\n  margin-bottom: 18px;\n}\n\n.walletconnect-modal__single_wallet a {\n  cursor: pointer;\n  color: rgb(64, 153, 255);\n  font-size: 21px;\n  font-weight: 800;\n  text-decoration: none !important;\n  margin: 0 auto;\n}\n\n.walletconnect-modal__mobile__toggle_selector {\n  width: calc(50% - 8px);\n  background: white;\n  position: absolute;\n  border-radius: 5px;\n  height: calc(100% - 8px);\n  top: 4px;\n  transition: all 0.2s ease-in-out;\n  transform: translate3d(4px, 0, 0);\n}\n\n.walletconnect-modal__mobile__toggle.right__selected .walletconnect-modal__mobile__toggle_selector {\n  transform: translate3d(calc(100% + 12px), 0, 0);\n}\n\n.walletconnect-modal__mobile__toggle a {\n  font-size: 12px;\n  width: 50%;\n  text-align: center;\n  padding: 8px;\n  margin: 0;\n  font-weight: 600;\n  z-index: 1;\n}\n\n.walletconnect-modal__footer {\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n}\n\n@media only screen and (max-width: 768px) {\n  .walletconnect-modal__footer {\n    margin-top: 5vw;\n  }\n}\n\n.walletconnect-modal__footer a {\n  cursor: pointer;\n  color: #898d97;\n  font-size: 15px;\n  margin: 0 auto;\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-modal__footer a {\n    font-size: 14px;\n  }\n}\n\n.walletconnect-connect__buttons__wrapper {\n  max-height: 44vh;\n}\n\n.walletconnect-connect__buttons__wrapper__android {\n  margin: 50% 0;\n}\n\n.walletconnect-connect__buttons__wrapper__wrap {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  margin: 10px 0;\n}\n\n@media only screen and (min-width: 768px) {\n  .walletconnect-connect__buttons__wrapper__wrap {\n    margin-top: 40px;\n  }\n}\n\n.walletconnect-connect__button {\n  background-color: rgb(64, 153, 255);\n  padding: 12px;\n  border-radius: 8px;\n  text-decoration: none;\n  color: rgb(255, 255, 255);\n  font-weight: 500;\n}\n\n.walletconnect-connect__button__icon_anchor {\n  cursor: pointer;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  margin: 8px;\n  width: 42px;\n  justify-self: center;\n  flex-direction: column;\n  text-decoration: none !important;\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-connect__button__icon_anchor {\n    margin: 4px;\n  }\n}\n\n.walletconnect-connect__button__icon {\n  border-radius: 10px;\n  height: 42px;\n  margin: 0;\n  width: 42px;\n  background-size: cover !important;\n  box-shadow: 0 4px 12px 0 rgba(37, 41, 46, 0.25);\n}\n\n.walletconnect-connect__button__text {\n  color: #424952;\n  font-size: 2.7vw;\n  text-decoration: none !important;\n  padding: 0;\n  margin-top: 1.8vw;\n  font-weight: 600;\n}\n\n@media only screen and (min-width: 768px) {\n  .walletconnect-connect__button__text {\n    font-size: 16px;\n    margin-top: 12px;\n  }\n}\n\n.walletconnect-search__input {\n  border: none;\n  background: #d4d5d9;\n  border-style: none;\n  padding: 8px 16px;\n  outline: none;\n  font-style: normal;\n  font-stretch: normal;\n  font-size: 16px;\n  font-style: normal;\n  font-stretch: normal;\n  line-height: normal;\n  letter-spacing: normal;\n  text-align: left;\n  border-radius: 8px;\n  width: calc(100% - 16px);\n  margin: 0;\n  margin-bottom: 8px;\n}\n";

  // A type of promise-like that resolves synchronously and supports only one observer
  typeof Symbol !== "undefined" ? Symbol.iterator || (Symbol.iterator = Symbol("Symbol.iterator")) : "@@iterator"; // Asynchronously iterate through an object's values
  typeof Symbol !== "undefined" ? Symbol.asyncIterator || (Symbol.asyncIterator = Symbol("Symbol.asyncIterator")) : "@@asyncIterator"; // Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing

  function _catch(body, recover) {
    try {
      var result = body();
    } catch (e) {
      return recover(e);
    }

    if (result && result.then) {
      return result.then(void 0, recover);
    }

    return result;
  } // Asynchronously await a promise and pass the result to a finally continuation

  var WALLETCONNECT_LOGO_SVG_URL = "data:image/svg+xml,%3C?xml version='1.0' encoding='UTF-8'?%3E %3Csvg width='300px' height='185px' viewBox='0 0 300 185' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E %3C!-- Generator: Sketch 49.3 (51167) - http://www.bohemiancoding.com/sketch --%3E %3Ctitle%3EWalletConnect%3C/title%3E %3Cdesc%3ECreated with Sketch.%3C/desc%3E %3Cdefs%3E%3C/defs%3E %3Cg id='Page-1' stroke='none' stroke-width='1' fill='none' fill-rule='evenodd'%3E %3Cg id='walletconnect-logo-alt' fill='%233B99FC' fill-rule='nonzero'%3E %3Cpath d='M61.4385429,36.2562612 C110.349767,-11.6319051 189.65053,-11.6319051 238.561752,36.2562612 L244.448297,42.0196786 C246.893858,44.4140867 246.893858,48.2961898 244.448297,50.690599 L224.311602,70.406102 C223.088821,71.6033071 221.106302,71.6033071 219.883521,70.406102 L211.782937,62.4749541 C177.661245,29.0669724 122.339051,29.0669724 88.2173582,62.4749541 L79.542302,70.9685592 C78.3195204,72.1657633 76.337001,72.1657633 75.1142214,70.9685592 L54.9775265,51.2530561 C52.5319653,48.8586469 52.5319653,44.9765439 54.9775265,42.5821357 L61.4385429,36.2562612 Z M280.206339,77.0300061 L298.128036,94.5769031 C300.573585,96.9713 300.573599,100.85338 298.128067,103.247793 L217.317896,182.368927 C214.872352,184.763353 210.907314,184.76338 208.461736,182.368989 C208.461726,182.368979 208.461714,182.368967 208.461704,182.368957 L151.107561,126.214385 C150.496171,125.615783 149.504911,125.615783 148.893521,126.214385 C148.893517,126.214389 148.893514,126.214393 148.89351,126.214396 L91.5405888,182.368927 C89.095052,184.763359 85.1300133,184.763399 82.6844276,182.369014 C82.6844133,182.369 82.684398,182.368986 82.6843827,182.36897 L1.87196327,103.246785 C-0.573596939,100.852377 -0.573596939,96.9702735 1.87196327,94.5758653 L19.7936929,77.028998 C22.2392531,74.6345898 26.2042918,74.6345898 28.6498531,77.028998 L86.0048306,133.184355 C86.6162214,133.782957 87.6074796,133.782957 88.2188704,133.184355 C88.2188796,133.184346 88.2188878,133.184338 88.2188969,133.184331 L145.571,77.028998 C148.016505,74.6345347 151.981544,74.6344449 154.427161,77.028798 C154.427195,77.0288316 154.427229,77.0288653 154.427262,77.028899 L211.782164,133.184331 C212.393554,133.782932 213.384814,133.782932 213.996204,133.184331 L271.350179,77.0300061 C273.79574,74.6355969 277.760778,74.6355969 280.206339,77.0300061 Z' id='WalletConnect'%3E%3C/path%3E %3C/g%3E %3C/g%3E %3C/svg%3E";

  var WALLETCONNECT_HEADER_TEXT = "WalletConnect";
  var ANIMATION_DURATION = 300;
  var DEFAULT_BUTTON_COLOR = "rgb(64, 153, 255)";
  var WALLETCONNECT_WRAPPER_ID = "walletconnect-wrapper";
  var WALLETCONNECT_STYLE_ID = "walletconnect-style-sheet";
  var WALLETCONNECT_MODAL_ID = "walletconnect-qrcode-modal";
  var WALLETCONNECT_CLOSE_BUTTON_ID = "walletconnect-qrcode-close";
  var WALLETCONNECT_CTA_TEXT_ID = "walletconnect-qrcode-text";
  var WALLETCONNECT_CONNECT_BUTTON_ID = "walletconnect-connect-button";

  function Header(props) {
    return React.createElement("div", {
      className: "walletconnect-modal__header"
    }, React.createElement("img", {
      src: WALLETCONNECT_LOGO_SVG_URL,
      className: "walletconnect-modal__headerLogo"
    }), React.createElement("p", null, WALLETCONNECT_HEADER_TEXT), React.createElement("div", {
      className: "walletconnect-modal__close__wrapper",
      onClick: props.onClose
    }, React.createElement("div", {
      id: WALLETCONNECT_CLOSE_BUTTON_ID,
      className: "walletconnect-modal__close__icon"
    }, React.createElement("div", {
      className: "walletconnect-modal__close__line1"
    }), React.createElement("div", {
      className: "walletconnect-modal__close__line2"
    }))));
  }

  function ConnectButton(props) {
    return React.createElement("a", {
      className: "walletconnect-connect__button",
      href: props.href,
      id: (WALLETCONNECT_CONNECT_BUTTON_ID + "-" + (props.name)),
      onClick: props.onClick,
      rel: "noopener noreferrer",
      style: {
        backgroundColor: props.color
      },
      target: "_blank"
    }, props.name);
  }

  var CARET_SVG_URL = "data:image/svg+xml,%3Csvg width='8' height='18' viewBox='0 0 8 18' fill='none' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M0.586301 0.213898C0.150354 0.552968 0.0718197 1.18124 0.41089 1.61719L5.2892 7.88931C5.57007 8.25042 5.57007 8.75608 5.2892 9.11719L0.410889 15.3893C0.071819 15.8253 0.150353 16.4535 0.586301 16.7926C1.02225 17.1317 1.65052 17.0531 1.98959 16.6172L6.86791 10.3451C7.7105 9.26174 7.7105 7.74476 6.86791 6.66143L1.98959 0.38931C1.65052 -0.0466374 1.02225 -0.125172 0.586301 0.213898Z' fill='%233C4252'/%3E %3C/svg%3E";

  function WalletButton(props) {
    var color = props.color;
    var href = props.href;
    var name = props.name;
    var logo = props.logo;
    var onClick = props.onClick;
    return React.createElement("a", {
      className: "walletconnect-modal__base__row",
      href: href,
      onClick: onClick,
      rel: "noopener noreferrer",
      target: "_blank"
    }, React.createElement("h3", {
      className: "walletconnect-modal__base__row__h3"
    }, name), React.createElement("div", {
      className: "walletconnect-modal__base__row__right"
    }, React.createElement("div", {
      className: "walletconnect-modal__base__row__right__app-icon",
      style: {
        background: ("url('" + logo + "') " + color),
        backgroundSize: "100%"
      }
    }), React.createElement("img", {
      src: CARET_SVG_URL,
      className: "walletconnect-modal__base__row__right__caret"
    })));
  }

  function WalletIcon(props) {
    var color = props.color;
    var href = props.href;
    var name = props.name;
    var logo = props.logo;
    var onClick = props.onClick;
    var fontSize = window.innerWidth < 768 ? ((name.length > 8 ? 2.5 : 2.7) + "vw") : "inherit";
    return React.createElement("a", {
      className: "walletconnect-connect__button__icon_anchor",
      href: href,
      onClick: onClick,
      rel: "noopener noreferrer",
      target: "_blank"
    }, React.createElement("div", {
      className: "walletconnect-connect__button__icon",
      style: {
        background: ("url('" + logo + "') " + color),
        backgroundSize: "100%"
      }
    }), React.createElement("div", {
      style: {
        fontSize: fontSize
      },
      className: "walletconnect-connect__button__text"
    }, name));
  }

  var GRID_MIN_COUNT = 5;
  var LINKS_PER_PAGE = 12;

  function LinkDisplay(props) {
    var android = browserUtils.isAndroid();
    var ref = React.useState("");
    var input = ref[0];
    var setInput = ref[1];
    var ref$1 = React.useState("");
    var filter = ref$1[0];
    var setFilter = ref$1[1];
    var ref$2 = React.useState(1);
    var page = ref$2[0];
    var setPage = ref$2[1];
    var links = filter ? props.links.filter(function (link) { return link.name.toLowerCase().includes(filter.toLowerCase()); }) : props.links;
    var errorMessage = props.errorMessage;
    var grid = filter || links.length > GRID_MIN_COUNT;
    var pages = Math.ceil(links.length / LINKS_PER_PAGE);
    var range = [(page - 1) * LINKS_PER_PAGE + 1, page * LINKS_PER_PAGE];
    var pageLinks = links.length ? links.filter(function (_, index) { return index + 1 >= range[0] && index + 1 <= range[1]; }) : [];
    var hasPaging = !!(!android && pages > 1);
    var filterTimeout = undefined;

    function handleInput(e) {
      setInput(e.target.value);
      clearTimeout(filterTimeout);

      if (e.target.value) {
        filterTimeout = setTimeout(function () {
          setFilter(e.target.value);
          setPage(1);
        }, 1000);
      } else {
        setInput("");
        setFilter("");
        setPage(1);
      }
    }

    return React.createElement("div", null, React.createElement("p", {
      id: WALLETCONNECT_CTA_TEXT_ID,
      className: "walletconnect-qrcode__text"
    }, android ? props.text.connect_mobile_wallet : props.text.choose_preferred_wallet), !android && React.createElement("input", {
      className: "walletconnect-search__input",
      placeholder: "Search",
      value: input,
      onChange: handleInput
    }), React.createElement("div", {
      className: ("walletconnect-connect__buttons__wrapper" + (android ? "__android" : grid && links.length ? "__wrap" : ""))
    }, !android ? pageLinks.length ? pageLinks.map(function (entry) {
      var color = entry.color;
      var name = entry.name;
      var shortName = entry.shortName;
      var logo = entry.logo;
      var href = browserUtils.formatIOSMobile(props.uri, entry);
      var handleClickIOS = React.useCallback(function () {
        browserUtils.saveMobileLinkInfo({
          name: name,
          href: href
        });
      }, [pageLinks]);
      return !grid ? React.createElement(WalletButton, {
        color: color,
        href: href,
        name: name,
        logo: logo,
        onClick: handleClickIOS
      }) : React.createElement(WalletIcon, {
        color: color,
        href: href,
        name: shortName,
        logo: logo,
        onClick: handleClickIOS
      });
    }) : React.createElement(React.Fragment, null, React.createElement("p", null, errorMessage.length ? props.errorMessage : !!props.links.length && !links.length ? props.text.no_wallets_found : props.text.loading)) : React.createElement(ConnectButton, {
      name: props.text.connect,
      color: DEFAULT_BUTTON_COLOR,
      href: props.uri,
      onClick: React.useCallback(function () {
        browserUtils.saveMobileLinkInfo({
          name: "Unknown",
          href: props.uri
        });
      }, [])
    })), hasPaging && React.createElement("div", {
      className: "walletconnect-modal__footer"
    }, Array(pages).fill(0).map(function (_, index) {
      var pageNumber = index + 1;
      var selected = page === pageNumber;
      return React.createElement("a", {
        style: {
          margin: "auto 10px",
          fontWeight: selected ? "bold" : "normal"
        },
        onClick: function () { return setPage(pageNumber); }
      }, pageNumber);
    })));
  }

  function Notification(props) {
    var show = !!props.message.trim();
    return React.createElement("div", {
      className: ("walletconnect-qrcode__notification" + (show ? " notification__show" : ""))
    }, props.message);
  }

  var formatQRCodeImage = function (data) {
    try {
      var result = "";
      return Promise.resolve(QRCode.toString(data, {
        margin: 0,
        type: "svg"
      })).then(function (dataString) {
        if (typeof dataString === "string") {
          result = dataString.replace("<svg", "<svg class=\"walletconnect-qrcode__image\"");
        }

        return result;
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  function QRCodeDisplay(props) {
    var ref = React.useState("");
    var notification = ref[0];
    var setNotification = ref[1];
    var ref$1 = React.useState("");
    var svg = ref$1[0];
    var setSvg = ref$1[1];
    React.useEffect(function () {
      try {
        return Promise.resolve(formatQRCodeImage(props.uri)).then(function (_formatQRCodeImage) {
          setSvg(_formatQRCodeImage);
        });
      } catch (e) {
        Promise.reject(e);
      }
    }, []);

    var copyToClipboard = function () {
      var success = copy(props.uri);

      if (success) {
        setNotification(props.text.copied_to_clipboard);
        setInterval(function () { return setNotification(""); }, 1200);
      } else {
        setNotification("Error");
        setInterval(function () { return setNotification(""); }, 1200);
      }
    };

    return React.createElement("div", null, React.createElement("p", {
      id: WALLETCONNECT_CTA_TEXT_ID,
      className: "walletconnect-qrcode__text"
    }, props.text.scan_qrcode_with_wallet), React.createElement("div", {
      dangerouslySetInnerHTML: {
        __html: svg
      }
    }), React.createElement("div", {
      className: "walletconnect-modal__footer"
    }, React.createElement("a", {
      onClick: copyToClipboard
    }, props.text.copy_to_clipboard)), React.createElement(Notification, {
      message: notification
    }));
  }

  function Modal(props) {
    var android = browserUtils.isAndroid();
    var mobile = browserUtils.isMobile();
    var whitelist = mobile ? props.qrcodeModalOptions && props.qrcodeModalOptions.mobileLinks ? props.qrcodeModalOptions.mobileLinks : undefined : props.qrcodeModalOptions && props.qrcodeModalOptions.desktopLinks ? props.qrcodeModalOptions.desktopLinks : undefined;
    var ref = React.useState(false);
    var loading = ref[0];
    var setLoading = ref[1];
    var ref$1 = React.useState(false);
    var fetched = ref$1[0];
    var setFetched = ref$1[1];
    var ref$2 = React.useState(!mobile);
    var displayQRCode = ref$2[0];
    var setDisplayQRCode = ref$2[1];
    var displayProps = {
      mobile: mobile,
      text: props.text,
      uri: props.uri,
      qrcodeModalOptions: props.qrcodeModalOptions
    };
    var ref$3 = React.useState("");
    var singleLinkHref = ref$3[0];
    var setSingleLinkHref = ref$3[1];
    var ref$4 = React.useState(false);
    var hasSingleLink = ref$4[0];
    var setHasSingleLink = ref$4[1];
    var ref$5 = React.useState([]);
    var links = ref$5[0];
    var setLinks = ref$5[1];
    var ref$6 = React.useState("");
    var errorMessage = ref$6[0];
    var setErrorMessage = ref$6[1];

    var getLinksIfNeeded = function () {
      if (fetched || loading || whitelist && !whitelist.length || links.length > 0) {
        return;
      }

      React.useEffect(function () {
        var initLinks = function () {
          try {
            if (android) { return Promise.resolve(); }
            setLoading(true);

            var _temp = _catch(function () {
              var url = props.qrcodeModalOptions && props.qrcodeModalOptions.registryUrl ? props.qrcodeModalOptions.registryUrl : browserUtils.getWalletRegistryUrl();
              return Promise.resolve(fetch(url).then(function (x) { return x.json(); })).then(function (registry) {
                var platform = mobile ? "mobile" : "desktop";

                var _links = browserUtils.getMobileLinkRegistry(browserUtils.formatMobileRegistry(registry, platform), whitelist);

                setLoading(false);
                setFetched(true);
                setErrorMessage(!_links.length ? props.text.no_supported_wallets : "");
                setLinks(_links);
                var hasSingleLink = _links.length === 1;

                if (hasSingleLink) {
                  setSingleLinkHref(browserUtils.formatIOSMobile(props.uri, _links[0]));
                  setDisplayQRCode(true);
                }

                setHasSingleLink(hasSingleLink);
              });
            }, function (e) {
              setLoading(false);
              setFetched(true);
              setErrorMessage(props.text.something_went_wrong);
              console.error(e);
            });

            return Promise.resolve(_temp && _temp.then ? _temp.then(function () {}) : void 0);
          } catch (e) {
            return Promise.reject(e);
          }
        };

        initLinks();
      });
    };

    getLinksIfNeeded();
    var rightSelected = mobile ? displayQRCode : !displayQRCode;
    return React.createElement("div", {
      id: WALLETCONNECT_MODAL_ID,
      className: "walletconnect-qrcode__base animated fadeIn"
    }, React.createElement("div", {
      className: "walletconnect-modal__base"
    }, React.createElement(Header, {
      onClose: props.onClose
    }), hasSingleLink && displayQRCode ? React.createElement("div", {
      className: "walletconnect-modal__single_wallet"
    }, React.createElement("a", {
      onClick: function () { return browserUtils.saveMobileLinkInfo({
        name: links[0].name,
        href: singleLinkHref
      }); },
      href: singleLinkHref,
      rel: "noopener noreferrer",
      target: "_blank"
    }, props.text.connect_with + " " + (hasSingleLink ? links[0].name : "") + " ›")) : android || loading || !loading && links.length ? React.createElement("div", {
      className: ("walletconnect-modal__mobile__toggle" + (rightSelected ? " right__selected" : ""))
    }, React.createElement("div", {
      className: "walletconnect-modal__mobile__toggle_selector"
    }), mobile ? React.createElement(React.Fragment, null, React.createElement("a", {
      onClick: function () { return (setDisplayQRCode(false), getLinksIfNeeded()); }
    }, props.text.mobile), React.createElement("a", {
      onClick: function () { return setDisplayQRCode(true); }
    }, props.text.qrcode)) : React.createElement(React.Fragment, null, React.createElement("a", {
      onClick: function () { return setDisplayQRCode(true); }
    }, props.text.qrcode), React.createElement("a", {
      onClick: function () { return (setDisplayQRCode(false), getLinksIfNeeded()); }
    }, props.text.desktop))) : null, React.createElement("div", null, displayQRCode || !android && !loading && !links.length ? React.createElement(QRCodeDisplay, Object.assign({}, displayProps)) : React.createElement(LinkDisplay, Object.assign({}, displayProps,
      {links: links,
      errorMessage: errorMessage})))));
  }

  var de = {
    choose_preferred_wallet: "Wähle bevorzugte Wallet",
    connect_mobile_wallet: "Verbinde mit Mobile Wallet",
    scan_qrcode_with_wallet: "Scanne den QR-code mit einer WalletConnect kompatiblen Wallet",
    connect: "Verbinden",
    qrcode: "QR-Code",
    mobile: "Mobile",
    desktop: "Desktop",
    copy_to_clipboard: "In die Zwischenablage kopieren",
    copied_to_clipboard: "In die Zwischenablage kopiert!",
    connect_with: "Verbinden mit Hilfe von",
    loading: "Laden...",
    something_went_wrong: "Etwas ist schief gelaufen",
    no_supported_wallets: "Es gibt noch keine unterstützten Wallet",
    no_wallets_found: "keine Wallet gefunden"
  };

  var en = {
    choose_preferred_wallet: "Choose your preferred wallet",
    connect_mobile_wallet: "Connect to Mobile Wallet",
    scan_qrcode_with_wallet: "Scan QR code with a WalletConnect-compatible wallet",
    connect: "Connect",
    qrcode: "QR Code",
    mobile: "Mobile",
    desktop: "Desktop",
    copy_to_clipboard: "Copy to clipboard",
    copied_to_clipboard: "Copied to clipboard!",
    connect_with: "Connect with",
    loading: "Loading...",
    something_went_wrong: "Something went wrong",
    no_supported_wallets: "There are no supported wallets yet",
    no_wallets_found: "No wallets found"
  };

  var es = {
    choose_preferred_wallet: "Elige tu billetera preferida",
    connect_mobile_wallet: "Conectar a billetera móvil",
    scan_qrcode_with_wallet: "Escanea el código QR con una billetera compatible con WalletConnect",
    connect: "Conectar",
    qrcode: "Código QR",
    mobile: "Móvil",
    desktop: "Desktop",
    copy_to_clipboard: "Copiar",
    copied_to_clipboard: "Copiado!",
    connect_with: "Conectar mediante",
    loading: "Cargando...",
    something_went_wrong: "Algo salió mal",
    no_supported_wallets: "Todavía no hay billeteras compatibles",
    no_wallets_found: "No se encontraron billeteras"
  };

  var fr = {
    choose_preferred_wallet: "Choisissez votre portefeuille préféré",
    connect_mobile_wallet: "Se connecter au portefeuille mobile",
    scan_qrcode_with_wallet: "Scannez le QR code avec un portefeuille compatible WalletConnect",
    connect: "Se connecter",
    qrcode: "QR Code",
    mobile: "Mobile",
    desktop: "Desktop",
    copy_to_clipboard: "Copier",
    copied_to_clipboard: "Copié!",
    connect_with: "Connectez-vous à l'aide de",
    loading: "Chargement...",
    something_went_wrong: "Quelque chose a mal tourné",
    no_supported_wallets: "Il n'y a pas encore de portefeuilles pris en charge",
    no_wallets_found: "Aucun portefeuille trouvé"
  };

  var ko = {
    choose_preferred_wallet: "원하는 지갑을 선택하세요",
    connect_mobile_wallet: "모바일 지갑과 연결",
    scan_qrcode_with_wallet: "WalletConnect 지원 지갑에서 QR코드를 스캔하세요",
    connect: "연결",
    qrcode: "QR 코드",
    mobile: "모바일",
    desktop: "데스크탑",
    copy_to_clipboard: "클립보드에 복사",
    copied_to_clipboard: "클립보드에 복사되었습니다!",
    connect_with: "와 연결하다",
    loading: "로드 중...",
    something_went_wrong: "문제가 발생했습니다.",
    no_supported_wallets: "아직 지원되는 지갑이 없습니다",
    no_wallets_found: "지갑을 찾을 수 없습니다"
  };

  var pt = {
    choose_preferred_wallet: "Escolha sua carteira preferida",
    connect_mobile_wallet: "Conectar-se à carteira móvel",
    scan_qrcode_with_wallet: "Ler o código QR com uma carteira compatível com WalletConnect",
    connect: "Conectar",
    qrcode: "Código QR",
    mobile: "Móvel",
    desktop: "Desktop",
    copy_to_clipboard: "Copiar",
    copied_to_clipboard: "Copiado!",
    connect_with: "Ligar por meio de",
    loading: "Carregamento...",
    something_went_wrong: "Algo correu mal",
    no_supported_wallets: "Ainda não há carteiras suportadas",
    no_wallets_found: "Nenhuma carteira encontrada"
  };

  var zh = {
    choose_preferred_wallet: "选择你的钱包",
    connect_mobile_wallet: "连接至移动端钱包",
    scan_qrcode_with_wallet: "使用兼容 WalletConnect 的钱包扫描二维码",
    connect: "连接",
    qrcode: "二维码",
    mobile: "移动",
    desktop: "桌面",
    copy_to_clipboard: "复制到剪贴板",
    copied_to_clipboard: "复制到剪贴板成功！",
    connect_with: "通过以下方式连接",
    loading: "正在加载...",
    something_went_wrong: "出了问题",
    no_supported_wallets: "目前还没有支持的钱包",
    no_wallets_found: "没有找到钱包"
  };

  var fa = {
    choose_preferred_wallet: "کیف پول مورد نظر خود را انتخاب کنید",
    connect_mobile_wallet: "به کیف پول موبایل وصل شوید",
    scan_qrcode_with_wallet: "کد QR را با یک کیف پول سازگار با WalletConnect اسکن کنید",
    connect: "اتصال",
    qrcode: "کد QR",
    mobile: "سیار",
    desktop: "دسکتاپ",
    copy_to_clipboard: "کپی به کلیپ بورد",
    copied_to_clipboard: "در کلیپ بورد کپی شد!",
    connect_with: "ارتباط با",
    loading: "...بارگذاری",
    something_went_wrong: "مشکلی پیش آمد",
    no_supported_wallets: "هنوز هیچ کیف پول پشتیبانی شده ای وجود ندارد",
    no_wallets_found: "هیچ کیف پولی پیدا نشد"
  };

  var languages = {
    de: de,
    en: en,
    es: es,
    fr: fr,
    ko: ko,
    pt: pt,
    zh: zh,
    fa: fa
  };

  function injectStyleSheet() {
    var doc = browserUtils.getDocumentOrThrow();
    var prev = doc.getElementById(WALLETCONNECT_STYLE_ID);

    if (prev) {
      doc.head.removeChild(prev);
    }

    var style = doc.createElement("style");
    style.setAttribute("id", WALLETCONNECT_STYLE_ID);
    style.innerText = WALLETCONNECT_STYLE_SHEET;
    doc.head.appendChild(style);
  }

  function renderWrapper() {
    var doc = browserUtils.getDocumentOrThrow();
    var wrapper = doc.createElement("div");
    wrapper.setAttribute("id", WALLETCONNECT_WRAPPER_ID);
    doc.body.appendChild(wrapper);
    return wrapper;
  }

  function triggerCloseAnimation() {
    var doc = browserUtils.getDocumentOrThrow();
    var modal = doc.getElementById(WALLETCONNECT_MODAL_ID);

    if (modal) {
      modal.className = modal.className.replace("fadeIn", "fadeOut");
      setTimeout(function () {
        var wrapper = doc.getElementById(WALLETCONNECT_WRAPPER_ID);

        if (wrapper) {
          doc.body.removeChild(wrapper);
        }
      }, ANIMATION_DURATION);
    }
  }

  function getWrappedCallback(cb) {
    return function () {
      triggerCloseAnimation();

      if (cb) {
        cb();
      }
    };
  }

  function getText() {
    var lang = browserUtils.getNavigatorOrThrow().language.split("-")[0] || "en";
    return languages[lang] || languages["en"];
  }

  function open$1(uri, cb, qrcodeModalOptions) {
    injectStyleSheet();
    var wrapper = renderWrapper();
    React.render(React.createElement(Modal, {
      text: getText(),
      uri: uri,
      onClose: getWrappedCallback(cb),
      qrcodeModalOptions: qrcodeModalOptions
    }), wrapper);
  }
  function close$1() {
    triggerCloseAnimation();
  }

  var isNode = function () { return typeof process !== "undefined" && typeof process.versions !== "undefined" && typeof process.versions.node !== "undefined"; };

  function open$2(uri, cb, qrcodeModalOptions) {
    console.log(uri);

    if (isNode()) {
      open(uri);
    } else {
      open$1(uri, cb, qrcodeModalOptions);
    }
  }

  function close$2() {
    if (isNode()) ; else {
      close$1();
    }
  }

  var index = {
    open: open$2,
    close: close$2
  };

  var cjs$1 = index;

  var cjs = {};

  var eventemitter3 = {exports: {}};

  (function (module) {

  var has = Object.prototype.hasOwnProperty
    , prefix = '~';

  /**
   * Constructor to create a storage for our `EE` objects.
   * An `Events` instance is a plain object whose properties are event names.
   *
   * @constructor
   * @private
   */
  function Events() {}

  //
  // We try to not inherit from `Object.prototype`. In some engines creating an
  // instance in this way is faster than calling `Object.create(null)` directly.
  // If `Object.create(null)` is not supported we prefix the event names with a
  // character to make sure that the built-in object properties are not
  // overridden or used as an attack vector.
  //
  if (Object.create) {
    Events.prototype = Object.create(null);

    //
    // This hack is needed because the `__proto__` property is still inherited in
    // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
    //
    if (!new Events().__proto__) prefix = false;
  }

  /**
   * Representation of a single event listener.
   *
   * @param {Function} fn The listener function.
   * @param {*} context The context to invoke the listener with.
   * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
   * @constructor
   * @private
   */
  function EE(fn, context, once) {
    this.fn = fn;
    this.context = context;
    this.once = once || false;
  }

  /**
   * Add a listener for a given event.
   *
   * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
   * @param {(String|Symbol)} event The event name.
   * @param {Function} fn The listener function.
   * @param {*} context The context to invoke the listener with.
   * @param {Boolean} once Specify if the listener is a one-time listener.
   * @returns {EventEmitter}
   * @private
   */
  function addListener(emitter, event, fn, context, once) {
    if (typeof fn !== 'function') {
      throw new TypeError('The listener must be a function');
    }

    var listener = new EE(fn, context || emitter, once)
      , evt = prefix ? prefix + event : event;

    if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
    else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
    else emitter._events[evt] = [emitter._events[evt], listener];

    return emitter;
  }

  /**
   * Clear event by name.
   *
   * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
   * @param {(String|Symbol)} evt The Event name.
   * @private
   */
  function clearEvent(emitter, evt) {
    if (--emitter._eventsCount === 0) emitter._events = new Events();
    else delete emitter._events[evt];
  }

  /**
   * Minimal `EventEmitter` interface that is molded against the Node.js
   * `EventEmitter` interface.
   *
   * @constructor
   * @public
   */
  function EventEmitter() {
    this._events = new Events();
    this._eventsCount = 0;
  }

  /**
   * Return an array listing the events for which the emitter has registered
   * listeners.
   *
   * @returns {Array}
   * @public
   */
  EventEmitter.prototype.eventNames = function eventNames() {
    var names = []
      , events
      , name;

    if (this._eventsCount === 0) return names;

    for (name in (events = this._events)) {
      if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
    }

    if (Object.getOwnPropertySymbols) {
      return names.concat(Object.getOwnPropertySymbols(events));
    }

    return names;
  };

  /**
   * Return the listeners registered for a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @returns {Array} The registered listeners.
   * @public
   */
  EventEmitter.prototype.listeners = function listeners(event) {
    var evt = prefix ? prefix + event : event
      , handlers = this._events[evt];

    if (!handlers) return [];
    if (handlers.fn) return [handlers.fn];

    for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
      ee[i] = handlers[i].fn;
    }

    return ee;
  };

  /**
   * Return the number of listeners listening to a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @returns {Number} The number of listeners.
   * @public
   */
  EventEmitter.prototype.listenerCount = function listenerCount(event) {
    var evt = prefix ? prefix + event : event
      , listeners = this._events[evt];

    if (!listeners) return 0;
    if (listeners.fn) return 1;
    return listeners.length;
  };

  /**
   * Calls each of the listeners registered for a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @returns {Boolean} `true` if the event had listeners, else `false`.
   * @public
   */
  EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    var evt = prefix ? prefix + event : event;

    if (!this._events[evt]) return false;

    var listeners = this._events[evt]
      , len = arguments.length
      , args
      , i;

    if (listeners.fn) {
      if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

      switch (len) {
        case 1: return listeners.fn.call(listeners.context), true;
        case 2: return listeners.fn.call(listeners.context, a1), true;
        case 3: return listeners.fn.call(listeners.context, a1, a2), true;
        case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
        case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
        case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
      }

      for (i = 1, args = new Array(len -1); i < len; i++) {
        args[i - 1] = arguments[i];
      }

      listeners.fn.apply(listeners.context, args);
    } else {
      var length = listeners.length
        , j;

      for (i = 0; i < length; i++) {
        if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

        switch (len) {
          case 1: listeners[i].fn.call(listeners[i].context); break;
          case 2: listeners[i].fn.call(listeners[i].context, a1); break;
          case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
          case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
          default:
            if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
              args[j - 1] = arguments[j];
            }

            listeners[i].fn.apply(listeners[i].context, args);
        }
      }
    }

    return true;
  };

  /**
   * Add a listener for a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @param {Function} fn The listener function.
   * @param {*} [context=this] The context to invoke the listener with.
   * @returns {EventEmitter} `this`.
   * @public
   */
  EventEmitter.prototype.on = function on(event, fn, context) {
    return addListener(this, event, fn, context, false);
  };

  /**
   * Add a one-time listener for a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @param {Function} fn The listener function.
   * @param {*} [context=this] The context to invoke the listener with.
   * @returns {EventEmitter} `this`.
   * @public
   */
  EventEmitter.prototype.once = function once(event, fn, context) {
    return addListener(this, event, fn, context, true);
  };

  /**
   * Remove the listeners of a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @param {Function} fn Only remove the listeners that match this function.
   * @param {*} context Only remove the listeners that have this context.
   * @param {Boolean} once Only remove one-time listeners.
   * @returns {EventEmitter} `this`.
   * @public
   */
  EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    var evt = prefix ? prefix + event : event;

    if (!this._events[evt]) return this;
    if (!fn) {
      clearEvent(this, evt);
      return this;
    }

    var listeners = this._events[evt];

    if (listeners.fn) {
      if (
        listeners.fn === fn &&
        (!once || listeners.once) &&
        (!context || listeners.context === context)
      ) {
        clearEvent(this, evt);
      }
    } else {
      for (var i = 0, events = [], length = listeners.length; i < length; i++) {
        if (
          listeners[i].fn !== fn ||
          (once && !listeners[i].once) ||
          (context && listeners[i].context !== context)
        ) {
          events.push(listeners[i]);
        }
      }

      //
      // Reset the array, or remove it completely if we have no more listeners.
      //
      if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
      else clearEvent(this, evt);
    }

    return this;
  };

  /**
   * Remove all listeners, or those of the specified event.
   *
   * @param {(String|Symbol)} [event] The event name.
   * @returns {EventEmitter} `this`.
   * @public
   */
  EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    var evt;

    if (event) {
      evt = prefix ? prefix + event : event;
      if (this._events[evt]) clearEvent(this, evt);
    } else {
      this._events = new Events();
      this._eventsCount = 0;
    }

    return this;
  };

  //
  // Alias methods names because people roll like that.
  //
  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  EventEmitter.prototype.addListener = EventEmitter.prototype.on;

  //
  // Expose the prefix.
  //
  EventEmitter.prefixed = prefix;

  //
  // Allow `EventEmitter` to be imported as module namespace.
  //
  EventEmitter.EventEmitter = EventEmitter;

  //
  // Expose the module.
  //
  {
    module.exports = EventEmitter;
  }
  }(eventemitter3));

  var dist$5 = {};

  var xmlHttpRequest = {};

  var progressEvent = {};

  Object.defineProperty(progressEvent, "__esModule", { value: true });
  var ProgressEvent = /** @class */ (function () {
      function ProgressEvent(type) {
          this.type = type;
          this.bubbles = false;
          this.cancelable = false;
          this.loaded = 0;
          this.lengthComputable = false;
          this.total = 0;
      }
      return ProgressEvent;
  }());
  progressEvent.ProgressEvent = ProgressEvent;

  var errors$3 = {};

  var __extends$2 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(errors$3, "__esModule", { value: true });
  var SecurityError = /** @class */ (function (_super) {
      __extends$2(SecurityError, _super);
      function SecurityError() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      return SecurityError;
  }(Error));
  errors$3.SecurityError = SecurityError;
  var InvalidStateError = /** @class */ (function (_super) {
      __extends$2(InvalidStateError, _super);
      function InvalidStateError() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      return InvalidStateError;
  }(Error));
  errors$3.InvalidStateError = InvalidStateError;
  var NetworkError = /** @class */ (function (_super) {
      __extends$2(NetworkError, _super);
      function NetworkError() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      return NetworkError;
  }(Error));
  errors$3.NetworkError = NetworkError;
  var SyntaxError$1 = /** @class */ (function (_super) {
      __extends$2(SyntaxError, _super);
      function SyntaxError() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      return SyntaxError;
  }(Error));
  errors$3.SyntaxError = SyntaxError$1;

  var xmlHttpRequestEventTarget = {};

  Object.defineProperty(xmlHttpRequestEventTarget, "__esModule", { value: true });
  var XMLHttpRequestEventTarget = /** @class */ (function () {
      function XMLHttpRequestEventTarget() {
          this.listeners = {};
      }
      XMLHttpRequestEventTarget.prototype.addEventListener = function (eventType, listener) {
          eventType = eventType.toLowerCase();
          this.listeners[eventType] = this.listeners[eventType] || [];
          this.listeners[eventType].push(listener.handleEvent || listener);
      };
      XMLHttpRequestEventTarget.prototype.removeEventListener = function (eventType, listener) {
          eventType = eventType.toLowerCase();
          if (!this.listeners[eventType]) {
              return;
          }
          var index = this.listeners[eventType].indexOf(listener.handleEvent || listener);
          if (index < 0) {
              return;
          }
          this.listeners[eventType].splice(index, 1);
      };
      XMLHttpRequestEventTarget.prototype.dispatchEvent = function (event) {
          var eventType = event.type.toLowerCase();
          event.target = this; // TODO: set event.currentTarget?
          if (this.listeners[eventType]) {
              for (var _i = 0, _a = this.listeners[eventType]; _i < _a.length; _i++) {
                  var listener_1 = _a[_i];
                  listener_1.call(this, event);
              }
          }
          var listener = this["on" + eventType];
          if (listener) {
              listener.call(this, event);
          }
          return true;
      };
      return XMLHttpRequestEventTarget;
  }());
  xmlHttpRequestEventTarget.XMLHttpRequestEventTarget = XMLHttpRequestEventTarget;

  var xmlHttpRequestUpload = {};

  var __extends$1 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(xmlHttpRequestUpload, "__esModule", { value: true });
  var xml_http_request_event_target_1$1 = xmlHttpRequestEventTarget;
  var XMLHttpRequestUpload = /** @class */ (function (_super) {
      __extends$1(XMLHttpRequestUpload, _super);
      function XMLHttpRequestUpload() {
          var _this = _super.call(this) || this;
          _this._contentType = null;
          _this._body = null;
          _this._reset();
          return _this;
      }
      XMLHttpRequestUpload.prototype._reset = function () {
          this._contentType = null;
          this._body = null;
      };
      XMLHttpRequestUpload.prototype._setData = function (data) {
          if (data == null) {
              return;
          }
          if (typeof data === 'string') {
              if (data.length !== 0) {
                  this._contentType = 'text/plain;charset=UTF-8';
              }
              this._body = new Buffer(data, 'utf-8');
          }
          else if (Buffer.isBuffer(data)) {
              this._body = data;
          }
          else if (data instanceof ArrayBuffer) {
              var body = new Buffer(data.byteLength);
              var view = new Uint8Array(data);
              for (var i = 0; i < data.byteLength; i++) {
                  body[i] = view[i];
              }
              this._body = body;
          }
          else if (data.buffer && data.buffer instanceof ArrayBuffer) {
              var body = new Buffer(data.byteLength);
              var offset = data.byteOffset;
              var view = new Uint8Array(data.buffer);
              for (var i = 0; i < data.byteLength; i++) {
                  body[i] = view[i + offset];
              }
              this._body = body;
          }
          else {
              throw new Error("Unsupported send() data " + data);
          }
      };
      XMLHttpRequestUpload.prototype._finalizeHeaders = function (headers, loweredHeaders) {
          if (this._contentType && !loweredHeaders['content-type']) {
              headers['Content-Type'] = this._contentType;
          }
          if (this._body) {
              headers['Content-Length'] = this._body.length.toString();
          }
      };
      XMLHttpRequestUpload.prototype._startUpload = function (request) {
          if (this._body) {
              request.write(this._body);
          }
          request.end();
      };
      return XMLHttpRequestUpload;
  }(xml_http_request_event_target_1$1.XMLHttpRequestEventTarget));
  xmlHttpRequestUpload.XMLHttpRequestUpload = XMLHttpRequestUpload;

  var cookiejar = {};

  /* jshint node: true */
  (function () {

      function CookieAccessInfo(domain, path, secure, script) {
          if (this instanceof CookieAccessInfo) {
              this.domain = domain || undefined;
              this.path = path || "/";
              this.secure = !!secure;
              this.script = !!script;
              return this;
          }
          return new CookieAccessInfo(domain, path, secure, script);
      }
      CookieAccessInfo.All = Object.freeze(Object.create(null));
      cookiejar.CookieAccessInfo = CookieAccessInfo;

      function Cookie(cookiestr, request_domain, request_path) {
          if (cookiestr instanceof Cookie) {
              return cookiestr;
          }
          if (this instanceof Cookie) {
              this.name = null;
              this.value = null;
              this.expiration_date = Infinity;
              this.path = String(request_path || "/");
              this.explicit_path = false;
              this.domain = request_domain || null;
              this.explicit_domain = false;
              this.secure = false; //how to define default?
              this.noscript = false; //httponly
              if (cookiestr) {
                  this.parse(cookiestr, request_domain, request_path);
              }
              return this;
          }
          return new Cookie(cookiestr, request_domain, request_path);
      }
      cookiejar.Cookie = Cookie;

      Cookie.prototype.toString = function toString() {
          var str = [this.name + "=" + this.value];
          if (this.expiration_date !== Infinity) {
              str.push("expires=" + (new Date(this.expiration_date)).toGMTString());
          }
          if (this.domain) {
              str.push("domain=" + this.domain);
          }
          if (this.path) {
              str.push("path=" + this.path);
          }
          if (this.secure) {
              str.push("secure");
          }
          if (this.noscript) {
              str.push("httponly");
          }
          return str.join("; ");
      };

      Cookie.prototype.toValueString = function toValueString() {
          return this.name + "=" + this.value;
      };

      var cookie_str_splitter = /[:](?=\s*[a-zA-Z0-9_\-]+\s*[=])/g;
      Cookie.prototype.parse = function parse(str, request_domain, request_path) {
          if (this instanceof Cookie) {
              var parts = str.split(";").filter(function (value) {
                      return !!value;
                  });
              var i;

              var pair = parts[0].match(/([^=]+)=([\s\S]*)/);
              if (!pair) {
                  console.warn("Invalid cookie header encountered. Header: '"+str+"'");
                  return;
              }

              var key = pair[1];
              var value = pair[2];
              if ( typeof key !== 'string' || key.length === 0 || typeof value !== 'string' ) {
                  console.warn("Unable to extract values from cookie header. Cookie: '"+str+"'");
                  return;
              }

              this.name = key;
              this.value = value;

              for (i = 1; i < parts.length; i += 1) {
                  pair = parts[i].match(/([^=]+)(?:=([\s\S]*))?/);
                  key = pair[1].trim().toLowerCase();
                  value = pair[2];
                  switch (key) {
                  case "httponly":
                      this.noscript = true;
                      break;
                  case "expires":
                      this.expiration_date = value ?
                              Number(Date.parse(value)) :
                              Infinity;
                      break;
                  case "path":
                      this.path = value ?
                              value.trim() :
                              "";
                      this.explicit_path = true;
                      break;
                  case "domain":
                      this.domain = value ?
                              value.trim() :
                              "";
                      this.explicit_domain = !!this.domain;
                      break;
                  case "secure":
                      this.secure = true;
                      break;
                  }
              }

              if (!this.explicit_path) {
                 this.path = request_path || "/";
              }
              if (!this.explicit_domain) {
                 this.domain = request_domain;
              }

              return this;
          }
          return new Cookie().parse(str, request_domain, request_path);
      };

      Cookie.prototype.matches = function matches(access_info) {
          if (access_info === CookieAccessInfo.All) {
            return true;
          }
          if (this.noscript && access_info.script ||
                  this.secure && !access_info.secure ||
                  !this.collidesWith(access_info)) {
              return false;
          }
          return true;
      };

      Cookie.prototype.collidesWith = function collidesWith(access_info) {
          if ((this.path && !access_info.path) || (this.domain && !access_info.domain)) {
              return false;
          }
          if (this.path && access_info.path.indexOf(this.path) !== 0) {
              return false;
          }
          if (this.explicit_path && access_info.path.indexOf( this.path ) !== 0) {
             return false;
          }
          var access_domain = access_info.domain && access_info.domain.replace(/^[\.]/,'');
          var cookie_domain = this.domain && this.domain.replace(/^[\.]/,'');
          if (cookie_domain === access_domain) {
              return true;
          }
          if (cookie_domain) {
              if (!this.explicit_domain) {
                  return false; // we already checked if the domains were exactly the same
              }
              var wildcard = access_domain.indexOf(cookie_domain);
              if (wildcard === -1 || wildcard !== access_domain.length - cookie_domain.length) {
                  return false;
              }
              return true;
          }
          return true;
      };

      function CookieJar() {
          var cookies, cookies_list, collidable_cookie;
          if (this instanceof CookieJar) {
              cookies = Object.create(null); //name: [Cookie]

              this.setCookie = function setCookie(cookie, request_domain, request_path) {
                  var remove, i;
                  cookie = new Cookie(cookie, request_domain, request_path);
                  //Delete the cookie if the set is past the current time
                  remove = cookie.expiration_date <= Date.now();
                  if (cookies[cookie.name] !== undefined) {
                      cookies_list = cookies[cookie.name];
                      for (i = 0; i < cookies_list.length; i += 1) {
                          collidable_cookie = cookies_list[i];
                          if (collidable_cookie.collidesWith(cookie)) {
                              if (remove) {
                                  cookies_list.splice(i, 1);
                                  if (cookies_list.length === 0) {
                                      delete cookies[cookie.name];
                                  }
                                  return false;
                              }
                              cookies_list[i] = cookie;
                              return cookie;
                          }
                      }
                      if (remove) {
                          return false;
                      }
                      cookies_list.push(cookie);
                      return cookie;
                  }
                  if (remove) {
                      return false;
                  }
                  cookies[cookie.name] = [cookie];
                  return cookies[cookie.name];
              };
              //returns a cookie
              this.getCookie = function getCookie(cookie_name, access_info) {
                  var cookie, i;
                  cookies_list = cookies[cookie_name];
                  if (!cookies_list) {
                      return;
                  }
                  for (i = 0; i < cookies_list.length; i += 1) {
                      cookie = cookies_list[i];
                      if (cookie.expiration_date <= Date.now()) {
                          if (cookies_list.length === 0) {
                              delete cookies[cookie.name];
                          }
                          continue;
                      }

                      if (cookie.matches(access_info)) {
                          return cookie;
                      }
                  }
              };
              //returns a list of cookies
              this.getCookies = function getCookies(access_info) {
                  var matches = [], cookie_name, cookie;
                  for (cookie_name in cookies) {
                      cookie = this.getCookie(cookie_name, access_info);
                      if (cookie) {
                          matches.push(cookie);
                      }
                  }
                  matches.toString = function toString() {
                      return matches.join(":");
                  };
                  matches.toValueString = function toValueString() {
                      return matches.map(function (c) {
                          return c.toValueString();
                      }).join('; ');
                  };
                  return matches;
              };

              return this;
          }
          return new CookieJar();
      }
      cookiejar.CookieJar = CookieJar;

      //returns list of cookies that were set correctly. Cookies that are expired and removed are not returned.
      CookieJar.prototype.setCookies = function setCookies(cookies, request_domain, request_path) {
          cookies = Array.isArray(cookies) ?
                  cookies :
                  cookies.split(cookie_str_splitter);
          var successful = [],
              i,
              cookie;
          cookies = cookies.map(function(item){
              return new Cookie(item, request_domain, request_path);
          });
          for (i = 0; i < cookies.length; i += 1) {
              cookie = cookies[i];
              if (this.setCookie(cookie, request_domain, request_path)) {
                  successful.push(cookie);
              }
          }
          return successful;
      };
  }());

  var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var __assign = (commonjsGlobal && commonjsGlobal.__assign) || Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
      }
      return t;
  };
  Object.defineProperty(xmlHttpRequest, "__esModule", { value: true });
  var http = require$$2__default["default"];
  var https = require$$1__default["default"];
  var os = require$$2__default$2["default"];
  var url = require$$6__default["default"];
  var progress_event_1 = progressEvent;
  var errors_1 = errors$3;
  var xml_http_request_event_target_1 = xmlHttpRequestEventTarget;
  var xml_http_request_upload_1 = xmlHttpRequestUpload;
  var Cookie = cookiejar;
  var XMLHttpRequest = /** @class */ (function (_super) {
      __extends(XMLHttpRequest, _super);
      function XMLHttpRequest(options) {
          if (options === void 0) { options = {}; }
          var _this = _super.call(this) || this;
          _this.UNSENT = XMLHttpRequest.UNSENT;
          _this.OPENED = XMLHttpRequest.OPENED;
          _this.HEADERS_RECEIVED = XMLHttpRequest.HEADERS_RECEIVED;
          _this.LOADING = XMLHttpRequest.LOADING;
          _this.DONE = XMLHttpRequest.DONE;
          _this.onreadystatechange = null;
          _this.readyState = XMLHttpRequest.UNSENT;
          _this.response = null;
          _this.responseText = '';
          _this.responseType = '';
          _this.status = 0; // TODO: UNSENT?
          _this.statusText = '';
          _this.timeout = 0;
          _this.upload = new xml_http_request_upload_1.XMLHttpRequestUpload();
          _this.responseUrl = '';
          _this.withCredentials = false;
          _this._method = null;
          _this._url = null;
          _this._sync = false;
          _this._headers = {};
          _this._loweredHeaders = {};
          _this._mimeOverride = null; // TODO: is type right?
          _this._request = null;
          _this._response = null;
          _this._responseParts = null;
          _this._responseHeaders = null;
          _this._aborting = null; // TODO: type?
          _this._error = null; // TODO: type?
          _this._loadedBytes = 0;
          _this._totalBytes = 0;
          _this._lengthComputable = false;
          _this._restrictedMethods = { CONNECT: true, TRACE: true, TRACK: true };
          _this._restrictedHeaders = {
              'accept-charset': true,
              'accept-encoding': true,
              'access-control-request-headers': true,
              'access-control-request-method': true,
              connection: true,
              'content-length': true,
              cookie: true,
              cookie2: true,
              date: true,
              dnt: true,
              expect: true,
              host: true,
              'keep-alive': true,
              origin: true,
              referer: true,
              te: true,
              trailer: true,
              'transfer-encoding': true,
              upgrade: true,
              'user-agent': true,
              via: true
          };
          _this._privateHeaders = { 'set-cookie': true, 'set-cookie2': true };
          _this._userAgent = "Mozilla/5.0 (" + os.type() + " " + os.arch() + ") node.js/" + process.versions.node + " v8/" + process.versions.v8;
          _this._anonymous = options.anon || false;
          return _this;
      }
      XMLHttpRequest.prototype.open = function (method, url, async, user, password) {
          if (async === void 0) { async = true; }
          method = method.toUpperCase();
          if (this._restrictedMethods[method]) {
              throw new XMLHttpRequest.SecurityError("HTTP method " + method + " is not allowed in XHR");
          }
          var xhrUrl = this._parseUrl(url, user, password);
          if (this.readyState === XMLHttpRequest.HEADERS_RECEIVED || this.readyState === XMLHttpRequest.LOADING) ;
          this._method = method;
          this._url = xhrUrl;
          this._sync = !async;
          this._headers = {};
          this._loweredHeaders = {};
          this._mimeOverride = null;
          this._setReadyState(XMLHttpRequest.OPENED);
          this._request = null;
          this._response = null;
          this.status = 0;
          this.statusText = '';
          this._responseParts = [];
          this._responseHeaders = null;
          this._loadedBytes = 0;
          this._totalBytes = 0;
          this._lengthComputable = false;
      };
      XMLHttpRequest.prototype.setRequestHeader = function (name, value) {
          if (this.readyState !== XMLHttpRequest.OPENED) {
              throw new XMLHttpRequest.InvalidStateError('XHR readyState must be OPENED');
          }
          var loweredName = name.toLowerCase();
          if (this._restrictedHeaders[loweredName] || /^sec-/.test(loweredName) || /^proxy-/.test(loweredName)) {
              console.warn("Refused to set unsafe header \"" + name + "\"");
              return;
          }
          value = value.toString();
          if (this._loweredHeaders[loweredName] != null) {
              name = this._loweredHeaders[loweredName];
              this._headers[name] = this._headers[name] + ", " + value;
          }
          else {
              this._loweredHeaders[loweredName] = name;
              this._headers[name] = value;
          }
      };
      XMLHttpRequest.prototype.send = function (data) {
          if (this.readyState !== XMLHttpRequest.OPENED) {
              throw new XMLHttpRequest.InvalidStateError('XHR readyState must be OPENED');
          }
          if (this._request) {
              throw new XMLHttpRequest.InvalidStateError('send() already called');
          }
          switch (this._url.protocol) {
              case 'file:':
                  return this._sendFile(data);
              case 'http:':
              case 'https:':
                  return this._sendHttp(data);
              default:
                  throw new XMLHttpRequest.NetworkError("Unsupported protocol " + this._url.protocol);
          }
      };
      XMLHttpRequest.prototype.abort = function () {
          if (this._request == null) {
              return;
          }
          this._request.abort();
          this._setError();
          this._dispatchProgress('abort');
          this._dispatchProgress('loadend');
      };
      XMLHttpRequest.prototype.getResponseHeader = function (name) {
          if (this._responseHeaders == null || name == null) {
              return null;
          }
          var loweredName = name.toLowerCase();
          return this._responseHeaders.hasOwnProperty(loweredName)
              ? this._responseHeaders[name.toLowerCase()]
              : null;
      };
      XMLHttpRequest.prototype.getAllResponseHeaders = function () {
          var _this = this;
          if (this._responseHeaders == null) {
              return '';
          }
          return Object.keys(this._responseHeaders).map(function (key) { return key + ": " + _this._responseHeaders[key]; }).join('\r\n');
      };
      XMLHttpRequest.prototype.overrideMimeType = function (mimeType) {
          if (this.readyState === XMLHttpRequest.LOADING || this.readyState === XMLHttpRequest.DONE) {
              throw new XMLHttpRequest.InvalidStateError('overrideMimeType() not allowed in LOADING or DONE');
          }
          this._mimeOverride = mimeType.toLowerCase();
      };
      XMLHttpRequest.prototype.nodejsSet = function (options) {
          this.nodejsHttpAgent = options.httpAgent || this.nodejsHttpAgent;
          this.nodejsHttpsAgent = options.httpsAgent || this.nodejsHttpsAgent;
          if (options.hasOwnProperty('baseUrl')) {
              if (options.baseUrl != null) {
                  var parsedUrl = url.parse(options.baseUrl, false, true);
                  if (!parsedUrl.protocol) {
                      throw new XMLHttpRequest.SyntaxError("baseUrl must be an absolute URL");
                  }
              }
              this.nodejsBaseUrl = options.baseUrl;
          }
      };
      XMLHttpRequest.nodejsSet = function (options) {
          XMLHttpRequest.prototype.nodejsSet(options);
      };
      XMLHttpRequest.prototype._setReadyState = function (readyState) {
          this.readyState = readyState;
          this.dispatchEvent(new progress_event_1.ProgressEvent('readystatechange'));
      };
      XMLHttpRequest.prototype._sendFile = function (data) {
          // TODO
          throw new Error('Protocol file: not implemented');
      };
      XMLHttpRequest.prototype._sendHttp = function (data) {
          if (this._sync) {
              throw new Error('Synchronous XHR processing not implemented');
          }
          if (data && (this._method === 'GET' || this._method === 'HEAD')) {
              console.warn("Discarding entity body for " + this._method + " requests");
              data = null;
          }
          else {
              data = data || '';
          }
          this.upload._setData(data);
          this._finalizeHeaders();
          this._sendHxxpRequest();
      };
      XMLHttpRequest.prototype._sendHxxpRequest = function () {
          var _this = this;
          if (this.withCredentials) {
              var cookie = XMLHttpRequest.cookieJar
                  .getCookies(Cookie.CookieAccessInfo(this._url.hostname, this._url.pathname, this._url.protocol === 'https:')).toValueString();
              this._headers.cookie = this._headers.cookie2 = cookie;
          }
          var _a = this._url.protocol === 'http:' ? [http, this.nodejsHttpAgent] : [https, this.nodejsHttpsAgent], hxxp = _a[0], agent = _a[1];
          var requestMethod = hxxp.request.bind(hxxp);
          var request = requestMethod({
              hostname: this._url.hostname,
              port: +this._url.port,
              path: this._url.path,
              auth: this._url.auth,
              method: this._method,
              headers: this._headers,
              agent: agent
          });
          this._request = request;
          if (this.timeout) {
              request.setTimeout(this.timeout, function () { return _this._onHttpTimeout(request); });
          }
          request.on('response', function (response) { return _this._onHttpResponse(request, response); });
          request.on('error', function (error) { return _this._onHttpRequestError(request, error); });
          this.upload._startUpload(request);
          if (this._request === request) {
              this._dispatchProgress('loadstart');
          }
      };
      XMLHttpRequest.prototype._finalizeHeaders = function () {
          this._headers = __assign({}, this._headers, { Connection: 'keep-alive', Host: this._url.host, 'User-Agent': this._userAgent }, this._anonymous ? { Referer: 'about:blank' } : {});
          this.upload._finalizeHeaders(this._headers, this._loweredHeaders);
      };
      XMLHttpRequest.prototype._onHttpResponse = function (request, response) {
          var _this = this;
          if (this._request !== request) {
              return;
          }
          if (this.withCredentials && (response.headers['set-cookie'] || response.headers['set-cookie2'])) {
              XMLHttpRequest.cookieJar
                  .setCookies(response.headers['set-cookie'] || response.headers['set-cookie2']);
          }
          if ([301, 302, 303, 307, 308].indexOf(response.statusCode) >= 0) {
              this._url = this._parseUrl(response.headers.location);
              this._method = 'GET';
              if (this._loweredHeaders['content-type']) {
                  delete this._headers[this._loweredHeaders['content-type']];
                  delete this._loweredHeaders['content-type'];
              }
              if (this._headers['Content-Type'] != null) {
                  delete this._headers['Content-Type'];
              }
              delete this._headers['Content-Length'];
              this.upload._reset();
              this._finalizeHeaders();
              this._sendHxxpRequest();
              return;
          }
          this._response = response;
          this._response.on('data', function (data) { return _this._onHttpResponseData(response, data); });
          this._response.on('end', function () { return _this._onHttpResponseEnd(response); });
          this._response.on('close', function () { return _this._onHttpResponseClose(response); });
          this.responseUrl = this._url.href.split('#')[0];
          this.status = response.statusCode;
          this.statusText = http.STATUS_CODES[this.status];
          this._parseResponseHeaders(response);
          var lengthString = this._responseHeaders['content-length'] || '';
          this._totalBytes = +lengthString;
          this._lengthComputable = !!lengthString;
          this._setReadyState(XMLHttpRequest.HEADERS_RECEIVED);
      };
      XMLHttpRequest.prototype._onHttpResponseData = function (response, data) {
          if (this._response !== response) {
              return;
          }
          this._responseParts.push(new Buffer(data));
          this._loadedBytes += data.length;
          if (this.readyState !== XMLHttpRequest.LOADING) {
              this._setReadyState(XMLHttpRequest.LOADING);
          }
          this._dispatchProgress('progress');
      };
      XMLHttpRequest.prototype._onHttpResponseEnd = function (response) {
          if (this._response !== response) {
              return;
          }
          this._parseResponse();
          this._request = null;
          this._response = null;
          this._setReadyState(XMLHttpRequest.DONE);
          this._dispatchProgress('load');
          this._dispatchProgress('loadend');
      };
      XMLHttpRequest.prototype._onHttpResponseClose = function (response) {
          if (this._response !== response) {
              return;
          }
          var request = this._request;
          this._setError();
          request.abort();
          this._setReadyState(XMLHttpRequest.DONE);
          this._dispatchProgress('error');
          this._dispatchProgress('loadend');
      };
      XMLHttpRequest.prototype._onHttpTimeout = function (request) {
          if (this._request !== request) {
              return;
          }
          this._setError();
          request.abort();
          this._setReadyState(XMLHttpRequest.DONE);
          this._dispatchProgress('timeout');
          this._dispatchProgress('loadend');
      };
      XMLHttpRequest.prototype._onHttpRequestError = function (request, error) {
          if (this._request !== request) {
              return;
          }
          this._setError();
          request.abort();
          this._setReadyState(XMLHttpRequest.DONE);
          this._dispatchProgress('error');
          this._dispatchProgress('loadend');
      };
      XMLHttpRequest.prototype._dispatchProgress = function (eventType) {
          var event = new XMLHttpRequest.ProgressEvent(eventType);
          event.lengthComputable = this._lengthComputable;
          event.loaded = this._loadedBytes;
          event.total = this._totalBytes;
          this.dispatchEvent(event);
      };
      XMLHttpRequest.prototype._setError = function () {
          this._request = null;
          this._response = null;
          this._responseHeaders = null;
          this._responseParts = null;
      };
      XMLHttpRequest.prototype._parseUrl = function (urlString, user, password) {
          var absoluteUrl = this.nodejsBaseUrl == null ? urlString : url.resolve(this.nodejsBaseUrl, urlString);
          var xhrUrl = url.parse(absoluteUrl, false, true);
          xhrUrl.hash = null;
          var _a = (xhrUrl.auth || '').split(':'), xhrUser = _a[0], xhrPassword = _a[1];
          if (xhrUser || xhrPassword || user || password) {
              xhrUrl.auth = (user || xhrUser || '') + ":" + (password || xhrPassword || '');
          }
          return xhrUrl;
      };
      XMLHttpRequest.prototype._parseResponseHeaders = function (response) {
          this._responseHeaders = {};
          for (var name_1 in response.headers) {
              var loweredName = name_1.toLowerCase();
              if (this._privateHeaders[loweredName]) {
                  continue;
              }
              this._responseHeaders[loweredName] = response.headers[name_1];
          }
          if (this._mimeOverride != null) {
              this._responseHeaders['content-type'] = this._mimeOverride;
          }
      };
      XMLHttpRequest.prototype._parseResponse = function () {
          var buffer = Buffer.concat(this._responseParts);
          this._responseParts = null;
          switch (this.responseType) {
              case 'json':
                  this.responseText = null;
                  try {
                      this.response = JSON.parse(buffer.toString('utf-8'));
                  }
                  catch (_a) {
                      this.response = null;
                  }
                  return;
              case 'buffer':
                  this.responseText = null;
                  this.response = buffer;
                  return;
              case 'arraybuffer':
                  this.responseText = null;
                  var arrayBuffer = new ArrayBuffer(buffer.length);
                  var view = new Uint8Array(arrayBuffer);
                  for (var i = 0; i < buffer.length; i++) {
                      view[i] = buffer[i];
                  }
                  this.response = arrayBuffer;
                  return;
              case 'text':
              default:
                  try {
                      this.responseText = buffer.toString(this._parseResponseEncoding());
                  }
                  catch (_b) {
                      this.responseText = buffer.toString('binary');
                  }
                  this.response = this.responseText;
          }
      };
      XMLHttpRequest.prototype._parseResponseEncoding = function () {
          return /;\s*charset=(.*)$/.exec(this._responseHeaders['content-type'] || '')[1] || 'utf-8';
      };
      XMLHttpRequest.ProgressEvent = progress_event_1.ProgressEvent;
      XMLHttpRequest.InvalidStateError = errors_1.InvalidStateError;
      XMLHttpRequest.NetworkError = errors_1.NetworkError;
      XMLHttpRequest.SecurityError = errors_1.SecurityError;
      XMLHttpRequest.SyntaxError = errors_1.SyntaxError;
      XMLHttpRequest.XMLHttpRequestUpload = xml_http_request_upload_1.XMLHttpRequestUpload;
      XMLHttpRequest.UNSENT = 0;
      XMLHttpRequest.OPENED = 1;
      XMLHttpRequest.HEADERS_RECEIVED = 2;
      XMLHttpRequest.LOADING = 3;
      XMLHttpRequest.DONE = 4;
      XMLHttpRequest.cookieJar = Cookie.CookieJar();
      return XMLHttpRequest;
  }(xml_http_request_event_target_1.XMLHttpRequestEventTarget));
  xmlHttpRequest.XMLHttpRequest = XMLHttpRequest;
  XMLHttpRequest.prototype.nodejsHttpAgent = http.globalAgent;
  XMLHttpRequest.prototype.nodejsHttpsAgent = https.globalAgent;
  XMLHttpRequest.prototype.nodejsBaseUrl = null;

  (function (exports) {
  function __export(m) {
      for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
  }
  Object.defineProperty(exports, "__esModule", { value: true });
  __export(xmlHttpRequest);
  var xml_http_request_event_target_1 = xmlHttpRequestEventTarget;
  exports.XMLHttpRequestEventTarget = xml_http_request_event_target_1.XMLHttpRequestEventTarget;

  }(dist$5));

  Object.defineProperty(cjs, "__esModule", { value: true });
  const tslib_1$4 = require$$0$1;
  const eventemitter3_1 = (0, tslib_1$4.__importDefault)(eventemitter3.exports);
  const xhr2_cookies_1 = dist$5;
  const utils_1$2 = cjs$9;
  const XHR = (0, utils_1$2.getFromWindow)("XMLHttpRequest") || xhr2_cookies_1.XMLHttpRequest;
  class HTTPConnection extends eventemitter3_1.default {
      constructor(url) {
          super();
          this.url = url;
      }
      formatError(payload, message, code = -1) {
          return {
              error: { message, code },
              id: payload.id,
              jsonrpc: payload.jsonrpc,
          };
      }
      send(payload, internal) {
          return new Promise(resolve => {
              if (payload.method === "eth_subscribe") {
                  const error = this.formatError(payload, "Subscriptions are not supported by this HTTP endpoint");
                  this.emit("error", error);
                  return resolve(error);
              }
              const xhr = new XHR();
              let responded = false;
              const res = (err, result) => {
                  if (!responded) {
                      xhr.abort();
                      responded = true;
                      if (internal) {
                          internal(err, result);
                      }
                      else {
                          const { id, jsonrpc } = payload;
                          const response = err
                              ? { id, jsonrpc, error: { message: err.message, code: err.code } }
                              : { id, jsonrpc, result };
                          this.emit("payload", response);
                          resolve(response);
                      }
                  }
              };
              xhr.open("POST", this.url, true);
              xhr.setRequestHeader("Content-Type", "application/json");
              xhr.timeout = 60 * 1000;
              xhr.onerror = res;
              xhr.ontimeout = res;
              xhr.onreadystatechange = () => {
                  if (xhr.readyState === 4) {
                      try {
                          const response = JSON.parse(xhr.responseText);
                          res(response.error, response.result);
                      }
                      catch (e) {
                          res(e);
                      }
                  }
              };
              xhr.send(JSON.stringify(payload));
          });
      }
  }
  cjs.default = HTTPConnection;

  var dist$4 = {};

  var keccak$3 = {};

  var hashUtils = {};

  Object.defineProperty(hashUtils, "__esModule", { value: true });
  function createHashFunction(hashConstructor) {
      return function (msg) {
          var hash = hashConstructor();
          hash.update(msg);
          return Buffer.from(hash.digest());
      };
  }
  hashUtils.createHashFunction = createHashFunction;

  var keccak$2 = {exports: {}};

  var readable = {exports: {}};

  var stream = require$$0__default$1["default"];

  function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty$2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty$2(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var _require$2 = require$$2__default$1["default"],
      Buffer$4 = _require$2.Buffer;

  var _require2 = require$$0__default$4["default"],
      inspect = _require2.inspect;

  var custom = inspect && inspect.custom || 'inspect';

  function copyBuffer(src, target, offset) {
    Buffer$4.prototype.copy.call(src, target, offset);
  }

  var buffer_list =
  /*#__PURE__*/
  function () {
    function BufferList() {
      _classCallCheck$1(this, BufferList);

      this.head = null;
      this.tail = null;
      this.length = 0;
    }

    _createClass(BufferList, [{
      key: "push",
      value: function push(v) {
        var entry = {
          data: v,
          next: null
        };
        if (this.length > 0) this.tail.next = entry;else this.head = entry;
        this.tail = entry;
        ++this.length;
      }
    }, {
      key: "unshift",
      value: function unshift(v) {
        var entry = {
          data: v,
          next: this.head
        };
        if (this.length === 0) this.tail = entry;
        this.head = entry;
        ++this.length;
      }
    }, {
      key: "shift",
      value: function shift() {
        if (this.length === 0) return;
        var ret = this.head.data;
        if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
        --this.length;
        return ret;
      }
    }, {
      key: "clear",
      value: function clear() {
        this.head = this.tail = null;
        this.length = 0;
      }
    }, {
      key: "join",
      value: function join(s) {
        if (this.length === 0) return '';
        var p = this.head;
        var ret = '' + p.data;

        while (p = p.next) {
          ret += s + p.data;
        }

        return ret;
      }
    }, {
      key: "concat",
      value: function concat(n) {
        if (this.length === 0) return Buffer$4.alloc(0);
        var ret = Buffer$4.allocUnsafe(n >>> 0);
        var p = this.head;
        var i = 0;

        while (p) {
          copyBuffer(p.data, ret, i);
          i += p.data.length;
          p = p.next;
        }

        return ret;
      } // Consumes a specified amount of bytes or characters from the buffered data.

    }, {
      key: "consume",
      value: function consume(n, hasStrings) {
        var ret;

        if (n < this.head.data.length) {
          // `slice` is the same for buffers and strings.
          ret = this.head.data.slice(0, n);
          this.head.data = this.head.data.slice(n);
        } else if (n === this.head.data.length) {
          // First chunk is a perfect match.
          ret = this.shift();
        } else {
          // Result spans more than one buffer.
          ret = hasStrings ? this._getString(n) : this._getBuffer(n);
        }

        return ret;
      }
    }, {
      key: "first",
      value: function first() {
        return this.head.data;
      } // Consumes a specified amount of characters from the buffered data.

    }, {
      key: "_getString",
      value: function _getString(n) {
        var p = this.head;
        var c = 1;
        var ret = p.data;
        n -= ret.length;

        while (p = p.next) {
          var str = p.data;
          var nb = n > str.length ? str.length : n;
          if (nb === str.length) ret += str;else ret += str.slice(0, n);
          n -= nb;

          if (n === 0) {
            if (nb === str.length) {
              ++c;
              if (p.next) this.head = p.next;else this.head = this.tail = null;
            } else {
              this.head = p;
              p.data = str.slice(nb);
            }

            break;
          }

          ++c;
        }

        this.length -= c;
        return ret;
      } // Consumes a specified amount of bytes from the buffered data.

    }, {
      key: "_getBuffer",
      value: function _getBuffer(n) {
        var ret = Buffer$4.allocUnsafe(n);
        var p = this.head;
        var c = 1;
        p.data.copy(ret);
        n -= p.data.length;

        while (p = p.next) {
          var buf = p.data;
          var nb = n > buf.length ? buf.length : n;
          buf.copy(ret, ret.length - n, 0, nb);
          n -= nb;

          if (n === 0) {
            if (nb === buf.length) {
              ++c;
              if (p.next) this.head = p.next;else this.head = this.tail = null;
            } else {
              this.head = p;
              p.data = buf.slice(nb);
            }

            break;
          }

          ++c;
        }

        this.length -= c;
        return ret;
      } // Make sure the linked list only shows the minimal necessary information.

    }, {
      key: custom,
      value: function value(_, options) {
        return inspect(this, _objectSpread$1({}, options, {
          // Only inspect one level.
          depth: 0,
          // It should not recurse.
          customInspect: false
        }));
      }
    }]);

    return BufferList;
  }();

  function destroy(err, cb) {
    var _this = this;

    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;

    if (readableDestroyed || writableDestroyed) {
      if (cb) {
        cb(err);
      } else if (err) {
        if (!this._writableState) {
          process.nextTick(emitErrorNT, this, err);
        } else if (!this._writableState.errorEmitted) {
          this._writableState.errorEmitted = true;
          process.nextTick(emitErrorNT, this, err);
        }
      }

      return this;
    } // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks


    if (this._readableState) {
      this._readableState.destroyed = true;
    } // if this is a duplex stream mark the writable part as destroyed as well


    if (this._writableState) {
      this._writableState.destroyed = true;
    }

    this._destroy(err || null, function (err) {
      if (!cb && err) {
        if (!_this._writableState) {
          process.nextTick(emitErrorAndCloseNT, _this, err);
        } else if (!_this._writableState.errorEmitted) {
          _this._writableState.errorEmitted = true;
          process.nextTick(emitErrorAndCloseNT, _this, err);
        } else {
          process.nextTick(emitCloseNT, _this);
        }
      } else if (cb) {
        process.nextTick(emitCloseNT, _this);
        cb(err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    });

    return this;
  }

  function emitErrorAndCloseNT(self, err) {
    emitErrorNT(self, err);
    emitCloseNT(self);
  }

  function emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit('close');
  }

  function undestroy() {
    if (this._readableState) {
      this._readableState.destroyed = false;
      this._readableState.reading = false;
      this._readableState.ended = false;
      this._readableState.endEmitted = false;
    }

    if (this._writableState) {
      this._writableState.destroyed = false;
      this._writableState.ended = false;
      this._writableState.ending = false;
      this._writableState.finalCalled = false;
      this._writableState.prefinished = false;
      this._writableState.finished = false;
      this._writableState.errorEmitted = false;
    }
  }

  function emitErrorNT(self, err) {
    self.emit('error', err);
  }

  function errorOrDestroy$2(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
  }

  var destroy_1 = {
    destroy: destroy,
    undestroy: undestroy,
    errorOrDestroy: errorOrDestroy$2
  };

  var errors$2 = {};

  const codes = {};

  function createErrorType(code, message, Base) {
    if (!Base) {
      Base = Error;
    }

    function getMessage (arg1, arg2, arg3) {
      if (typeof message === 'string') {
        return message
      } else {
        return message(arg1, arg2, arg3)
      }
    }

    class NodeError extends Base {
      constructor (arg1, arg2, arg3) {
        super(getMessage(arg1, arg2, arg3));
      }
    }

    NodeError.prototype.name = Base.name;
    NodeError.prototype.code = code;

    codes[code] = NodeError;
  }

  // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
  function oneOf(expected, thing) {
    if (Array.isArray(expected)) {
      const len = expected.length;
      expected = expected.map((i) => String(i));
      if (len > 2) {
        return `one of ${thing} ${expected.slice(0, len - 1).join(', ')}, or ` +
               expected[len - 1];
      } else if (len === 2) {
        return `one of ${thing} ${expected[0]} or ${expected[1]}`;
      } else {
        return `of ${thing} ${expected[0]}`;
      }
    } else {
      return `of ${thing} ${String(expected)}`;
    }
  }

  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
  function startsWith(str, search, pos) {
  	return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
  }

  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
  function endsWith(str, search, this_len) {
  	if (this_len === undefined || this_len > str.length) {
  		this_len = str.length;
  	}
  	return str.substring(this_len - search.length, this_len) === search;
  }

  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
  function includes(str, search, start) {
    if (typeof start !== 'number') {
      start = 0;
    }

    if (start + search.length > str.length) {
      return false;
    } else {
      return str.indexOf(search, start) !== -1;
    }
  }

  createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"'
  }, TypeError);
  createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    let determiner;
    if (typeof expected === 'string' && startsWith(expected, 'not ')) {
      determiner = 'must not be';
      expected = expected.replace(/^not /, '');
    } else {
      determiner = 'must be';
    }

    let msg;
    if (endsWith(name, ' argument')) {
      // For cases like 'first argument'
      msg = `The ${name} ${determiner} ${oneOf(expected, 'type')}`;
    } else {
      const type = includes(name, '.') ? 'property' : 'argument';
      msg = `The "${name}" ${type} ${determiner} ${oneOf(expected, 'type')}`;
    }

    msg += `. Received type ${typeof actual}`;
    return msg;
  }, TypeError);
  createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
  createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
    return 'The ' + name + ' method is not implemented'
  });
  createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
  createErrorType('ERR_STREAM_DESTROYED', function (name) {
    return 'Cannot call ' + name + ' after a stream was destroyed';
  });
  createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
  createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
  createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
  createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
  createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
    return 'Unknown encoding: ' + arg
  }, TypeError);
  createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');

  errors$2.codes = codes;

  var ERR_INVALID_OPT_VALUE = errors$2.codes.ERR_INVALID_OPT_VALUE;

  function highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
  }

  function getHighWaterMark$2(state, options, duplexKey, isDuplex) {
    var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

    if (hwm != null) {
      if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
        var name = isDuplex ? duplexKey : 'highWaterMark';
        throw new ERR_INVALID_OPT_VALUE(name, hwm);
      }

      return Math.floor(hwm);
    } // Default value


    return state.objectMode ? 16 : 16 * 1024;
  }

  var state = {
    getHighWaterMark: getHighWaterMark$2
  };

  var inherits$9 = {exports: {}};

  var inherits_browser = {exports: {}};

  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    inherits_browser.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      }
    };
  } else {
    // old school shim for old browsers
    inherits_browser.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
    };
  }

  try {
    var util$1 = require('util');
    /* istanbul ignore next */
    if (typeof util$1.inherits !== 'function') throw '';
    inherits$9.exports = util$1.inherits;
  } catch (e) {
    /* istanbul ignore next */
    inherits$9.exports = inherits_browser.exports;
  }

  /**
   * For Node.js, simply re-export the core `util.deprecate` function.
   */

  var node = require$$0__default$4["default"].deprecate;

  var _stream_writable = Writable$1;
  // there will be only 2 of these for each stream


  function CorkedRequest(state) {
    var _this = this;

    this.next = null;
    this.entry = null;

    this.finish = function () {
      onCorkedFinish(_this, state);
    };
  }
  /* </replacement> */

  /*<replacement>*/


  var Duplex$3;
  /*</replacement>*/

  Writable$1.WritableState = WritableState;
  /*<replacement>*/

  var internalUtil = {
    deprecate: node
  };
  /*</replacement>*/

  /*<replacement>*/

  var Stream$1 = stream;
  /*</replacement>*/


  var Buffer$3 = require$$2__default$1["default"].Buffer;

  var OurUint8Array$1 = commonjsGlobal.Uint8Array || function () {};

  function _uint8ArrayToBuffer$1(chunk) {
    return Buffer$3.from(chunk);
  }

  function _isUint8Array$1(obj) {
    return Buffer$3.isBuffer(obj) || obj instanceof OurUint8Array$1;
  }

  var destroyImpl$1 = destroy_1;

  var _require$1 = state,
      getHighWaterMark$1 = _require$1.getHighWaterMark;

  var _require$codes$3 = errors$2.codes,
      ERR_INVALID_ARG_TYPE$2 = _require$codes$3.ERR_INVALID_ARG_TYPE,
      ERR_METHOD_NOT_IMPLEMENTED$2 = _require$codes$3.ERR_METHOD_NOT_IMPLEMENTED,
      ERR_MULTIPLE_CALLBACK$1 = _require$codes$3.ERR_MULTIPLE_CALLBACK,
      ERR_STREAM_CANNOT_PIPE = _require$codes$3.ERR_STREAM_CANNOT_PIPE,
      ERR_STREAM_DESTROYED$1 = _require$codes$3.ERR_STREAM_DESTROYED,
      ERR_STREAM_NULL_VALUES = _require$codes$3.ERR_STREAM_NULL_VALUES,
      ERR_STREAM_WRITE_AFTER_END = _require$codes$3.ERR_STREAM_WRITE_AFTER_END,
      ERR_UNKNOWN_ENCODING = _require$codes$3.ERR_UNKNOWN_ENCODING;

  var errorOrDestroy$1 = destroyImpl$1.errorOrDestroy;

  inherits$9.exports(Writable$1, Stream$1);

  function nop() {}

  function WritableState(options, stream, isDuplex) {
    Duplex$3 = Duplex$3 || _stream_duplex;
    options = options || {}; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex$3; // object stream flag to indicate whether or not this stream
    // contains buffers or objects.

    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()

    this.highWaterMark = getHighWaterMark$1(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

    this.finalCalled = false; // drain event flag.

    this.needDrain = false; // at the start of calling end()

    this.ending = false; // when end() has been called, and returned

    this.ended = false; // when 'finish' is emitted

    this.finished = false; // has it been destroyed

    this.destroyed = false; // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.

    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.

    this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.

    this.length = 0; // a flag to see when we're in the middle of a write.

    this.writing = false; // when true all writes will be buffered until .uncork() call

    this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.

    this.sync = true; // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.

    this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

    this.onwrite = function (er) {
      onwrite(stream, er);
    }; // the callback that the user supplies to write(chunk,encoding,cb)


    this.writecb = null; // the amount that is being written when _write is called.

    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted

    this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams

    this.prefinished = false; // True if the error was already emitted and should not be thrown again

    this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

    this.autoDestroy = !!options.autoDestroy; // count buffered requests

    this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two

    this.corkedRequestsFree = new CorkedRequest(this);
  }

  WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];

    while (current) {
      out.push(current);
      current = current.next;
    }

    return out;
  };

  (function () {
    try {
      Object.defineProperty(WritableState.prototype, 'buffer', {
        get: internalUtil.deprecate(function writableStateBufferGetter() {
          return this.getBuffer();
        }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
      });
    } catch (_) {}
  })(); // Test _writableState for inheritance to account for Duplex streams,
  // whose prototype chain only points to Readable.


  var realHasInstance;

  if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable$1, Symbol.hasInstance, {
      value: function value(object) {
        if (realHasInstance.call(this, object)) return true;
        if (this !== Writable$1) return false;
        return object && object._writableState instanceof WritableState;
      }
    });
  } else {
    realHasInstance = function realHasInstance(object) {
      return object instanceof this;
    };
  }

  function Writable$1(options) {
    Duplex$3 = Duplex$3 || _stream_duplex; // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5

    var isDuplex = this instanceof Duplex$3;
    if (!isDuplex && !realHasInstance.call(Writable$1, this)) return new Writable$1(options);
    this._writableState = new WritableState(options, this, isDuplex); // legacy.

    this.writable = true;

    if (options) {
      if (typeof options.write === 'function') this._write = options.write;
      if (typeof options.writev === 'function') this._writev = options.writev;
      if (typeof options.destroy === 'function') this._destroy = options.destroy;
      if (typeof options.final === 'function') this._final = options.final;
    }

    Stream$1.call(this);
  } // Otherwise people can pipe Writable streams, which is just wrong.


  Writable$1.prototype.pipe = function () {
    errorOrDestroy$1(this, new ERR_STREAM_CANNOT_PIPE());
  };

  function writeAfterEnd(stream, cb) {
    var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

    errorOrDestroy$1(stream, er);
    process.nextTick(cb, er);
  } // Checks that a user-supplied chunk is valid, especially for the particular
  // mode the stream is in. Currently this means that `null` is never accepted
  // and undefined/non-string values are only allowed in object mode.


  function validChunk(stream, state, chunk, cb) {
    var er;

    if (chunk === null) {
      er = new ERR_STREAM_NULL_VALUES();
    } else if (typeof chunk !== 'string' && !state.objectMode) {
      er = new ERR_INVALID_ARG_TYPE$2('chunk', ['string', 'Buffer'], chunk);
    }

    if (er) {
      errorOrDestroy$1(stream, er);
      process.nextTick(cb, er);
      return false;
    }

    return true;
  }

  Writable$1.prototype.write = function (chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;

    var isBuf = !state.objectMode && _isUint8Array$1(chunk);

    if (isBuf && !Buffer$3.isBuffer(chunk)) {
      chunk = _uint8ArrayToBuffer$1(chunk);
    }

    if (typeof encoding === 'function') {
      cb = encoding;
      encoding = null;
    }

    if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== 'function') cb = nop;
    if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
      state.pendingcb++;
      ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
  };

  Writable$1.prototype.cork = function () {
    this._writableState.corked++;
  };

  Writable$1.prototype.uncork = function () {
    var state = this._writableState;

    if (state.corked) {
      state.corked--;
      if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    }
  };

  Writable$1.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
    if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
  };

  Object.defineProperty(Writable$1.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      return this._writableState && this._writableState.getBuffer();
    }
  });

  function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
      chunk = Buffer$3.from(chunk, encoding);
    }

    return chunk;
  }

  Object.defineProperty(Writable$1.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      return this._writableState.highWaterMark;
    }
  }); // if we're already writing something, then just put this
  // in the queue, and wait our turn.  Otherwise, call _write
  // If we return false, then we need a drain event, so set that flag.

  function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
      var newChunk = decodeChunk(state, chunk, encoding);

      if (chunk !== newChunk) {
        isBuf = true;
        encoding = 'buffer';
        chunk = newChunk;
      }
    }

    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

    if (!ret) state.needDrain = true;

    if (state.writing || state.corked) {
      var last = state.lastBufferedRequest;
      state.lastBufferedRequest = {
        chunk: chunk,
        encoding: encoding,
        isBuf: isBuf,
        callback: cb,
        next: null
      };

      if (last) {
        last.next = state.lastBufferedRequest;
      } else {
        state.bufferedRequest = state.lastBufferedRequest;
      }

      state.bufferedRequestCount += 1;
    } else {
      doWrite(stream, state, false, len, chunk, encoding, cb);
    }

    return ret;
  }

  function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED$1('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
  }

  function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;

    if (sync) {
      // defer the callback if we are being called synchronously
      // to avoid piling up things on the stack
      process.nextTick(cb, er); // this can emit finish, and it will always happen
      // after error

      process.nextTick(finishMaybe, stream, state);
      stream._writableState.errorEmitted = true;
      errorOrDestroy$1(stream, er);
    } else {
      // the caller expect this to happen before if
      // it is async
      cb(er);
      stream._writableState.errorEmitted = true;
      errorOrDestroy$1(stream, er); // this can emit finish, but finish must
      // always follow error

      finishMaybe(stream, state);
    }
  }

  function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
  }

  function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK$1();
    onwriteStateUpdate(state);
    if (er) onwriteError(stream, state, sync, er, cb);else {
      // Check if we're actually ready to finish, but don't emit yet
      var finished = needFinish(state) || stream.destroyed;

      if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
        clearBuffer(stream, state);
      }

      if (sync) {
        process.nextTick(afterWrite, stream, state, finished, cb);
      } else {
        afterWrite(stream, state, finished, cb);
      }
    }
  }

  function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
  } // Must force callback to be called on nextTick, so that we don't
  // emit 'drain' before the write() consumer gets the 'false' return
  // value, and has a chance to attach a 'drain' listener.


  function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
      state.needDrain = false;
      stream.emit('drain');
    }
  } // if there's something in the buffer waiting, then process it


  function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;

    if (stream._writev && entry && entry.next) {
      // Fast case, write everything using _writev()
      var l = state.bufferedRequestCount;
      var buffer = new Array(l);
      var holder = state.corkedRequestsFree;
      holder.entry = entry;
      var count = 0;
      var allBuffers = true;

      while (entry) {
        buffer[count] = entry;
        if (!entry.isBuf) allBuffers = false;
        entry = entry.next;
        count += 1;
      }

      buffer.allBuffers = allBuffers;
      doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
      // as the hot path ends with doWrite

      state.pendingcb++;
      state.lastBufferedRequest = null;

      if (holder.next) {
        state.corkedRequestsFree = holder.next;
        holder.next = null;
      } else {
        state.corkedRequestsFree = new CorkedRequest(state);
      }

      state.bufferedRequestCount = 0;
    } else {
      // Slow case, write chunks one-by-one
      while (entry) {
        var chunk = entry.chunk;
        var encoding = entry.encoding;
        var cb = entry.callback;
        var len = state.objectMode ? 1 : chunk.length;
        doWrite(stream, state, false, len, chunk, encoding, cb);
        entry = entry.next;
        state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
        // it means that we need to wait until it does.
        // also, that means that the chunk and cb are currently
        // being processed, so move the buffer counter past them.

        if (state.writing) {
          break;
        }
      }

      if (entry === null) state.lastBufferedRequest = null;
    }

    state.bufferedRequest = entry;
    state.bufferProcessing = false;
  }

  Writable$1.prototype._write = function (chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED$2('_write()'));
  };

  Writable$1.prototype._writev = null;

  Writable$1.prototype.end = function (chunk, encoding, cb) {
    var state = this._writableState;

    if (typeof chunk === 'function') {
      cb = chunk;
      chunk = null;
      encoding = null;
    } else if (typeof encoding === 'function') {
      cb = encoding;
      encoding = null;
    }

    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

    if (state.corked) {
      state.corked = 1;
      this.uncork();
    } // ignore unnecessary end() calls.


    if (!state.ending) endWritable(this, state, cb);
    return this;
  };

  Object.defineProperty(Writable$1.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      return this._writableState.length;
    }
  });

  function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
  }

  function callFinal(stream, state) {
    stream._final(function (err) {
      state.pendingcb--;

      if (err) {
        errorOrDestroy$1(stream, err);
      }

      state.prefinished = true;
      stream.emit('prefinish');
      finishMaybe(stream, state);
    });
  }

  function prefinish$1(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
      if (typeof stream._final === 'function' && !state.destroyed) {
        state.pendingcb++;
        state.finalCalled = true;
        process.nextTick(callFinal, stream, state);
      } else {
        state.prefinished = true;
        stream.emit('prefinish');
      }
    }
  }

  function finishMaybe(stream, state) {
    var need = needFinish(state);

    if (need) {
      prefinish$1(stream, state);

      if (state.pendingcb === 0) {
        state.finished = true;
        stream.emit('finish');

        if (state.autoDestroy) {
          // In case of duplex streams we need a way to detect
          // if the readable side is ready for autoDestroy as well
          var rState = stream._readableState;

          if (!rState || rState.autoDestroy && rState.endEmitted) {
            stream.destroy();
          }
        }
      }
    }

    return need;
  }

  function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);

    if (cb) {
      if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
    }

    state.ended = true;
    stream.writable = false;
  }

  function onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;

    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    } // reuse the free corkReq.


    state.corkedRequestsFree.next = corkReq;
  }

  Object.defineProperty(Writable$1.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      if (this._writableState === undefined) {
        return false;
      }

      return this._writableState.destroyed;
    },
    set: function set(value) {
      // we ignore the value if the stream
      // has not been initialized yet
      if (!this._writableState) {
        return;
      } // backward compatibility, the user is explicitly
      // managing destroyed


      this._writableState.destroyed = value;
    }
  });
  Writable$1.prototype.destroy = destroyImpl$1.destroy;
  Writable$1.prototype._undestroy = destroyImpl$1.undestroy;

  Writable$1.prototype._destroy = function (err, cb) {
    cb(err);
  };

  /*<replacement>*/

  var objectKeys$1 = Object.keys || function (obj) {
    var keys = [];

    for (var key in obj) {
      keys.push(key);
    }

    return keys;
  };
  /*</replacement>*/


  var _stream_duplex = Duplex$2;

  var Readable$1 = _stream_readable;

  var Writable = _stream_writable;

  inherits$9.exports(Duplex$2, Readable$1);

  {
    // Allow the keys array to be GC'ed.
    var keys$1 = objectKeys$1(Writable.prototype);

    for (var v = 0; v < keys$1.length; v++) {
      var method = keys$1[v];
      if (!Duplex$2.prototype[method]) Duplex$2.prototype[method] = Writable.prototype[method];
    }
  }

  function Duplex$2(options) {
    if (!(this instanceof Duplex$2)) return new Duplex$2(options);
    Readable$1.call(this, options);
    Writable.call(this, options);
    this.allowHalfOpen = true;

    if (options) {
      if (options.readable === false) this.readable = false;
      if (options.writable === false) this.writable = false;

      if (options.allowHalfOpen === false) {
        this.allowHalfOpen = false;
        this.once('end', onend);
      }
    }
  }

  Object.defineProperty(Duplex$2.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      return this._writableState.highWaterMark;
    }
  });
  Object.defineProperty(Duplex$2.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      return this._writableState && this._writableState.getBuffer();
    }
  });
  Object.defineProperty(Duplex$2.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      return this._writableState.length;
    }
  }); // the no-half-open enforcer

  function onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return; // no more data can be written.
    // But allow more writes to happen in this tick.

    process.nextTick(onEndNT, this);
  }

  function onEndNT(self) {
    self.end();
  }

  Object.defineProperty(Duplex$2.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      if (this._readableState === undefined || this._writableState === undefined) {
        return false;
      }

      return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
      // we ignore the value if the stream
      // has not been initialized yet
      if (this._readableState === undefined || this._writableState === undefined) {
        return;
      } // backward compatibility, the user is explicitly
      // managing destroyed


      this._readableState.destroyed = value;
      this._writableState.destroyed = value;
    }
  });

  var string_decoder = {};

  var safeBuffer = {exports: {}};

  /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

  (function (module, exports) {
  /* eslint-disable node/no-deprecated-api */
  var buffer = require$$2__default$1["default"];
  var Buffer = buffer.Buffer;

  // alternative to using Object.keys for old browsers
  function copyProps (src, dst) {
    for (var key in src) {
      dst[key] = src[key];
    }
  }
  if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
    module.exports = buffer;
  } else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
  }

  function SafeBuffer (arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length)
  }

  SafeBuffer.prototype = Object.create(Buffer.prototype);

  // Copy static methods from Buffer
  copyProps(Buffer, SafeBuffer);

  SafeBuffer.from = function (arg, encodingOrOffset, length) {
    if (typeof arg === 'number') {
      throw new TypeError('Argument must not be a number')
    }
    return Buffer(arg, encodingOrOffset, length)
  };

  SafeBuffer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    var buf = Buffer(size);
    if (fill !== undefined) {
      if (typeof encoding === 'string') {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
    } else {
      buf.fill(0);
    }
    return buf
  };

  SafeBuffer.allocUnsafe = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    return Buffer(size)
  };

  SafeBuffer.allocUnsafeSlow = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    return buffer.SlowBuffer(size)
  };
  }(safeBuffer, safeBuffer.exports));

  /*<replacement>*/

  var Buffer$2 = safeBuffer.exports.Buffer;
  /*</replacement>*/

  var isEncoding = Buffer$2.isEncoding || function (encoding) {
    encoding = '' + encoding;
    switch (encoding && encoding.toLowerCase()) {
      case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
        return true;
      default:
        return false;
    }
  };

  function _normalizeEncoding(enc) {
    if (!enc) return 'utf8';
    var retried;
    while (true) {
      switch (enc) {
        case 'utf8':
        case 'utf-8':
          return 'utf8';
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return 'utf16le';
        case 'latin1':
        case 'binary':
          return 'latin1';
        case 'base64':
        case 'ascii':
        case 'hex':
          return enc;
        default:
          if (retried) return; // undefined
          enc = ('' + enc).toLowerCase();
          retried = true;
      }
    }
  }
  // Do not cache `Buffer.isEncoding` when checking encoding names as some
  // modules monkey-patch it to support additional encodings
  function normalizeEncoding(enc) {
    var nenc = _normalizeEncoding(enc);
    if (typeof nenc !== 'string' && (Buffer$2.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
    return nenc || enc;
  }

  // StringDecoder provides an interface for efficiently splitting a series of
  // buffers into a series of JS strings without breaking apart multi-byte
  // characters.
  string_decoder.StringDecoder = StringDecoder$1;
  function StringDecoder$1(encoding) {
    this.encoding = normalizeEncoding(encoding);
    var nb;
    switch (this.encoding) {
      case 'utf16le':
        this.text = utf16Text;
        this.end = utf16End;
        nb = 4;
        break;
      case 'utf8':
        this.fillLast = utf8FillLast;
        nb = 4;
        break;
      case 'base64':
        this.text = base64Text;
        this.end = base64End;
        nb = 3;
        break;
      default:
        this.write = simpleWrite;
        this.end = simpleEnd;
        return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = Buffer$2.allocUnsafe(nb);
  }

  StringDecoder$1.prototype.write = function (buf) {
    if (buf.length === 0) return '';
    var r;
    var i;
    if (this.lastNeed) {
      r = this.fillLast(buf);
      if (r === undefined) return '';
      i = this.lastNeed;
      this.lastNeed = 0;
    } else {
      i = 0;
    }
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || '';
  };

  StringDecoder$1.prototype.end = utf8End;

  // Returns only complete characters in a Buffer
  StringDecoder$1.prototype.text = utf8Text;

  // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
  StringDecoder$1.prototype.fillLast = function (buf) {
    if (this.lastNeed <= buf.length) {
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
      return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
  };

  // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
  // continuation byte. If an invalid byte is detected, -2 is returned.
  function utf8CheckByte(byte) {
    if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
    return byte >> 6 === 0x02 ? -1 : -2;
  }

  // Checks at most 3 bytes at the end of a Buffer in order to detect an
  // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
  // needed to complete the UTF-8 character (if applicable) are returned.
  function utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
      if (nb > 0) self.lastNeed = nb - 1;
      return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
      if (nb > 0) self.lastNeed = nb - 2;
      return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
      if (nb > 0) {
        if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
      }
      return nb;
    }
    return 0;
  }

  // Validates as many continuation bytes for a multi-byte UTF-8 character as
  // needed or are available. If we see a non-continuation byte where we expect
  // one, we "replace" the validated continuation bytes we've seen so far with
  // a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
  // behavior. The continuation byte check is included three times in the case
  // where all of the continuation bytes for a character exist in the same buffer.
  // It is also done this way as a slight performance increase instead of using a
  // loop.
  function utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 0xC0) !== 0x80) {
      self.lastNeed = 0;
      return '\ufffd';
    }
    if (self.lastNeed > 1 && buf.length > 1) {
      if ((buf[1] & 0xC0) !== 0x80) {
        self.lastNeed = 1;
        return '\ufffd';
      }
      if (self.lastNeed > 2 && buf.length > 2) {
        if ((buf[2] & 0xC0) !== 0x80) {
          self.lastNeed = 2;
          return '\ufffd';
        }
      }
    }
  }

  // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
  function utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = utf8CheckExtraBytes(this, buf);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
      buf.copy(this.lastChar, p, 0, this.lastNeed);
      return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
  }

  // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
  // partial character, the character's bytes are buffered until the required
  // number of bytes are available.
  function utf8Text(buf, i) {
    var total = utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString('utf8', i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString('utf8', i, end);
  }

  // For UTF-8, a replacement character is added when ending on a partial
  // character.
  function utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + '\ufffd';
    return r;
  }

  // UTF-16LE typically needs two bytes per character, but even if we have an even
  // number of bytes available, we need to check if we end on a leading/high
  // surrogate. In that case, we need to wait for the next two bytes in order to
  // decode the last character properly.
  function utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
      var r = buf.toString('utf16le', i);
      if (r) {
        var c = r.charCodeAt(r.length - 1);
        if (c >= 0xD800 && c <= 0xDBFF) {
          this.lastNeed = 2;
          this.lastTotal = 4;
          this.lastChar[0] = buf[buf.length - 2];
          this.lastChar[1] = buf[buf.length - 1];
          return r.slice(0, -1);
        }
      }
      return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString('utf16le', i, buf.length - 1);
  }

  // For UTF-16LE we do not explicitly append special replacement characters if we
  // end on a partial character, we simply let v8 handle that.
  function utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) {
      var end = this.lastTotal - this.lastNeed;
      return r + this.lastChar.toString('utf16le', 0, end);
    }
    return r;
  }

  function base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString('base64', i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) {
      this.lastChar[0] = buf[buf.length - 1];
    } else {
      this.lastChar[0] = buf[buf.length - 2];
      this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString('base64', i, buf.length - n);
  }

  function base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
    return r;
  }

  // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
  function simpleWrite(buf) {
    return buf.toString(this.encoding);
  }

  function simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : '';
  }

  var ERR_STREAM_PREMATURE_CLOSE = errors$2.codes.ERR_STREAM_PREMATURE_CLOSE;

  function once$3(callback) {
    var called = false;
    return function () {
      if (called) return;
      called = true;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      callback.apply(this, args);
    };
  }

  function noop$3() {}

  function isRequest$1(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
  }

  function eos$1(stream, opts, callback) {
    if (typeof opts === 'function') return eos$1(stream, null, opts);
    if (!opts) opts = {};
    callback = once$3(callback || noop$3);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;

    var onlegacyfinish = function onlegacyfinish() {
      if (!stream.writable) onfinish();
    };

    var writableEnded = stream._writableState && stream._writableState.finished;

    var onfinish = function onfinish() {
      writable = false;
      writableEnded = true;
      if (!readable) callback.call(stream);
    };

    var readableEnded = stream._readableState && stream._readableState.endEmitted;

    var onend = function onend() {
      readable = false;
      readableEnded = true;
      if (!writable) callback.call(stream);
    };

    var onerror = function onerror(err) {
      callback.call(stream, err);
    };

    var onclose = function onclose() {
      var err;

      if (readable && !readableEnded) {
        if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
        return callback.call(stream, err);
      }

      if (writable && !writableEnded) {
        if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
        return callback.call(stream, err);
      }
    };

    var onrequest = function onrequest() {
      stream.req.on('finish', onfinish);
    };

    if (isRequest$1(stream)) {
      stream.on('complete', onfinish);
      stream.on('abort', onclose);
      if (stream.req) onrequest();else stream.on('request', onrequest);
    } else if (writable && !stream._writableState) {
      // legacy streams
      stream.on('end', onlegacyfinish);
      stream.on('close', onlegacyfinish);
    }

    stream.on('end', onend);
    stream.on('finish', onfinish);
    if (opts.error !== false) stream.on('error', onerror);
    stream.on('close', onclose);
    return function () {
      stream.removeListener('complete', onfinish);
      stream.removeListener('abort', onclose);
      stream.removeListener('request', onrequest);
      if (stream.req) stream.req.removeListener('finish', onfinish);
      stream.removeListener('end', onlegacyfinish);
      stream.removeListener('close', onlegacyfinish);
      stream.removeListener('finish', onfinish);
      stream.removeListener('end', onend);
      stream.removeListener('error', onerror);
      stream.removeListener('close', onclose);
    };
  }

  var endOfStream = eos$1;

  var _Object$setPrototypeO;

  function _defineProperty$1(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var finished = endOfStream;

  var kLastResolve = Symbol('lastResolve');
  var kLastReject = Symbol('lastReject');
  var kError = Symbol('error');
  var kEnded = Symbol('ended');
  var kLastPromise = Symbol('lastPromise');
  var kHandlePromise = Symbol('handlePromise');
  var kStream = Symbol('stream');

  function createIterResult(value, done) {
    return {
      value: value,
      done: done
    };
  }

  function readAndResolve(iter) {
    var resolve = iter[kLastResolve];

    if (resolve !== null) {
      var data = iter[kStream].read(); // we defer if data is null
      // we can be expecting either 'end' or
      // 'error'

      if (data !== null) {
        iter[kLastPromise] = null;
        iter[kLastResolve] = null;
        iter[kLastReject] = null;
        resolve(createIterResult(data, false));
      }
    }
  }

  function onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    process.nextTick(readAndResolve, iter);
  }

  function wrapForNext(lastPromise, iter) {
    return function (resolve, reject) {
      lastPromise.then(function () {
        if (iter[kEnded]) {
          resolve(createIterResult(undefined, true));
          return;
        }

        iter[kHandlePromise](resolve, reject);
      }, reject);
    };
  }

  var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
  var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
    get stream() {
      return this[kStream];
    },

    next: function next() {
      var _this = this;

      // if we have detected an error in the meanwhile
      // reject straight away
      var error = this[kError];

      if (error !== null) {
        return Promise.reject(error);
      }

      if (this[kEnded]) {
        return Promise.resolve(createIterResult(undefined, true));
      }

      if (this[kStream].destroyed) {
        // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function (resolve, reject) {
          process.nextTick(function () {
            if (_this[kError]) {
              reject(_this[kError]);
            } else {
              resolve(createIterResult(undefined, true));
            }
          });
        });
      } // if we have multiple next() calls
      // we will wait for the previous Promise to finish
      // this logic is optimized to support for await loops,
      // where next() is only called once at a time


      var lastPromise = this[kLastPromise];
      var promise;

      if (lastPromise) {
        promise = new Promise(wrapForNext(lastPromise, this));
      } else {
        // fast path needed to support multiple this.push()
        // without triggering the next() queue
        var data = this[kStream].read();

        if (data !== null) {
          return Promise.resolve(createIterResult(data, false));
        }

        promise = new Promise(this[kHandlePromise]);
      }

      this[kLastPromise] = promise;
      return promise;
    }
  }, _defineProperty$1(_Object$setPrototypeO, Symbol.asyncIterator, function () {
    return this;
  }), _defineProperty$1(_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;

    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function (resolve, reject) {
      _this2[kStream].destroy(null, function (err) {
        if (err) {
          reject(err);
          return;
        }

        resolve(createIterResult(undefined, true));
      });
    });
  }), _Object$setPrototypeO), AsyncIteratorPrototype);

  var createReadableStreamAsyncIterator$1 = function createReadableStreamAsyncIterator(stream) {
    var _Object$create;

    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty$1(_Object$create, kStream, {
      value: stream,
      writable: true
    }), _defineProperty$1(_Object$create, kLastResolve, {
      value: null,
      writable: true
    }), _defineProperty$1(_Object$create, kLastReject, {
      value: null,
      writable: true
    }), _defineProperty$1(_Object$create, kError, {
      value: null,
      writable: true
    }), _defineProperty$1(_Object$create, kEnded, {
      value: stream._readableState.endEmitted,
      writable: true
    }), _defineProperty$1(_Object$create, kHandlePromise, {
      value: function value(resolve, reject) {
        var data = iterator[kStream].read();

        if (data) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          resolve(createIterResult(data, false));
        } else {
          iterator[kLastResolve] = resolve;
          iterator[kLastReject] = reject;
        }
      },
      writable: true
    }), _Object$create));
    iterator[kLastPromise] = null;
    finished(stream, function (err) {
      if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
        var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
        // returned by next() and store the error

        if (reject !== null) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          reject(err);
        }

        iterator[kError] = err;
        return;
      }

      var resolve = iterator[kLastResolve];

      if (resolve !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(undefined, true));
      }

      iterator[kEnded] = true;
    });
    stream.on('readable', onReadable.bind(null, iterator));
    return iterator;
  };

  var async_iterator = createReadableStreamAsyncIterator$1;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var ERR_INVALID_ARG_TYPE$1 = errors$2.codes.ERR_INVALID_ARG_TYPE;

  function from$1(Readable, iterable, opts) {
    var iterator;

    if (iterable && typeof iterable.next === 'function') {
      iterator = iterable;
    } else if (iterable && iterable[Symbol.asyncIterator]) iterator = iterable[Symbol.asyncIterator]();else if (iterable && iterable[Symbol.iterator]) iterator = iterable[Symbol.iterator]();else throw new ERR_INVALID_ARG_TYPE$1('iterable', ['Iterable'], iterable);

    var readable = new Readable(_objectSpread({
      objectMode: true
    }, opts)); // Reading boolean to protect against _read
    // being called before last iteration completion.

    var reading = false;

    readable._read = function () {
      if (!reading) {
        reading = true;
        next();
      }
    };

    function next() {
      return _next2.apply(this, arguments);
    }

    function _next2() {
      _next2 = _asyncToGenerator(function* () {
        try {
          var _ref = yield iterator.next(),
              value = _ref.value,
              done = _ref.done;

          if (done) {
            readable.push(null);
          } else if (readable.push((yield value))) {
            next();
          } else {
            reading = false;
          }
        } catch (err) {
          readable.destroy(err);
        }
      });
      return _next2.apply(this, arguments);
    }

    return readable;
  }

  var from_1 = from$1;

  var _stream_readable = Readable;
  /*<replacement>*/

  var Duplex$1;
  /*</replacement>*/

  Readable.ReadableState = ReadableState;
  /*<replacement>*/

  require$$0__default$3["default"].EventEmitter;

  var EElistenerCount = function EElistenerCount(emitter, type) {
    return emitter.listeners(type).length;
  };
  /*</replacement>*/

  /*<replacement>*/


  var Stream = stream;
  /*</replacement>*/


  var Buffer$1 = require$$2__default$1["default"].Buffer;

  var OurUint8Array = commonjsGlobal.Uint8Array || function () {};

  function _uint8ArrayToBuffer(chunk) {
    return Buffer$1.from(chunk);
  }

  function _isUint8Array(obj) {
    return Buffer$1.isBuffer(obj) || obj instanceof OurUint8Array;
  }
  /*<replacement>*/


  var debugUtil = require$$0__default$4["default"];

  var debug;

  if (debugUtil && debugUtil.debuglog) {
    debug = debugUtil.debuglog('stream');
  } else {
    debug = function debug() {};
  }
  /*</replacement>*/


  var BufferList = buffer_list;

  var destroyImpl = destroy_1;

  var _require = state,
      getHighWaterMark = _require.getHighWaterMark;

  var _require$codes$2 = errors$2.codes,
      ERR_INVALID_ARG_TYPE = _require$codes$2.ERR_INVALID_ARG_TYPE,
      ERR_STREAM_PUSH_AFTER_EOF = _require$codes$2.ERR_STREAM_PUSH_AFTER_EOF,
      ERR_METHOD_NOT_IMPLEMENTED$1 = _require$codes$2.ERR_METHOD_NOT_IMPLEMENTED,
      ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes$2.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


  var StringDecoder;
  var createReadableStreamAsyncIterator;
  var from;

  inherits$9.exports(Readable, Stream);

  var errorOrDestroy = destroyImpl.errorOrDestroy;
  var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

  function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.

    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }

  function ReadableState(options, stream, isDuplex) {
    Duplex$1 = Duplex$1 || _stream_duplex;
    options = options || {}; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.

    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex$1; // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away

    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"

    this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()

    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.

    this.sync = true; // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.

    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true; // Should close be emitted on destroy. Defaults to true.

    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

    this.autoDestroy = !!options.autoDestroy; // has it been destroyed

    this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.

    this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

    this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;

    if (options.encoding) {
      if (!StringDecoder) StringDecoder = string_decoder.StringDecoder;
      this.decoder = new StringDecoder(options.encoding);
      this.encoding = options.encoding;
    }
  }

  function Readable(options) {
    Duplex$1 = Duplex$1 || _stream_duplex;
    if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5

    var isDuplex = this instanceof Duplex$1;
    this._readableState = new ReadableState(options, this, isDuplex); // legacy

    this.readable = true;

    if (options) {
      if (typeof options.read === 'function') this._read = options.read;
      if (typeof options.destroy === 'function') this._destroy = options.destroy;
    }

    Stream.call(this);
  }

  Object.defineProperty(Readable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      if (this._readableState === undefined) {
        return false;
      }

      return this._readableState.destroyed;
    },
    set: function set(value) {
      // we ignore the value if the stream
      // has not been initialized yet
      if (!this._readableState) {
        return;
      } // backward compatibility, the user is explicitly
      // managing destroyed


      this._readableState.destroyed = value;
    }
  });
  Readable.prototype.destroy = destroyImpl.destroy;
  Readable.prototype._undestroy = destroyImpl.undestroy;

  Readable.prototype._destroy = function (err, cb) {
    cb(err);
  }; // Manually shove something into the read() buffer.
  // This returns true if the highWaterMark has not been hit yet,
  // similar to how Writable.write() returns true if you should
  // write() some more.


  Readable.prototype.push = function (chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;

    if (!state.objectMode) {
      if (typeof chunk === 'string') {
        encoding = encoding || state.defaultEncoding;

        if (encoding !== state.encoding) {
          chunk = Buffer$1.from(chunk, encoding);
          encoding = '';
        }

        skipChunkCheck = true;
      }
    } else {
      skipChunkCheck = true;
    }

    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
  }; // Unshift should *always* be something directly out of read()


  Readable.prototype.unshift = function (chunk) {
    return readableAddChunk(this, chunk, null, true, false);
  };

  function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    debug('readableAddChunk', chunk);
    var state = stream._readableState;

    if (chunk === null) {
      state.reading = false;
      onEofChunk(stream, state);
    } else {
      var er;
      if (!skipChunkCheck) er = chunkInvalid(state, chunk);

      if (er) {
        errorOrDestroy(stream, er);
      } else if (state.objectMode || chunk && chunk.length > 0) {
        if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer$1.prototype) {
          chunk = _uint8ArrayToBuffer(chunk);
        }

        if (addToFront) {
          if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
        } else if (state.ended) {
          errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
        } else if (state.destroyed) {
          return false;
        } else {
          state.reading = false;

          if (state.decoder && !encoding) {
            chunk = state.decoder.write(chunk);
            if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
          } else {
            addChunk(stream, state, chunk, false);
          }
        }
      } else if (!addToFront) {
        state.reading = false;
        maybeReadMore(stream, state);
      }
    } // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.


    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
  }

  function addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
      state.awaitDrain = 0;
      stream.emit('data', chunk);
    } else {
      // update the buffer info.
      state.length += state.objectMode ? 1 : chunk.length;
      if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
      if (state.needReadable) emitReadable(stream);
    }

    maybeReadMore(stream, state);
  }

  function chunkInvalid(state, chunk) {
    var er;

    if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
      er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
    }

    return er;
  }

  Readable.prototype.isPaused = function () {
    return this._readableState.flowing === false;
  }; // backwards compatibility.


  Readable.prototype.setEncoding = function (enc) {
    if (!StringDecoder) StringDecoder = string_decoder.StringDecoder;
    var decoder = new StringDecoder(enc);
    this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

    this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

    var p = this._readableState.buffer.head;
    var content = '';

    while (p !== null) {
      content += decoder.write(p.data);
      p = p.next;
    }

    this._readableState.buffer.clear();

    if (content !== '') this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
  }; // Don't raise the hwm > 1GB


  var MAX_HWM = 0x40000000;

  function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) {
      // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
      n = MAX_HWM;
    } else {
      // Get the next highest power of 2 to prevent increasing hwm excessively in
      // tiny amounts
      n--;
      n |= n >>> 1;
      n |= n >>> 2;
      n |= n >>> 4;
      n |= n >>> 8;
      n |= n >>> 16;
      n++;
    }

    return n;
  } // This function is designed to be inlinable, so please take care when making
  // changes to the function body.


  function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;

    if (n !== n) {
      // Only flow one buffer at a time
      if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
    } // If we're asking for more than the current hwm, then raise the hwm.


    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n; // Don't have enough

    if (!state.ended) {
      state.needReadable = true;
      return 0;
    }

    return state.length;
  } // you can override either this method, or the async _read(n) below.


  Readable.prototype.read = function (n) {
    debug('read', n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.

    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
      debug('read: emitReadable', state.length, state.ended);
      if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
      return null;
    }

    n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

    if (n === 0 && state.ended) {
      if (state.length === 0) endReadable(this);
      return null;
    } // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.


    var doRead = state.needReadable;
    debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

    if (state.length === 0 || state.length - n < state.highWaterMark) {
      doRead = true;
      debug('length less than watermark', doRead);
    } // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.


    if (state.ended || state.reading) {
      doRead = false;
      debug('reading or ended', doRead);
    } else if (doRead) {
      debug('do read');
      state.reading = true;
      state.sync = true; // if the length is currently zero, then we *need* a readable event.

      if (state.length === 0) state.needReadable = true; // call internal read method

      this._read(state.highWaterMark);

      state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
      // and we need to re-evaluate how much data we can return to the user.

      if (!state.reading) n = howMuchToRead(nOrig, state);
    }

    var ret;
    if (n > 0) ret = fromList(n, state);else ret = null;

    if (ret === null) {
      state.needReadable = state.length <= state.highWaterMark;
      n = 0;
    } else {
      state.length -= n;
      state.awaitDrain = 0;
    }

    if (state.length === 0) {
      // If we have nothing in the buffer, then we want to know
      // as soon as we *do* get something into the buffer.
      if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

      if (nOrig !== n && state.ended) endReadable(this);
    }

    if (ret !== null) this.emit('data', ret);
    return ret;
  };

  function onEofChunk(stream, state) {
    debug('onEofChunk');
    if (state.ended) return;

    if (state.decoder) {
      var chunk = state.decoder.end();

      if (chunk && chunk.length) {
        state.buffer.push(chunk);
        state.length += state.objectMode ? 1 : chunk.length;
      }
    }

    state.ended = true;

    if (state.sync) {
      // if we are sync, wait until next tick to emit the data.
      // Otherwise we risk emitting data in the flow()
      // the readable code triggers during a read() call
      emitReadable(stream);
    } else {
      // emit 'readable' now to make sure it gets picked up.
      state.needReadable = false;

      if (!state.emittedReadable) {
        state.emittedReadable = true;
        emitReadable_(stream);
      }
    }
  } // Don't emit readable right away in sync mode, because this can trigger
  // another read() call => stack overflow.  This way, it might trigger
  // a nextTick recursion warning, but that's not so bad.


  function emitReadable(stream) {
    var state = stream._readableState;
    debug('emitReadable', state.needReadable, state.emittedReadable);
    state.needReadable = false;

    if (!state.emittedReadable) {
      debug('emitReadable', state.flowing);
      state.emittedReadable = true;
      process.nextTick(emitReadable_, stream);
    }
  }

  function emitReadable_(stream) {
    var state = stream._readableState;
    debug('emitReadable_', state.destroyed, state.length, state.ended);

    if (!state.destroyed && (state.length || state.ended)) {
      stream.emit('readable');
      state.emittedReadable = false;
    } // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.


    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    flow(stream);
  } // at this point, the user has presumably seen the 'readable' event,
  // and called read() to consume some data.  that may have triggered
  // in turn another _read(n) call, in which case reading = true if
  // it's in progress.
  // However, if we're not ended, or reading, and the length < hwm,
  // then go ahead and try to read some more preemptively.


  function maybeReadMore(stream, state) {
    if (!state.readingMore) {
      state.readingMore = true;
      process.nextTick(maybeReadMore_, stream, state);
    }
  }

  function maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
      var len = state.length;
      debug('maybeReadMore read 0');
      stream.read(0);
      if (len === state.length) // didn't get any data, stop spinning.
        break;
    }

    state.readingMore = false;
  } // abstract method.  to be overridden in specific implementation classes.
  // call cb(er, data) where data is <= n in length.
  // for virtual (non-string, non-buffer) streams, "length" is somewhat
  // arbitrary, and perhaps not very meaningful.


  Readable.prototype._read = function (n) {
    errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED$1('_read()'));
  };

  Readable.prototype.pipe = function (dest, pipeOpts) {
    var src = this;
    var state = this._readableState;

    switch (state.pipesCount) {
      case 0:
        state.pipes = dest;
        break;

      case 1:
        state.pipes = [state.pipes, dest];
        break;

      default:
        state.pipes.push(dest);
        break;
    }

    state.pipesCount += 1;
    debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
    dest.on('unpipe', onunpipe);

    function onunpipe(readable, unpipeInfo) {
      debug('onunpipe');

      if (readable === src) {
        if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
          unpipeInfo.hasUnpiped = true;
          cleanup();
        }
      }
    }

    function onend() {
      debug('onend');
      dest.end();
    } // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.


    var ondrain = pipeOnDrain(src);
    dest.on('drain', ondrain);
    var cleanedUp = false;

    function cleanup() {
      debug('cleanup'); // cleanup event handlers once the pipe is broken

      dest.removeListener('close', onclose);
      dest.removeListener('finish', onfinish);
      dest.removeListener('drain', ondrain);
      dest.removeListener('error', onerror);
      dest.removeListener('unpipe', onunpipe);
      src.removeListener('end', onend);
      src.removeListener('end', unpipe);
      src.removeListener('data', ondata);
      cleanedUp = true; // if the reader is waiting for a drain event from this
      // specific writer, then it would cause it to never start
      // flowing again.
      // So, if this is awaiting a drain, then we just call it now.
      // If we don't know, then assume that we are waiting for one.

      if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }

    src.on('data', ondata);

    function ondata(chunk) {
      debug('ondata');
      var ret = dest.write(chunk);
      debug('dest.write', ret);

      if (ret === false) {
        // If the user unpiped during `dest.write()`, it is possible
        // to get stuck in a permanently paused state if that write
        // also returned false.
        // => Check whether `dest` is still a piping destination.
        if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
          debug('false write response, pause', state.awaitDrain);
          state.awaitDrain++;
        }

        src.pause();
      }
    } // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.


    function onerror(er) {
      debug('onerror', er);
      unpipe();
      dest.removeListener('error', onerror);
      if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
    } // Make sure our error handler is attached before userland ones.


    prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

    function onclose() {
      dest.removeListener('finish', onfinish);
      unpipe();
    }

    dest.once('close', onclose);

    function onfinish() {
      debug('onfinish');
      dest.removeListener('close', onclose);
      unpipe();
    }

    dest.once('finish', onfinish);

    function unpipe() {
      debug('unpipe');
      src.unpipe(dest);
    } // tell the dest that it's being piped to


    dest.emit('pipe', src); // start the flow if it hasn't been started already.

    if (!state.flowing) {
      debug('pipe resume');
      src.resume();
    }

    return dest;
  };

  function pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
      var state = src._readableState;
      debug('pipeOnDrain', state.awaitDrain);
      if (state.awaitDrain) state.awaitDrain--;

      if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
        state.flowing = true;
        flow(src);
      }
    };
  }

  Readable.prototype.unpipe = function (dest) {
    var state = this._readableState;
    var unpipeInfo = {
      hasUnpiped: false
    }; // if we're not piping anywhere, then do nothing.

    if (state.pipesCount === 0) return this; // just one destination.  most common case.

    if (state.pipesCount === 1) {
      // passed in one, but it's not the right one.
      if (dest && dest !== state.pipes) return this;
      if (!dest) dest = state.pipes; // got a match.

      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;
      if (dest) dest.emit('unpipe', this, unpipeInfo);
      return this;
    } // slow case. multiple pipe destinations.


    if (!dest) {
      // remove all.
      var dests = state.pipes;
      var len = state.pipesCount;
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;

      for (var i = 0; i < len; i++) {
        dests[i].emit('unpipe', this, {
          hasUnpiped: false
        });
      }

      return this;
    } // try to find the right one.


    var index = indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit('unpipe', this, unpipeInfo);
    return this;
  }; // set up data events if they are asked for
  // Ensure readable listeners eventually get something


  Readable.prototype.on = function (ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);
    var state = this._readableState;

    if (ev === 'data') {
      // update readableListening so that resume() may be a no-op
      // a few lines down. This is needed to support once('readable').
      state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

      if (state.flowing !== false) this.resume();
    } else if (ev === 'readable') {
      if (!state.endEmitted && !state.readableListening) {
        state.readableListening = state.needReadable = true;
        state.flowing = false;
        state.emittedReadable = false;
        debug('on readable', state.length, state.reading);

        if (state.length) {
          emitReadable(this);
        } else if (!state.reading) {
          process.nextTick(nReadingNextTick, this);
        }
      }
    }

    return res;
  };

  Readable.prototype.addListener = Readable.prototype.on;

  Readable.prototype.removeListener = function (ev, fn) {
    var res = Stream.prototype.removeListener.call(this, ev, fn);

    if (ev === 'readable') {
      // We need to check if there is someone still listening to
      // readable and reset the state. However this needs to happen
      // after readable has been emitted but before I/O (nextTick) to
      // support once('readable', fn) cycles. This means that calling
      // resume within the same tick will have no
      // effect.
      process.nextTick(updateReadableListening, this);
    }

    return res;
  };

  Readable.prototype.removeAllListeners = function (ev) {
    var res = Stream.prototype.removeAllListeners.apply(this, arguments);

    if (ev === 'readable' || ev === undefined) {
      // We need to check if there is someone still listening to
      // readable and reset the state. However this needs to happen
      // after readable has been emitted but before I/O (nextTick) to
      // support once('readable', fn) cycles. This means that calling
      // resume within the same tick will have no
      // effect.
      process.nextTick(updateReadableListening, this);
    }

    return res;
  };

  function updateReadableListening(self) {
    var state = self._readableState;
    state.readableListening = self.listenerCount('readable') > 0;

    if (state.resumeScheduled && !state.paused) {
      // flowing needs to be set to true now, otherwise
      // the upcoming resume will not flow.
      state.flowing = true; // crude way to check if we should resume
    } else if (self.listenerCount('data') > 0) {
      self.resume();
    }
  }

  function nReadingNextTick(self) {
    debug('readable nexttick read 0');
    self.read(0);
  } // pause() and resume() are remnants of the legacy readable stream API
  // If the user uses them, then switch into old mode.


  Readable.prototype.resume = function () {
    var state = this._readableState;

    if (!state.flowing) {
      debug('resume'); // we flow only if there is no one listening
      // for readable, but we still have to call
      // resume()

      state.flowing = !state.readableListening;
      resume(this, state);
    }

    state.paused = false;
    return this;
  };

  function resume(stream, state) {
    if (!state.resumeScheduled) {
      state.resumeScheduled = true;
      process.nextTick(resume_, stream, state);
    }
  }

  function resume_(stream, state) {
    debug('resume', state.reading);

    if (!state.reading) {
      stream.read(0);
    }

    state.resumeScheduled = false;
    stream.emit('resume');
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
  }

  Readable.prototype.pause = function () {
    debug('call pause flowing=%j', this._readableState.flowing);

    if (this._readableState.flowing !== false) {
      debug('pause');
      this._readableState.flowing = false;
      this.emit('pause');
    }

    this._readableState.paused = true;
    return this;
  };

  function flow(stream) {
    var state = stream._readableState;
    debug('flow', state.flowing);

    while (state.flowing && stream.read() !== null) {
    }
  } // wrap an old-style stream as the async data source.
  // This is *not* part of the readable stream interface.
  // It is an ugly unfortunate mess of history.


  Readable.prototype.wrap = function (stream) {
    var _this = this;

    var state = this._readableState;
    var paused = false;
    stream.on('end', function () {
      debug('wrapped end');

      if (state.decoder && !state.ended) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) _this.push(chunk);
      }

      _this.push(null);
    });
    stream.on('data', function (chunk) {
      debug('wrapped data');
      if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

      if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

      var ret = _this.push(chunk);

      if (!ret) {
        paused = true;
        stream.pause();
      }
    }); // proxy all the other methods.
    // important when wrapping filters and duplexes.

    for (var i in stream) {
      if (this[i] === undefined && typeof stream[i] === 'function') {
        this[i] = function methodWrap(method) {
          return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
          };
        }(i);
      }
    } // proxy certain important events.


    for (var n = 0; n < kProxyEvents.length; n++) {
      stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
    } // when we try to consume some more bytes, simply unpause the
    // underlying stream.


    this._read = function (n) {
      debug('wrapped _read', n);

      if (paused) {
        paused = false;
        stream.resume();
      }
    };

    return this;
  };

  if (typeof Symbol === 'function') {
    Readable.prototype[Symbol.asyncIterator] = function () {
      if (createReadableStreamAsyncIterator === undefined) {
        createReadableStreamAsyncIterator = async_iterator;
      }

      return createReadableStreamAsyncIterator(this);
    };
  }

  Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      return this._readableState.highWaterMark;
    }
  });
  Object.defineProperty(Readable.prototype, 'readableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      return this._readableState && this._readableState.buffer;
    }
  });
  Object.defineProperty(Readable.prototype, 'readableFlowing', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      return this._readableState.flowing;
    },
    set: function set(state) {
      if (this._readableState) {
        this._readableState.flowing = state;
      }
    }
  }); // exposed for testing purposes only.

  Readable._fromList = fromList;
  Object.defineProperty(Readable.prototype, 'readableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
      return this._readableState.length;
    }
  }); // Pluck off n bytes from an array of buffers.
  // Length is the combined lengths of all the buffers in the list.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.

  function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
      // read it all, truncate the list
      if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
      state.buffer.clear();
    } else {
      // read part of list
      ret = state.buffer.consume(n, state.decoder);
    }
    return ret;
  }

  function endReadable(stream) {
    var state = stream._readableState;
    debug('endReadable', state.endEmitted);

    if (!state.endEmitted) {
      state.ended = true;
      process.nextTick(endReadableNT, state, stream);
    }
  }

  function endReadableNT(state, stream) {
    debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

    if (!state.endEmitted && state.length === 0) {
      state.endEmitted = true;
      stream.readable = false;
      stream.emit('end');

      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the writable side is ready for autoDestroy as well
        var wState = stream._writableState;

        if (!wState || wState.autoDestroy && wState.finished) {
          stream.destroy();
        }
      }
    }
  }

  if (typeof Symbol === 'function') {
    Readable.from = function (iterable, opts) {
      if (from === undefined) {
        from = from_1;
      }

      return from(Readable, iterable, opts);
    };
  }

  function indexOf(xs, x) {
    for (var i = 0, l = xs.length; i < l; i++) {
      if (xs[i] === x) return i;
    }

    return -1;
  }

  var _stream_transform = Transform$3;

  var _require$codes$1 = errors$2.codes,
      ERR_METHOD_NOT_IMPLEMENTED = _require$codes$1.ERR_METHOD_NOT_IMPLEMENTED,
      ERR_MULTIPLE_CALLBACK = _require$codes$1.ERR_MULTIPLE_CALLBACK,
      ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes$1.ERR_TRANSFORM_ALREADY_TRANSFORMING,
      ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes$1.ERR_TRANSFORM_WITH_LENGTH_0;

  var Duplex = _stream_duplex;

  inherits$9.exports(Transform$3, Duplex);

  function afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;

    if (cb === null) {
      return this.emit('error', new ERR_MULTIPLE_CALLBACK());
    }

    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) // single equals check for both `null` and `undefined`
      this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;

    if (rs.needReadable || rs.length < rs.highWaterMark) {
      this._read(rs.highWaterMark);
    }
  }

  function Transform$3(options) {
    if (!(this instanceof Transform$3)) return new Transform$3(options);
    Duplex.call(this, options);
    this._transformState = {
      afterTransform: afterTransform.bind(this),
      needTransform: false,
      transforming: false,
      writecb: null,
      writechunk: null,
      writeencoding: null
    }; // start out asking for a readable event once data is transformed.

    this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.

    this._readableState.sync = false;

    if (options) {
      if (typeof options.transform === 'function') this._transform = options.transform;
      if (typeof options.flush === 'function') this._flush = options.flush;
    } // When the writable side finishes, then flush out anything remaining.


    this.on('prefinish', prefinish);
  }

  function prefinish() {
    var _this = this;

    if (typeof this._flush === 'function' && !this._readableState.destroyed) {
      this._flush(function (er, data) {
        done(_this, er, data);
      });
    } else {
      done(this, null, null);
    }
  }

  Transform$3.prototype.push = function (chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
  }; // This is the part where you do stuff!
  // override this function in implementation classes.
  // 'chunk' is an input chunk.
  //
  // Call `push(newChunk)` to pass along transformed output
  // to the readable side.  You may call 'push' zero or more times.
  //
  // Call `cb(err)` when you are done with this chunk.  If you pass
  // an error, then that'll put the hurt on the whole operation.  If you
  // never call cb(), then you'll never get another chunk.


  Transform$3.prototype._transform = function (chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
  };

  Transform$3.prototype._write = function (chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;

    if (!ts.transforming) {
      var rs = this._readableState;
      if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
  }; // Doesn't matter what the args are here.
  // _transform does all the work.
  // That we got here means that the readable side wants more data.


  Transform$3.prototype._read = function (n) {
    var ts = this._transformState;

    if (ts.writechunk !== null && !ts.transforming) {
      ts.transforming = true;

      this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else {
      // mark that we need a transform, so that any data that comes in
      // will get processed, now that we've asked for it.
      ts.needTransform = true;
    }
  };

  Transform$3.prototype._destroy = function (err, cb) {
    Duplex.prototype._destroy.call(this, err, function (err2) {
      cb(err2);
    });
  };

  function done(stream, er, data) {
    if (er) return stream.emit('error', er);
    if (data != null) // single equals check for both `null` and `undefined`
      stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided

    if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
  }

  var _stream_passthrough = PassThrough;

  var Transform$2 = _stream_transform;

  inherits$9.exports(PassThrough, Transform$2);

  function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);
    Transform$2.call(this, options);
  }

  PassThrough.prototype._transform = function (chunk, encoding, cb) {
    cb(null, chunk);
  };

  var eos;

  function once$2(callback) {
    var called = false;
    return function () {
      if (called) return;
      called = true;
      callback.apply(void 0, arguments);
    };
  }

  var _require$codes = errors$2.codes,
      ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
      ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

  function noop$2(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
  }

  function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
  }

  function destroyer(stream, reading, writing, callback) {
    callback = once$2(callback);
    var closed = false;
    stream.on('close', function () {
      closed = true;
    });
    if (eos === undefined) eos = endOfStream;
    eos(stream, {
      readable: reading,
      writable: writing
    }, function (err) {
      if (err) return callback(err);
      closed = true;
      callback();
    });
    var destroyed = false;
    return function (err) {
      if (closed) return;
      if (destroyed) return;
      destroyed = true; // request.destroy just do .end - .abort is what we want

      if (isRequest(stream)) return stream.abort();
      if (typeof stream.destroy === 'function') return stream.destroy();
      callback(err || new ERR_STREAM_DESTROYED('pipe'));
    };
  }

  function call(fn) {
    fn();
  }

  function pipe(from, to) {
    return from.pipe(to);
  }

  function popCallback(streams) {
    if (!streams.length) return noop$2;
    if (typeof streams[streams.length - 1] !== 'function') return noop$2;
    return streams.pop();
  }

  function pipeline() {
    for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
      streams[_key] = arguments[_key];
    }

    var callback = popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];

    if (streams.length < 2) {
      throw new ERR_MISSING_ARGS('streams');
    }

    var error;
    var destroys = streams.map(function (stream, i) {
      var reading = i < streams.length - 1;
      var writing = i > 0;
      return destroyer(stream, reading, writing, function (err) {
        if (!error) error = err;
        if (err) destroys.forEach(call);
        if (reading) return;
        destroys.forEach(call);
        callback(error);
      });
    });
    return streams.reduce(pipe);
  }

  var pipeline_1 = pipeline;

  (function (module, exports) {
  var Stream = require$$0__default$1["default"];
  if (process.env.READABLE_STREAM === 'disable' && Stream) {
    module.exports = Stream.Readable;
    Object.assign(module.exports, Stream);
    module.exports.Stream = Stream;
  } else {
    exports = module.exports = _stream_readable;
    exports.Stream = Stream || exports;
    exports.Readable = exports;
    exports.Writable = _stream_writable;
    exports.Duplex = _stream_duplex;
    exports.Transform = _stream_transform;
    exports.PassThrough = _stream_passthrough;
    exports.finished = endOfStream;
    exports.pipeline = pipeline_1;
  }
  }(readable, readable.exports));

  const { Transform: Transform$1 } = readable.exports;

  var keccak$1 = (KeccakState) => class Keccak extends Transform$1 {
    constructor (rate, capacity, delimitedSuffix, hashBitLength, options) {
      super(options);

      this._rate = rate;
      this._capacity = capacity;
      this._delimitedSuffix = delimitedSuffix;
      this._hashBitLength = hashBitLength;
      this._options = options;

      this._state = new KeccakState();
      this._state.initialize(rate, capacity);
      this._finalized = false;
    }

    _transform (chunk, encoding, callback) {
      let error = null;
      try {
        this.update(chunk, encoding);
      } catch (err) {
        error = err;
      }

      callback(error);
    }

    _flush (callback) {
      let error = null;
      try {
        this.push(this.digest());
      } catch (err) {
        error = err;
      }

      callback(error);
    }

    update (data, encoding) {
      if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
      if (this._finalized) throw new Error('Digest already called')
      if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);

      this._state.absorb(data);

      return this
    }

    digest (encoding) {
      if (this._finalized) throw new Error('Digest already called')
      this._finalized = true;

      if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix);
      let digest = this._state.squeeze(this._hashBitLength / 8);
      if (encoding !== undefined) digest = digest.toString(encoding);

      this._resetState();

      return digest
    }

    // remove result from memory
    _resetState () {
      this._state.initialize(this._rate, this._capacity);
      return this
    }

    // because sometimes we need hash right now and little later
    _clone () {
      const clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options);
      this._state.copy(clone._state);
      clone._finalized = this._finalized;

      return clone
    }
  };

  const { Transform } = readable.exports;

  var shake = (KeccakState) => class Shake extends Transform {
    constructor (rate, capacity, delimitedSuffix, options) {
      super(options);

      this._rate = rate;
      this._capacity = capacity;
      this._delimitedSuffix = delimitedSuffix;
      this._options = options;

      this._state = new KeccakState();
      this._state.initialize(rate, capacity);
      this._finalized = false;
    }

    _transform (chunk, encoding, callback) {
      let error = null;
      try {
        this.update(chunk, encoding);
      } catch (err) {
        error = err;
      }

      callback(error);
    }

    _flush () {}

    _read (size) {
      this.push(this.squeeze(size));
    }

    update (data, encoding) {
      if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
      if (this._finalized) throw new Error('Squeeze already called')
      if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);

      this._state.absorb(data);

      return this
    }

    squeeze (dataByteLength, encoding) {
      if (!this._finalized) {
        this._finalized = true;
        this._state.absorbLastFewBits(this._delimitedSuffix);
      }

      let data = this._state.squeeze(dataByteLength);
      if (encoding !== undefined) data = data.toString(encoding);

      return data
    }

    _resetState () {
      this._state.initialize(this._rate, this._capacity);
      return this
    }

    _clone () {
      const clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options);
      this._state.copy(clone._state);
      clone._finalized = this._finalized;

      return clone
    }
  };

  const createKeccak = keccak$1;
  const createShake = shake;

  var api = function (KeccakState) {
    const Keccak = createKeccak(KeccakState);
    const Shake = createShake(KeccakState);

    return function (algorithm, options) {
      const hash = typeof algorithm === 'string' ? algorithm.toLowerCase() : algorithm;
      switch (hash) {
        case 'keccak224': return new Keccak(1152, 448, null, 224, options)
        case 'keccak256': return new Keccak(1088, 512, null, 256, options)
        case 'keccak384': return new Keccak(832, 768, null, 384, options)
        case 'keccak512': return new Keccak(576, 1024, null, 512, options)

        case 'sha3-224': return new Keccak(1152, 448, 0x06, 224, options)
        case 'sha3-256': return new Keccak(1088, 512, 0x06, 256, options)
        case 'sha3-384': return new Keccak(832, 768, 0x06, 384, options)
        case 'sha3-512': return new Keccak(576, 1024, 0x06, 512, options)

        case 'shake128': return new Shake(1344, 256, 0x1f, options)
        case 'shake256': return new Shake(1088, 512, 0x1f, options)

        default: throw new Error('Invald algorithm: ' + algorithm)
      }
    }
  };

  var keccakStateUnroll = {};

  const P1600_ROUND_CONSTANTS = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];

  keccakStateUnroll.p1600 = function (s) {
    for (let round = 0; round < 24; ++round) {
      // theta
      const lo0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
      const hi0 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
      const lo1 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
      const hi1 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
      const lo2 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
      const hi2 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
      const lo3 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
      const hi3 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
      const lo4 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
      const hi4 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

      let lo = lo4 ^ (lo1 << 1 | hi1 >>> 31);
      let hi = hi4 ^ (hi1 << 1 | lo1 >>> 31);
      const t1slo0 = s[0] ^ lo;
      const t1shi0 = s[1] ^ hi;
      const t1slo5 = s[10] ^ lo;
      const t1shi5 = s[11] ^ hi;
      const t1slo10 = s[20] ^ lo;
      const t1shi10 = s[21] ^ hi;
      const t1slo15 = s[30] ^ lo;
      const t1shi15 = s[31] ^ hi;
      const t1slo20 = s[40] ^ lo;
      const t1shi20 = s[41] ^ hi;
      lo = lo0 ^ (lo2 << 1 | hi2 >>> 31);
      hi = hi0 ^ (hi2 << 1 | lo2 >>> 31);
      const t1slo1 = s[2] ^ lo;
      const t1shi1 = s[3] ^ hi;
      const t1slo6 = s[12] ^ lo;
      const t1shi6 = s[13] ^ hi;
      const t1slo11 = s[22] ^ lo;
      const t1shi11 = s[23] ^ hi;
      const t1slo16 = s[32] ^ lo;
      const t1shi16 = s[33] ^ hi;
      const t1slo21 = s[42] ^ lo;
      const t1shi21 = s[43] ^ hi;
      lo = lo1 ^ (lo3 << 1 | hi3 >>> 31);
      hi = hi1 ^ (hi3 << 1 | lo3 >>> 31);
      const t1slo2 = s[4] ^ lo;
      const t1shi2 = s[5] ^ hi;
      const t1slo7 = s[14] ^ lo;
      const t1shi7 = s[15] ^ hi;
      const t1slo12 = s[24] ^ lo;
      const t1shi12 = s[25] ^ hi;
      const t1slo17 = s[34] ^ lo;
      const t1shi17 = s[35] ^ hi;
      const t1slo22 = s[44] ^ lo;
      const t1shi22 = s[45] ^ hi;
      lo = lo2 ^ (lo4 << 1 | hi4 >>> 31);
      hi = hi2 ^ (hi4 << 1 | lo4 >>> 31);
      const t1slo3 = s[6] ^ lo;
      const t1shi3 = s[7] ^ hi;
      const t1slo8 = s[16] ^ lo;
      const t1shi8 = s[17] ^ hi;
      const t1slo13 = s[26] ^ lo;
      const t1shi13 = s[27] ^ hi;
      const t1slo18 = s[36] ^ lo;
      const t1shi18 = s[37] ^ hi;
      const t1slo23 = s[46] ^ lo;
      const t1shi23 = s[47] ^ hi;
      lo = lo3 ^ (lo0 << 1 | hi0 >>> 31);
      hi = hi3 ^ (hi0 << 1 | lo0 >>> 31);
      const t1slo4 = s[8] ^ lo;
      const t1shi4 = s[9] ^ hi;
      const t1slo9 = s[18] ^ lo;
      const t1shi9 = s[19] ^ hi;
      const t1slo14 = s[28] ^ lo;
      const t1shi14 = s[29] ^ hi;
      const t1slo19 = s[38] ^ lo;
      const t1shi19 = s[39] ^ hi;
      const t1slo24 = s[48] ^ lo;
      const t1shi24 = s[49] ^ hi;

      // rho & pi
      const t2slo0 = t1slo0;
      const t2shi0 = t1shi0;
      const t2slo16 = (t1shi5 << 4 | t1slo5 >>> 28);
      const t2shi16 = (t1slo5 << 4 | t1shi5 >>> 28);
      const t2slo7 = (t1slo10 << 3 | t1shi10 >>> 29);
      const t2shi7 = (t1shi10 << 3 | t1slo10 >>> 29);
      const t2slo23 = (t1shi15 << 9 | t1slo15 >>> 23);
      const t2shi23 = (t1slo15 << 9 | t1shi15 >>> 23);
      const t2slo14 = (t1slo20 << 18 | t1shi20 >>> 14);
      const t2shi14 = (t1shi20 << 18 | t1slo20 >>> 14);
      const t2slo10 = (t1slo1 << 1 | t1shi1 >>> 31);
      const t2shi10 = (t1shi1 << 1 | t1slo1 >>> 31);
      const t2slo1 = (t1shi6 << 12 | t1slo6 >>> 20);
      const t2shi1 = (t1slo6 << 12 | t1shi6 >>> 20);
      const t2slo17 = (t1slo11 << 10 | t1shi11 >>> 22);
      const t2shi17 = (t1shi11 << 10 | t1slo11 >>> 22);
      const t2slo8 = (t1shi16 << 13 | t1slo16 >>> 19);
      const t2shi8 = (t1slo16 << 13 | t1shi16 >>> 19);
      const t2slo24 = (t1slo21 << 2 | t1shi21 >>> 30);
      const t2shi24 = (t1shi21 << 2 | t1slo21 >>> 30);
      const t2slo20 = (t1shi2 << 30 | t1slo2 >>> 2);
      const t2shi20 = (t1slo2 << 30 | t1shi2 >>> 2);
      const t2slo11 = (t1slo7 << 6 | t1shi7 >>> 26);
      const t2shi11 = (t1shi7 << 6 | t1slo7 >>> 26);
      const t2slo2 = (t1shi12 << 11 | t1slo12 >>> 21);
      const t2shi2 = (t1slo12 << 11 | t1shi12 >>> 21);
      const t2slo18 = (t1slo17 << 15 | t1shi17 >>> 17);
      const t2shi18 = (t1shi17 << 15 | t1slo17 >>> 17);
      const t2slo9 = (t1shi22 << 29 | t1slo22 >>> 3);
      const t2shi9 = (t1slo22 << 29 | t1shi22 >>> 3);
      const t2slo5 = (t1slo3 << 28 | t1shi3 >>> 4);
      const t2shi5 = (t1shi3 << 28 | t1slo3 >>> 4);
      const t2slo21 = (t1shi8 << 23 | t1slo8 >>> 9);
      const t2shi21 = (t1slo8 << 23 | t1shi8 >>> 9);
      const t2slo12 = (t1slo13 << 25 | t1shi13 >>> 7);
      const t2shi12 = (t1shi13 << 25 | t1slo13 >>> 7);
      const t2slo3 = (t1slo18 << 21 | t1shi18 >>> 11);
      const t2shi3 = (t1shi18 << 21 | t1slo18 >>> 11);
      const t2slo19 = (t1shi23 << 24 | t1slo23 >>> 8);
      const t2shi19 = (t1slo23 << 24 | t1shi23 >>> 8);
      const t2slo15 = (t1slo4 << 27 | t1shi4 >>> 5);
      const t2shi15 = (t1shi4 << 27 | t1slo4 >>> 5);
      const t2slo6 = (t1slo9 << 20 | t1shi9 >>> 12);
      const t2shi6 = (t1shi9 << 20 | t1slo9 >>> 12);
      const t2slo22 = (t1shi14 << 7 | t1slo14 >>> 25);
      const t2shi22 = (t1slo14 << 7 | t1shi14 >>> 25);
      const t2slo13 = (t1slo19 << 8 | t1shi19 >>> 24);
      const t2shi13 = (t1shi19 << 8 | t1slo19 >>> 24);
      const t2slo4 = (t1slo24 << 14 | t1shi24 >>> 18);
      const t2shi4 = (t1shi24 << 14 | t1slo24 >>> 18);

      // chi
      s[0] = t2slo0 ^ (~t2slo1 & t2slo2);
      s[1] = t2shi0 ^ (~t2shi1 & t2shi2);
      s[10] = t2slo5 ^ (~t2slo6 & t2slo7);
      s[11] = t2shi5 ^ (~t2shi6 & t2shi7);
      s[20] = t2slo10 ^ (~t2slo11 & t2slo12);
      s[21] = t2shi10 ^ (~t2shi11 & t2shi12);
      s[30] = t2slo15 ^ (~t2slo16 & t2slo17);
      s[31] = t2shi15 ^ (~t2shi16 & t2shi17);
      s[40] = t2slo20 ^ (~t2slo21 & t2slo22);
      s[41] = t2shi20 ^ (~t2shi21 & t2shi22);
      s[2] = t2slo1 ^ (~t2slo2 & t2slo3);
      s[3] = t2shi1 ^ (~t2shi2 & t2shi3);
      s[12] = t2slo6 ^ (~t2slo7 & t2slo8);
      s[13] = t2shi6 ^ (~t2shi7 & t2shi8);
      s[22] = t2slo11 ^ (~t2slo12 & t2slo13);
      s[23] = t2shi11 ^ (~t2shi12 & t2shi13);
      s[32] = t2slo16 ^ (~t2slo17 & t2slo18);
      s[33] = t2shi16 ^ (~t2shi17 & t2shi18);
      s[42] = t2slo21 ^ (~t2slo22 & t2slo23);
      s[43] = t2shi21 ^ (~t2shi22 & t2shi23);
      s[4] = t2slo2 ^ (~t2slo3 & t2slo4);
      s[5] = t2shi2 ^ (~t2shi3 & t2shi4);
      s[14] = t2slo7 ^ (~t2slo8 & t2slo9);
      s[15] = t2shi7 ^ (~t2shi8 & t2shi9);
      s[24] = t2slo12 ^ (~t2slo13 & t2slo14);
      s[25] = t2shi12 ^ (~t2shi13 & t2shi14);
      s[34] = t2slo17 ^ (~t2slo18 & t2slo19);
      s[35] = t2shi17 ^ (~t2shi18 & t2shi19);
      s[44] = t2slo22 ^ (~t2slo23 & t2slo24);
      s[45] = t2shi22 ^ (~t2shi23 & t2shi24);
      s[6] = t2slo3 ^ (~t2slo4 & t2slo0);
      s[7] = t2shi3 ^ (~t2shi4 & t2shi0);
      s[16] = t2slo8 ^ (~t2slo9 & t2slo5);
      s[17] = t2shi8 ^ (~t2shi9 & t2shi5);
      s[26] = t2slo13 ^ (~t2slo14 & t2slo10);
      s[27] = t2shi13 ^ (~t2shi14 & t2shi10);
      s[36] = t2slo18 ^ (~t2slo19 & t2slo15);
      s[37] = t2shi18 ^ (~t2shi19 & t2shi15);
      s[46] = t2slo23 ^ (~t2slo24 & t2slo20);
      s[47] = t2shi23 ^ (~t2shi24 & t2shi20);
      s[8] = t2slo4 ^ (~t2slo0 & t2slo1);
      s[9] = t2shi4 ^ (~t2shi0 & t2shi1);
      s[18] = t2slo9 ^ (~t2slo5 & t2slo6);
      s[19] = t2shi9 ^ (~t2shi5 & t2shi6);
      s[28] = t2slo14 ^ (~t2slo10 & t2slo11);
      s[29] = t2shi14 ^ (~t2shi10 & t2shi11);
      s[38] = t2slo19 ^ (~t2slo15 & t2slo16);
      s[39] = t2shi19 ^ (~t2shi15 & t2shi16);
      s[48] = t2slo24 ^ (~t2slo20 & t2slo21);
      s[49] = t2shi24 ^ (~t2shi20 & t2shi21);

      // iota
      s[0] ^= P1600_ROUND_CONSTANTS[round * 2];
      s[1] ^= P1600_ROUND_CONSTANTS[round * 2 + 1];
    }
  };

  const keccakState = keccakStateUnroll;

  function Keccak () {
    // much faster than `new Array(50)`
    this.state = [
      0, 0, 0, 0, 0,
      0, 0, 0, 0, 0,
      0, 0, 0, 0, 0,
      0, 0, 0, 0, 0,
      0, 0, 0, 0, 0
    ];

    this.blockSize = null;
    this.count = 0;
    this.squeezing = false;
  }

  Keccak.prototype.initialize = function (rate, capacity) {
    for (let i = 0; i < 50; ++i) this.state[i] = 0;
    this.blockSize = rate / 8;
    this.count = 0;
    this.squeezing = false;
  };

  Keccak.prototype.absorb = function (data) {
    for (let i = 0; i < data.length; ++i) {
      this.state[~~(this.count / 4)] ^= data[i] << (8 * (this.count % 4));
      this.count += 1;
      if (this.count === this.blockSize) {
        keccakState.p1600(this.state);
        this.count = 0;
      }
    }
  };

  Keccak.prototype.absorbLastFewBits = function (bits) {
    this.state[~~(this.count / 4)] ^= bits << (8 * (this.count % 4));
    if ((bits & 0x80) !== 0 && this.count === (this.blockSize - 1)) keccakState.p1600(this.state);
    this.state[~~((this.blockSize - 1) / 4)] ^= 0x80 << (8 * ((this.blockSize - 1) % 4));
    keccakState.p1600(this.state);
    this.count = 0;
    this.squeezing = true;
  };

  Keccak.prototype.squeeze = function (length) {
    if (!this.squeezing) this.absorbLastFewBits(0x01);

    const output = Buffer.alloc(length);
    for (let i = 0; i < length; ++i) {
      output[i] = (this.state[~~(this.count / 4)] >>> (8 * (this.count % 4))) & 0xff;
      this.count += 1;
      if (this.count === this.blockSize) {
        keccakState.p1600(this.state);
        this.count = 0;
      }
    }

    return output
  };

  Keccak.prototype.copy = function (dest) {
    for (let i = 0; i < 50; ++i) dest.state[i] = this.state[i];
    dest.blockSize = this.blockSize;
    dest.count = this.count;
    dest.squeezing = this.squeezing;
  };

  var keccak = Keccak;

  var js = api(keccak);

  try {
    keccak$2.exports = require('./bindings');
  } catch (err) {
    keccak$2.exports = js;
  }

  Object.defineProperty(keccak$3, "__esModule", { value: true });
  var hash_utils_1 = hashUtils;
  var createKeccakHash = keccak$2.exports;
  keccak$3.keccak224 = hash_utils_1.createHashFunction(function () {
      return createKeccakHash("keccak224");
  });
  keccak$3.keccak256 = hash_utils_1.createHashFunction(function () {
      return createKeccakHash("keccak256");
  });
  keccak$3.keccak384 = hash_utils_1.createHashFunction(function () {
      return createKeccakHash("keccak384");
  });
  keccak$3.keccak512 = hash_utils_1.createHashFunction(function () {
      return createKeccakHash("keccak512");
  });

  var secp256k1$3 = {};

  var secp256k1$2 = {exports: {}};

  const errors$1 = {
    IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',
    TWEAK_ADD:
      'The tweak was out of range or the resulted private key is invalid',
    TWEAK_MUL: 'The tweak was out of range or equal to zero',
    CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',
    SECKEY_INVALID: 'Private Key is invalid',
    PUBKEY_PARSE: 'Public Key could not be parsed',
    PUBKEY_SERIALIZE: 'Public Key serialization error',
    PUBKEY_COMBINE: 'The sum of the public keys is not valid',
    SIG_PARSE: 'Signature could not be parsed',
    SIGN: 'The nonce generation function failed, or the private key was invalid',
    RECOVER: 'Public key could not be recover',
    ECDH: 'Scalar was invalid (zero or overflow)'
  };

  function assert$h (cond, msg) {
    if (!cond) throw new Error(msg)
  }

  function isUint8Array (name, value, length) {
    assert$h(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`);

    if (length !== undefined) {
      if (Array.isArray(length)) {
        const numbers = length.join(', ');
        const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`;
        assert$h(length.includes(value.length), msg);
      } else {
        const msg = `Expected ${name} to be an Uint8Array with length ${length}`;
        assert$h(value.length === length, msg);
      }
    }
  }

  function isCompressed (value) {
    assert$h(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean');
  }

  function getAssertedOutput (output = (len) => new Uint8Array(len), length) {
    if (typeof output === 'function') output = output(length);
    isUint8Array('output', output, length);
    return output
  }

  function toTypeString (value) {
    return Object.prototype.toString.call(value).slice(8, -1)
  }

  var lib$3 = (secp256k1) => {
    return {
      contextRandomize (seed) {
        assert$h(
          seed === null || seed instanceof Uint8Array,
          'Expected seed to be an Uint8Array or null'
        );
        if (seed !== null) isUint8Array('seed', seed, 32);

        switch (secp256k1.contextRandomize(seed)) {
          case 1:
            throw new Error(errors$1.CONTEXT_RANDOMIZE_UNKNOW)
        }
      },

      privateKeyVerify (seckey) {
        isUint8Array('private key', seckey, 32);

        return secp256k1.privateKeyVerify(seckey) === 0
      },

      privateKeyNegate (seckey) {
        isUint8Array('private key', seckey, 32);

        switch (secp256k1.privateKeyNegate(seckey)) {
          case 0:
            return seckey
          case 1:
            throw new Error(errors$1.IMPOSSIBLE_CASE)
        }
      },

      privateKeyTweakAdd (seckey, tweak) {
        isUint8Array('private key', seckey, 32);
        isUint8Array('tweak', tweak, 32);

        switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {
          case 0:
            return seckey
          case 1:
            throw new Error(errors$1.TWEAK_ADD)
        }
      },

      privateKeyTweakMul (seckey, tweak) {
        isUint8Array('private key', seckey, 32);
        isUint8Array('tweak', tweak, 32);

        switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {
          case 0:
            return seckey
          case 1:
            throw new Error(errors$1.TWEAK_MUL)
        }
      },

      publicKeyVerify (pubkey) {
        isUint8Array('public key', pubkey, [33, 65]);

        return secp256k1.publicKeyVerify(pubkey) === 0
      },

      publicKeyCreate (seckey, compressed = true, output) {
        isUint8Array('private key', seckey, 32);
        isCompressed(compressed);
        output = getAssertedOutput(output, compressed ? 33 : 65);

        switch (secp256k1.publicKeyCreate(output, seckey)) {
          case 0:
            return output
          case 1:
            throw new Error(errors$1.SECKEY_INVALID)
          case 2:
            throw new Error(errors$1.PUBKEY_SERIALIZE)
        }
      },

      publicKeyConvert (pubkey, compressed = true, output) {
        isUint8Array('public key', pubkey, [33, 65]);
        isCompressed(compressed);
        output = getAssertedOutput(output, compressed ? 33 : 65);

        switch (secp256k1.publicKeyConvert(output, pubkey)) {
          case 0:
            return output
          case 1:
            throw new Error(errors$1.PUBKEY_PARSE)
          case 2:
            throw new Error(errors$1.PUBKEY_SERIALIZE)
        }
      },

      publicKeyNegate (pubkey, compressed = true, output) {
        isUint8Array('public key', pubkey, [33, 65]);
        isCompressed(compressed);
        output = getAssertedOutput(output, compressed ? 33 : 65);

        switch (secp256k1.publicKeyNegate(output, pubkey)) {
          case 0:
            return output
          case 1:
            throw new Error(errors$1.PUBKEY_PARSE)
          case 2:
            throw new Error(errors$1.IMPOSSIBLE_CASE)
          case 3:
            throw new Error(errors$1.PUBKEY_SERIALIZE)
        }
      },

      publicKeyCombine (pubkeys, compressed = true, output) {
        assert$h(Array.isArray(pubkeys), 'Expected public keys to be an Array');
        assert$h(pubkeys.length > 0, 'Expected public keys array will have more than zero items');
        for (const pubkey of pubkeys) {
          isUint8Array('public key', pubkey, [33, 65]);
        }
        isCompressed(compressed);
        output = getAssertedOutput(output, compressed ? 33 : 65);

        switch (secp256k1.publicKeyCombine(output, pubkeys)) {
          case 0:
            return output
          case 1:
            throw new Error(errors$1.PUBKEY_PARSE)
          case 2:
            throw new Error(errors$1.PUBKEY_COMBINE)
          case 3:
            throw new Error(errors$1.PUBKEY_SERIALIZE)
        }
      },

      publicKeyTweakAdd (pubkey, tweak, compressed = true, output) {
        isUint8Array('public key', pubkey, [33, 65]);
        isUint8Array('tweak', tweak, 32);
        isCompressed(compressed);
        output = getAssertedOutput(output, compressed ? 33 : 65);

        switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {
          case 0:
            return output
          case 1:
            throw new Error(errors$1.PUBKEY_PARSE)
          case 2:
            throw new Error(errors$1.TWEAK_ADD)
        }
      },

      publicKeyTweakMul (pubkey, tweak, compressed = true, output) {
        isUint8Array('public key', pubkey, [33, 65]);
        isUint8Array('tweak', tweak, 32);
        isCompressed(compressed);
        output = getAssertedOutput(output, compressed ? 33 : 65);

        switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {
          case 0:
            return output
          case 1:
            throw new Error(errors$1.PUBKEY_PARSE)
          case 2:
            throw new Error(errors$1.TWEAK_MUL)
        }
      },

      signatureNormalize (sig) {
        isUint8Array('signature', sig, 64);

        switch (secp256k1.signatureNormalize(sig)) {
          case 0:
            return sig
          case 1:
            throw new Error(errors$1.SIG_PARSE)
        }
      },

      signatureExport (sig, output) {
        isUint8Array('signature', sig, 64);
        output = getAssertedOutput(output, 72);

        const obj = { output, outputlen: 72 };
        switch (secp256k1.signatureExport(obj, sig)) {
          case 0:
            return output.slice(0, obj.outputlen)
          case 1:
            throw new Error(errors$1.SIG_PARSE)
          case 2:
            throw new Error(errors$1.IMPOSSIBLE_CASE)
        }
      },

      signatureImport (sig, output) {
        isUint8Array('signature', sig);
        output = getAssertedOutput(output, 64);

        switch (secp256k1.signatureImport(output, sig)) {
          case 0:
            return output
          case 1:
            throw new Error(errors$1.SIG_PARSE)
          case 2:
            throw new Error(errors$1.IMPOSSIBLE_CASE)
        }
      },

      ecdsaSign (msg32, seckey, options = {}, output) {
        isUint8Array('message', msg32, 32);
        isUint8Array('private key', seckey, 32);
        assert$h(toTypeString(options) === 'Object', 'Expected options to be an Object');
        if (options.data !== undefined) isUint8Array('options.data', options.data);
        if (options.noncefn !== undefined) assert$h(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function');
        output = getAssertedOutput(output, 64);

        const obj = { signature: output, recid: null };
        switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {
          case 0:
            return obj
          case 1:
            throw new Error(errors$1.SIGN)
          case 2:
            throw new Error(errors$1.IMPOSSIBLE_CASE)
        }
      },

      ecdsaVerify (sig, msg32, pubkey) {
        isUint8Array('signature', sig, 64);
        isUint8Array('message', msg32, 32);
        isUint8Array('public key', pubkey, [33, 65]);

        switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {
          case 0:
            return true
          case 3:
            return false
          case 1:
            throw new Error(errors$1.SIG_PARSE)
          case 2:
            throw new Error(errors$1.PUBKEY_PARSE)
        }
      },

      ecdsaRecover (sig, recid, msg32, compressed = true, output) {
        isUint8Array('signature', sig, 64);
        assert$h(
          toTypeString(recid) === 'Number' &&
            recid >= 0 &&
            recid <= 3,
          'Expected recovery id to be a Number within interval [0, 3]'
        );
        isUint8Array('message', msg32, 32);
        isCompressed(compressed);
        output = getAssertedOutput(output, compressed ? 33 : 65);

        switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {
          case 0:
            return output
          case 1:
            throw new Error(errors$1.SIG_PARSE)
          case 2:
            throw new Error(errors$1.RECOVER)
          case 3:
            throw new Error(errors$1.IMPOSSIBLE_CASE)
        }
      },

      ecdh (pubkey, seckey, options = {}, output) {
        isUint8Array('public key', pubkey, [33, 65]);
        isUint8Array('private key', seckey, 32);
        assert$h(toTypeString(options) === 'Object', 'Expected options to be an Object');
        if (options.data !== undefined) isUint8Array('options.data', options.data);
        if (options.hashfn !== undefined) {
          assert$h(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function');
          if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32);
          if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32);
          isUint8Array('output', output);
        } else {
          output = getAssertedOutput(output, 32);
        }

        switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {
          case 0:
            return output
          case 1:
            throw new Error(errors$1.PUBKEY_PARSE)
          case 2:
            throw new Error(errors$1.ECDH)
        }
      }
    }
  };

  var elliptic$2 = {};

  var _from = "elliptic@^6.5.2";
  var _id = "elliptic@6.5.4";
  var _inBundle = false;
  var _integrity = "sha512-iLhC6ULemrljPZb+QutR5TQGB+pdW6KGD5RSegS+8sorOZT+rdQFbsQFJgvN3eRqNALqJer4oQ16YvJHlU8hzQ==";
  var _location = "/elliptic";
  var _phantomChildren = {
  };
  var _requested = {
  	type: "range",
  	registry: true,
  	raw: "elliptic@^6.5.2",
  	name: "elliptic",
  	escapedName: "elliptic",
  	rawSpec: "^6.5.2",
  	saveSpec: null,
  	fetchSpec: "^6.5.2"
  };
  var _requiredBy = [
  	"/@ethersproject/signing-key",
  	"/ethereumjs-abi/ethereumjs-util",
  	"/ethereumjs-util",
  	"/ethereumjs-vm/ethereumjs-block/ethereumjs-util",
  	"/ethereumjs-vm/ethereumjs-util",
  	"/secp256k1"
  ];
  var _resolved = "https://registry.npmjs.org/elliptic/-/elliptic-6.5.4.tgz";
  var _shasum = "da37cebd31e79a1367e941b592ed1fbebd58abbb";
  var _spec = "elliptic@^6.5.2";
  var _where = "/Users/marktang/MarkTangProject/weicai-static/chain-handler/node_modules/ethereumjs-abi/node_modules/ethereumjs-util";
  var author = {
  	name: "Fedor Indutny",
  	email: "fedor@indutny.com"
  };
  var bugs = {
  	url: "https://github.com/indutny/elliptic/issues"
  };
  var bundleDependencies = false;
  var dependencies = {
  	"bn.js": "^4.11.9",
  	brorand: "^1.1.0",
  	"hash.js": "^1.0.0",
  	"hmac-drbg": "^1.0.1",
  	inherits: "^2.0.4",
  	"minimalistic-assert": "^1.0.1",
  	"minimalistic-crypto-utils": "^1.0.1"
  };
  var deprecated = false;
  var description = "EC cryptography";
  var devDependencies = {
  	brfs: "^2.0.2",
  	coveralls: "^3.1.0",
  	eslint: "^7.6.0",
  	grunt: "^1.2.1",
  	"grunt-browserify": "^5.3.0",
  	"grunt-cli": "^1.3.2",
  	"grunt-contrib-connect": "^3.0.0",
  	"grunt-contrib-copy": "^1.0.0",
  	"grunt-contrib-uglify": "^5.0.0",
  	"grunt-mocha-istanbul": "^5.0.2",
  	"grunt-saucelabs": "^9.0.1",
  	istanbul: "^0.4.5",
  	mocha: "^8.0.1"
  };
  var files = [
  	"lib"
  ];
  var homepage = "https://github.com/indutny/elliptic";
  var keywords = [
  	"EC",
  	"Elliptic",
  	"curve",
  	"Cryptography"
  ];
  var license = "MIT";
  var main = "lib/elliptic.js";
  var name = "elliptic";
  var repository = {
  	type: "git",
  	url: "git+ssh://git@github.com/indutny/elliptic.git"
  };
  var scripts = {
  	lint: "eslint lib test",
  	"lint:fix": "npm run lint -- --fix",
  	test: "npm run lint && npm run unit",
  	unit: "istanbul test _mocha --reporter=spec test/index.js",
  	version: "grunt dist && git add dist/"
  };
  var version = "6.5.4";
  var require$$0 = {
  	_from: _from,
  	_id: _id,
  	_inBundle: _inBundle,
  	_integrity: _integrity,
  	_location: _location,
  	_phantomChildren: _phantomChildren,
  	_requested: _requested,
  	_requiredBy: _requiredBy,
  	_resolved: _resolved,
  	_shasum: _shasum,
  	_spec: _spec,
  	_where: _where,
  	author: author,
  	bugs: bugs,
  	bundleDependencies: bundleDependencies,
  	dependencies: dependencies,
  	deprecated: deprecated,
  	description: description,
  	devDependencies: devDependencies,
  	files: files,
  	homepage: homepage,
  	keywords: keywords,
  	license: license,
  	main: main,
  	name: name,
  	repository: repository,
  	scripts: scripts,
  	version: version
  };

  var utils$o = {};

  var bn$1 = {exports: {}};

  (function (module) {
  (function (module, exports) {

    // Utils
    function assert (val, msg) {
      if (!val) throw new Error(msg || 'Assertion failed');
    }

    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits (ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }

    // BN

    function BN (number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }

      this.negative = 0;
      this.words = null;
      this.length = 0;

      // Reduction context
      this.red = null;

      if (number !== null) {
        if (base === 'le' || base === 'be') {
          endian = base;
          base = 10;
        }

        this._init(number || 0, base || 10, endian || 'be');
      }
    }
    if (typeof module === 'object') {
      module.exports = BN;
    } else {
      exports.BN = BN;
    }

    BN.BN = BN;
    BN.wordSize = 26;

    var Buffer;
    try {
      if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
        Buffer = window.Buffer;
      } else {
        Buffer = require('buffer').Buffer;
      }
    } catch (e) {
    }

    BN.isBN = function isBN (num) {
      if (num instanceof BN) {
        return true;
      }

      return num !== null && typeof num === 'object' &&
        num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };

    BN.max = function max (left, right) {
      if (left.cmp(right) > 0) return left;
      return right;
    };

    BN.min = function min (left, right) {
      if (left.cmp(right) < 0) return left;
      return right;
    };

    BN.prototype._init = function init (number, base, endian) {
      if (typeof number === 'number') {
        return this._initNumber(number, base, endian);
      }

      if (typeof number === 'object') {
        return this._initArray(number, base, endian);
      }

      if (base === 'hex') {
        base = 16;
      }
      assert(base === (base | 0) && base >= 2 && base <= 36);

      number = number.toString().replace(/\s+/g, '');
      var start = 0;
      if (number[0] === '-') {
        start++;
        this.negative = 1;
      }

      if (start < number.length) {
        if (base === 16) {
          this._parseHex(number, start, endian);
        } else {
          this._parseBase(number, base, start);
          if (endian === 'le') {
            this._initArray(this.toArray(), base, endian);
          }
        }
      }
    };

    BN.prototype._initNumber = function _initNumber (number, base, endian) {
      if (number < 0) {
        this.negative = 1;
        number = -number;
      }
      if (number < 0x4000000) {
        this.words = [ number & 0x3ffffff ];
        this.length = 1;
      } else if (number < 0x10000000000000) {
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff
        ];
        this.length = 2;
      } else {
        assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff,
          1
        ];
        this.length = 3;
      }

      if (endian !== 'le') return;

      // Reverse the bytes
      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initArray = function _initArray (number, base, endian) {
      // Perhaps a Uint8Array
      assert(typeof number.length === 'number');
      if (number.length <= 0) {
        this.words = [ 0 ];
        this.length = 1;
        return this;
      }

      this.length = Math.ceil(number.length / 3);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      var off = 0;
      if (endian === 'be') {
        for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
          w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      } else if (endian === 'le') {
        for (i = 0, j = 0; i < number.length; i += 3) {
          w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      }
      return this.strip();
    };

    function parseHex4Bits (string, index) {
      var c = string.charCodeAt(index);
      // 'A' - 'F'
      if (c >= 65 && c <= 70) {
        return c - 55;
      // 'a' - 'f'
      } else if (c >= 97 && c <= 102) {
        return c - 87;
      // '0' - '9'
      } else {
        return (c - 48) & 0xf;
      }
    }

    function parseHexByte (string, lowerBound, index) {
      var r = parseHex4Bits(string, index);
      if (index - 1 >= lowerBound) {
        r |= parseHex4Bits(string, index - 1) << 4;
      }
      return r;
    }

    BN.prototype._parseHex = function _parseHex (number, start, endian) {
      // Create possibly bigger array to ensure that it fits the number
      this.length = Math.ceil((number.length - start) / 6);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      // 24-bits chunks
      var off = 0;
      var j = 0;

      var w;
      if (endian === 'be') {
        for (i = number.length - 1; i >= start; i -= 2) {
          w = parseHexByte(number, start, i) << off;
          this.words[j] |= w & 0x3ffffff;
          if (off >= 18) {
            off -= 18;
            j += 1;
            this.words[j] |= w >>> 26;
          } else {
            off += 8;
          }
        }
      } else {
        var parseLength = number.length - start;
        for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
          w = parseHexByte(number, start, i) << off;
          this.words[j] |= w & 0x3ffffff;
          if (off >= 18) {
            off -= 18;
            j += 1;
            this.words[j] |= w >>> 26;
          } else {
            off += 8;
          }
        }
      }

      this.strip();
    };

    function parseBase (str, start, end, mul) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;

        r *= mul;

        // 'a'
        if (c >= 49) {
          r += c - 49 + 0xa;

        // 'A'
        } else if (c >= 17) {
          r += c - 17 + 0xa;

        // '0' - '9'
        } else {
          r += c;
        }
      }
      return r;
    }

    BN.prototype._parseBase = function _parseBase (number, base, start) {
      // Initialize as zero
      this.words = [ 0 ];
      this.length = 1;

      // Find length of limb in base
      for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = (limbPow / base) | 0;

      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;

      var word = 0;
      for (var i = start; i < end; i += limbLen) {
        word = parseBase(number, i, i + limbLen, base);

        this.imuln(limbPow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }

      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i, number.length, base);

        for (i = 0; i < mod; i++) {
          pow *= base;
        }

        this.imuln(pow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }

      this.strip();
    };

    BN.prototype.copy = function copy (dest) {
      dest.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        dest.words[i] = this.words[i];
      }
      dest.length = this.length;
      dest.negative = this.negative;
      dest.red = this.red;
    };

    BN.prototype.clone = function clone () {
      var r = new BN(null);
      this.copy(r);
      return r;
    };

    BN.prototype._expand = function _expand (size) {
      while (this.length < size) {
        this.words[this.length++] = 0;
      }
      return this;
    };

    // Remove leading `0` from `this`
    BN.prototype.strip = function strip () {
      while (this.length > 1 && this.words[this.length - 1] === 0) {
        this.length--;
      }
      return this._normSign();
    };

    BN.prototype._normSign = function _normSign () {
      // -0 = 0
      if (this.length === 1 && this.words[0] === 0) {
        this.negative = 0;
      }
      return this;
    };

    BN.prototype.inspect = function inspect () {
      return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };

    /*

    var zeros = [];
    var groupSizes = [];
    var groupBases = [];

    var s = '';
    var i = -1;
    while (++i < BN.wordSize) {
      zeros[i] = s;
      s += '0';
    }
    groupSizes[0] = 0;
    groupSizes[1] = 0;
    groupBases[0] = 0;
    groupBases[1] = 0;
    var base = 2 - 1;
    while (++base < 36 + 1) {
      var groupSize = 0;
      var groupBase = 1;
      while (groupBase < (1 << BN.wordSize) / base) {
        groupBase *= base;
        groupSize += 1;
      }
      groupSizes[base] = groupSize;
      groupBases[base] = groupBase;
    }

    */

    var zeros = [
      '',
      '0',
      '00',
      '000',
      '0000',
      '00000',
      '000000',
      '0000000',
      '00000000',
      '000000000',
      '0000000000',
      '00000000000',
      '000000000000',
      '0000000000000',
      '00000000000000',
      '000000000000000',
      '0000000000000000',
      '00000000000000000',
      '000000000000000000',
      '0000000000000000000',
      '00000000000000000000',
      '000000000000000000000',
      '0000000000000000000000',
      '00000000000000000000000',
      '000000000000000000000000',
      '0000000000000000000000000'
    ];

    var groupSizes = [
      0, 0,
      25, 16, 12, 11, 10, 9, 8,
      8, 7, 7, 7, 7, 6, 6,
      6, 6, 6, 6, 6, 5, 5,
      5, 5, 5, 5, 5, 5, 5,
      5, 5, 5, 5, 5, 5, 5
    ];

    var groupBases = [
      0, 0,
      33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
      43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
      16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
      6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
      24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
    ];

    BN.prototype.toString = function toString (base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;

      var out;
      if (base === 16 || base === 'hex') {
        out = '';
        var off = 0;
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = this.words[i];
          var word = (((w << off) | carry) & 0xffffff).toString(16);
          carry = (w >>> (24 - off)) & 0xffffff;
          if (carry !== 0 || i !== this.length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off += 2;
          if (off >= 26) {
            off -= 26;
            i--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      if (base === (base | 0) && base >= 2 && base <= 36) {
        // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
        var groupSize = groupSizes[base];
        // var groupBase = Math.pow(base, groupSize);
        var groupBase = groupBases[base];
        out = '';
        var c = this.clone();
        c.negative = 0;
        while (!c.isZero()) {
          var r = c.modn(groupBase).toString(base);
          c = c.idivn(groupBase);

          if (!c.isZero()) {
            out = zeros[groupSize - r.length] + r + out;
          } else {
            out = r + out;
          }
        }
        if (this.isZero()) {
          out = '0' + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      assert(false, 'Base should be between 2 and 36');
    };

    BN.prototype.toNumber = function toNumber () {
      var ret = this.words[0];
      if (this.length === 2) {
        ret += this.words[1] * 0x4000000;
      } else if (this.length === 3 && this.words[2] === 0x01) {
        // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + (this.words[1] * 0x4000000);
      } else if (this.length > 2) {
        assert(false, 'Number can only safely store up to 53 bits');
      }
      return (this.negative !== 0) ? -ret : ret;
    };

    BN.prototype.toJSON = function toJSON () {
      return this.toString(16);
    };

    BN.prototype.toBuffer = function toBuffer (endian, length) {
      assert(typeof Buffer !== 'undefined');
      return this.toArrayLike(Buffer, endian, length);
    };

    BN.prototype.toArray = function toArray (endian, length) {
      return this.toArrayLike(Array, endian, length);
    };

    BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert(byteLength <= reqLength, 'byte array longer than desired length');
      assert(reqLength > 0, 'Requested array length <= 0');

      this.strip();
      var littleEndian = endian === 'le';
      var res = new ArrayType(reqLength);

      var b, i;
      var q = this.clone();
      if (!littleEndian) {
        // Assume big-endian
        for (i = 0; i < reqLength - byteLength; i++) {
          res[i] = 0;
        }

        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[reqLength - i - 1] = b;
        }
      } else {
        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[i] = b;
        }

        for (; i < reqLength; i++) {
          res[i] = 0;
        }
      }

      return res;
    };

    if (Math.clz32) {
      BN.prototype._countBits = function _countBits (w) {
        return 32 - Math.clz32(w);
      };
    } else {
      BN.prototype._countBits = function _countBits (w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
          r += 13;
          t >>>= 13;
        }
        if (t >= 0x40) {
          r += 7;
          t >>>= 7;
        }
        if (t >= 0x8) {
          r += 4;
          t >>>= 4;
        }
        if (t >= 0x02) {
          r += 2;
          t >>>= 2;
        }
        return r + t;
      };
    }

    BN.prototype._zeroBits = function _zeroBits (w) {
      // Short-cut
      if (w === 0) return 26;

      var t = w;
      var r = 0;
      if ((t & 0x1fff) === 0) {
        r += 13;
        t >>>= 13;
      }
      if ((t & 0x7f) === 0) {
        r += 7;
        t >>>= 7;
      }
      if ((t & 0xf) === 0) {
        r += 4;
        t >>>= 4;
      }
      if ((t & 0x3) === 0) {
        r += 2;
        t >>>= 2;
      }
      if ((t & 0x1) === 0) {
        r++;
      }
      return r;
    };

    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength () {
      var w = this.words[this.length - 1];
      var hi = this._countBits(w);
      return (this.length - 1) * 26 + hi;
    };

    function toBitArray (num) {
      var w = new Array(num.bitLength());

      for (var bit = 0; bit < w.length; bit++) {
        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
      }

      return w;
    }

    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits () {
      if (this.isZero()) return 0;

      var r = 0;
      for (var i = 0; i < this.length; i++) {
        var b = this._zeroBits(this.words[i]);
        r += b;
        if (b !== 26) break;
      }
      return r;
    };

    BN.prototype.byteLength = function byteLength () {
      return Math.ceil(this.bitLength() / 8);
    };

    BN.prototype.toTwos = function toTwos (width) {
      if (this.negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };

    BN.prototype.fromTwos = function fromTwos (width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };

    BN.prototype.isNeg = function isNeg () {
      return this.negative !== 0;
    };

    // Return negative clone of `this`
    BN.prototype.neg = function neg () {
      return this.clone().ineg();
    };

    BN.prototype.ineg = function ineg () {
      if (!this.isZero()) {
        this.negative ^= 1;
      }

      return this;
    };

    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor (num) {
      while (this.length < num.length) {
        this.words[this.length++] = 0;
      }

      for (var i = 0; i < num.length; i++) {
        this.words[i] = this.words[i] | num.words[i];
      }

      return this.strip();
    };

    BN.prototype.ior = function ior (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuor(num);
    };

    // Or `num` with `this`
    BN.prototype.or = function or (num) {
      if (this.length > num.length) return this.clone().ior(num);
      return num.clone().ior(this);
    };

    BN.prototype.uor = function uor (num) {
      if (this.length > num.length) return this.clone().iuor(num);
      return num.clone().iuor(this);
    };

    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand (num) {
      // b = min-length(num, this)
      var b;
      if (this.length > num.length) {
        b = num;
      } else {
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = this.words[i] & num.words[i];
      }

      this.length = b.length;

      return this.strip();
    };

    BN.prototype.iand = function iand (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuand(num);
    };

    // And `num` with `this`
    BN.prototype.and = function and (num) {
      if (this.length > num.length) return this.clone().iand(num);
      return num.clone().iand(this);
    };

    BN.prototype.uand = function uand (num) {
      if (this.length > num.length) return this.clone().iuand(num);
      return num.clone().iuand(this);
    };

    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor (num) {
      // a.length > b.length
      var a;
      var b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = a.words[i] ^ b.words[i];
      }

      if (this !== a) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = a.length;

      return this.strip();
    };

    BN.prototype.ixor = function ixor (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuxor(num);
    };

    // Xor `num` with `this`
    BN.prototype.xor = function xor (num) {
      if (this.length > num.length) return this.clone().ixor(num);
      return num.clone().ixor(this);
    };

    BN.prototype.uxor = function uxor (num) {
      if (this.length > num.length) return this.clone().iuxor(num);
      return num.clone().iuxor(this);
    };

    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn (width) {
      assert(typeof width === 'number' && width >= 0);

      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;

      // Extend the buffer with leading zeroes
      this._expand(bytesNeeded);

      if (bitsLeft > 0) {
        bytesNeeded--;
      }

      // Handle complete words
      for (var i = 0; i < bytesNeeded; i++) {
        this.words[i] = ~this.words[i] & 0x3ffffff;
      }

      // Handle the residue
      if (bitsLeft > 0) {
        this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
      }

      // And remove leading zeroes
      return this.strip();
    };

    BN.prototype.notn = function notn (width) {
      return this.clone().inotn(width);
    };

    // Set `bit` of `this`
    BN.prototype.setn = function setn (bit, val) {
      assert(typeof bit === 'number' && bit >= 0);

      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      this._expand(off + 1);

      if (val) {
        this.words[off] = this.words[off] | (1 << wbit);
      } else {
        this.words[off] = this.words[off] & ~(1 << wbit);
      }

      return this.strip();
    };

    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd (num) {
      var r;

      // negative + positive
      if (this.negative !== 0 && num.negative === 0) {
        this.negative = 0;
        r = this.isub(num);
        this.negative ^= 1;
        return this._normSign();

      // positive + negative
      } else if (this.negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r = this.isub(num);
        num.negative = 1;
        return r._normSign();
      }

      // a.length > b.length
      var a, b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }

      this.length = a.length;
      if (carry !== 0) {
        this.words[this.length] = carry;
        this.length++;
      // Copy the rest of the words
      } else if (a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      return this;
    };

    // Add `num` to `this`
    BN.prototype.add = function add (num) {
      var res;
      if (num.negative !== 0 && this.negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && this.negative !== 0) {
        this.negative = 0;
        res = num.sub(this);
        this.negative = 1;
        return res;
      }

      if (this.length > num.length) return this.clone().iadd(num);

      return num.clone().iadd(this);
    };

    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub (num) {
      // this - (-num) = this + num
      if (num.negative !== 0) {
        num.negative = 0;
        var r = this.iadd(num);
        num.negative = 1;
        return r._normSign();

      // -this - num = -(this + num)
      } else if (this.negative !== 0) {
        this.negative = 0;
        this.iadd(num);
        this.negative = 1;
        return this._normSign();
      }

      // At this point both numbers are positive
      var cmp = this.cmp(num);

      // Optimization - zeroify
      if (cmp === 0) {
        this.negative = 0;
        this.length = 1;
        this.words[0] = 0;
        return this;
      }

      // a > b
      var a, b;
      if (cmp > 0) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }

      // Copy rest of the words
      if (carry === 0 && i < a.length && a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = Math.max(this.length, i);

      if (a !== this) {
        this.negative = 1;
      }

      return this.strip();
    };

    // Subtract `num` from `this`
    BN.prototype.sub = function sub (num) {
      return this.clone().isub(num);
    };

    function smallMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      var len = (self.length + num.length) | 0;
      out.length = len;
      len = (len - 1) | 0;

      // Peel one iteration (compiler can't do it, because of code complexity)
      var a = self.words[0] | 0;
      var b = num.words[0] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      var carry = (r / 0x4000000) | 0;
      out.words[0] = lo;

      for (var k = 1; k < len; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = carry >>> 26;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = (k - j) | 0;
          a = self.words[i] | 0;
          b = num.words[j] | 0;
          r = a * b + rword;
          ncarry += (r / 0x4000000) | 0;
          rword = r & 0x3ffffff;
        }
        out.words[k] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k] = carry | 0;
      } else {
        out.length--;
      }

      return out.strip();
    }

    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo (self, num, out) {
      var a = self.words;
      var b = num.words;
      var o = out.words;
      var c = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a[0] | 0;
      var al0 = a0 & 0x1fff;
      var ah0 = a0 >>> 13;
      var a1 = a[1] | 0;
      var al1 = a1 & 0x1fff;
      var ah1 = a1 >>> 13;
      var a2 = a[2] | 0;
      var al2 = a2 & 0x1fff;
      var ah2 = a2 >>> 13;
      var a3 = a[3] | 0;
      var al3 = a3 & 0x1fff;
      var ah3 = a3 >>> 13;
      var a4 = a[4] | 0;
      var al4 = a4 & 0x1fff;
      var ah4 = a4 >>> 13;
      var a5 = a[5] | 0;
      var al5 = a5 & 0x1fff;
      var ah5 = a5 >>> 13;
      var a6 = a[6] | 0;
      var al6 = a6 & 0x1fff;
      var ah6 = a6 >>> 13;
      var a7 = a[7] | 0;
      var al7 = a7 & 0x1fff;
      var ah7 = a7 >>> 13;
      var a8 = a[8] | 0;
      var al8 = a8 & 0x1fff;
      var ah8 = a8 >>> 13;
      var a9 = a[9] | 0;
      var al9 = a9 & 0x1fff;
      var ah9 = a9 >>> 13;
      var b0 = b[0] | 0;
      var bl0 = b0 & 0x1fff;
      var bh0 = b0 >>> 13;
      var b1 = b[1] | 0;
      var bl1 = b1 & 0x1fff;
      var bh1 = b1 >>> 13;
      var b2 = b[2] | 0;
      var bl2 = b2 & 0x1fff;
      var bh2 = b2 >>> 13;
      var b3 = b[3] | 0;
      var bl3 = b3 & 0x1fff;
      var bh3 = b3 >>> 13;
      var b4 = b[4] | 0;
      var bl4 = b4 & 0x1fff;
      var bh4 = b4 >>> 13;
      var b5 = b[5] | 0;
      var bl5 = b5 & 0x1fff;
      var bh5 = b5 >>> 13;
      var b6 = b[6] | 0;
      var bl6 = b6 & 0x1fff;
      var bh6 = b6 >>> 13;
      var b7 = b[7] | 0;
      var bl7 = b7 & 0x1fff;
      var bh7 = b7 >>> 13;
      var b8 = b[8] | 0;
      var bl8 = b8 & 0x1fff;
      var bh8 = b8 >>> 13;
      var b9 = b[9] | 0;
      var bl9 = b9 & 0x1fff;
      var bh9 = b9 >>> 13;

      out.negative = self.negative ^ num.negative;
      out.length = 19;
      /* k = 0 */
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = (mid + Math.imul(ah0, bl0)) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
      w0 &= 0x3ffffff;
      /* k = 1 */
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = (mid + Math.imul(ah1, bl0)) | 0;
      hi = Math.imul(ah1, bh0);
      lo = (lo + Math.imul(al0, bl1)) | 0;
      mid = (mid + Math.imul(al0, bh1)) | 0;
      mid = (mid + Math.imul(ah0, bl1)) | 0;
      hi = (hi + Math.imul(ah0, bh1)) | 0;
      var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
      w1 &= 0x3ffffff;
      /* k = 2 */
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = (mid + Math.imul(ah2, bl0)) | 0;
      hi = Math.imul(ah2, bh0);
      lo = (lo + Math.imul(al1, bl1)) | 0;
      mid = (mid + Math.imul(al1, bh1)) | 0;
      mid = (mid + Math.imul(ah1, bl1)) | 0;
      hi = (hi + Math.imul(ah1, bh1)) | 0;
      lo = (lo + Math.imul(al0, bl2)) | 0;
      mid = (mid + Math.imul(al0, bh2)) | 0;
      mid = (mid + Math.imul(ah0, bl2)) | 0;
      hi = (hi + Math.imul(ah0, bh2)) | 0;
      var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
      w2 &= 0x3ffffff;
      /* k = 3 */
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = (mid + Math.imul(ah3, bl0)) | 0;
      hi = Math.imul(ah3, bh0);
      lo = (lo + Math.imul(al2, bl1)) | 0;
      mid = (mid + Math.imul(al2, bh1)) | 0;
      mid = (mid + Math.imul(ah2, bl1)) | 0;
      hi = (hi + Math.imul(ah2, bh1)) | 0;
      lo = (lo + Math.imul(al1, bl2)) | 0;
      mid = (mid + Math.imul(al1, bh2)) | 0;
      mid = (mid + Math.imul(ah1, bl2)) | 0;
      hi = (hi + Math.imul(ah1, bh2)) | 0;
      lo = (lo + Math.imul(al0, bl3)) | 0;
      mid = (mid + Math.imul(al0, bh3)) | 0;
      mid = (mid + Math.imul(ah0, bl3)) | 0;
      hi = (hi + Math.imul(ah0, bh3)) | 0;
      var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
      w3 &= 0x3ffffff;
      /* k = 4 */
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = (mid + Math.imul(ah4, bl0)) | 0;
      hi = Math.imul(ah4, bh0);
      lo = (lo + Math.imul(al3, bl1)) | 0;
      mid = (mid + Math.imul(al3, bh1)) | 0;
      mid = (mid + Math.imul(ah3, bl1)) | 0;
      hi = (hi + Math.imul(ah3, bh1)) | 0;
      lo = (lo + Math.imul(al2, bl2)) | 0;
      mid = (mid + Math.imul(al2, bh2)) | 0;
      mid = (mid + Math.imul(ah2, bl2)) | 0;
      hi = (hi + Math.imul(ah2, bh2)) | 0;
      lo = (lo + Math.imul(al1, bl3)) | 0;
      mid = (mid + Math.imul(al1, bh3)) | 0;
      mid = (mid + Math.imul(ah1, bl3)) | 0;
      hi = (hi + Math.imul(ah1, bh3)) | 0;
      lo = (lo + Math.imul(al0, bl4)) | 0;
      mid = (mid + Math.imul(al0, bh4)) | 0;
      mid = (mid + Math.imul(ah0, bl4)) | 0;
      hi = (hi + Math.imul(ah0, bh4)) | 0;
      var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
      w4 &= 0x3ffffff;
      /* k = 5 */
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = (mid + Math.imul(ah5, bl0)) | 0;
      hi = Math.imul(ah5, bh0);
      lo = (lo + Math.imul(al4, bl1)) | 0;
      mid = (mid + Math.imul(al4, bh1)) | 0;
      mid = (mid + Math.imul(ah4, bl1)) | 0;
      hi = (hi + Math.imul(ah4, bh1)) | 0;
      lo = (lo + Math.imul(al3, bl2)) | 0;
      mid = (mid + Math.imul(al3, bh2)) | 0;
      mid = (mid + Math.imul(ah3, bl2)) | 0;
      hi = (hi + Math.imul(ah3, bh2)) | 0;
      lo = (lo + Math.imul(al2, bl3)) | 0;
      mid = (mid + Math.imul(al2, bh3)) | 0;
      mid = (mid + Math.imul(ah2, bl3)) | 0;
      hi = (hi + Math.imul(ah2, bh3)) | 0;
      lo = (lo + Math.imul(al1, bl4)) | 0;
      mid = (mid + Math.imul(al1, bh4)) | 0;
      mid = (mid + Math.imul(ah1, bl4)) | 0;
      hi = (hi + Math.imul(ah1, bh4)) | 0;
      lo = (lo + Math.imul(al0, bl5)) | 0;
      mid = (mid + Math.imul(al0, bh5)) | 0;
      mid = (mid + Math.imul(ah0, bl5)) | 0;
      hi = (hi + Math.imul(ah0, bh5)) | 0;
      var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
      w5 &= 0x3ffffff;
      /* k = 6 */
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = (mid + Math.imul(ah6, bl0)) | 0;
      hi = Math.imul(ah6, bh0);
      lo = (lo + Math.imul(al5, bl1)) | 0;
      mid = (mid + Math.imul(al5, bh1)) | 0;
      mid = (mid + Math.imul(ah5, bl1)) | 0;
      hi = (hi + Math.imul(ah5, bh1)) | 0;
      lo = (lo + Math.imul(al4, bl2)) | 0;
      mid = (mid + Math.imul(al4, bh2)) | 0;
      mid = (mid + Math.imul(ah4, bl2)) | 0;
      hi = (hi + Math.imul(ah4, bh2)) | 0;
      lo = (lo + Math.imul(al3, bl3)) | 0;
      mid = (mid + Math.imul(al3, bh3)) | 0;
      mid = (mid + Math.imul(ah3, bl3)) | 0;
      hi = (hi + Math.imul(ah3, bh3)) | 0;
      lo = (lo + Math.imul(al2, bl4)) | 0;
      mid = (mid + Math.imul(al2, bh4)) | 0;
      mid = (mid + Math.imul(ah2, bl4)) | 0;
      hi = (hi + Math.imul(ah2, bh4)) | 0;
      lo = (lo + Math.imul(al1, bl5)) | 0;
      mid = (mid + Math.imul(al1, bh5)) | 0;
      mid = (mid + Math.imul(ah1, bl5)) | 0;
      hi = (hi + Math.imul(ah1, bh5)) | 0;
      lo = (lo + Math.imul(al0, bl6)) | 0;
      mid = (mid + Math.imul(al0, bh6)) | 0;
      mid = (mid + Math.imul(ah0, bl6)) | 0;
      hi = (hi + Math.imul(ah0, bh6)) | 0;
      var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
      w6 &= 0x3ffffff;
      /* k = 7 */
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = (mid + Math.imul(ah7, bl0)) | 0;
      hi = Math.imul(ah7, bh0);
      lo = (lo + Math.imul(al6, bl1)) | 0;
      mid = (mid + Math.imul(al6, bh1)) | 0;
      mid = (mid + Math.imul(ah6, bl1)) | 0;
      hi = (hi + Math.imul(ah6, bh1)) | 0;
      lo = (lo + Math.imul(al5, bl2)) | 0;
      mid = (mid + Math.imul(al5, bh2)) | 0;
      mid = (mid + Math.imul(ah5, bl2)) | 0;
      hi = (hi + Math.imul(ah5, bh2)) | 0;
      lo = (lo + Math.imul(al4, bl3)) | 0;
      mid = (mid + Math.imul(al4, bh3)) | 0;
      mid = (mid + Math.imul(ah4, bl3)) | 0;
      hi = (hi + Math.imul(ah4, bh3)) | 0;
      lo = (lo + Math.imul(al3, bl4)) | 0;
      mid = (mid + Math.imul(al3, bh4)) | 0;
      mid = (mid + Math.imul(ah3, bl4)) | 0;
      hi = (hi + Math.imul(ah3, bh4)) | 0;
      lo = (lo + Math.imul(al2, bl5)) | 0;
      mid = (mid + Math.imul(al2, bh5)) | 0;
      mid = (mid + Math.imul(ah2, bl5)) | 0;
      hi = (hi + Math.imul(ah2, bh5)) | 0;
      lo = (lo + Math.imul(al1, bl6)) | 0;
      mid = (mid + Math.imul(al1, bh6)) | 0;
      mid = (mid + Math.imul(ah1, bl6)) | 0;
      hi = (hi + Math.imul(ah1, bh6)) | 0;
      lo = (lo + Math.imul(al0, bl7)) | 0;
      mid = (mid + Math.imul(al0, bh7)) | 0;
      mid = (mid + Math.imul(ah0, bl7)) | 0;
      hi = (hi + Math.imul(ah0, bh7)) | 0;
      var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
      w7 &= 0x3ffffff;
      /* k = 8 */
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = (mid + Math.imul(ah8, bl0)) | 0;
      hi = Math.imul(ah8, bh0);
      lo = (lo + Math.imul(al7, bl1)) | 0;
      mid = (mid + Math.imul(al7, bh1)) | 0;
      mid = (mid + Math.imul(ah7, bl1)) | 0;
      hi = (hi + Math.imul(ah7, bh1)) | 0;
      lo = (lo + Math.imul(al6, bl2)) | 0;
      mid = (mid + Math.imul(al6, bh2)) | 0;
      mid = (mid + Math.imul(ah6, bl2)) | 0;
      hi = (hi + Math.imul(ah6, bh2)) | 0;
      lo = (lo + Math.imul(al5, bl3)) | 0;
      mid = (mid + Math.imul(al5, bh3)) | 0;
      mid = (mid + Math.imul(ah5, bl3)) | 0;
      hi = (hi + Math.imul(ah5, bh3)) | 0;
      lo = (lo + Math.imul(al4, bl4)) | 0;
      mid = (mid + Math.imul(al4, bh4)) | 0;
      mid = (mid + Math.imul(ah4, bl4)) | 0;
      hi = (hi + Math.imul(ah4, bh4)) | 0;
      lo = (lo + Math.imul(al3, bl5)) | 0;
      mid = (mid + Math.imul(al3, bh5)) | 0;
      mid = (mid + Math.imul(ah3, bl5)) | 0;
      hi = (hi + Math.imul(ah3, bh5)) | 0;
      lo = (lo + Math.imul(al2, bl6)) | 0;
      mid = (mid + Math.imul(al2, bh6)) | 0;
      mid = (mid + Math.imul(ah2, bl6)) | 0;
      hi = (hi + Math.imul(ah2, bh6)) | 0;
      lo = (lo + Math.imul(al1, bl7)) | 0;
      mid = (mid + Math.imul(al1, bh7)) | 0;
      mid = (mid + Math.imul(ah1, bl7)) | 0;
      hi = (hi + Math.imul(ah1, bh7)) | 0;
      lo = (lo + Math.imul(al0, bl8)) | 0;
      mid = (mid + Math.imul(al0, bh8)) | 0;
      mid = (mid + Math.imul(ah0, bl8)) | 0;
      hi = (hi + Math.imul(ah0, bh8)) | 0;
      var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
      w8 &= 0x3ffffff;
      /* k = 9 */
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = (mid + Math.imul(ah9, bl0)) | 0;
      hi = Math.imul(ah9, bh0);
      lo = (lo + Math.imul(al8, bl1)) | 0;
      mid = (mid + Math.imul(al8, bh1)) | 0;
      mid = (mid + Math.imul(ah8, bl1)) | 0;
      hi = (hi + Math.imul(ah8, bh1)) | 0;
      lo = (lo + Math.imul(al7, bl2)) | 0;
      mid = (mid + Math.imul(al7, bh2)) | 0;
      mid = (mid + Math.imul(ah7, bl2)) | 0;
      hi = (hi + Math.imul(ah7, bh2)) | 0;
      lo = (lo + Math.imul(al6, bl3)) | 0;
      mid = (mid + Math.imul(al6, bh3)) | 0;
      mid = (mid + Math.imul(ah6, bl3)) | 0;
      hi = (hi + Math.imul(ah6, bh3)) | 0;
      lo = (lo + Math.imul(al5, bl4)) | 0;
      mid = (mid + Math.imul(al5, bh4)) | 0;
      mid = (mid + Math.imul(ah5, bl4)) | 0;
      hi = (hi + Math.imul(ah5, bh4)) | 0;
      lo = (lo + Math.imul(al4, bl5)) | 0;
      mid = (mid + Math.imul(al4, bh5)) | 0;
      mid = (mid + Math.imul(ah4, bl5)) | 0;
      hi = (hi + Math.imul(ah4, bh5)) | 0;
      lo = (lo + Math.imul(al3, bl6)) | 0;
      mid = (mid + Math.imul(al3, bh6)) | 0;
      mid = (mid + Math.imul(ah3, bl6)) | 0;
      hi = (hi + Math.imul(ah3, bh6)) | 0;
      lo = (lo + Math.imul(al2, bl7)) | 0;
      mid = (mid + Math.imul(al2, bh7)) | 0;
      mid = (mid + Math.imul(ah2, bl7)) | 0;
      hi = (hi + Math.imul(ah2, bh7)) | 0;
      lo = (lo + Math.imul(al1, bl8)) | 0;
      mid = (mid + Math.imul(al1, bh8)) | 0;
      mid = (mid + Math.imul(ah1, bl8)) | 0;
      hi = (hi + Math.imul(ah1, bh8)) | 0;
      lo = (lo + Math.imul(al0, bl9)) | 0;
      mid = (mid + Math.imul(al0, bh9)) | 0;
      mid = (mid + Math.imul(ah0, bl9)) | 0;
      hi = (hi + Math.imul(ah0, bh9)) | 0;
      var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
      w9 &= 0x3ffffff;
      /* k = 10 */
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = (mid + Math.imul(ah9, bl1)) | 0;
      hi = Math.imul(ah9, bh1);
      lo = (lo + Math.imul(al8, bl2)) | 0;
      mid = (mid + Math.imul(al8, bh2)) | 0;
      mid = (mid + Math.imul(ah8, bl2)) | 0;
      hi = (hi + Math.imul(ah8, bh2)) | 0;
      lo = (lo + Math.imul(al7, bl3)) | 0;
      mid = (mid + Math.imul(al7, bh3)) | 0;
      mid = (mid + Math.imul(ah7, bl3)) | 0;
      hi = (hi + Math.imul(ah7, bh3)) | 0;
      lo = (lo + Math.imul(al6, bl4)) | 0;
      mid = (mid + Math.imul(al6, bh4)) | 0;
      mid = (mid + Math.imul(ah6, bl4)) | 0;
      hi = (hi + Math.imul(ah6, bh4)) | 0;
      lo = (lo + Math.imul(al5, bl5)) | 0;
      mid = (mid + Math.imul(al5, bh5)) | 0;
      mid = (mid + Math.imul(ah5, bl5)) | 0;
      hi = (hi + Math.imul(ah5, bh5)) | 0;
      lo = (lo + Math.imul(al4, bl6)) | 0;
      mid = (mid + Math.imul(al4, bh6)) | 0;
      mid = (mid + Math.imul(ah4, bl6)) | 0;
      hi = (hi + Math.imul(ah4, bh6)) | 0;
      lo = (lo + Math.imul(al3, bl7)) | 0;
      mid = (mid + Math.imul(al3, bh7)) | 0;
      mid = (mid + Math.imul(ah3, bl7)) | 0;
      hi = (hi + Math.imul(ah3, bh7)) | 0;
      lo = (lo + Math.imul(al2, bl8)) | 0;
      mid = (mid + Math.imul(al2, bh8)) | 0;
      mid = (mid + Math.imul(ah2, bl8)) | 0;
      hi = (hi + Math.imul(ah2, bh8)) | 0;
      lo = (lo + Math.imul(al1, bl9)) | 0;
      mid = (mid + Math.imul(al1, bh9)) | 0;
      mid = (mid + Math.imul(ah1, bl9)) | 0;
      hi = (hi + Math.imul(ah1, bh9)) | 0;
      var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
      w10 &= 0x3ffffff;
      /* k = 11 */
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = (mid + Math.imul(ah9, bl2)) | 0;
      hi = Math.imul(ah9, bh2);
      lo = (lo + Math.imul(al8, bl3)) | 0;
      mid = (mid + Math.imul(al8, bh3)) | 0;
      mid = (mid + Math.imul(ah8, bl3)) | 0;
      hi = (hi + Math.imul(ah8, bh3)) | 0;
      lo = (lo + Math.imul(al7, bl4)) | 0;
      mid = (mid + Math.imul(al7, bh4)) | 0;
      mid = (mid + Math.imul(ah7, bl4)) | 0;
      hi = (hi + Math.imul(ah7, bh4)) | 0;
      lo = (lo + Math.imul(al6, bl5)) | 0;
      mid = (mid + Math.imul(al6, bh5)) | 0;
      mid = (mid + Math.imul(ah6, bl5)) | 0;
      hi = (hi + Math.imul(ah6, bh5)) | 0;
      lo = (lo + Math.imul(al5, bl6)) | 0;
      mid = (mid + Math.imul(al5, bh6)) | 0;
      mid = (mid + Math.imul(ah5, bl6)) | 0;
      hi = (hi + Math.imul(ah5, bh6)) | 0;
      lo = (lo + Math.imul(al4, bl7)) | 0;
      mid = (mid + Math.imul(al4, bh7)) | 0;
      mid = (mid + Math.imul(ah4, bl7)) | 0;
      hi = (hi + Math.imul(ah4, bh7)) | 0;
      lo = (lo + Math.imul(al3, bl8)) | 0;
      mid = (mid + Math.imul(al3, bh8)) | 0;
      mid = (mid + Math.imul(ah3, bl8)) | 0;
      hi = (hi + Math.imul(ah3, bh8)) | 0;
      lo = (lo + Math.imul(al2, bl9)) | 0;
      mid = (mid + Math.imul(al2, bh9)) | 0;
      mid = (mid + Math.imul(ah2, bl9)) | 0;
      hi = (hi + Math.imul(ah2, bh9)) | 0;
      var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
      w11 &= 0x3ffffff;
      /* k = 12 */
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = (mid + Math.imul(ah9, bl3)) | 0;
      hi = Math.imul(ah9, bh3);
      lo = (lo + Math.imul(al8, bl4)) | 0;
      mid = (mid + Math.imul(al8, bh4)) | 0;
      mid = (mid + Math.imul(ah8, bl4)) | 0;
      hi = (hi + Math.imul(ah8, bh4)) | 0;
      lo = (lo + Math.imul(al7, bl5)) | 0;
      mid = (mid + Math.imul(al7, bh5)) | 0;
      mid = (mid + Math.imul(ah7, bl5)) | 0;
      hi = (hi + Math.imul(ah7, bh5)) | 0;
      lo = (lo + Math.imul(al6, bl6)) | 0;
      mid = (mid + Math.imul(al6, bh6)) | 0;
      mid = (mid + Math.imul(ah6, bl6)) | 0;
      hi = (hi + Math.imul(ah6, bh6)) | 0;
      lo = (lo + Math.imul(al5, bl7)) | 0;
      mid = (mid + Math.imul(al5, bh7)) | 0;
      mid = (mid + Math.imul(ah5, bl7)) | 0;
      hi = (hi + Math.imul(ah5, bh7)) | 0;
      lo = (lo + Math.imul(al4, bl8)) | 0;
      mid = (mid + Math.imul(al4, bh8)) | 0;
      mid = (mid + Math.imul(ah4, bl8)) | 0;
      hi = (hi + Math.imul(ah4, bh8)) | 0;
      lo = (lo + Math.imul(al3, bl9)) | 0;
      mid = (mid + Math.imul(al3, bh9)) | 0;
      mid = (mid + Math.imul(ah3, bl9)) | 0;
      hi = (hi + Math.imul(ah3, bh9)) | 0;
      var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
      w12 &= 0x3ffffff;
      /* k = 13 */
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = (mid + Math.imul(ah9, bl4)) | 0;
      hi = Math.imul(ah9, bh4);
      lo = (lo + Math.imul(al8, bl5)) | 0;
      mid = (mid + Math.imul(al8, bh5)) | 0;
      mid = (mid + Math.imul(ah8, bl5)) | 0;
      hi = (hi + Math.imul(ah8, bh5)) | 0;
      lo = (lo + Math.imul(al7, bl6)) | 0;
      mid = (mid + Math.imul(al7, bh6)) | 0;
      mid = (mid + Math.imul(ah7, bl6)) | 0;
      hi = (hi + Math.imul(ah7, bh6)) | 0;
      lo = (lo + Math.imul(al6, bl7)) | 0;
      mid = (mid + Math.imul(al6, bh7)) | 0;
      mid = (mid + Math.imul(ah6, bl7)) | 0;
      hi = (hi + Math.imul(ah6, bh7)) | 0;
      lo = (lo + Math.imul(al5, bl8)) | 0;
      mid = (mid + Math.imul(al5, bh8)) | 0;
      mid = (mid + Math.imul(ah5, bl8)) | 0;
      hi = (hi + Math.imul(ah5, bh8)) | 0;
      lo = (lo + Math.imul(al4, bl9)) | 0;
      mid = (mid + Math.imul(al4, bh9)) | 0;
      mid = (mid + Math.imul(ah4, bl9)) | 0;
      hi = (hi + Math.imul(ah4, bh9)) | 0;
      var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
      w13 &= 0x3ffffff;
      /* k = 14 */
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = (mid + Math.imul(ah9, bl5)) | 0;
      hi = Math.imul(ah9, bh5);
      lo = (lo + Math.imul(al8, bl6)) | 0;
      mid = (mid + Math.imul(al8, bh6)) | 0;
      mid = (mid + Math.imul(ah8, bl6)) | 0;
      hi = (hi + Math.imul(ah8, bh6)) | 0;
      lo = (lo + Math.imul(al7, bl7)) | 0;
      mid = (mid + Math.imul(al7, bh7)) | 0;
      mid = (mid + Math.imul(ah7, bl7)) | 0;
      hi = (hi + Math.imul(ah7, bh7)) | 0;
      lo = (lo + Math.imul(al6, bl8)) | 0;
      mid = (mid + Math.imul(al6, bh8)) | 0;
      mid = (mid + Math.imul(ah6, bl8)) | 0;
      hi = (hi + Math.imul(ah6, bh8)) | 0;
      lo = (lo + Math.imul(al5, bl9)) | 0;
      mid = (mid + Math.imul(al5, bh9)) | 0;
      mid = (mid + Math.imul(ah5, bl9)) | 0;
      hi = (hi + Math.imul(ah5, bh9)) | 0;
      var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
      w14 &= 0x3ffffff;
      /* k = 15 */
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = (mid + Math.imul(ah9, bl6)) | 0;
      hi = Math.imul(ah9, bh6);
      lo = (lo + Math.imul(al8, bl7)) | 0;
      mid = (mid + Math.imul(al8, bh7)) | 0;
      mid = (mid + Math.imul(ah8, bl7)) | 0;
      hi = (hi + Math.imul(ah8, bh7)) | 0;
      lo = (lo + Math.imul(al7, bl8)) | 0;
      mid = (mid + Math.imul(al7, bh8)) | 0;
      mid = (mid + Math.imul(ah7, bl8)) | 0;
      hi = (hi + Math.imul(ah7, bh8)) | 0;
      lo = (lo + Math.imul(al6, bl9)) | 0;
      mid = (mid + Math.imul(al6, bh9)) | 0;
      mid = (mid + Math.imul(ah6, bl9)) | 0;
      hi = (hi + Math.imul(ah6, bh9)) | 0;
      var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
      w15 &= 0x3ffffff;
      /* k = 16 */
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = (mid + Math.imul(ah9, bl7)) | 0;
      hi = Math.imul(ah9, bh7);
      lo = (lo + Math.imul(al8, bl8)) | 0;
      mid = (mid + Math.imul(al8, bh8)) | 0;
      mid = (mid + Math.imul(ah8, bl8)) | 0;
      hi = (hi + Math.imul(ah8, bh8)) | 0;
      lo = (lo + Math.imul(al7, bl9)) | 0;
      mid = (mid + Math.imul(al7, bh9)) | 0;
      mid = (mid + Math.imul(ah7, bl9)) | 0;
      hi = (hi + Math.imul(ah7, bh9)) | 0;
      var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
      w16 &= 0x3ffffff;
      /* k = 17 */
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = (mid + Math.imul(ah9, bl8)) | 0;
      hi = Math.imul(ah9, bh8);
      lo = (lo + Math.imul(al8, bl9)) | 0;
      mid = (mid + Math.imul(al8, bh9)) | 0;
      mid = (mid + Math.imul(ah8, bl9)) | 0;
      hi = (hi + Math.imul(ah8, bh9)) | 0;
      var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
      w17 &= 0x3ffffff;
      /* k = 18 */
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = (mid + Math.imul(ah9, bl9)) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
      w18 &= 0x3ffffff;
      o[0] = w0;
      o[1] = w1;
      o[2] = w2;
      o[3] = w3;
      o[4] = w4;
      o[5] = w5;
      o[6] = w6;
      o[7] = w7;
      o[8] = w8;
      o[9] = w9;
      o[10] = w10;
      o[11] = w11;
      o[12] = w12;
      o[13] = w13;
      o[14] = w14;
      o[15] = w15;
      o[16] = w16;
      o[17] = w17;
      o[18] = w18;
      if (c !== 0) {
        o[19] = c;
        out.length++;
      }
      return out;
    };

    // Polyfill comb
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }

    function bigMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      out.length = self.length + num.length;

      var carry = 0;
      var hncarry = 0;
      for (var k = 0; k < out.length - 1; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = k - j;
          var a = self.words[i] | 0;
          var b = num.words[j] | 0;
          var r = a * b;

          var lo = r & 0x3ffffff;
          ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
          lo = (lo + rword) | 0;
          rword = lo & 0x3ffffff;
          ncarry = (ncarry + (lo >>> 26)) | 0;

          hncarry += ncarry >>> 26;
          ncarry &= 0x3ffffff;
        }
        out.words[k] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k] = carry;
      } else {
        out.length--;
      }

      return out.strip();
    }

    function jumboMulTo (self, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self, num, out);
    }

    BN.prototype.mulTo = function mulTo (num, out) {
      var res;
      var len = this.length + num.length;
      if (this.length === 10 && num.length === 10) {
        res = comb10MulTo(this, num, out);
      } else if (len < 63) {
        res = smallMulTo(this, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this, num, out);
      } else {
        res = jumboMulTo(this, num, out);
      }

      return res;
    };

    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion

    function FFTM (x, y) {
      this.x = x;
      this.y = y;
    }

    FFTM.prototype.makeRBT = function makeRBT (N) {
      var t = new Array(N);
      var l = BN.prototype._countBits(N) - 1;
      for (var i = 0; i < N; i++) {
        t[i] = this.revBin(i, l, N);
      }

      return t;
    };

    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin (x, l, N) {
      if (x === 0 || x === N - 1) return x;

      var rb = 0;
      for (var i = 0; i < l; i++) {
        rb |= (x & 1) << (l - i - 1);
        x >>= 1;
      }

      return rb;
    };

    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
      for (var i = 0; i < N; i++) {
        rtws[i] = rws[rbt[i]];
        itws[i] = iws[rbt[i]];
      }
    };

    FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N);

      for (var s = 1; s < N; s <<= 1) {
        var l = s << 1;

        var rtwdf = Math.cos(2 * Math.PI / l);
        var itwdf = Math.sin(2 * Math.PI / l);

        for (var p = 0; p < N; p += l) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;

          for (var j = 0; j < s; j++) {
            var re = rtws[p + j];
            var ie = itws[p + j];

            var ro = rtws[p + j + s];
            var io = itws[p + j + s];

            var rx = rtwdf_ * ro - itwdf_ * io;

            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;

            rtws[p + j] = re + ro;
            itws[p + j] = ie + io;

            rtws[p + j + s] = re - ro;
            itws[p + j + s] = ie - io;

            /* jshint maxdepth : false */
            if (j !== l) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;

              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };

    FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
      var N = Math.max(m, n) | 1;
      var odd = N & 1;
      var i = 0;
      for (N = N / 2 | 0; N; N = N >>> 1) {
        i++;
      }

      return 1 << i + 1 + odd;
    };

    FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
      if (N <= 1) return;

      for (var i = 0; i < N / 2; i++) {
        var t = rws[i];

        rws[i] = rws[N - i - 1];
        rws[N - i - 1] = t;

        t = iws[i];

        iws[i] = -iws[N - i - 1];
        iws[N - i - 1] = -t;
      }
    };

    FFTM.prototype.normalize13b = function normalize13b (ws, N) {
      var carry = 0;
      for (var i = 0; i < N / 2; i++) {
        var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
          Math.round(ws[2 * i] / N) +
          carry;

        ws[i] = w & 0x3ffffff;

        if (w < 0x4000000) {
          carry = 0;
        } else {
          carry = w / 0x4000000 | 0;
        }
      }

      return ws;
    };

    FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
      var carry = 0;
      for (var i = 0; i < len; i++) {
        carry = carry + (ws[i] | 0);

        rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
        rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
      }

      // Pad with zeroes
      for (i = 2 * len; i < N; ++i) {
        rws[i] = 0;
      }

      assert(carry === 0);
      assert((carry & ~0x1fff) === 0);
    };

    FFTM.prototype.stub = function stub (N) {
      var ph = new Array(N);
      for (var i = 0; i < N; i++) {
        ph[i] = 0;
      }

      return ph;
    };

    FFTM.prototype.mulp = function mulp (x, y, out) {
      var N = 2 * this.guessLen13b(x.length, y.length);

      var rbt = this.makeRBT(N);

      var _ = this.stub(N);

      var rws = new Array(N);
      var rwst = new Array(N);
      var iwst = new Array(N);

      var nrws = new Array(N);
      var nrwst = new Array(N);
      var niwst = new Array(N);

      var rmws = out.words;
      rmws.length = N;

      this.convert13b(x.words, x.length, rws, N);
      this.convert13b(y.words, y.length, nrws, N);

      this.transform(rws, _, rwst, iwst, N, rbt);
      this.transform(nrws, _, nrwst, niwst, N, rbt);

      for (var i = 0; i < N; i++) {
        var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
        iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
        rwst[i] = rx;
      }

      this.conjugate(rwst, iwst, N);
      this.transform(rwst, iwst, rmws, _, N, rbt);
      this.conjugate(rmws, _, N);
      this.normalize13b(rmws, N);

      out.negative = x.negative ^ y.negative;
      out.length = x.length + y.length;
      return out.strip();
    };

    // Multiply `this` by `num`
    BN.prototype.mul = function mul (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return this.mulTo(num, out);
    };

    // Multiply employing FFT
    BN.prototype.mulf = function mulf (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return jumboMulTo(this, num, out);
    };

    // In-place Multiplication
    BN.prototype.imul = function imul (num) {
      return this.clone().mulTo(num, this);
    };

    BN.prototype.imuln = function imuln (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);

      // Carry
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = (this.words[i] | 0) * num;
        var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
        carry >>= 26;
        carry += (w / 0x4000000) | 0;
        // NOTE: lo is 27bit maximum
        carry += lo >>> 26;
        this.words[i] = lo & 0x3ffffff;
      }

      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }

      return this;
    };

    BN.prototype.muln = function muln (num) {
      return this.clone().imuln(num);
    };

    // `this` * `this`
    BN.prototype.sqr = function sqr () {
      return this.mul(this);
    };

    // `this` * `this` in-place
    BN.prototype.isqr = function isqr () {
      return this.imul(this.clone());
    };

    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow (num) {
      var w = toBitArray(num);
      if (w.length === 0) return new BN(1);

      // Skip leading zeroes
      var res = this;
      for (var i = 0; i < w.length; i++, res = res.sqr()) {
        if (w[i] !== 0) break;
      }

      if (++i < w.length) {
        for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
          if (w[i] === 0) continue;

          res = res.mul(q);
        }
      }

      return res;
    };

    // Shift-left in-place
    BN.prototype.iushln = function iushln (bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
      var i;

      if (r !== 0) {
        var carry = 0;

        for (i = 0; i < this.length; i++) {
          var newCarry = this.words[i] & carryMask;
          var c = ((this.words[i] | 0) - newCarry) << r;
          this.words[i] = c | carry;
          carry = newCarry >>> (26 - r);
        }

        if (carry) {
          this.words[i] = carry;
          this.length++;
        }
      }

      if (s !== 0) {
        for (i = this.length - 1; i >= 0; i--) {
          this.words[i + s] = this.words[i];
        }

        for (i = 0; i < s; i++) {
          this.words[i] = 0;
        }

        this.length += s;
      }

      return this.strip();
    };

    BN.prototype.ishln = function ishln (bits) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushln(bits);
    };

    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn (bits, hint, extended) {
      assert(typeof bits === 'number' && bits >= 0);
      var h;
      if (hint) {
        h = (hint - (hint % 26)) / 26;
      } else {
        h = 0;
      }

      var r = bits % 26;
      var s = Math.min((bits - r) / 26, this.length);
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      var maskedWords = extended;

      h -= s;
      h = Math.max(0, h);

      // Extended mode, copy masked part
      if (maskedWords) {
        for (var i = 0; i < s; i++) {
          maskedWords.words[i] = this.words[i];
        }
        maskedWords.length = s;
      }

      if (s === 0) ; else if (this.length > s) {
        this.length -= s;
        for (i = 0; i < this.length; i++) {
          this.words[i] = this.words[i + s];
        }
      } else {
        this.words[0] = 0;
        this.length = 1;
      }

      var carry = 0;
      for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
        var word = this.words[i] | 0;
        this.words[i] = (carry << (26 - r)) | (word >>> r);
        carry = word & mask;
      }

      // Push carried bits as a mask
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }

      if (this.length === 0) {
        this.words[0] = 0;
        this.length = 1;
      }

      return this.strip();
    };

    BN.prototype.ishrn = function ishrn (bits, hint, extended) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushrn(bits, hint, extended);
    };

    // Shift-left
    BN.prototype.shln = function shln (bits) {
      return this.clone().ishln(bits);
    };

    BN.prototype.ushln = function ushln (bits) {
      return this.clone().iushln(bits);
    };

    // Shift-right
    BN.prototype.shrn = function shrn (bits) {
      return this.clone().ishrn(bits);
    };

    BN.prototype.ushrn = function ushrn (bits) {
      return this.clone().iushrn(bits);
    };

    // Test if n bit is set
    BN.prototype.testn = function testn (bit) {
      assert(typeof bit === 'number' && bit >= 0);
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) return false;

      // Check bit and return
      var w = this.words[s];

      return !!(w & q);
    };

    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn (bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;

      assert(this.negative === 0, 'imaskn works only with positive numbers');

      if (this.length <= s) {
        return this;
      }

      if (r !== 0) {
        s++;
      }
      this.length = Math.min(s, this.length);

      if (r !== 0) {
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        this.words[this.length - 1] &= mask;
      }

      return this.strip();
    };

    // Return only lowers bits of number
    BN.prototype.maskn = function maskn (bits) {
      return this.clone().imaskn(bits);
    };

    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.isubn(-num);

      // Possible sign change
      if (this.negative !== 0) {
        if (this.length === 1 && (this.words[0] | 0) < num) {
          this.words[0] = num - (this.words[0] | 0);
          this.negative = 0;
          return this;
        }

        this.negative = 0;
        this.isubn(num);
        this.negative = 1;
        return this;
      }

      // Add without checks
      return this._iaddn(num);
    };

    BN.prototype._iaddn = function _iaddn (num) {
      this.words[0] += num;

      // Carry
      for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
        this.words[i] -= 0x4000000;
        if (i === this.length - 1) {
          this.words[i + 1] = 1;
        } else {
          this.words[i + 1]++;
        }
      }
      this.length = Math.max(this.length, i + 1);

      return this;
    };

    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.iaddn(-num);

      if (this.negative !== 0) {
        this.negative = 0;
        this.iaddn(num);
        this.negative = 1;
        return this;
      }

      this.words[0] -= num;

      if (this.length === 1 && this.words[0] < 0) {
        this.words[0] = -this.words[0];
        this.negative = 1;
      } else {
        // Carry
        for (var i = 0; i < this.length && this.words[i] < 0; i++) {
          this.words[i] += 0x4000000;
          this.words[i + 1] -= 1;
        }
      }

      return this.strip();
    };

    BN.prototype.addn = function addn (num) {
      return this.clone().iaddn(num);
    };

    BN.prototype.subn = function subn (num) {
      return this.clone().isubn(num);
    };

    BN.prototype.iabs = function iabs () {
      this.negative = 0;

      return this;
    };

    BN.prototype.abs = function abs () {
      return this.clone().iabs();
    };

    BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
      var len = num.length + shift;
      var i;

      this._expand(len);

      var w;
      var carry = 0;
      for (i = 0; i < num.length; i++) {
        w = (this.words[i + shift] | 0) + carry;
        var right = (num.words[i] | 0) * mul;
        w -= right & 0x3ffffff;
        carry = (w >> 26) - ((right / 0x4000000) | 0);
        this.words[i + shift] = w & 0x3ffffff;
      }
      for (; i < this.length - shift; i++) {
        w = (this.words[i + shift] | 0) + carry;
        carry = w >> 26;
        this.words[i + shift] = w & 0x3ffffff;
      }

      if (carry === 0) return this.strip();

      // Subtraction overflow
      assert(carry === -1);
      carry = 0;
      for (i = 0; i < this.length; i++) {
        w = -(this.words[i] | 0) + carry;
        carry = w >> 26;
        this.words[i] = w & 0x3ffffff;
      }
      this.negative = 1;

      return this.strip();
    };

    BN.prototype._wordDiv = function _wordDiv (num, mode) {
      var shift = this.length - num.length;

      var a = this.clone();
      var b = num;

      // Normalize
      var bhi = b.words[b.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b = b.ushln(shift);
        a.iushln(shift);
        bhi = b.words[b.length - 1] | 0;
      }

      // Initialize quotient
      var m = a.length - b.length;
      var q;

      if (mode !== 'mod') {
        q = new BN(null);
        q.length = m + 1;
        q.words = new Array(q.length);
        for (var i = 0; i < q.length; i++) {
          q.words[i] = 0;
        }
      }

      var diff = a.clone()._ishlnsubmul(b, 1, m);
      if (diff.negative === 0) {
        a = diff;
        if (q) {
          q.words[m] = 1;
        }
      }

      for (var j = m - 1; j >= 0; j--) {
        var qj = (a.words[b.length + j] | 0) * 0x4000000 +
          (a.words[b.length + j - 1] | 0);

        // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
        // (0x7ffffff)
        qj = Math.min((qj / bhi) | 0, 0x3ffffff);

        a._ishlnsubmul(b, qj, j);
        while (a.negative !== 0) {
          qj--;
          a.negative = 0;
          a._ishlnsubmul(b, 1, j);
          if (!a.isZero()) {
            a.negative ^= 1;
          }
        }
        if (q) {
          q.words[j] = qj;
        }
      }
      if (q) {
        q.strip();
      }
      a.strip();

      // Denormalize
      if (mode !== 'div' && shift !== 0) {
        a.iushrn(shift);
      }

      return {
        div: q || null,
        mod: a
      };
    };

    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod (num, mode, positive) {
      assert(!num.isZero());

      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }

      var div, mod, res;
      if (this.negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }

        return {
          div: div,
          mod: mod
        };
      }

      if (this.negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        return {
          div: div,
          mod: res.mod
        };
      }

      if ((this.negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }

        return {
          div: res.div,
          mod: mod
        };
      }

      // Both numbers are positive at this point

      // Strip both numbers to approximate shift value
      if (num.length > this.length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this
        };
      }

      // Very short reduction
      if (num.length === 1) {
        if (mode === 'div') {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }

        if (mode === 'mod') {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }

        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return this._wordDiv(num, mode);
    };

    // Find `this` / `num`
    BN.prototype.div = function div (num) {
      return this.divmod(num, 'div', false).div;
    };

    // Find `this` % `num`
    BN.prototype.mod = function mod (num) {
      return this.divmod(num, 'mod', false).mod;
    };

    BN.prototype.umod = function umod (num) {
      return this.divmod(num, 'mod', true).mod;
    };

    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound (num) {
      var dm = this.divmod(num);

      // Fast case - exact division
      if (dm.mod.isZero()) return dm.div;

      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

      var half = num.ushrn(1);
      var r2 = num.andln(1);
      var cmp = mod.cmp(half);

      // Round down
      if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

      // Round up
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };

    BN.prototype.modn = function modn (num) {
      assert(num <= 0x3ffffff);
      var p = (1 << 26) % num;

      var acc = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        acc = (p * acc + (this.words[i] | 0)) % num;
      }

      return acc;
    };

    // In-place division by number
    BN.prototype.idivn = function idivn (num) {
      assert(num <= 0x3ffffff);

      var carry = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var w = (this.words[i] | 0) + carry * 0x4000000;
        this.words[i] = (w / num) | 0;
        carry = w % num;
      }

      return this.strip();
    };

    BN.prototype.divn = function divn (num) {
      return this.clone().idivn(num);
    };

    BN.prototype.egcd = function egcd (p) {
      assert(p.negative === 0);
      assert(!p.isZero());

      var x = this;
      var y = p.clone();

      if (x.negative !== 0) {
        x = x.umod(p);
      } else {
        x = x.clone();
      }

      // A * x + B * y = x
      var A = new BN(1);
      var B = new BN(0);

      // C * x + D * y = y
      var C = new BN(0);
      var D = new BN(1);

      var g = 0;

      while (x.isEven() && y.isEven()) {
        x.iushrn(1);
        y.iushrn(1);
        ++g;
      }

      var yp = y.clone();
      var xp = x.clone();

      while (!x.isZero()) {
        for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          x.iushrn(i);
          while (i-- > 0) {
            if (A.isOdd() || B.isOdd()) {
              A.iadd(yp);
              B.isub(xp);
            }

            A.iushrn(1);
            B.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          y.iushrn(j);
          while (j-- > 0) {
            if (C.isOdd() || D.isOdd()) {
              C.iadd(yp);
              D.isub(xp);
            }

            C.iushrn(1);
            D.iushrn(1);
          }
        }

        if (x.cmp(y) >= 0) {
          x.isub(y);
          A.isub(C);
          B.isub(D);
        } else {
          y.isub(x);
          C.isub(A);
          D.isub(B);
        }
      }

      return {
        a: C,
        b: D,
        gcd: y.iushln(g)
      };
    };

    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp (p) {
      assert(p.negative === 0);
      assert(!p.isZero());

      var a = this;
      var b = p.clone();

      if (a.negative !== 0) {
        a = a.umod(p);
      } else {
        a = a.clone();
      }

      var x1 = new BN(1);
      var x2 = new BN(0);

      var delta = b.clone();

      while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
        for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          a.iushrn(i);
          while (i-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }

            x1.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          b.iushrn(j);
          while (j-- > 0) {
            if (x2.isOdd()) {
              x2.iadd(delta);
            }

            x2.iushrn(1);
          }
        }

        if (a.cmp(b) >= 0) {
          a.isub(b);
          x1.isub(x2);
        } else {
          b.isub(a);
          x2.isub(x1);
        }
      }

      var res;
      if (a.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x2;
      }

      if (res.cmpn(0) < 0) {
        res.iadd(p);
      }

      return res;
    };

    BN.prototype.gcd = function gcd (num) {
      if (this.isZero()) return num.abs();
      if (num.isZero()) return this.abs();

      var a = this.clone();
      var b = num.clone();
      a.negative = 0;
      b.negative = 0;

      // Remove common factor of two
      for (var shift = 0; a.isEven() && b.isEven(); shift++) {
        a.iushrn(1);
        b.iushrn(1);
      }

      do {
        while (a.isEven()) {
          a.iushrn(1);
        }
        while (b.isEven()) {
          b.iushrn(1);
        }

        var r = a.cmp(b);
        if (r < 0) {
          // Swap `a` and `b` to make `a` always bigger than `b`
          var t = a;
          a = b;
          b = t;
        } else if (r === 0 || b.cmpn(1) === 0) {
          break;
        }

        a.isub(b);
      } while (true);

      return b.iushln(shift);
    };

    // Invert number in the field F(num)
    BN.prototype.invm = function invm (num) {
      return this.egcd(num).a.umod(num);
    };

    BN.prototype.isEven = function isEven () {
      return (this.words[0] & 1) === 0;
    };

    BN.prototype.isOdd = function isOdd () {
      return (this.words[0] & 1) === 1;
    };

    // And first word and num
    BN.prototype.andln = function andln (num) {
      return this.words[0] & num;
    };

    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn (bit) {
      assert(typeof bit === 'number');
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) {
        this._expand(s + 1);
        this.words[s] |= q;
        return this;
      }

      // Add bit and propagate, if needed
      var carry = q;
      for (var i = s; carry !== 0 && i < this.length; i++) {
        var w = this.words[i] | 0;
        w += carry;
        carry = w >>> 26;
        w &= 0x3ffffff;
        this.words[i] = w;
      }
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
      return this;
    };

    BN.prototype.isZero = function isZero () {
      return this.length === 1 && this.words[0] === 0;
    };

    BN.prototype.cmpn = function cmpn (num) {
      var negative = num < 0;

      if (this.negative !== 0 && !negative) return -1;
      if (this.negative === 0 && negative) return 1;

      this.strip();

      var res;
      if (this.length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }

        assert(num <= 0x3ffffff, 'Number is too big');

        var w = this.words[0] | 0;
        res = w === num ? 0 : w < num ? -1 : 1;
      }
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp (num) {
      if (this.negative !== 0 && num.negative === 0) return -1;
      if (this.negative === 0 && num.negative !== 0) return 1;

      var res = this.ucmp(num);
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Unsigned comparison
    BN.prototype.ucmp = function ucmp (num) {
      // At this point both numbers have the same sign
      if (this.length > num.length) return 1;
      if (this.length < num.length) return -1;

      var res = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var a = this.words[i] | 0;
        var b = num.words[i] | 0;

        if (a === b) continue;
        if (a < b) {
          res = -1;
        } else if (a > b) {
          res = 1;
        }
        break;
      }
      return res;
    };

    BN.prototype.gtn = function gtn (num) {
      return this.cmpn(num) === 1;
    };

    BN.prototype.gt = function gt (num) {
      return this.cmp(num) === 1;
    };

    BN.prototype.gten = function gten (num) {
      return this.cmpn(num) >= 0;
    };

    BN.prototype.gte = function gte (num) {
      return this.cmp(num) >= 0;
    };

    BN.prototype.ltn = function ltn (num) {
      return this.cmpn(num) === -1;
    };

    BN.prototype.lt = function lt (num) {
      return this.cmp(num) === -1;
    };

    BN.prototype.lten = function lten (num) {
      return this.cmpn(num) <= 0;
    };

    BN.prototype.lte = function lte (num) {
      return this.cmp(num) <= 0;
    };

    BN.prototype.eqn = function eqn (num) {
      return this.cmpn(num) === 0;
    };

    BN.prototype.eq = function eq (num) {
      return this.cmp(num) === 0;
    };

    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red (num) {
      return new Red(num);
    };

    BN.prototype.toRed = function toRed (ctx) {
      assert(!this.red, 'Already a number in reduction context');
      assert(this.negative === 0, 'red works only with positives');
      return ctx.convertTo(this)._forceRed(ctx);
    };

    BN.prototype.fromRed = function fromRed () {
      assert(this.red, 'fromRed works only with numbers in reduction context');
      return this.red.convertFrom(this);
    };

    BN.prototype._forceRed = function _forceRed (ctx) {
      this.red = ctx;
      return this;
    };

    BN.prototype.forceRed = function forceRed (ctx) {
      assert(!this.red, 'Already a number in reduction context');
      return this._forceRed(ctx);
    };

    BN.prototype.redAdd = function redAdd (num) {
      assert(this.red, 'redAdd works only with red numbers');
      return this.red.add(this, num);
    };

    BN.prototype.redIAdd = function redIAdd (num) {
      assert(this.red, 'redIAdd works only with red numbers');
      return this.red.iadd(this, num);
    };

    BN.prototype.redSub = function redSub (num) {
      assert(this.red, 'redSub works only with red numbers');
      return this.red.sub(this, num);
    };

    BN.prototype.redISub = function redISub (num) {
      assert(this.red, 'redISub works only with red numbers');
      return this.red.isub(this, num);
    };

    BN.prototype.redShl = function redShl (num) {
      assert(this.red, 'redShl works only with red numbers');
      return this.red.shl(this, num);
    };

    BN.prototype.redMul = function redMul (num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.mul(this, num);
    };

    BN.prototype.redIMul = function redIMul (num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.imul(this, num);
    };

    BN.prototype.redSqr = function redSqr () {
      assert(this.red, 'redSqr works only with red numbers');
      this.red._verify1(this);
      return this.red.sqr(this);
    };

    BN.prototype.redISqr = function redISqr () {
      assert(this.red, 'redISqr works only with red numbers');
      this.red._verify1(this);
      return this.red.isqr(this);
    };

    // Square root over p
    BN.prototype.redSqrt = function redSqrt () {
      assert(this.red, 'redSqrt works only with red numbers');
      this.red._verify1(this);
      return this.red.sqrt(this);
    };

    BN.prototype.redInvm = function redInvm () {
      assert(this.red, 'redInvm works only with red numbers');
      this.red._verify1(this);
      return this.red.invm(this);
    };

    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg () {
      assert(this.red, 'redNeg works only with red numbers');
      this.red._verify1(this);
      return this.red.neg(this);
    };

    BN.prototype.redPow = function redPow (num) {
      assert(this.red && !num.red, 'redPow(normalNum)');
      this.red._verify1(this);
      return this.red.pow(this, num);
    };

    // Prime numbers with efficient reduction
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };

    // Pseudo-Mersenne prime
    function MPrime (name, p) {
      // P = 2 ^ N - K
      this.name = name;
      this.p = new BN(p, 16);
      this.n = this.p.bitLength();
      this.k = new BN(1).iushln(this.n).isub(this.p);

      this.tmp = this._tmp();
    }

    MPrime.prototype._tmp = function _tmp () {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil(this.n / 13));
      return tmp;
    };

    MPrime.prototype.ireduce = function ireduce (num) {
      // Assumes that `num` is less than `P^2`
      // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
      var r = num;
      var rlen;

      do {
        this.split(r, this.tmp);
        r = this.imulK(r);
        r = r.iadd(this.tmp);
        rlen = r.bitLength();
      } while (rlen > this.n);

      var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
      if (cmp === 0) {
        r.words[0] = 0;
        r.length = 1;
      } else if (cmp > 0) {
        r.isub(this.p);
      } else {
        if (r.strip !== undefined) {
          // r is BN v4 instance
          r.strip();
        } else {
          // r is BN v5 instance
          r._strip();
        }
      }

      return r;
    };

    MPrime.prototype.split = function split (input, out) {
      input.iushrn(this.n, 0, out);
    };

    MPrime.prototype.imulK = function imulK (num) {
      return num.imul(this.k);
    };

    function K256 () {
      MPrime.call(
        this,
        'k256',
        'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);

    K256.prototype.split = function split (input, output) {
      // 256 = 9 * 26 + 22
      var mask = 0x3fffff;

      var outLen = Math.min(input.length, 9);
      for (var i = 0; i < outLen; i++) {
        output.words[i] = input.words[i];
      }
      output.length = outLen;

      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }

      // Shift by 9 limbs
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;

      for (i = 10; i < input.length; i++) {
        var next = input.words[i] | 0;
        input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
        prev = next;
      }
      prev >>>= 22;
      input.words[i - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };

    K256.prototype.imulK = function imulK (num) {
      // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;

      // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
      var lo = 0;
      for (var i = 0; i < num.length; i++) {
        var w = num.words[i] | 0;
        lo += w * 0x3d1;
        num.words[i] = lo & 0x3ffffff;
        lo = w * 0x40 + ((lo / 0x4000000) | 0);
      }

      // Fast length reduction
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };

    function P224 () {
      MPrime.call(
        this,
        'p224',
        'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);

    function P192 () {
      MPrime.call(
        this,
        'p192',
        'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);

    function P25519 () {
      // 2 ^ 255 - 19
      MPrime.call(
        this,
        '25519',
        '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);

    P25519.prototype.imulK = function imulK (num) {
      // K = 0x13
      var carry = 0;
      for (var i = 0; i < num.length; i++) {
        var hi = (num.words[i] | 0) * 0x13 + carry;
        var lo = hi & 0x3ffffff;
        hi >>>= 26;

        num.words[i] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };

    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime (name) {
      // Cached version of prime
      if (primes[name]) return primes[name];

      var prime;
      if (name === 'k256') {
        prime = new K256();
      } else if (name === 'p224') {
        prime = new P224();
      } else if (name === 'p192') {
        prime = new P192();
      } else if (name === 'p25519') {
        prime = new P25519();
      } else {
        throw new Error('Unknown prime ' + name);
      }
      primes[name] = prime;

      return prime;
    };

    //
    // Base reduction engine
    //
    function Red (m) {
      if (typeof m === 'string') {
        var prime = BN._prime(m);
        this.m = prime.p;
        this.prime = prime;
      } else {
        assert(m.gtn(1), 'modulus must be greater than 1');
        this.m = m;
        this.prime = null;
      }
    }

    Red.prototype._verify1 = function _verify1 (a) {
      assert(a.negative === 0, 'red works only with positives');
      assert(a.red, 'red works only with red numbers');
    };

    Red.prototype._verify2 = function _verify2 (a, b) {
      assert((a.negative | b.negative) === 0, 'red works only with positives');
      assert(a.red && a.red === b.red,
        'red works only with red numbers');
    };

    Red.prototype.imod = function imod (a) {
      if (this.prime) return this.prime.ireduce(a)._forceRed(this);
      return a.umod(this.m)._forceRed(this);
    };

    Red.prototype.neg = function neg (a) {
      if (a.isZero()) {
        return a.clone();
      }

      return this.m.sub(a)._forceRed(this);
    };

    Red.prototype.add = function add (a, b) {
      this._verify2(a, b);

      var res = a.add(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.iadd = function iadd (a, b) {
      this._verify2(a, b);

      var res = a.iadd(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res;
    };

    Red.prototype.sub = function sub (a, b) {
      this._verify2(a, b);

      var res = a.sub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.isub = function isub (a, b) {
      this._verify2(a, b);

      var res = a.isub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res;
    };

    Red.prototype.shl = function shl (a, num) {
      this._verify1(a);
      return this.imod(a.ushln(num));
    };

    Red.prototype.imul = function imul (a, b) {
      this._verify2(a, b);
      return this.imod(a.imul(b));
    };

    Red.prototype.mul = function mul (a, b) {
      this._verify2(a, b);
      return this.imod(a.mul(b));
    };

    Red.prototype.isqr = function isqr (a) {
      return this.imul(a, a.clone());
    };

    Red.prototype.sqr = function sqr (a) {
      return this.mul(a, a);
    };

    Red.prototype.sqrt = function sqrt (a) {
      if (a.isZero()) return a.clone();

      var mod3 = this.m.andln(3);
      assert(mod3 % 2 === 1);

      // Fast case
      if (mod3 === 3) {
        var pow = this.m.add(new BN(1)).iushrn(2);
        return this.pow(a, pow);
      }

      // Tonelli-Shanks algorithm (Totally unoptimized and slow)
      //
      // Find Q and S, that Q * 2 ^ S = (P - 1)
      var q = this.m.subn(1);
      var s = 0;
      while (!q.isZero() && q.andln(1) === 0) {
        s++;
        q.iushrn(1);
      }
      assert(!q.isZero());

      var one = new BN(1).toRed(this);
      var nOne = one.redNeg();

      // Find quadratic non-residue
      // NOTE: Max is such because of generalized Riemann hypothesis.
      var lpow = this.m.subn(1).iushrn(1);
      var z = this.m.bitLength();
      z = new BN(2 * z * z).toRed(this);

      while (this.pow(z, lpow).cmp(nOne) !== 0) {
        z.redIAdd(nOne);
      }

      var c = this.pow(z, q);
      var r = this.pow(a, q.addn(1).iushrn(1));
      var t = this.pow(a, q);
      var m = s;
      while (t.cmp(one) !== 0) {
        var tmp = t;
        for (var i = 0; tmp.cmp(one) !== 0; i++) {
          tmp = tmp.redSqr();
        }
        assert(i < m);
        var b = this.pow(c, new BN(1).iushln(m - i - 1));

        r = r.redMul(b);
        c = b.redSqr();
        t = t.redMul(c);
        m = i;
      }

      return r;
    };

    Red.prototype.invm = function invm (a) {
      var inv = a._invmp(this.m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };

    Red.prototype.pow = function pow (a, num) {
      if (num.isZero()) return new BN(1).toRed(this);
      if (num.cmpn(1) === 0) return a.clone();

      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this);
      wnd[1] = a;
      for (var i = 2; i < wnd.length; i++) {
        wnd[i] = this.mul(wnd[i - 1], a);
      }

      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }

      for (i = num.length - 1; i >= 0; i--) {
        var word = num.words[i];
        for (var j = start - 1; j >= 0; j--) {
          var bit = (word >> j) & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }

          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }

          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }

      return res;
    };

    Red.prototype.convertTo = function convertTo (num) {
      var r = num.umod(this.m);

      return r === num ? r.clone() : r;
    };

    Red.prototype.convertFrom = function convertFrom (num) {
      var res = num.clone();
      res.red = null;
      return res;
    };

    //
    // Montgomery method engine
    //

    BN.mont = function mont (num) {
      return new Mont(num);
    };

    function Mont (m) {
      Red.call(this, m);

      this.shift = this.m.bitLength();
      if (this.shift % 26 !== 0) {
        this.shift += 26 - (this.shift % 26);
      }

      this.r = new BN(1).iushln(this.shift);
      this.r2 = this.imod(this.r.sqr());
      this.rinv = this.r._invmp(this.m);

      this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
      this.minv = this.minv.umod(this.r);
      this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);

    Mont.prototype.convertTo = function convertTo (num) {
      return this.imod(num.ushln(this.shift));
    };

    Mont.prototype.convertFrom = function convertFrom (num) {
      var r = this.imod(num.mul(this.rinv));
      r.red = null;
      return r;
    };

    Mont.prototype.imul = function imul (a, b) {
      if (a.isZero() || b.isZero()) {
        a.words[0] = 0;
        a.length = 1;
        return a;
      }

      var t = a.imul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;

      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.mul = function mul (a, b) {
      if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

      var t = a.mul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;
      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.invm = function invm (a) {
      // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
      var res = this.imod(a._invmp(this.m).mul(this.r2));
      return res._forceRed(this);
    };
  })(module, commonjsGlobal);
  }(bn$1));

  var minimalisticAssert = assert$g;

  function assert$g(val, msg) {
    if (!val)
      throw new Error(msg || 'Assertion failed');
  }

  assert$g.equal = function assertEqual(l, r, msg) {
    if (l != r)
      throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
  };

  var utils$n = {};

  (function (exports) {

  var utils = exports;

  function toArray(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg !== 'string') {
      for (var i = 0; i < msg.length; i++)
        res[i] = msg[i] | 0;
      return res;
    }
    if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (var i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    } else {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi)
          res.push(hi, lo);
        else
          res.push(lo);
      }
    }
    return res;
  }
  utils.toArray = toArray;

  function zero2(word) {
    if (word.length === 1)
      return '0' + word;
    else
      return word;
  }
  utils.zero2 = zero2;

  function toHex(msg) {
    var res = '';
    for (var i = 0; i < msg.length; i++)
      res += zero2(msg[i].toString(16));
    return res;
  }
  utils.toHex = toHex;

  utils.encode = function encode(arr, enc) {
    if (enc === 'hex')
      return toHex(arr);
    else
      return arr;
  };
  }(utils$n));

  (function (exports) {

  var utils = exports;
  var BN = bn$1.exports;
  var minAssert = minimalisticAssert;
  var minUtils = utils$n;

  utils.assert = minAssert;
  utils.toArray = minUtils.toArray;
  utils.zero2 = minUtils.zero2;
  utils.toHex = minUtils.toHex;
  utils.encode = minUtils.encode;

  // Represent num in a w-NAF form
  function getNAF(num, w, bits) {
    var naf = new Array(Math.max(num.bitLength(), bits) + 1);
    naf.fill(0);

    var ws = 1 << (w + 1);
    var k = num.clone();

    for (var i = 0; i < naf.length; i++) {
      var z;
      var mod = k.andln(ws - 1);
      if (k.isOdd()) {
        if (mod > (ws >> 1) - 1)
          z = (ws >> 1) - mod;
        else
          z = mod;
        k.isubn(z);
      } else {
        z = 0;
      }

      naf[i] = z;
      k.iushrn(1);
    }

    return naf;
  }
  utils.getNAF = getNAF;

  // Represent k1, k2 in a Joint Sparse Form
  function getJSF(k1, k2) {
    var jsf = [
      [],
      [],
    ];

    k1 = k1.clone();
    k2 = k2.clone();
    var d1 = 0;
    var d2 = 0;
    var m8;
    while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
      // First phase
      var m14 = (k1.andln(3) + d1) & 3;
      var m24 = (k2.andln(3) + d2) & 3;
      if (m14 === 3)
        m14 = -1;
      if (m24 === 3)
        m24 = -1;
      var u1;
      if ((m14 & 1) === 0) {
        u1 = 0;
      } else {
        m8 = (k1.andln(7) + d1) & 7;
        if ((m8 === 3 || m8 === 5) && m24 === 2)
          u1 = -m14;
        else
          u1 = m14;
      }
      jsf[0].push(u1);

      var u2;
      if ((m24 & 1) === 0) {
        u2 = 0;
      } else {
        m8 = (k2.andln(7) + d2) & 7;
        if ((m8 === 3 || m8 === 5) && m14 === 2)
          u2 = -m24;
        else
          u2 = m24;
      }
      jsf[1].push(u2);

      // Second phase
      if (2 * d1 === u1 + 1)
        d1 = 1 - d1;
      if (2 * d2 === u2 + 1)
        d2 = 1 - d2;
      k1.iushrn(1);
      k2.iushrn(1);
    }

    return jsf;
  }
  utils.getJSF = getJSF;

  function cachedProperty(obj, name, computer) {
    var key = '_' + name;
    obj.prototype[name] = function cachedProperty() {
      return this[key] !== undefined ? this[key] :
        this[key] = computer.call(this);
    };
  }
  utils.cachedProperty = cachedProperty;

  function parseBytes(bytes) {
    return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
      bytes;
  }
  utils.parseBytes = parseBytes;

  function intFromLE(bytes) {
    return new BN(bytes, 'hex', 'le');
  }
  utils.intFromLE = intFromLE;
  }(utils$o));

  var brorand = {exports: {}};

  var r$1;

  brorand.exports = function rand(len) {
    if (!r$1)
      r$1 = new Rand(null);

    return r$1.generate(len);
  };

  function Rand(rand) {
    this.rand = rand;
  }
  brorand.exports.Rand = Rand;

  Rand.prototype.generate = function generate(len) {
    return this._rand(len);
  };

  // Emulate crypto API using randy
  Rand.prototype._rand = function _rand(n) {
    if (this.rand.getBytes)
      return this.rand.getBytes(n);

    var res = new Uint8Array(n);
    for (var i = 0; i < res.length; i++)
      res[i] = this.rand.getByte();
    return res;
  };

  if (typeof self === 'object') {
    if (self.crypto && self.crypto.getRandomValues) {
      // Modern browsers
      Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.crypto.getRandomValues(arr);
        return arr;
      };
    } else if (self.msCrypto && self.msCrypto.getRandomValues) {
      // IE
      Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.msCrypto.getRandomValues(arr);
        return arr;
      };

    // Safari's WebWorkers do not have `crypto`
    } else if (typeof window === 'object') {
      // Old junk
      Rand.prototype._rand = function() {
        throw new Error('Not implemented yet');
      };
    }
  } else {
    // Node.js or Web worker with no crypto support
    try {
      var crypto = require('crypto');
      if (typeof crypto.randomBytes !== 'function')
        throw new Error('Not supported');

      Rand.prototype._rand = function _rand(n) {
        return crypto.randomBytes(n);
      };
    } catch (e) {
    }
  }

  var curve = {};

  var BN$d = bn$1.exports;
  var utils$m = utils$o;
  var getNAF = utils$m.getNAF;
  var getJSF = utils$m.getJSF;
  var assert$f = utils$m.assert;

  function BaseCurve(type, conf) {
    this.type = type;
    this.p = new BN$d(conf.p, 16);

    // Use Montgomery, when there is no fast reduction for the prime
    this.red = conf.prime ? BN$d.red(conf.prime) : BN$d.mont(this.p);

    // Useful for many curves
    this.zero = new BN$d(0).toRed(this.red);
    this.one = new BN$d(1).toRed(this.red);
    this.two = new BN$d(2).toRed(this.red);

    // Curve configuration, optional
    this.n = conf.n && new BN$d(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

    // Temporary arrays
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);

    this._bitLength = this.n ? this.n.bitLength() : 0;

    // Generalized Greg Maxwell's trick
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) {
      this.redN = null;
    } else {
      this._maxwellTrick = true;
      this.redN = this.n.toRed(this.red);
    }
  }
  var base$1 = BaseCurve;

  BaseCurve.prototype.point = function point() {
    throw new Error('Not implemented');
  };

  BaseCurve.prototype.validate = function validate() {
    throw new Error('Not implemented');
  };

  BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    assert$f(p.precomputed);
    var doubles = p._getDoubles();

    var naf = getNAF(k, 1, this._bitLength);
    var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;

    // Translate into more windowed form
    var repr = [];
    var j;
    var nafW;
    for (j = 0; j < naf.length; j += doubles.step) {
      nafW = 0;
      for (var l = j + doubles.step - 1; l >= j; l--)
        nafW = (nafW << 1) + naf[l];
      repr.push(nafW);
    }

    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for (var i = I; i > 0; i--) {
      for (j = 0; j < repr.length; j++) {
        nafW = repr[j];
        if (nafW === i)
          b = b.mixedAdd(doubles.points[j]);
        else if (nafW === -i)
          b = b.mixedAdd(doubles.points[j].neg());
      }
      a = a.add(b);
    }
    return a.toP();
  };

  BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;

    // Precompute window
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;

    // Get NAF form
    var naf = getNAF(k, w, this._bitLength);

    // Add `this`*(N+1) for every w-NAF index
    var acc = this.jpoint(null, null, null);
    for (var i = naf.length - 1; i >= 0; i--) {
      // Count zeroes
      for (var l = 0; i >= 0 && naf[i] === 0; i--)
        l++;
      if (i >= 0)
        l++;
      acc = acc.dblp(l);

      if (i < 0)
        break;
      var z = naf[i];
      assert$f(z !== 0);
      if (p.type === 'affine') {
        // J +- P
        if (z > 0)
          acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
        else
          acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
      } else {
        // J +- J
        if (z > 0)
          acc = acc.add(wnd[(z - 1) >> 1]);
        else
          acc = acc.add(wnd[(-z - 1) >> 1].neg());
      }
    }
    return p.type === 'affine' ? acc.toP() : acc;
  };

  BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
    points,
    coeffs,
    len,
    jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;

    // Fill all arrays
    var max = 0;
    var i;
    var j;
    var p;
    for (i = 0; i < len; i++) {
      p = points[i];
      var nafPoints = p._getNAFPoints(defW);
      wndWidth[i] = nafPoints.wnd;
      wnd[i] = nafPoints.points;
    }

    // Comb small window NAFs
    for (i = len - 1; i >= 1; i -= 2) {
      var a = i - 1;
      var b = i;
      if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
        naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
        naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
        max = Math.max(naf[a].length, max);
        max = Math.max(naf[b].length, max);
        continue;
      }

      var comb = [
        points[a], /* 1 */
        null, /* 3 */
        null, /* 5 */
        points[b], /* 7 */
      ];

      // Try to avoid Projective points, if possible
      if (points[a].y.cmp(points[b].y) === 0) {
        comb[1] = points[a].add(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].add(points[b].neg());
      } else {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      }

      var index = [
        -3, /* -1 -1 */
        -1, /* -1 0 */
        -5, /* -1 1 */
        -7, /* 0 -1 */
        0, /* 0 0 */
        7, /* 0 1 */
        5, /* 1 -1 */
        1, /* 1 0 */
        3,  /* 1 1 */
      ];

      var jsf = getJSF(coeffs[a], coeffs[b]);
      max = Math.max(jsf[0].length, max);
      naf[a] = new Array(max);
      naf[b] = new Array(max);
      for (j = 0; j < max; j++) {
        var ja = jsf[0][j] | 0;
        var jb = jsf[1][j] | 0;

        naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
        naf[b][j] = 0;
        wnd[a] = comb;
      }
    }

    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for (i = max; i >= 0; i--) {
      var k = 0;

      while (i >= 0) {
        var zero = true;
        for (j = 0; j < len; j++) {
          tmp[j] = naf[j][i] | 0;
          if (tmp[j] !== 0)
            zero = false;
        }
        if (!zero)
          break;
        k++;
        i--;
      }
      if (i >= 0)
        k++;
      acc = acc.dblp(k);
      if (i < 0)
        break;

      for (j = 0; j < len; j++) {
        var z = tmp[j];
        if (z === 0)
          continue;
        else if (z > 0)
          p = wnd[j][(z - 1) >> 1];
        else if (z < 0)
          p = wnd[j][(-z - 1) >> 1].neg();

        if (p.type === 'affine')
          acc = acc.mixedAdd(p);
        else
          acc = acc.add(p);
      }
    }
    // Zeroify references
    for (i = 0; i < len; i++)
      wnd[i] = null;

    if (jacobianResult)
      return acc;
    else
      return acc.toP();
  };

  function BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
  }
  BaseCurve.BasePoint = BasePoint;

  BasePoint.prototype.eq = function eq(/*other*/) {
    throw new Error('Not implemented');
  };

  BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
  };

  BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = utils$m.toArray(bytes, enc);

    var len = this.p.byteLength();

    // uncompressed, hybrid-odd, hybrid-even
    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
        bytes.length - 1 === 2 * len) {
      if (bytes[0] === 0x06)
        assert$f(bytes[bytes.length - 1] % 2 === 0);
      else if (bytes[0] === 0x07)
        assert$f(bytes[bytes.length - 1] % 2 === 1);

      var res =  this.point(bytes.slice(1, 1 + len),
        bytes.slice(1 + len, 1 + 2 * len));

      return res;
    } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
                bytes.length - 1 === len) {
      return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
    }
    throw new Error('Unknown point format');
  };

  BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
  };

  BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x = this.getX().toArray('be', len);

    if (compact)
      return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

    return [ 0x04 ].concat(x, this.getY().toArray('be', len));
  };

  BasePoint.prototype.encode = function encode(enc, compact) {
    return utils$m.encode(this._encode(compact), enc);
  };

  BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed)
      return this;

    var precomputed = {
      doubles: null,
      naf: null,
      beta: null,
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;

    return this;
  };

  BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed)
      return false;

    var doubles = this.precomputed.doubles;
    if (!doubles)
      return false;

    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
  };

  BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles)
      return this.precomputed.doubles;

    var doubles = [ this ];
    var acc = this;
    for (var i = 0; i < power; i += step) {
      for (var j = 0; j < step; j++)
        acc = acc.dbl();
      doubles.push(acc);
    }
    return {
      step: step,
      points: doubles,
    };
  };

  BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf)
      return this.precomputed.naf;

    var res = [ this ];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for (var i = 1; i < max; i++)
      res[i] = res[i - 1].add(dbl);
    return {
      wnd: wnd,
      points: res,
    };
  };

  BasePoint.prototype._getBeta = function _getBeta() {
    return null;
  };

  BasePoint.prototype.dblp = function dblp(k) {
    var r = this;
    for (var i = 0; i < k; i++)
      r = r.dbl();
    return r;
  };

  var utils$l = utils$o;
  var BN$c = bn$1.exports;
  var inherits$8 = inherits$9.exports;
  var Base$2 = base$1;

  var assert$e = utils$l.assert;

  function ShortCurve(conf) {
    Base$2.call(this, 'short', conf);

    this.a = new BN$c(conf.a, 16).toRed(this.red);
    this.b = new BN$c(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();

    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

    // If the curve is endomorphic, precalculate beta and lambda
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
  }
  inherits$8(ShortCurve, Base$2);
  var short = ShortCurve;

  ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    // No efficient endomorphism
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
      return;

    // Compute beta and lambda, that lambda * P = (beta * Px; Py)
    var beta;
    var lambda;
    if (conf.beta) {
      beta = new BN$c(conf.beta, 16).toRed(this.red);
    } else {
      var betas = this._getEndoRoots(this.p);
      // Choose the smallest beta
      beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
      beta = beta.toRed(this.red);
    }
    if (conf.lambda) {
      lambda = new BN$c(conf.lambda, 16);
    } else {
      // Choose the lambda that is matching selected beta
      var lambdas = this._getEndoRoots(this.n);
      if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
        lambda = lambdas[0];
      } else {
        lambda = lambdas[1];
        assert$e(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
      }
    }

    // Get basis vectors, used for balanced length-two representation
    var basis;
    if (conf.basis) {
      basis = conf.basis.map(function(vec) {
        return {
          a: new BN$c(vec.a, 16),
          b: new BN$c(vec.b, 16),
        };
      });
    } else {
      basis = this._getEndoBasis(lambda);
    }

    return {
      beta: beta,
      lambda: lambda,
      basis: basis,
    };
  };

  ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    // Find roots of for x^2 + x + 1 in F
    // Root = (-1 +- Sqrt(-3)) / 2
    //
    var red = num === this.p ? this.red : BN$c.mont(num);
    var tinv = new BN$c(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();

    var s = new BN$c(3).toRed(red).redNeg().redSqrt().redMul(tinv);

    var l1 = ntinv.redAdd(s).fromRed();
    var l2 = ntinv.redSub(s).fromRed();
    return [ l1, l2 ];
  };

  ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    // aprxSqrt >= sqrt(this.n)
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

    // 3.74
    // Run EGCD, until r(L + 1) < aprxSqrt
    var u = lambda;
    var v = this.n.clone();
    var x1 = new BN$c(1);
    var y1 = new BN$c(0);
    var x2 = new BN$c(0);
    var y2 = new BN$c(1);

    // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
    var a0;
    var b0;
    // First vector
    var a1;
    var b1;
    // Second vector
    var a2;
    var b2;

    var prevR;
    var i = 0;
    var r;
    var x;
    while (u.cmpn(0) !== 0) {
      var q = v.div(u);
      r = v.sub(q.mul(u));
      x = x2.sub(q.mul(x1));
      var y = y2.sub(q.mul(y1));

      if (!a1 && r.cmp(aprxSqrt) < 0) {
        a0 = prevR.neg();
        b0 = x1;
        a1 = r.neg();
        b1 = x;
      } else if (a1 && ++i === 2) {
        break;
      }
      prevR = r;

      v = u;
      u = r;
      x2 = x1;
      x1 = x;
      y2 = y1;
      y1 = y;
    }
    a2 = r.neg();
    b2 = x;

    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
      a2 = a0;
      b2 = b0;
    }

    // Normalize signs
    if (a1.negative) {
      a1 = a1.neg();
      b1 = b1.neg();
    }
    if (a2.negative) {
      a2 = a2.neg();
      b2 = b2.neg();
    }

    return [
      { a: a1, b: b1 },
      { a: a2, b: b2 },
    ];
  };

  ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];

    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);

    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);

    // Calculate answer
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return { k1: k1, k2: k2 };
  };

  ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN$c(x, 16);
    if (!x.red)
      x = x.toRed(this.red);

    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
      throw new Error('invalid point');

    // XXX Is there any way to tell if the number is odd without converting it
    // to non-red form?
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
      y = y.redNeg();

    return this.point(x, y);
  };

  ShortCurve.prototype.validate = function validate(point) {
    if (point.inf)
      return true;

    var x = point.x;
    var y = point.y;

    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
  };

  ShortCurve.prototype._endoWnafMulAdd =
      function _endoWnafMulAdd(points, coeffs, jacobianResult) {
        var npoints = this._endoWnafT1;
        var ncoeffs = this._endoWnafT2;
        for (var i = 0; i < points.length; i++) {
          var split = this._endoSplit(coeffs[i]);
          var p = points[i];
          var beta = p._getBeta();

          if (split.k1.negative) {
            split.k1.ineg();
            p = p.neg(true);
          }
          if (split.k2.negative) {
            split.k2.ineg();
            beta = beta.neg(true);
          }

          npoints[i * 2] = p;
          npoints[i * 2 + 1] = beta;
          ncoeffs[i * 2] = split.k1;
          ncoeffs[i * 2 + 1] = split.k2;
        }
        var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

        // Clean-up references to points and coefficients
        for (var j = 0; j < i * 2; j++) {
          npoints[j] = null;
          ncoeffs[j] = null;
        }
        return res;
      };

  function Point$2(curve, x, y, isRed) {
    Base$2.BasePoint.call(this, curve, 'affine');
    if (x === null && y === null) {
      this.x = null;
      this.y = null;
      this.inf = true;
    } else {
      this.x = new BN$c(x, 16);
      this.y = new BN$c(y, 16);
      // Force redgomery representation when loading from JSON
      if (isRed) {
        this.x.forceRed(this.curve.red);
        this.y.forceRed(this.curve.red);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      this.inf = false;
    }
  }
  inherits$8(Point$2, Base$2.BasePoint);

  ShortCurve.prototype.point = function point(x, y, isRed) {
    return new Point$2(this, x, y, isRed);
  };

  ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point$2.fromJSON(this, obj, red);
  };

  Point$2.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo)
      return;

    var pre = this.precomputed;
    if (pre && pre.beta)
      return pre.beta;

    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
      var curve = this.curve;
      var endoMul = function(p) {
        return curve.point(p.x.redMul(curve.endo.beta), p.y);
      };
      pre.beta = beta;
      beta.precomputed = {
        beta: null,
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(endoMul),
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(endoMul),
        },
      };
    }
    return beta;
  };

  Point$2.prototype.toJSON = function toJSON() {
    if (!this.precomputed)
      return [ this.x, this.y ];

    return [ this.x, this.y, this.precomputed && {
      doubles: this.precomputed.doubles && {
        step: this.precomputed.doubles.step,
        points: this.precomputed.doubles.points.slice(1),
      },
      naf: this.precomputed.naf && {
        wnd: this.precomputed.naf.wnd,
        points: this.precomputed.naf.points.slice(1),
      },
    } ];
  };

  Point$2.fromJSON = function fromJSON(curve, obj, red) {
    if (typeof obj === 'string')
      obj = JSON.parse(obj);
    var res = curve.point(obj[0], obj[1], red);
    if (!obj[2])
      return res;

    function obj2point(obj) {
      return curve.point(obj[0], obj[1], red);
    }

    var pre = obj[2];
    res.precomputed = {
      beta: null,
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: [ res ].concat(pre.doubles.points.map(obj2point)),
      },
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: [ res ].concat(pre.naf.points.map(obj2point)),
      },
    };
    return res;
  };

  Point$2.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' y: ' + this.y.fromRed().toString(16, 2) + '>';
  };

  Point$2.prototype.isInfinity = function isInfinity() {
    return this.inf;
  };

  Point$2.prototype.add = function add(p) {
    // O + P = P
    if (this.inf)
      return p;

    // P + O = P
    if (p.inf)
      return this;

    // P + P = 2P
    if (this.eq(p))
      return this.dbl();

    // P + (-P) = O
    if (this.neg().eq(p))
      return this.curve.point(null, null);

    // P + Q = O
    if (this.x.cmp(p.x) === 0)
      return this.curve.point(null, null);

    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0)
      c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };

  Point$2.prototype.dbl = function dbl() {
    if (this.inf)
      return this;

    // 2P = O
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0)
      return this.curve.point(null, null);

    var a = this.curve.a;

    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };

  Point$2.prototype.getX = function getX() {
    return this.x.fromRed();
  };

  Point$2.prototype.getY = function getY() {
    return this.y.fromRed();
  };

  Point$2.prototype.mul = function mul(k) {
    k = new BN$c(k, 16);
    if (this.isInfinity())
      return this;
    else if (this._hasDoubles(k))
      return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo)
      return this.curve._endoWnafMulAdd([ this ], [ k ]);
    else
      return this.curve._wnafMul(this, k);
  };

  Point$2.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [ this, p2 ];
    var coeffs = [ k1, k2 ];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2);
  };

  Point$2.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [ this, p2 ];
    var coeffs = [ k1, k2 ];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs, true);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
  };

  Point$2.prototype.eq = function eq(p) {
    return this === p ||
           this.inf === p.inf &&
               (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
  };

  Point$2.prototype.neg = function neg(_precompute) {
    if (this.inf)
      return this;

    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
      var pre = this.precomputed;
      var negate = function(p) {
        return p.neg();
      };
      res.precomputed = {
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(negate),
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(negate),
        },
      };
    }
    return res;
  };

  Point$2.prototype.toJ = function toJ() {
    if (this.inf)
      return this.curve.jpoint(null, null, null);

    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
  };

  function JPoint(curve, x, y, z) {
    Base$2.BasePoint.call(this, curve, 'jacobian');
    if (x === null && y === null && z === null) {
      this.x = this.curve.one;
      this.y = this.curve.one;
      this.z = new BN$c(0);
    } else {
      this.x = new BN$c(x, 16);
      this.y = new BN$c(y, 16);
      this.z = new BN$c(z, 16);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);

    this.zOne = this.z === this.curve.one;
  }
  inherits$8(JPoint, Base$2.BasePoint);

  ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new JPoint(this, x, y, z);
  };

  JPoint.prototype.toP = function toP() {
    if (this.isInfinity())
      return this.curve.point(null, null);

    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);

    return this.curve.point(ax, ay);
  };

  JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
  };

  JPoint.prototype.add = function add(p) {
    // O + P = P
    if (this.isInfinity())
      return p;

    // P + O = P
    if (p.isInfinity())
      return this;

    // 12M + 4S + 7A
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));

    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
      if (r.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }

    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);

    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype.mixedAdd = function mixedAdd(p) {
    // O + P = P
    if (this.isInfinity())
      return p.toJ();

    // P + O = P
    if (p.isInfinity())
      return this;

    // 8M + 3S + 7A
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);

    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
      if (r.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }

    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);

    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0)
      return this;
    if (this.isInfinity())
      return this;
    if (!pow)
      return this.dbl();

    var i;
    if (this.curve.zeroA || this.curve.threeA) {
      var r = this;
      for (i = 0; i < pow; i++)
        r = r.dbl();
      return r;
    }

    // 1M + 2S + 1A + N * (4S + 5M + 8A)
    // N = 1 => 6M + 6S + 9A
    var a = this.curve.a;
    var tinv = this.curve.tinv;

    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();

    // Reuse results
    var jyd = jy.redAdd(jy);
    for (i = 0; i < pow; i++) {
      var jx2 = jx.redSqr();
      var jyd2 = jyd.redSqr();
      var jyd4 = jyd2.redSqr();
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

      var t1 = jx.redMul(jyd2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var dny = c.redMul(t2);
      dny = dny.redIAdd(dny).redISub(jyd4);
      var nz = jyd.redMul(jz);
      if (i + 1 < pow)
        jz4 = jz4.redMul(jyd4);

      jx = nx;
      jz = nz;
      jyd = dny;
    }

    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
  };

  JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;

    if (this.curve.zeroA)
      return this._zeroDbl();
    else if (this.curve.threeA)
      return this._threeDbl();
    else
      return this._dbl();
  };

  JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
      //     #doubling-mdbl-2007-bl
      // 1M + 5S + 14A

      // XX = X1^2
      var xx = this.x.redSqr();
      // YY = Y1^2
      var yy = this.y.redSqr();
      // YYYY = YY^2
      var yyyy = yy.redSqr();
      // S = 2 * ((X1 + YY)^2 - XX - YYYY)
      var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s = s.redIAdd(s);
      // M = 3 * XX + a; a = 0
      var m = xx.redAdd(xx).redIAdd(xx);
      // T = M ^ 2 - 2*S
      var t = m.redSqr().redISub(s).redISub(s);

      // 8 * YYYY
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);

      // X3 = T
      nx = t;
      // Y3 = M * (S - T) - 8 * YYYY
      ny = m.redMul(s.redISub(t)).redISub(yyyy8);
      // Z3 = 2*Y1
      nz = this.y.redAdd(this.y);
    } else {
      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
      //     #doubling-dbl-2009-l
      // 2M + 5S + 13A

      // A = X1^2
      var a = this.x.redSqr();
      // B = Y1^2
      var b = this.y.redSqr();
      // C = B^2
      var c = b.redSqr();
      // D = 2 * ((X1 + B)^2 - A - C)
      var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
      d = d.redIAdd(d);
      // E = 3 * A
      var e = a.redAdd(a).redIAdd(a);
      // F = E^2
      var f = e.redSqr();

      // 8 * C
      var c8 = c.redIAdd(c);
      c8 = c8.redIAdd(c8);
      c8 = c8.redIAdd(c8);

      // X3 = F - 2 * D
      nx = f.redISub(d).redISub(d);
      // Y3 = E * (D - X3) - 8 * C
      ny = e.redMul(d.redISub(nx)).redISub(c8);
      // Z3 = 2 * Y1 * Z1
      nz = this.y.redMul(this.z);
      nz = nz.redIAdd(nz);
    }

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
      //     #doubling-mdbl-2007-bl
      // 1M + 5S + 15A

      // XX = X1^2
      var xx = this.x.redSqr();
      // YY = Y1^2
      var yy = this.y.redSqr();
      // YYYY = YY^2
      var yyyy = yy.redSqr();
      // S = 2 * ((X1 + YY)^2 - XX - YYYY)
      var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s = s.redIAdd(s);
      // M = 3 * XX + a
      var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
      // T = M^2 - 2 * S
      var t = m.redSqr().redISub(s).redISub(s);
      // X3 = T
      nx = t;
      // Y3 = M * (S - T) - 8 * YYYY
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      ny = m.redMul(s.redISub(t)).redISub(yyyy8);
      // Z3 = 2 * Y1
      nz = this.y.redAdd(this.y);
    } else {
      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
      // 3M + 5S

      // delta = Z1^2
      var delta = this.z.redSqr();
      // gamma = Y1^2
      var gamma = this.y.redSqr();
      // beta = X1 * gamma
      var beta = this.x.redMul(gamma);
      // alpha = 3 * (X1 - delta) * (X1 + delta)
      var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
      alpha = alpha.redAdd(alpha).redIAdd(alpha);
      // X3 = alpha^2 - 8 * beta
      var beta4 = beta.redIAdd(beta);
      beta4 = beta4.redIAdd(beta4);
      var beta8 = beta4.redAdd(beta4);
      nx = alpha.redSqr().redISub(beta8);
      // Z3 = (Y1 + Z1)^2 - gamma - delta
      nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
      // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
      var ggamma8 = gamma.redSqr();
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;

    // 4M + 6S + 10A
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();

    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();

    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);

    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA)
      return this.dbl().add(this);

    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
    // 5M + 10S + ...

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // ZZ = Z1^2
    var zz = this.z.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // M = 3 * XX + a * ZZ2; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // MM = M^2
    var mm = m.redSqr();
    // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    // EE = E^2
    var ee = e.redSqr();
    // T = 16*YYYY
    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    // U = (M + E)^2 - MM - EE - T
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
    // X3 = 4 * (X1 * EE - 4 * YY * U)
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    // Z3 = (Z1 + E)^2 - ZZ - EE
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype.mul = function mul(k, kbase) {
    k = new BN$c(k, kbase);

    return this.curve._wnafMul(this, k);
  };

  JPoint.prototype.eq = function eq(p) {
    if (p.type === 'affine')
      return this.eq(p.toJ());

    if (this === p)
      return true;

    // x1 * z2^2 == x2 * z1^2
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
      return false;

    // y1 * z2^3 == y2 * z1^3
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
  };

  JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0)
      return true;

    var xc = x.clone();
    var t = this.curve.redN.redMul(zs);
    for (;;) {
      xc.iadd(this.curve.n);
      if (xc.cmp(this.curve.p) >= 0)
        return false;

      rx.redIAdd(t);
      if (this.x.cmp(rx) === 0)
        return true;
    }
  };

  JPoint.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC JPoint Infinity>';
    return '<EC JPoint x: ' + this.x.toString(16, 2) +
        ' y: ' + this.y.toString(16, 2) +
        ' z: ' + this.z.toString(16, 2) + '>';
  };

  JPoint.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
  };

  var BN$b = bn$1.exports;
  var inherits$7 = inherits$9.exports;
  var Base$1 = base$1;

  var utils$k = utils$o;

  function MontCurve(conf) {
    Base$1.call(this, 'mont', conf);

    this.a = new BN$b(conf.a, 16).toRed(this.red);
    this.b = new BN$b(conf.b, 16).toRed(this.red);
    this.i4 = new BN$b(4).toRed(this.red).redInvm();
    this.two = new BN$b(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
  }
  inherits$7(MontCurve, Base$1);
  var mont = MontCurve;

  MontCurve.prototype.validate = function validate(point) {
    var x = point.normalize().x;
    var x2 = x.redSqr();
    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
    var y = rhs.redSqrt();

    return y.redSqr().cmp(rhs) === 0;
  };

  function Point$1(curve, x, z) {
    Base$1.BasePoint.call(this, curve, 'projective');
    if (x === null && z === null) {
      this.x = this.curve.one;
      this.z = this.curve.zero;
    } else {
      this.x = new BN$b(x, 16);
      this.z = new BN$b(z, 16);
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
    }
  }
  inherits$7(Point$1, Base$1.BasePoint);

  MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    return this.point(utils$k.toArray(bytes, enc), 1);
  };

  MontCurve.prototype.point = function point(x, z) {
    return new Point$1(this, x, z);
  };

  MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point$1.fromJSON(this, obj);
  };

  Point$1.prototype.precompute = function precompute() {
    // No-op
  };

  Point$1.prototype._encode = function _encode() {
    return this.getX().toArray('be', this.curve.p.byteLength());
  };

  Point$1.fromJSON = function fromJSON(curve, obj) {
    return new Point$1(curve, obj[0], obj[1] || curve.one);
  };

  Point$1.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' z: ' + this.z.fromRed().toString(16, 2) + '>';
  };

  Point$1.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
  };

  Point$1.prototype.dbl = function dbl() {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
    // 2M + 2S + 4A

    // A = X1 + Z1
    var a = this.x.redAdd(this.z);
    // AA = A^2
    var aa = a.redSqr();
    // B = X1 - Z1
    var b = this.x.redSub(this.z);
    // BB = B^2
    var bb = b.redSqr();
    // C = AA - BB
    var c = aa.redSub(bb);
    // X3 = AA * BB
    var nx = aa.redMul(bb);
    // Z3 = C * (BB + A24 * C)
    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
    return this.curve.point(nx, nz);
  };

  Point$1.prototype.add = function add() {
    throw new Error('Not supported on Montgomery curve');
  };

  Point$1.prototype.diffAdd = function diffAdd(p, diff) {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
    // 4M + 2S + 6A

    // A = X2 + Z2
    var a = this.x.redAdd(this.z);
    // B = X2 - Z2
    var b = this.x.redSub(this.z);
    // C = X3 + Z3
    var c = p.x.redAdd(p.z);
    // D = X3 - Z3
    var d = p.x.redSub(p.z);
    // DA = D * A
    var da = d.redMul(a);
    // CB = C * B
    var cb = c.redMul(b);
    // X5 = Z1 * (DA + CB)^2
    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
    // Z5 = X1 * (DA - CB)^2
    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
  };

  Point$1.prototype.mul = function mul(k) {
    var t = k.clone();
    var a = this; // (N / 2) * Q + Q
    var b = this.curve.point(null, null); // (N / 2) * Q
    var c = this; // Q

    for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
      bits.push(t.andln(1));

    for (var i = bits.length - 1; i >= 0; i--) {
      if (bits[i] === 0) {
        // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
        a = a.diffAdd(b, c);
        // N * Q = 2 * ((N / 2) * Q + Q))
        b = b.dbl();
      } else {
        // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
        b = a.diffAdd(b, c);
        // N * Q + Q = 2 * ((N / 2) * Q + Q)
        a = a.dbl();
      }
    }
    return b;
  };

  Point$1.prototype.mulAdd = function mulAdd() {
    throw new Error('Not supported on Montgomery curve');
  };

  Point$1.prototype.jumlAdd = function jumlAdd() {
    throw new Error('Not supported on Montgomery curve');
  };

  Point$1.prototype.eq = function eq(other) {
    return this.getX().cmp(other.getX()) === 0;
  };

  Point$1.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
  };

  Point$1.prototype.getX = function getX() {
    // Normalize coordinates
    this.normalize();

    return this.x.fromRed();
  };

  var utils$j = utils$o;
  var BN$a = bn$1.exports;
  var inherits$6 = inherits$9.exports;
  var Base = base$1;

  var assert$d = utils$j.assert;

  function EdwardsCurve(conf) {
    // NOTE: Important as we are creating point in Base.call()
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;

    Base.call(this, 'edwards', conf);

    this.a = new BN$a(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new BN$a(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new BN$a(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);

    assert$d(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
  }
  inherits$6(EdwardsCurve, Base);
  var edwards = EdwardsCurve;

  EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA)
      return num.redNeg();
    else
      return this.a.redMul(num);
  };

  EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC)
      return num;
    else
      return this.c.redMul(num);
  };

  // Just for compatibility with Short curve
  EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
    return this.point(x, y, z, t);
  };

  EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN$a(x, 16);
    if (!x.red)
      x = x.toRed(this.red);

    var x2 = x.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x2));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

    var y2 = rhs.redMul(lhs.redInvm());
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
      throw new Error('invalid point');

    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
      y = y.redNeg();

    return this.point(x, y);
  };

  EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
    y = new BN$a(y, 16);
    if (!y.red)
      y = y.toRed(this.red);

    // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
    var y2 = y.redSqr();
    var lhs = y2.redSub(this.c2);
    var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
    var x2 = lhs.redMul(rhs.redInvm());

    if (x2.cmp(this.zero) === 0) {
      if (odd)
        throw new Error('invalid point');
      else
        return this.point(this.zero, y);
    }

    var x = x2.redSqrt();
    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
      throw new Error('invalid point');

    if (x.fromRed().isOdd() !== odd)
      x = x.redNeg();

    return this.point(x, y);
  };

  EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity())
      return true;

    // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
    point.normalize();

    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

    return lhs.cmp(rhs) === 0;
  };

  function Point(curve, x, y, z, t) {
    Base.BasePoint.call(this, curve, 'projective');
    if (x === null && y === null && z === null) {
      this.x = this.curve.zero;
      this.y = this.curve.one;
      this.z = this.curve.one;
      this.t = this.curve.zero;
      this.zOne = true;
    } else {
      this.x = new BN$a(x, 16);
      this.y = new BN$a(y, 16);
      this.z = z ? new BN$a(z, 16) : this.curve.one;
      this.t = t && new BN$a(t, 16);
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
      if (this.t && !this.t.red)
        this.t = this.t.toRed(this.curve.red);
      this.zOne = this.z === this.curve.one;

      // Use extended coordinates
      if (this.curve.extended && !this.t) {
        this.t = this.x.redMul(this.y);
        if (!this.zOne)
          this.t = this.t.redMul(this.z.redInvm());
      }
    }
  }
  inherits$6(Point, Base.BasePoint);

  EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
  };

  EdwardsCurve.prototype.point = function point(x, y, z, t) {
    return new Point(this, x, y, z, t);
  };

  Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1], obj[2]);
  };

  Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' y: ' + this.y.fromRed().toString(16, 2) +
        ' z: ' + this.z.fromRed().toString(16, 2) + '>';
  };

  Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.x.cmpn(0) === 0 &&
      (this.y.cmp(this.z) === 0 ||
      (this.zOne && this.y.cmp(this.curve.c) === 0));
  };

  Point.prototype._extDbl = function _extDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #doubling-dbl-2008-hwcd
    // 4M + 4S

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = 2 * Z1^2
    var c = this.z.redSqr();
    c = c.redIAdd(c);
    // D = a * A
    var d = this.curve._mulA(a);
    // E = (X1 + Y1)^2 - A - B
    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
    // G = D + B
    var g = d.redAdd(b);
    // F = G - C
    var f = g.redSub(c);
    // H = D - B
    var h = d.redSub(b);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
  };

  Point.prototype._projDbl = function _projDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #doubling-dbl-2008-bbjlp
    //     #doubling-dbl-2007-bl
    // and others
    // Generally 3M + 4S or 2M + 4S

    // B = (X1 + Y1)^2
    var b = this.x.redAdd(this.y).redSqr();
    // C = X1^2
    var c = this.x.redSqr();
    // D = Y1^2
    var d = this.y.redSqr();

    var nx;
    var ny;
    var nz;
    var e;
    var h;
    var j;
    if (this.curve.twisted) {
      // E = a * C
      e = this.curve._mulA(c);
      // F = E + D
      var f = e.redAdd(d);
      if (this.zOne) {
        // X3 = (B - C - D) * (F - 2)
        nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
        // Y3 = F * (E - D)
        ny = f.redMul(e.redSub(d));
        // Z3 = F^2 - 2 * F
        nz = f.redSqr().redSub(f).redSub(f);
      } else {
        // H = Z1^2
        h = this.z.redSqr();
        // J = F - 2 * H
        j = f.redSub(h).redISub(h);
        // X3 = (B-C-D)*J
        nx = b.redSub(c).redISub(d).redMul(j);
        // Y3 = F * (E - D)
        ny = f.redMul(e.redSub(d));
        // Z3 = F * J
        nz = f.redMul(j);
      }
    } else {
      // E = C + D
      e = c.redAdd(d);
      // H = (c * Z1)^2
      h = this.curve._mulC(this.z).redSqr();
      // J = E - 2 * H
      j = e.redSub(h).redSub(h);
      // X3 = c * (B - E) * J
      nx = this.curve._mulC(b.redISub(e)).redMul(j);
      // Y3 = c * E * (C - D)
      ny = this.curve._mulC(e).redMul(c.redISub(d));
      // Z3 = E * J
      nz = e.redMul(j);
    }
    return this.curve.point(nx, ny, nz);
  };

  Point.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;

    // Double in extended coordinates
    if (this.curve.extended)
      return this._extDbl();
    else
      return this._projDbl();
  };

  Point.prototype._extAdd = function _extAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #addition-add-2008-hwcd-3
    // 8M

    // A = (Y1 - X1) * (Y2 - X2)
    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
    // B = (Y1 + X1) * (Y2 + X2)
    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
    // C = T1 * k * T2
    var c = this.t.redMul(this.curve.dd).redMul(p.t);
    // D = Z1 * 2 * Z2
    var d = this.z.redMul(p.z.redAdd(p.z));
    // E = B - A
    var e = b.redSub(a);
    // F = D - C
    var f = d.redSub(c);
    // G = D + C
    var g = d.redAdd(c);
    // H = B + A
    var h = b.redAdd(a);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
  };

  Point.prototype._projAdd = function _projAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #addition-add-2008-bbjlp
    //     #addition-add-2007-bl
    // 10M + 1S

    // A = Z1 * Z2
    var a = this.z.redMul(p.z);
    // B = A^2
    var b = a.redSqr();
    // C = X1 * X2
    var c = this.x.redMul(p.x);
    // D = Y1 * Y2
    var d = this.y.redMul(p.y);
    // E = d * C * D
    var e = this.curve.d.redMul(c).redMul(d);
    // F = B - E
    var f = b.redSub(e);
    // G = B + E
    var g = b.redAdd(e);
    // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
    var nx = a.redMul(f).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
      // Y3 = A * G * (D - a * C)
      ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
      // Z3 = F * G
      nz = f.redMul(g);
    } else {
      // Y3 = A * G * (D - C)
      ny = a.redMul(g).redMul(d.redSub(c));
      // Z3 = c * F * G
      nz = this.curve._mulC(f).redMul(g);
    }
    return this.curve.point(nx, ny, nz);
  };

  Point.prototype.add = function add(p) {
    if (this.isInfinity())
      return p;
    if (p.isInfinity())
      return this;

    if (this.curve.extended)
      return this._extAdd(p);
    else
      return this._projAdd(p);
  };

  Point.prototype.mul = function mul(k) {
    if (this._hasDoubles(k))
      return this.curve._fixedNafMul(this, k);
    else
      return this.curve._wnafMul(this, k);
  };

  Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
  };

  Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
  };

  Point.prototype.normalize = function normalize() {
    if (this.zOne)
      return this;

    // Normalize coordinates
    var zi = this.z.redInvm();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t)
      this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
  };

  Point.prototype.neg = function neg() {
    return this.curve.point(this.x.redNeg(),
      this.y,
      this.z,
      this.t && this.t.redNeg());
  };

  Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
  };

  Point.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
  };

  Point.prototype.eq = function eq(other) {
    return this === other ||
           this.getX().cmp(other.getX()) === 0 &&
           this.getY().cmp(other.getY()) === 0;
  };

  Point.prototype.eqXToP = function eqXToP(x) {
    var rx = x.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(rx) === 0)
      return true;

    var xc = x.clone();
    var t = this.curve.redN.redMul(this.z);
    for (;;) {
      xc.iadd(this.curve.n);
      if (xc.cmp(this.curve.p) >= 0)
        return false;

      rx.redIAdd(t);
      if (this.x.cmp(rx) === 0)
        return true;
    }
  };

  // Compatibility with BaseCurve
  Point.prototype.toP = Point.prototype.normalize;
  Point.prototype.mixedAdd = Point.prototype.add;

  (function (exports) {

  var curve = exports;

  curve.base = base$1;
  curve.short = short;
  curve.mont = mont;
  curve.edwards = edwards;
  }(curve));

  var curves$2 = {};

  var hash$3 = {};

  var utils$i = {};

  var assert$c = minimalisticAssert;
  var inherits$5 = inherits$9.exports;

  utils$i.inherits = inherits$5;

  function isSurrogatePair(msg, i) {
    if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
      return false;
    }
    if (i < 0 || i + 1 >= msg.length) {
      return false;
    }
    return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
  }

  function toArray(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg === 'string') {
      if (!enc) {
        // Inspired by stringToUtf8ByteArray() in closure-library by Google
        // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
        // Apache License 2.0
        // https://github.com/google/closure-library/blob/master/LICENSE
        var p = 0;
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          if (c < 128) {
            res[p++] = c;
          } else if (c < 2048) {
            res[p++] = (c >> 6) | 192;
            res[p++] = (c & 63) | 128;
          } else if (isSurrogatePair(msg, i)) {
            c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
            res[p++] = (c >> 18) | 240;
            res[p++] = ((c >> 12) & 63) | 128;
            res[p++] = ((c >> 6) & 63) | 128;
            res[p++] = (c & 63) | 128;
          } else {
            res[p++] = (c >> 12) | 224;
            res[p++] = ((c >> 6) & 63) | 128;
            res[p++] = (c & 63) | 128;
          }
        }
      } else if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0)
          msg = '0' + msg;
        for (i = 0; i < msg.length; i += 2)
          res.push(parseInt(msg[i] + msg[i + 1], 16));
      }
    } else {
      for (i = 0; i < msg.length; i++)
        res[i] = msg[i] | 0;
    }
    return res;
  }
  utils$i.toArray = toArray;

  function toHex(msg) {
    var res = '';
    for (var i = 0; i < msg.length; i++)
      res += zero2(msg[i].toString(16));
    return res;
  }
  utils$i.toHex = toHex;

  function htonl(w) {
    var res = (w >>> 24) |
              ((w >>> 8) & 0xff00) |
              ((w << 8) & 0xff0000) |
              ((w & 0xff) << 24);
    return res >>> 0;
  }
  utils$i.htonl = htonl;

  function toHex32(msg, endian) {
    var res = '';
    for (var i = 0; i < msg.length; i++) {
      var w = msg[i];
      if (endian === 'little')
        w = htonl(w);
      res += zero8(w.toString(16));
    }
    return res;
  }
  utils$i.toHex32 = toHex32;

  function zero2(word) {
    if (word.length === 1)
      return '0' + word;
    else
      return word;
  }
  utils$i.zero2 = zero2;

  function zero8(word) {
    if (word.length === 7)
      return '0' + word;
    else if (word.length === 6)
      return '00' + word;
    else if (word.length === 5)
      return '000' + word;
    else if (word.length === 4)
      return '0000' + word;
    else if (word.length === 3)
      return '00000' + word;
    else if (word.length === 2)
      return '000000' + word;
    else if (word.length === 1)
      return '0000000' + word;
    else
      return word;
  }
  utils$i.zero8 = zero8;

  function join32(msg, start, end, endian) {
    var len = end - start;
    assert$c(len % 4 === 0);
    var res = new Array(len / 4);
    for (var i = 0, k = start; i < res.length; i++, k += 4) {
      var w;
      if (endian === 'big')
        w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
      else
        w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
      res[i] = w >>> 0;
    }
    return res;
  }
  utils$i.join32 = join32;

  function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
      var m = msg[i];
      if (endian === 'big') {
        res[k] = m >>> 24;
        res[k + 1] = (m >>> 16) & 0xff;
        res[k + 2] = (m >>> 8) & 0xff;
        res[k + 3] = m & 0xff;
      } else {
        res[k + 3] = m >>> 24;
        res[k + 2] = (m >>> 16) & 0xff;
        res[k + 1] = (m >>> 8) & 0xff;
        res[k] = m & 0xff;
      }
    }
    return res;
  }
  utils$i.split32 = split32;

  function rotr32$1(w, b) {
    return (w >>> b) | (w << (32 - b));
  }
  utils$i.rotr32 = rotr32$1;

  function rotl32$2(w, b) {
    return (w << b) | (w >>> (32 - b));
  }
  utils$i.rotl32 = rotl32$2;

  function sum32$3(a, b) {
    return (a + b) >>> 0;
  }
  utils$i.sum32 = sum32$3;

  function sum32_3$1(a, b, c) {
    return (a + b + c) >>> 0;
  }
  utils$i.sum32_3 = sum32_3$1;

  function sum32_4$2(a, b, c, d) {
    return (a + b + c + d) >>> 0;
  }
  utils$i.sum32_4 = sum32_4$2;

  function sum32_5$2(a, b, c, d, e) {
    return (a + b + c + d + e) >>> 0;
  }
  utils$i.sum32_5 = sum32_5$2;

  function sum64$1(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];

    var lo = (al + bl) >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
  }
  utils$i.sum64 = sum64$1;

  function sum64_hi$1(ah, al, bh, bl) {
    var lo = (al + bl) >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
  }
  utils$i.sum64_hi = sum64_hi$1;

  function sum64_lo$1(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
  }
  utils$i.sum64_lo = sum64_lo$1;

  function sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = (lo + bl) >>> 0;
    carry += lo < al ? 1 : 0;
    lo = (lo + cl) >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = (lo + dl) >>> 0;
    carry += lo < dl ? 1 : 0;

    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
  }
  utils$i.sum64_4_hi = sum64_4_hi$1;

  function sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
  }
  utils$i.sum64_4_lo = sum64_4_lo$1;

  function sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = (lo + bl) >>> 0;
    carry += lo < al ? 1 : 0;
    lo = (lo + cl) >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = (lo + dl) >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = (lo + el) >>> 0;
    carry += lo < el ? 1 : 0;

    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
  }
  utils$i.sum64_5_hi = sum64_5_hi$1;

  function sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;

    return lo >>> 0;
  }
  utils$i.sum64_5_lo = sum64_5_lo$1;

  function rotr64_hi$1(ah, al, num) {
    var r = (al << (32 - num)) | (ah >>> num);
    return r >>> 0;
  }
  utils$i.rotr64_hi = rotr64_hi$1;

  function rotr64_lo$1(ah, al, num) {
    var r = (ah << (32 - num)) | (al >>> num);
    return r >>> 0;
  }
  utils$i.rotr64_lo = rotr64_lo$1;

  function shr64_hi$1(ah, al, num) {
    return ah >>> num;
  }
  utils$i.shr64_hi = shr64_hi$1;

  function shr64_lo$1(ah, al, num) {
    var r = (ah << (32 - num)) | (al >>> num);
    return r >>> 0;
  }
  utils$i.shr64_lo = shr64_lo$1;

  var common$5 = {};

  var utils$h = utils$i;
  var assert$b = minimalisticAssert;

  function BlockHash$4() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = 'big';

    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
  }
  common$5.BlockHash = BlockHash$4;

  BlockHash$4.prototype.update = function update(msg, enc) {
    // Convert message to array, pad it, and join into 32bit blocks
    msg = utils$h.toArray(msg, enc);
    if (!this.pending)
      this.pending = msg;
    else
      this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;

    // Enough data, try updating
    if (this.pending.length >= this._delta8) {
      msg = this.pending;

      // Process pending data in blocks
      var r = msg.length % this._delta8;
      this.pending = msg.slice(msg.length - r, msg.length);
      if (this.pending.length === 0)
        this.pending = null;

      msg = utils$h.join32(msg, 0, msg.length - r, this.endian);
      for (var i = 0; i < msg.length; i += this._delta32)
        this._update(msg, i, i + this._delta32);
    }

    return this;
  };

  BlockHash$4.prototype.digest = function digest(enc) {
    this.update(this._pad());
    assert$b(this.pending === null);

    return this._digest(enc);
  };

  BlockHash$4.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - ((len + this.padLength) % bytes);
    var res = new Array(k + this.padLength);
    res[0] = 0x80;
    for (var i = 1; i < k; i++)
      res[i] = 0;

    // Append length
    len <<= 3;
    if (this.endian === 'big') {
      for (var t = 8; t < this.padLength; t++)
        res[i++] = 0;

      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = (len >>> 24) & 0xff;
      res[i++] = (len >>> 16) & 0xff;
      res[i++] = (len >>> 8) & 0xff;
      res[i++] = len & 0xff;
    } else {
      res[i++] = len & 0xff;
      res[i++] = (len >>> 8) & 0xff;
      res[i++] = (len >>> 16) & 0xff;
      res[i++] = (len >>> 24) & 0xff;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;

      for (t = 8; t < this.padLength; t++)
        res[i++] = 0;
    }

    return res;
  };

  var sha = {};

  var common$4 = {};

  var utils$g = utils$i;
  var rotr32 = utils$g.rotr32;

  function ft_1$1(s, x, y, z) {
    if (s === 0)
      return ch32$1(x, y, z);
    if (s === 1 || s === 3)
      return p32(x, y, z);
    if (s === 2)
      return maj32$1(x, y, z);
  }
  common$4.ft_1 = ft_1$1;

  function ch32$1(x, y, z) {
    return (x & y) ^ ((~x) & z);
  }
  common$4.ch32 = ch32$1;

  function maj32$1(x, y, z) {
    return (x & y) ^ (x & z) ^ (y & z);
  }
  common$4.maj32 = maj32$1;

  function p32(x, y, z) {
    return x ^ y ^ z;
  }
  common$4.p32 = p32;

  function s0_256$1(x) {
    return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
  }
  common$4.s0_256 = s0_256$1;

  function s1_256$1(x) {
    return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
  }
  common$4.s1_256 = s1_256$1;

  function g0_256$1(x) {
    return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
  }
  common$4.g0_256 = g0_256$1;

  function g1_256$1(x) {
    return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
  }
  common$4.g1_256 = g1_256$1;

  var utils$f = utils$i;
  var common$3 = common$5;
  var shaCommon$1 = common$4;

  var rotl32$1 = utils$f.rotl32;
  var sum32$2 = utils$f.sum32;
  var sum32_5$1 = utils$f.sum32_5;
  var ft_1 = shaCommon$1.ft_1;
  var BlockHash$3 = common$3.BlockHash;

  var sha1_K = [
    0x5A827999, 0x6ED9EBA1,
    0x8F1BBCDC, 0xCA62C1D6
  ];

  function SHA1() {
    if (!(this instanceof SHA1))
      return new SHA1();

    BlockHash$3.call(this);
    this.h = [
      0x67452301, 0xefcdab89, 0x98badcfe,
      0x10325476, 0xc3d2e1f0 ];
    this.W = new Array(80);
  }

  utils$f.inherits(SHA1, BlockHash$3);
  var _1 = SHA1;

  SHA1.blockSize = 512;
  SHA1.outSize = 160;
  SHA1.hmacStrength = 80;
  SHA1.padLength = 64;

  SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;

    for (var i = 0; i < 16; i++)
      W[i] = msg[start + i];

    for(; i < W.length; i++)
      W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];

    for (i = 0; i < W.length; i++) {
      var s = ~~(i / 20);
      var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
      e = d;
      d = c;
      c = rotl32$1(b, 30);
      b = a;
      a = t;
    }

    this.h[0] = sum32$2(this.h[0], a);
    this.h[1] = sum32$2(this.h[1], b);
    this.h[2] = sum32$2(this.h[2], c);
    this.h[3] = sum32$2(this.h[3], d);
    this.h[4] = sum32$2(this.h[4], e);
  };

  SHA1.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils$f.toHex32(this.h, 'big');
    else
      return utils$f.split32(this.h, 'big');
  };

  var utils$e = utils$i;
  var common$2 = common$5;
  var shaCommon = common$4;
  var assert$a = minimalisticAssert;

  var sum32$1 = utils$e.sum32;
  var sum32_4$1 = utils$e.sum32_4;
  var sum32_5 = utils$e.sum32_5;
  var ch32 = shaCommon.ch32;
  var maj32 = shaCommon.maj32;
  var s0_256 = shaCommon.s0_256;
  var s1_256 = shaCommon.s1_256;
  var g0_256 = shaCommon.g0_256;
  var g1_256 = shaCommon.g1_256;

  var BlockHash$2 = common$2.BlockHash;

  var sha256_K = [
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
  ];

  function SHA256$1() {
    if (!(this instanceof SHA256$1))
      return new SHA256$1();

    BlockHash$2.call(this);
    this.h = [
      0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
      0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    ];
    this.k = sha256_K;
    this.W = new Array(64);
  }
  utils$e.inherits(SHA256$1, BlockHash$2);
  var _256 = SHA256$1;

  SHA256$1.blockSize = 512;
  SHA256$1.outSize = 256;
  SHA256$1.hmacStrength = 192;
  SHA256$1.padLength = 64;

  SHA256$1.prototype._update = function _update(msg, start) {
    var W = this.W;

    for (var i = 0; i < 16; i++)
      W[i] = msg[start + i];
    for (; i < W.length; i++)
      W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f = this.h[5];
    var g = this.h[6];
    var h = this.h[7];

    assert$a(this.k.length === W.length);
    for (i = 0; i < W.length; i++) {
      var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
      var T2 = sum32$1(s0_256(a), maj32(a, b, c));
      h = g;
      g = f;
      f = e;
      e = sum32$1(d, T1);
      d = c;
      c = b;
      b = a;
      a = sum32$1(T1, T2);
    }

    this.h[0] = sum32$1(this.h[0], a);
    this.h[1] = sum32$1(this.h[1], b);
    this.h[2] = sum32$1(this.h[2], c);
    this.h[3] = sum32$1(this.h[3], d);
    this.h[4] = sum32$1(this.h[4], e);
    this.h[5] = sum32$1(this.h[5], f);
    this.h[6] = sum32$1(this.h[6], g);
    this.h[7] = sum32$1(this.h[7], h);
  };

  SHA256$1.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils$e.toHex32(this.h, 'big');
    else
      return utils$e.split32(this.h, 'big');
  };

  var utils$d = utils$i;
  var SHA256 = _256;

  function SHA224() {
    if (!(this instanceof SHA224))
      return new SHA224();

    SHA256.call(this);
    this.h = [
      0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
      0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
  }
  utils$d.inherits(SHA224, SHA256);
  var _224 = SHA224;

  SHA224.blockSize = 512;
  SHA224.outSize = 224;
  SHA224.hmacStrength = 192;
  SHA224.padLength = 64;

  SHA224.prototype._digest = function digest(enc) {
    // Just truncate output
    if (enc === 'hex')
      return utils$d.toHex32(this.h.slice(0, 7), 'big');
    else
      return utils$d.split32(this.h.slice(0, 7), 'big');
  };

  var utils$c = utils$i;
  var common$1 = common$5;
  var assert$9 = minimalisticAssert;

  var rotr64_hi = utils$c.rotr64_hi;
  var rotr64_lo = utils$c.rotr64_lo;
  var shr64_hi = utils$c.shr64_hi;
  var shr64_lo = utils$c.shr64_lo;
  var sum64 = utils$c.sum64;
  var sum64_hi = utils$c.sum64_hi;
  var sum64_lo = utils$c.sum64_lo;
  var sum64_4_hi = utils$c.sum64_4_hi;
  var sum64_4_lo = utils$c.sum64_4_lo;
  var sum64_5_hi = utils$c.sum64_5_hi;
  var sum64_5_lo = utils$c.sum64_5_lo;

  var BlockHash$1 = common$1.BlockHash;

  var sha512_K = [
    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
  ];

  function SHA512$1() {
    if (!(this instanceof SHA512$1))
      return new SHA512$1();

    BlockHash$1.call(this);
    this.h = [
      0x6a09e667, 0xf3bcc908,
      0xbb67ae85, 0x84caa73b,
      0x3c6ef372, 0xfe94f82b,
      0xa54ff53a, 0x5f1d36f1,
      0x510e527f, 0xade682d1,
      0x9b05688c, 0x2b3e6c1f,
      0x1f83d9ab, 0xfb41bd6b,
      0x5be0cd19, 0x137e2179 ];
    this.k = sha512_K;
    this.W = new Array(160);
  }
  utils$c.inherits(SHA512$1, BlockHash$1);
  var _512 = SHA512$1;

  SHA512$1.blockSize = 1024;
  SHA512$1.outSize = 512;
  SHA512$1.hmacStrength = 192;
  SHA512$1.padLength = 128;

  SHA512$1.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;

    // 32 x 32bit words
    for (var i = 0; i < 32; i++)
      W[i] = msg[start + i];
    for (; i < W.length; i += 2) {
      var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
      var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
      var c1_hi = W[i - 14];  // i - 7
      var c1_lo = W[i - 13];
      var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
      var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
      var c3_hi = W[i - 32];  // i - 16
      var c3_lo = W[i - 31];

      W[i] = sum64_4_hi(
        c0_hi, c0_lo,
        c1_hi, c1_lo,
        c2_hi, c2_lo,
        c3_hi, c3_lo);
      W[i + 1] = sum64_4_lo(
        c0_hi, c0_lo,
        c1_hi, c1_lo,
        c2_hi, c2_lo,
        c3_hi, c3_lo);
    }
  };

  SHA512$1.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);

    var W = this.W;

    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];

    assert$9(this.k.length === W.length);
    for (var i = 0; i < W.length; i += 2) {
      var c0_hi = hh;
      var c0_lo = hl;
      var c1_hi = s1_512_hi(eh, el);
      var c1_lo = s1_512_lo(eh, el);
      var c2_hi = ch64_hi(eh, el, fh, fl, gh);
      var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
      var c3_hi = this.k[i];
      var c3_lo = this.k[i + 1];
      var c4_hi = W[i];
      var c4_lo = W[i + 1];

      var T1_hi = sum64_5_hi(
        c0_hi, c0_lo,
        c1_hi, c1_lo,
        c2_hi, c2_lo,
        c3_hi, c3_lo,
        c4_hi, c4_lo);
      var T1_lo = sum64_5_lo(
        c0_hi, c0_lo,
        c1_hi, c1_lo,
        c2_hi, c2_lo,
        c3_hi, c3_lo,
        c4_hi, c4_lo);

      c0_hi = s0_512_hi(ah, al);
      c0_lo = s0_512_lo(ah, al);
      c1_hi = maj64_hi(ah, al, bh, bl, ch);
      c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

      var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
      var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

      hh = gh;
      hl = gl;

      gh = fh;
      gl = fl;

      fh = eh;
      fl = el;

      eh = sum64_hi(dh, dl, T1_hi, T1_lo);
      el = sum64_lo(dl, dl, T1_hi, T1_lo);

      dh = ch;
      dl = cl;

      ch = bh;
      cl = bl;

      bh = ah;
      bl = al;

      ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
      al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }

    sum64(this.h, 0, ah, al);
    sum64(this.h, 2, bh, bl);
    sum64(this.h, 4, ch, cl);
    sum64(this.h, 6, dh, dl);
    sum64(this.h, 8, eh, el);
    sum64(this.h, 10, fh, fl);
    sum64(this.h, 12, gh, gl);
    sum64(this.h, 14, hh, hl);
  };

  SHA512$1.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils$c.toHex32(this.h, 'big');
    else
      return utils$c.split32(this.h, 'big');
  };

  function ch64_hi(xh, xl, yh, yl, zh) {
    var r = (xh & yh) ^ ((~xh) & zh);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r = (xl & yl) ^ ((~xl) & zl);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function maj64_hi(xh, xl, yh, yl, zh) {
    var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 28);
    var c1_hi = rotr64_hi(xl, xh, 2);  // 34
    var c2_hi = rotr64_hi(xl, xh, 7);  // 39

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 28);
    var c1_lo = rotr64_lo(xl, xh, 2);  // 34
    var c2_lo = rotr64_lo(xl, xh, 7);  // 39

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 14);
    var c1_hi = rotr64_hi(xh, xl, 18);
    var c2_hi = rotr64_hi(xl, xh, 9);  // 41

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 14);
    var c1_lo = rotr64_lo(xh, xl, 18);
    var c2_lo = rotr64_lo(xl, xh, 9);  // 41

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 1);
    var c1_hi = rotr64_hi(xh, xl, 8);
    var c2_hi = shr64_hi(xh, xl, 7);

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 1);
    var c1_lo = rotr64_lo(xh, xl, 8);
    var c2_lo = shr64_lo(xh, xl, 7);

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 19);
    var c1_hi = rotr64_hi(xl, xh, 29);  // 61
    var c2_hi = shr64_hi(xh, xl, 6);

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 19);
    var c1_lo = rotr64_lo(xl, xh, 29);  // 61
    var c2_lo = shr64_lo(xh, xl, 6);

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  var utils$b = utils$i;

  var SHA512 = _512;

  function SHA384() {
    if (!(this instanceof SHA384))
      return new SHA384();

    SHA512.call(this);
    this.h = [
      0xcbbb9d5d, 0xc1059ed8,
      0x629a292a, 0x367cd507,
      0x9159015a, 0x3070dd17,
      0x152fecd8, 0xf70e5939,
      0x67332667, 0xffc00b31,
      0x8eb44a87, 0x68581511,
      0xdb0c2e0d, 0x64f98fa7,
      0x47b5481d, 0xbefa4fa4 ];
  }
  utils$b.inherits(SHA384, SHA512);
  var _384 = SHA384;

  SHA384.blockSize = 1024;
  SHA384.outSize = 384;
  SHA384.hmacStrength = 192;
  SHA384.padLength = 128;

  SHA384.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils$b.toHex32(this.h.slice(0, 12), 'big');
    else
      return utils$b.split32(this.h.slice(0, 12), 'big');
  };

  sha.sha1 = _1;
  sha.sha224 = _224;
  sha.sha256 = _256;
  sha.sha384 = _384;
  sha.sha512 = _512;

  var ripemd = {};

  var utils$a = utils$i;
  var common = common$5;

  var rotl32 = utils$a.rotl32;
  var sum32 = utils$a.sum32;
  var sum32_3 = utils$a.sum32_3;
  var sum32_4 = utils$a.sum32_4;
  var BlockHash = common.BlockHash;

  function RIPEMD160() {
    if (!(this instanceof RIPEMD160))
      return new RIPEMD160();

    BlockHash.call(this);

    this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
    this.endian = 'little';
  }
  utils$a.inherits(RIPEMD160, BlockHash);
  ripemd.ripemd160 = RIPEMD160;

  RIPEMD160.blockSize = 512;
  RIPEMD160.outSize = 160;
  RIPEMD160.hmacStrength = 192;
  RIPEMD160.padLength = 64;

  RIPEMD160.prototype._update = function update(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for (var j = 0; j < 80; j++) {
      var T = sum32(
        rotl32(
          sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
          s[j]),
        E);
      A = E;
      E = D;
      D = rotl32(C, 10);
      C = B;
      B = T;
      T = sum32(
        rotl32(
          sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
          sh[j]),
        Eh);
      Ah = Eh;
      Eh = Dh;
      Dh = rotl32(Ch, 10);
      Ch = Bh;
      Bh = T;
    }
    T = sum32_3(this.h[1], C, Dh);
    this.h[1] = sum32_3(this.h[2], D, Eh);
    this.h[2] = sum32_3(this.h[3], E, Ah);
    this.h[3] = sum32_3(this.h[4], A, Bh);
    this.h[4] = sum32_3(this.h[0], B, Ch);
    this.h[0] = T;
  };

  RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils$a.toHex32(this.h, 'little');
    else
      return utils$a.split32(this.h, 'little');
  };

  function f(j, x, y, z) {
    if (j <= 15)
      return x ^ y ^ z;
    else if (j <= 31)
      return (x & y) | ((~x) & z);
    else if (j <= 47)
      return (x | (~y)) ^ z;
    else if (j <= 63)
      return (x & z) | (y & (~z));
    else
      return x ^ (y | (~z));
  }

  function K(j) {
    if (j <= 15)
      return 0x00000000;
    else if (j <= 31)
      return 0x5a827999;
    else if (j <= 47)
      return 0x6ed9eba1;
    else if (j <= 63)
      return 0x8f1bbcdc;
    else
      return 0xa953fd4e;
  }

  function Kh(j) {
    if (j <= 15)
      return 0x50a28be6;
    else if (j <= 31)
      return 0x5c4dd124;
    else if (j <= 47)
      return 0x6d703ef3;
    else if (j <= 63)
      return 0x7a6d76e9;
    else
      return 0x00000000;
  }

  var r = [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
    3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
    1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
    4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
  ];

  var rh = [
    5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
    6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
    15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
    8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
    12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
  ];

  var s = [
    11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
    7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
    11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
    11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
    9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
  ];

  var sh = [
    8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
    9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
    9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
    15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
    8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
  ];

  var utils$9 = utils$i;
  var assert$8 = minimalisticAssert;

  function Hmac(hash, key, enc) {
    if (!(this instanceof Hmac))
      return new Hmac(hash, key, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;

    this._init(utils$9.toArray(key, enc));
  }
  var hmac = Hmac;

  Hmac.prototype._init = function init(key) {
    // Shorten key, if needed
    if (key.length > this.blockSize)
      key = new this.Hash().update(key).digest();
    assert$8(key.length <= this.blockSize);

    // Add padding to key
    for (var i = key.length; i < this.blockSize; i++)
      key.push(0);

    for (i = 0; i < key.length; i++)
      key[i] ^= 0x36;
    this.inner = new this.Hash().update(key);

    // 0x36 ^ 0x5c = 0x6a
    for (i = 0; i < key.length; i++)
      key[i] ^= 0x6a;
    this.outer = new this.Hash().update(key);
  };

  Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
  };

  Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
  };

  (function (exports) {
  var hash = exports;

  hash.utils = utils$i;
  hash.common = common$5;
  hash.sha = sha;
  hash.ripemd = ripemd;
  hash.hmac = hmac;

  // Proxy hash functions to the main object
  hash.sha1 = hash.sha.sha1;
  hash.sha256 = hash.sha.sha256;
  hash.sha224 = hash.sha.sha224;
  hash.sha384 = hash.sha.sha384;
  hash.sha512 = hash.sha.sha512;
  hash.ripemd160 = hash.ripemd.ripemd160;
  }(hash$3));

  (function (exports) {

  var curves = exports;

  var hash = hash$3;
  var curve$1 = curve;
  var utils = utils$o;

  var assert = utils.assert;

  function PresetCurve(options) {
    if (options.type === 'short')
      this.curve = new curve$1.short(options);
    else if (options.type === 'edwards')
      this.curve = new curve$1.edwards(options);
    else
      this.curve = new curve$1.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;

    assert(this.g.validate(), 'Invalid curve');
    assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
  }
  curves.PresetCurve = PresetCurve;

  function defineCurve(name, options) {
    Object.defineProperty(curves, name, {
      configurable: true,
      enumerable: true,
      get: function() {
        var curve = new PresetCurve(options);
        Object.defineProperty(curves, name, {
          configurable: true,
          enumerable: true,
          value: curve,
        });
        return curve;
      },
    });
  }

  defineCurve('p192', {
    type: 'short',
    prime: 'p192',
    p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
    b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
    n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
    hash: hash.sha256,
    gRed: false,
    g: [
      '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
      '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
    ],
  });

  defineCurve('p224', {
    type: 'short',
    prime: 'p224',
    p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
    b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
    n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
    hash: hash.sha256,
    gRed: false,
    g: [
      'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
      'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
    ],
  });

  defineCurve('p256', {
    type: 'short',
    prime: null,
    p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
    a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
    b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
    n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
    hash: hash.sha256,
    gRed: false,
    g: [
      '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
      '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
    ],
  });

  defineCurve('p384', {
    type: 'short',
    prime: null,
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'fffffffe ffffffff 00000000 00000000 ffffffff',
    a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'fffffffe ffffffff 00000000 00000000 fffffffc',
    b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
       '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
    n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
       'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
    hash: hash.sha384,
    gRed: false,
    g: [
      'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
      '5502f25d bf55296c 3a545e38 72760ab7',
      '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
      '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
    ],
  });

  defineCurve('p521', {
    type: 'short',
    prime: null,
    p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff ffffffff',
    a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff fffffffc',
    b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
       '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
       '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
    n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
       'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
    hash: hash.sha512,
    gRed: false,
    g: [
      '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
      '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
      'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
      '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
      '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
      '3fad0761 353c7086 a272c240 88be9476 9fd16650',
    ],
  });

  defineCurve('curve25519', {
    type: 'mont',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '76d06',
    b: '1',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash.sha256,
    gRed: false,
    g: [
      '9',
    ],
  });

  defineCurve('ed25519', {
    type: 'edwards',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '-1',
    c: '1',
    // -121665 * (121666^(-1)) (mod P)
    d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash.sha256,
    gRed: false,
    g: [
      '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

      // 4/5
      '6666666666666666666666666666666666666666666666666666666666666658',
    ],
  });

  var pre;
  try {
    pre = require('./precomputed/secp256k1');
  } catch (e) {
    pre = undefined;
  }

  defineCurve('secp256k1', {
    type: 'short',
    prime: 'k256',
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
    a: '0',
    b: '7',
    n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
    h: '1',
    hash: hash.sha256,

    // Precomputed endomorphism
    beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
    lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
    basis: [
      {
        a: '3086d221a7d46bcde86c90e49284eb15',
        b: '-e4437ed6010e88286f547fa90abfe4c3',
      },
      {
        a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
        b: '3086d221a7d46bcde86c90e49284eb15',
      },
    ],

    gRed: false,
    g: [
      '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
      '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
      pre,
    ],
  });
  }(curves$2));

  var hash$2 = hash$3;
  var utils$8 = utils$n;
  var assert$7 = minimalisticAssert;

  function HmacDRBG$1(options) {
    if (!(this instanceof HmacDRBG$1))
      return new HmacDRBG$1(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;

    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;

    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;

    var entropy = utils$8.toArray(options.entropy, options.entropyEnc || 'hex');
    var nonce = utils$8.toArray(options.nonce, options.nonceEnc || 'hex');
    var pers = utils$8.toArray(options.pers, options.persEnc || 'hex');
    assert$7(entropy.length >= (this.minEntropy / 8),
           'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    this._init(entropy, nonce, pers);
  }
  var hmacDrbg = HmacDRBG$1;

  HmacDRBG$1.prototype._init = function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);

    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for (var i = 0; i < this.V.length; i++) {
      this.K[i] = 0x00;
      this.V[i] = 0x01;
    }

    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 0x1000000000000;  // 2^48
  };

  HmacDRBG$1.prototype._hmac = function hmac() {
    return new hash$2.hmac(this.hash, this.K);
  };

  HmacDRBG$1.prototype._update = function update(seed) {
    var kmac = this._hmac()
                   .update(this.V)
                   .update([ 0x00 ]);
    if (seed)
      kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed)
      return;

    this.K = this._hmac()
                 .update(this.V)
                 .update([ 0x01 ])
                 .update(seed)
                 .digest();
    this.V = this._hmac().update(this.V).digest();
  };

  HmacDRBG$1.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    // Optional entropy enc
    if (typeof entropyEnc !== 'string') {
      addEnc = add;
      add = entropyEnc;
      entropyEnc = null;
    }

    entropy = utils$8.toArray(entropy, entropyEnc);
    add = utils$8.toArray(add, addEnc);

    assert$7(entropy.length >= (this.minEntropy / 8),
           'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

    this._update(entropy.concat(add || []));
    this._reseed = 1;
  };

  HmacDRBG$1.prototype.generate = function generate(len, enc, add, addEnc) {
    if (this._reseed > this.reseedInterval)
      throw new Error('Reseed is required');

    // Optional encoding
    if (typeof enc !== 'string') {
      addEnc = add;
      add = enc;
      enc = null;
    }

    // Optional additional data
    if (add) {
      add = utils$8.toArray(add, addEnc || 'hex');
      this._update(add);
    }

    var temp = [];
    while (temp.length < len) {
      this.V = this._hmac().update(this.V).digest();
      temp = temp.concat(this.V);
    }

    var res = temp.slice(0, len);
    this._update(add);
    this._reseed++;
    return utils$8.encode(res, enc);
  };

  var BN$9 = bn$1.exports;
  var utils$7 = utils$o;
  var assert$6 = utils$7.assert;

  function KeyPair$3(ec, options) {
    this.ec = ec;
    this.priv = null;
    this.pub = null;

    // KeyPair(ec, { priv: ..., pub: ... })
    if (options.priv)
      this._importPrivate(options.priv, options.privEnc);
    if (options.pub)
      this._importPublic(options.pub, options.pubEnc);
  }
  var key$1 = KeyPair$3;

  KeyPair$3.fromPublic = function fromPublic(ec, pub, enc) {
    if (pub instanceof KeyPair$3)
      return pub;

    return new KeyPair$3(ec, {
      pub: pub,
      pubEnc: enc,
    });
  };

  KeyPair$3.fromPrivate = function fromPrivate(ec, priv, enc) {
    if (priv instanceof KeyPair$3)
      return priv;

    return new KeyPair$3(ec, {
      priv: priv,
      privEnc: enc,
    });
  };

  KeyPair$3.prototype.validate = function validate() {
    var pub = this.getPublic();

    if (pub.isInfinity())
      return { result: false, reason: 'Invalid public key' };
    if (!pub.validate())
      return { result: false, reason: 'Public key is not a point' };
    if (!pub.mul(this.ec.curve.n).isInfinity())
      return { result: false, reason: 'Public key * N != O' };

    return { result: true, reason: null };
  };

  KeyPair$3.prototype.getPublic = function getPublic(compact, enc) {
    // compact is optional argument
    if (typeof compact === 'string') {
      enc = compact;
      compact = null;
    }

    if (!this.pub)
      this.pub = this.ec.g.mul(this.priv);

    if (!enc)
      return this.pub;

    return this.pub.encode(enc, compact);
  };

  KeyPair$3.prototype.getPrivate = function getPrivate(enc) {
    if (enc === 'hex')
      return this.priv.toString(16, 2);
    else
      return this.priv;
  };

  KeyPair$3.prototype._importPrivate = function _importPrivate(key, enc) {
    this.priv = new BN$9(key, enc || 16);

    // Ensure that the priv won't be bigger than n, otherwise we may fail
    // in fixed multiplication method
    this.priv = this.priv.umod(this.ec.curve.n);
  };

  KeyPair$3.prototype._importPublic = function _importPublic(key, enc) {
    if (key.x || key.y) {
      // Montgomery points only have an `x` coordinate.
      // Weierstrass/Edwards points on the other hand have both `x` and
      // `y` coordinates.
      if (this.ec.curve.type === 'mont') {
        assert$6(key.x, 'Need x coordinate');
      } else if (this.ec.curve.type === 'short' ||
                 this.ec.curve.type === 'edwards') {
        assert$6(key.x && key.y, 'Need both x and y coordinate');
      }
      this.pub = this.ec.curve.point(key.x, key.y);
      return;
    }
    this.pub = this.ec.curve.decodePoint(key, enc);
  };

  // ECDH
  KeyPair$3.prototype.derive = function derive(pub) {
    if(!pub.validate()) {
      assert$6(pub.validate(), 'public point not validated');
    }
    return pub.mul(this.priv).getX();
  };

  // ECDSA
  KeyPair$3.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
  };

  KeyPair$3.prototype.verify = function verify(msg, signature) {
    return this.ec.verify(msg, signature, this);
  };

  KeyPair$3.prototype.inspect = function inspect() {
    return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
           ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
  };

  var BN$8 = bn$1.exports;

  var utils$6 = utils$o;
  var assert$5 = utils$6.assert;

  function Signature$3(options, enc) {
    if (options instanceof Signature$3)
      return options;

    if (this._importDER(options, enc))
      return;

    assert$5(options.r && options.s, 'Signature without r or s');
    this.r = new BN$8(options.r, 16);
    this.s = new BN$8(options.s, 16);
    if (options.recoveryParam === undefined)
      this.recoveryParam = null;
    else
      this.recoveryParam = options.recoveryParam;
  }
  var signature$2 = Signature$3;

  function Position() {
    this.place = 0;
  }

  function getLength$1(buf, p) {
    var initial = buf[p.place++];
    if (!(initial & 0x80)) {
      return initial;
    }
    var octetLen = initial & 0xf;

    // Indefinite length or overflow
    if (octetLen === 0 || octetLen > 4) {
      return false;
    }

    var val = 0;
    for (var i = 0, off = p.place; i < octetLen; i++, off++) {
      val <<= 8;
      val |= buf[off];
      val >>>= 0;
    }

    // Leading zeroes
    if (val <= 0x7f) {
      return false;
    }

    p.place = off;
    return val;
  }

  function rmPadding(buf) {
    var i = 0;
    var len = buf.length - 1;
    while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
      i++;
    }
    if (i === 0) {
      return buf;
    }
    return buf.slice(i);
  }

  Signature$3.prototype._importDER = function _importDER(data, enc) {
    data = utils$6.toArray(data, enc);
    var p = new Position();
    if (data[p.place++] !== 0x30) {
      return false;
    }
    var len = getLength$1(data, p);
    if (len === false) {
      return false;
    }
    if ((len + p.place) !== data.length) {
      return false;
    }
    if (data[p.place++] !== 0x02) {
      return false;
    }
    var rlen = getLength$1(data, p);
    if (rlen === false) {
      return false;
    }
    var r = data.slice(p.place, rlen + p.place);
    p.place += rlen;
    if (data[p.place++] !== 0x02) {
      return false;
    }
    var slen = getLength$1(data, p);
    if (slen === false) {
      return false;
    }
    if (data.length !== slen + p.place) {
      return false;
    }
    var s = data.slice(p.place, slen + p.place);
    if (r[0] === 0) {
      if (r[1] & 0x80) {
        r = r.slice(1);
      } else {
        // Leading zeroes
        return false;
      }
    }
    if (s[0] === 0) {
      if (s[1] & 0x80) {
        s = s.slice(1);
      } else {
        // Leading zeroes
        return false;
      }
    }

    this.r = new BN$8(r);
    this.s = new BN$8(s);
    this.recoveryParam = null;

    return true;
  };

  function constructLength(arr, len) {
    if (len < 0x80) {
      arr.push(len);
      return;
    }
    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
    arr.push(octets | 0x80);
    while (--octets) {
      arr.push((len >>> (octets << 3)) & 0xff);
    }
    arr.push(len);
  }

  Signature$3.prototype.toDER = function toDER(enc) {
    var r = this.r.toArray();
    var s = this.s.toArray();

    // Pad values
    if (r[0] & 0x80)
      r = [ 0 ].concat(r);
    // Pad values
    if (s[0] & 0x80)
      s = [ 0 ].concat(s);

    r = rmPadding(r);
    s = rmPadding(s);

    while (!s[0] && !(s[1] & 0x80)) {
      s = s.slice(1);
    }
    var arr = [ 0x02 ];
    constructLength(arr, r.length);
    arr = arr.concat(r);
    arr.push(0x02);
    constructLength(arr, s.length);
    var backHalf = arr.concat(s);
    var res = [ 0x30 ];
    constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return utils$6.encode(res, enc);
  };

  var BN$7 = bn$1.exports;
  var HmacDRBG = hmacDrbg;
  var utils$5 = utils$o;
  var curves$1 = curves$2;
  var rand = brorand.exports;
  var assert$4 = utils$5.assert;

  var KeyPair$2 = key$1;
  var Signature$2 = signature$2;

  function EC$3(options) {
    if (!(this instanceof EC$3))
      return new EC$3(options);

    // Shortcut `elliptic.ec(curve-name)`
    if (typeof options === 'string') {
      assert$4(Object.prototype.hasOwnProperty.call(curves$1, options),
        'Unknown curve ' + options);

      options = curves$1[options];
    }

    // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
    if (options instanceof curves$1.PresetCurve)
      options = { curve: options };

    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;

    // Point on curve
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);

    // Hash for function for DRBG
    this.hash = options.hash || options.curve.hash;
  }
  var ec$3 = EC$3;

  EC$3.prototype.keyPair = function keyPair(options) {
    return new KeyPair$2(this, options);
  };

  EC$3.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return KeyPair$2.fromPrivate(this, priv, enc);
  };

  EC$3.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return KeyPair$2.fromPublic(this, pub, enc);
  };

  EC$3.prototype.genKeyPair = function genKeyPair(options) {
    if (!options)
      options = {};

    // Instantiate Hmac_DRBG
    var drbg = new HmacDRBG({
      hash: this.hash,
      pers: options.pers,
      persEnc: options.persEnc || 'utf8',
      entropy: options.entropy || rand(this.hash.hmacStrength),
      entropyEnc: options.entropy && options.entropyEnc || 'utf8',
      nonce: this.n.toArray(),
    });

    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new BN$7(2));
    for (;;) {
      var priv = new BN$7(drbg.generate(bytes));
      if (priv.cmp(ns2) > 0)
        continue;

      priv.iaddn(1);
      return this.keyFromPrivate(priv);
    }
  };

  EC$3.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0)
      msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0)
      return msg.sub(this.n);
    else
      return msg;
  };

  EC$3.prototype.sign = function sign(msg, key, enc, options) {
    if (typeof enc === 'object') {
      options = enc;
      enc = null;
    }
    if (!options)
      options = {};

    key = this.keyFromPrivate(key, enc);
    msg = this._truncateToN(new BN$7(msg, 16));

    // Zero-extend key to provide enough entropy
    var bytes = this.n.byteLength();
    var bkey = key.getPrivate().toArray('be', bytes);

    // Zero-extend nonce to have the same byte size as N
    var nonce = msg.toArray('be', bytes);

    // Instantiate Hmac_DRBG
    var drbg = new HmacDRBG({
      hash: this.hash,
      entropy: bkey,
      nonce: nonce,
      pers: options.pers,
      persEnc: options.persEnc || 'utf8',
    });

    // Number of bytes to generate
    var ns1 = this.n.sub(new BN$7(1));

    for (var iter = 0; ; iter++) {
      var k = options.k ?
        options.k(iter) :
        new BN$7(drbg.generate(this.n.byteLength()));
      k = this._truncateToN(k, true);
      if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
        continue;

      var kp = this.g.mul(k);
      if (kp.isInfinity())
        continue;

      var kpX = kp.getX();
      var r = kpX.umod(this.n);
      if (r.cmpn(0) === 0)
        continue;

      var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
      s = s.umod(this.n);
      if (s.cmpn(0) === 0)
        continue;

      var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                          (kpX.cmp(r) !== 0 ? 2 : 0);

      // Use complement of `s`, if it is > `n / 2`
      if (options.canonical && s.cmp(this.nh) > 0) {
        s = this.n.sub(s);
        recoveryParam ^= 1;
      }

      return new Signature$2({ r: r, s: s, recoveryParam: recoveryParam });
    }
  };

  EC$3.prototype.verify = function verify(msg, signature, key, enc) {
    msg = this._truncateToN(new BN$7(msg, 16));
    key = this.keyFromPublic(key, enc);
    signature = new Signature$2(signature, 'hex');

    // Perform primitive values validation
    var r = signature.r;
    var s = signature.s;
    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
      return false;
    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
      return false;

    // Validate signature
    var sinv = s.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r).umod(this.n);
    var p;

    if (!this.curve._maxwellTrick) {
      p = this.g.mulAdd(u1, key.getPublic(), u2);
      if (p.isInfinity())
        return false;

      return p.getX().umod(this.n).cmp(r) === 0;
    }

    // NOTE: Greg Maxwell's trick, inspired by:
    // https://git.io/vad3K

    p = this.g.jmulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    // Compare `p.x` of Jacobian point with `r`,
    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
    // inverse of `p.z^2`
    return p.eqXToP(r);
  };

  EC$3.prototype.recoverPubKey = function(msg, signature, j, enc) {
    assert$4((3 & j) === j, 'The recovery param is more than two bits');
    signature = new Signature$2(signature, enc);

    var n = this.n;
    var e = new BN$7(msg);
    var r = signature.r;
    var s = signature.s;

    // A set LSB signifies that the y-coordinate is odd
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
      throw new Error('Unable to find sencond key candinate');

    // 1.1. Let x = r + jn.
    if (isSecondKey)
      r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
    else
      r = this.curve.pointFromX(r, isYOdd);

    var rInv = signature.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s2 = s.mul(rInv).umod(n);

    // 1.6.1 Compute Q = r^-1 (sR -  eG)
    //               Q = r^-1 (sR + -eG)
    return this.g.mulAdd(s1, r, s2);
  };

  EC$3.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
    signature = new Signature$2(signature, enc);
    if (signature.recoveryParam !== null)
      return signature.recoveryParam;

    for (var i = 0; i < 4; i++) {
      var Qprime;
      try {
        Qprime = this.recoverPubKey(e, signature, i);
      } catch (e) {
        continue;
      }

      if (Qprime.eq(Q))
        return i;
    }
    throw new Error('Unable to find valid recovery factor');
  };

  var utils$4 = utils$o;
  var assert$3 = utils$4.assert;
  var parseBytes$2 = utils$4.parseBytes;
  var cachedProperty$1 = utils$4.cachedProperty;

  /**
  * @param {EDDSA} eddsa - instance
  * @param {Object} params - public/private key parameters
  *
  * @param {Array<Byte>} [params.secret] - secret seed bytes
  * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
  * @param {Array<Byte>} [params.pub] - public key point encoded as bytes
  *
  */
  function KeyPair$1(eddsa, params) {
    this.eddsa = eddsa;
    this._secret = parseBytes$2(params.secret);
    if (eddsa.isPoint(params.pub))
      this._pub = params.pub;
    else
      this._pubBytes = parseBytes$2(params.pub);
  }

  KeyPair$1.fromPublic = function fromPublic(eddsa, pub) {
    if (pub instanceof KeyPair$1)
      return pub;
    return new KeyPair$1(eddsa, { pub: pub });
  };

  KeyPair$1.fromSecret = function fromSecret(eddsa, secret) {
    if (secret instanceof KeyPair$1)
      return secret;
    return new KeyPair$1(eddsa, { secret: secret });
  };

  KeyPair$1.prototype.secret = function secret() {
    return this._secret;
  };

  cachedProperty$1(KeyPair$1, 'pubBytes', function pubBytes() {
    return this.eddsa.encodePoint(this.pub());
  });

  cachedProperty$1(KeyPair$1, 'pub', function pub() {
    if (this._pubBytes)
      return this.eddsa.decodePoint(this._pubBytes);
    return this.eddsa.g.mul(this.priv());
  });

  cachedProperty$1(KeyPair$1, 'privBytes', function privBytes() {
    var eddsa = this.eddsa;
    var hash = this.hash();
    var lastIx = eddsa.encodingLength - 1;

    var a = hash.slice(0, eddsa.encodingLength);
    a[0] &= 248;
    a[lastIx] &= 127;
    a[lastIx] |= 64;

    return a;
  });

  cachedProperty$1(KeyPair$1, 'priv', function priv() {
    return this.eddsa.decodeInt(this.privBytes());
  });

  cachedProperty$1(KeyPair$1, 'hash', function hash() {
    return this.eddsa.hash().update(this.secret()).digest();
  });

  cachedProperty$1(KeyPair$1, 'messagePrefix', function messagePrefix() {
    return this.hash().slice(this.eddsa.encodingLength);
  });

  KeyPair$1.prototype.sign = function sign(message) {
    assert$3(this._secret, 'KeyPair can only verify');
    return this.eddsa.sign(message, this);
  };

  KeyPair$1.prototype.verify = function verify(message, sig) {
    return this.eddsa.verify(message, sig, this);
  };

  KeyPair$1.prototype.getSecret = function getSecret(enc) {
    assert$3(this._secret, 'KeyPair is public only');
    return utils$4.encode(this.secret(), enc);
  };

  KeyPair$1.prototype.getPublic = function getPublic(enc) {
    return utils$4.encode(this.pubBytes(), enc);
  };

  var key = KeyPair$1;

  var BN$6 = bn$1.exports;
  var utils$3 = utils$o;
  var assert$2 = utils$3.assert;
  var cachedProperty = utils$3.cachedProperty;
  var parseBytes$1 = utils$3.parseBytes;

  /**
  * @param {EDDSA} eddsa - eddsa instance
  * @param {Array<Bytes>|Object} sig -
  * @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
  * @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
  * @param {Array<Bytes>} [sig.Rencoded] - R point encoded
  * @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
  */
  function Signature$1(eddsa, sig) {
    this.eddsa = eddsa;

    if (typeof sig !== 'object')
      sig = parseBytes$1(sig);

    if (Array.isArray(sig)) {
      sig = {
        R: sig.slice(0, eddsa.encodingLength),
        S: sig.slice(eddsa.encodingLength),
      };
    }

    assert$2(sig.R && sig.S, 'Signature without R or S');

    if (eddsa.isPoint(sig.R))
      this._R = sig.R;
    if (sig.S instanceof BN$6)
      this._S = sig.S;

    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
  }

  cachedProperty(Signature$1, 'S', function S() {
    return this.eddsa.decodeInt(this.Sencoded());
  });

  cachedProperty(Signature$1, 'R', function R() {
    return this.eddsa.decodePoint(this.Rencoded());
  });

  cachedProperty(Signature$1, 'Rencoded', function Rencoded() {
    return this.eddsa.encodePoint(this.R());
  });

  cachedProperty(Signature$1, 'Sencoded', function Sencoded() {
    return this.eddsa.encodeInt(this.S());
  });

  Signature$1.prototype.toBytes = function toBytes() {
    return this.Rencoded().concat(this.Sencoded());
  };

  Signature$1.prototype.toHex = function toHex() {
    return utils$3.encode(this.toBytes(), 'hex').toUpperCase();
  };

  var signature$1 = Signature$1;

  var hash$1 = hash$3;
  var curves = curves$2;
  var utils$2 = utils$o;
  var assert$1 = utils$2.assert;
  var parseBytes = utils$2.parseBytes;
  var KeyPair = key;
  var Signature = signature$1;

  function EDDSA(curve) {
    assert$1(curve === 'ed25519', 'only tested with ed25519 so far');

    if (!(this instanceof EDDSA))
      return new EDDSA(curve);

    curve = curves[curve].curve;
    this.curve = curve;
    this.g = curve.g;
    this.g.precompute(curve.n.bitLength() + 1);

    this.pointClass = curve.point().constructor;
    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
    this.hash = hash$1.sha512;
  }

  var eddsa = EDDSA;

  /**
  * @param {Array|String} message - message bytes
  * @param {Array|String|KeyPair} secret - secret bytes or a keypair
  * @returns {Signature} - signature
  */
  EDDSA.prototype.sign = function sign(message, secret) {
    message = parseBytes(message);
    var key = this.keyFromSecret(secret);
    var r = this.hashInt(key.messagePrefix(), message);
    var R = this.g.mul(r);
    var Rencoded = this.encodePoint(R);
    var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
      .mul(key.priv());
    var S = r.add(s_).umod(this.curve.n);
    return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
  };

  /**
  * @param {Array} message - message bytes
  * @param {Array|String|Signature} sig - sig bytes
  * @param {Array|String|Point|KeyPair} pub - public key
  * @returns {Boolean} - true if public key matches sig of message
  */
  EDDSA.prototype.verify = function verify(message, sig, pub) {
    message = parseBytes(message);
    sig = this.makeSignature(sig);
    var key = this.keyFromPublic(pub);
    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
    var SG = this.g.mul(sig.S());
    var RplusAh = sig.R().add(key.pub().mul(h));
    return RplusAh.eq(SG);
  };

  EDDSA.prototype.hashInt = function hashInt() {
    var hash = this.hash();
    for (var i = 0; i < arguments.length; i++)
      hash.update(arguments[i]);
    return utils$2.intFromLE(hash.digest()).umod(this.curve.n);
  };

  EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
    return KeyPair.fromPublic(this, pub);
  };

  EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
    return KeyPair.fromSecret(this, secret);
  };

  EDDSA.prototype.makeSignature = function makeSignature(sig) {
    if (sig instanceof Signature)
      return sig;
    return new Signature(this, sig);
  };

  /**
  * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
  *
  * EDDSA defines methods for encoding and decoding points and integers. These are
  * helper convenience methods, that pass along to utility functions implied
  * parameters.
  *
  */
  EDDSA.prototype.encodePoint = function encodePoint(point) {
    var enc = point.getY().toArray('le', this.encodingLength);
    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
    return enc;
  };

  EDDSA.prototype.decodePoint = function decodePoint(bytes) {
    bytes = utils$2.parseBytes(bytes);

    var lastIx = bytes.length - 1;
    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
    var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

    var y = utils$2.intFromLE(normed);
    return this.curve.pointFromY(y, xIsOdd);
  };

  EDDSA.prototype.encodeInt = function encodeInt(num) {
    return num.toArray('le', this.encodingLength);
  };

  EDDSA.prototype.decodeInt = function decodeInt(bytes) {
    return utils$2.intFromLE(bytes);
  };

  EDDSA.prototype.isPoint = function isPoint(val) {
    return val instanceof this.pointClass;
  };

  (function (exports) {

  var elliptic = exports;

  elliptic.version = require$$0.version;
  elliptic.utils = utils$o;
  elliptic.rand = brorand.exports;
  elliptic.curve = curve;
  elliptic.curves = curves$2;

  // Protocols
  elliptic.ec = ec$3;
  elliptic.eddsa = eddsa;
  }(elliptic$2));

  const EC$2 = elliptic$2.ec;

  const ec$2 = new EC$2('secp256k1');
  const ecparams$2 = ec$2.curve;

  // Hack, we can not use bn.js@5, while elliptic uses bn.js@4
  // See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758
  const BN$5 = ecparams$2.n.constructor;

  function loadCompressedPublicKey (first, xbuf) {
    let x = new BN$5(xbuf);

    // overflow
    if (x.cmp(ecparams$2.p) >= 0) return null
    x = x.toRed(ecparams$2.red);

    // compute corresponding Y
    let y = x.redSqr().redIMul(x).redIAdd(ecparams$2.b).redSqrt();
    if ((first === 0x03) !== y.isOdd()) y = y.redNeg();

    return ec$2.keyPair({ pub: { x: x, y: y } })
  }

  function loadUncompressedPublicKey (first, xbuf, ybuf) {
    let x = new BN$5(xbuf);
    let y = new BN$5(ybuf);

    // overflow
    if (x.cmp(ecparams$2.p) >= 0 || y.cmp(ecparams$2.p) >= 0) return null

    x = x.toRed(ecparams$2.red);
    y = y.toRed(ecparams$2.red);

    // is odd flag
    if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null

    // x*x*x + b = y*y
    const x3 = x.redSqr().redIMul(x);
    if (!y.redSqr().redISub(x3.redIAdd(ecparams$2.b)).isZero()) return null

    return ec$2.keyPair({ pub: { x: x, y: y } })
  }

  function loadPublicKey (pubkey) {
    // length should be validated in interface
    const first = pubkey[0];
    switch (first) {
      case 0x02:
      case 0x03:
        if (pubkey.length !== 33) return null
        return loadCompressedPublicKey(first, pubkey.subarray(1, 33))
      case 0x04:
      case 0x06:
      case 0x07:
        if (pubkey.length !== 65) return null
        return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65))
      default:
        return null
    }
  }

  function savePublicKey (output, point) {
    const pubkey = point.encode(null, output.length === 33);
    // Loop should be faster because we do not need create extra Uint8Array
    // output.set(new Uint8Array(pubkey))
    for (let i = 0; i < output.length; ++i) output[i] = pubkey[i];
  }

  var elliptic$1 = {
    contextRandomize () {
      return 0
    },

    privateKeyVerify (seckey) {
      const bn = new BN$5(seckey);
      return bn.cmp(ecparams$2.n) < 0 && !bn.isZero() ? 0 : 1
    },

    privateKeyNegate (seckey) {
      const bn = new BN$5(seckey);
      const negate = ecparams$2.n.sub(bn).umod(ecparams$2.n).toArrayLike(Uint8Array, 'be', 32);
      seckey.set(negate);
      return 0
    },

    privateKeyTweakAdd (seckey, tweak) {
      const bn = new BN$5(tweak);
      if (bn.cmp(ecparams$2.n) >= 0) return 1

      bn.iadd(new BN$5(seckey));
      if (bn.cmp(ecparams$2.n) >= 0) bn.isub(ecparams$2.n);
      if (bn.isZero()) return 1

      const tweaked = bn.toArrayLike(Uint8Array, 'be', 32);
      seckey.set(tweaked);

      return 0
    },

    privateKeyTweakMul (seckey, tweak) {
      let bn = new BN$5(tweak);
      if (bn.cmp(ecparams$2.n) >= 0 || bn.isZero()) return 1

      bn.imul(new BN$5(seckey));
      if (bn.cmp(ecparams$2.n) >= 0) bn = bn.umod(ecparams$2.n);

      const tweaked = bn.toArrayLike(Uint8Array, 'be', 32);
      seckey.set(tweaked);

      return 0
    },

    publicKeyVerify (pubkey) {
      const pair = loadPublicKey(pubkey);
      return pair === null ? 1 : 0
    },

    publicKeyCreate (output, seckey) {
      const bn = new BN$5(seckey);
      if (bn.cmp(ecparams$2.n) >= 0 || bn.isZero()) return 1

      const point = ec$2.keyFromPrivate(seckey).getPublic();
      savePublicKey(output, point);

      return 0
    },

    publicKeyConvert (output, pubkey) {
      const pair = loadPublicKey(pubkey);
      if (pair === null) return 1

      const point = pair.getPublic();
      savePublicKey(output, point);

      return 0
    },

    publicKeyNegate (output, pubkey) {
      const pair = loadPublicKey(pubkey);
      if (pair === null) return 1

      const point = pair.getPublic();
      point.y = point.y.redNeg();
      savePublicKey(output, point);

      return 0
    },

    publicKeyCombine (output, pubkeys) {
      const pairs = new Array(pubkeys.length);
      for (let i = 0; i < pubkeys.length; ++i) {
        pairs[i] = loadPublicKey(pubkeys[i]);
        if (pairs[i] === null) return 1
      }

      let point = pairs[0].getPublic();
      for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub);
      if (point.isInfinity()) return 2

      savePublicKey(output, point);

      return 0
    },

    publicKeyTweakAdd (output, pubkey, tweak) {
      const pair = loadPublicKey(pubkey);
      if (pair === null) return 1

      tweak = new BN$5(tweak);
      if (tweak.cmp(ecparams$2.n) >= 0) return 2

      const point = pair.getPublic().add(ecparams$2.g.mul(tweak));
      if (point.isInfinity()) return 2

      savePublicKey(output, point);

      return 0
    },

    publicKeyTweakMul (output, pubkey, tweak) {
      const pair = loadPublicKey(pubkey);
      if (pair === null) return 1

      tweak = new BN$5(tweak);
      if (tweak.cmp(ecparams$2.n) >= 0 || tweak.isZero()) return 2

      const point = pair.getPublic().mul(tweak);
      savePublicKey(output, point);

      return 0
    },

    signatureNormalize (sig) {
      const r = new BN$5(sig.subarray(0, 32));
      const s = new BN$5(sig.subarray(32, 64));
      if (r.cmp(ecparams$2.n) >= 0 || s.cmp(ecparams$2.n) >= 0) return 1

      if (s.cmp(ec$2.nh) === 1) {
        sig.set(ecparams$2.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32);
      }

      return 0
    },

    // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
    // Adapted for Uint8Array instead Buffer
    signatureExport (obj, sig) {
      const sigR = sig.subarray(0, 32);
      const sigS = sig.subarray(32, 64);
      if (new BN$5(sigR).cmp(ecparams$2.n) >= 0) return 1
      if (new BN$5(sigS).cmp(ecparams$2.n) >= 0) return 1

      const { output } = obj;

      // Prepare R
      let r = output.subarray(4, 4 + 33);
      r[0] = 0x00;
      r.set(sigR, 1);

      let lenR = 33;
      let posR = 0;
      for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);

      r = r.subarray(posR);
      if (r[0] & 0x80) return 1
      if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) return 1

      // Prepare S
      let s = output.subarray(6 + 33, 6 + 33 + 33);
      s[0] = 0x00;
      s.set(sigS, 1);

      let lenS = 33;
      let posS = 0;
      for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);

      s = s.subarray(posS);
      if (s[0] & 0x80) return 1
      if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) return 1

      // Set output length for return
      obj.outputlen = 6 + lenR + lenS;

      // Output in specified format
      // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
      output[0] = 0x30;
      output[1] = obj.outputlen - 2;
      output[2] = 0x02;
      output[3] = r.length;
      output.set(r, 4);
      output[4 + lenR] = 0x02;
      output[5 + lenR] = s.length;
      output.set(s, 6 + lenR);

      return 0
    },

    // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
    // Adapted for Uint8Array instead Buffer
    signatureImport (output, sig) {
      if (sig.length < 8) return 1
      if (sig.length > 72) return 1
      if (sig[0] !== 0x30) return 1
      if (sig[1] !== sig.length - 2) return 1
      if (sig[2] !== 0x02) return 1

      const lenR = sig[3];
      if (lenR === 0) return 1
      if (5 + lenR >= sig.length) return 1
      if (sig[4 + lenR] !== 0x02) return 1

      const lenS = sig[5 + lenR];
      if (lenS === 0) return 1
      if ((6 + lenR + lenS) !== sig.length) return 1

      if (sig[4] & 0x80) return 1
      if (lenR > 1 && (sig[4] === 0x00) && !(sig[5] & 0x80)) return 1

      if (sig[lenR + 6] & 0x80) return 1
      if (lenS > 1 && (sig[lenR + 6] === 0x00) && !(sig[lenR + 7] & 0x80)) return 1

      let sigR = sig.subarray(4, 4 + lenR);
      if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1);
      if (sigR.length > 32) return 1

      let sigS = sig.subarray(6 + lenR);
      if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1);
      if (sigS.length > 32) throw new Error('S length is too long')

      let r = new BN$5(sigR);
      if (r.cmp(ecparams$2.n) >= 0) r = new BN$5(0);

      let s = new BN$5(sig.subarray(6 + lenR));
      if (s.cmp(ecparams$2.n) >= 0) s = new BN$5(0);

      output.set(r.toArrayLike(Uint8Array, 'be', 32), 0);
      output.set(s.toArrayLike(Uint8Array, 'be', 32), 32);

      return 0
    },

    ecdsaSign (obj, message, seckey, data, noncefn) {
      if (noncefn) {
        const _noncefn = noncefn;
        noncefn = (counter) => {
          const nonce = _noncefn(message, seckey, null, data, counter);

          const isValid = nonce instanceof Uint8Array && nonce.length === 32;
          if (!isValid) throw new Error('This is the way')

          return new BN$5(nonce)
        };
      }

      const d = new BN$5(seckey);
      if (d.cmp(ecparams$2.n) >= 0 || d.isZero()) return 1

      let sig;
      try {
        sig = ec$2.sign(message, seckey, { canonical: true, k: noncefn, pers: data });
      } catch (err) {
        return 1
      }

      obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0);
      obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32);
      obj.recid = sig.recoveryParam;

      return 0
    },

    ecdsaVerify (sig, msg32, pubkey) {
      const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) };

      const sigr = new BN$5(sigObj.r);
      const sigs = new BN$5(sigObj.s);
      if (sigr.cmp(ecparams$2.n) >= 0 || sigs.cmp(ecparams$2.n) >= 0) return 1
      if (sigs.cmp(ec$2.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3

      const pair = loadPublicKey(pubkey);
      if (pair === null) return 2

      const point = pair.getPublic();
      const isValid = ec$2.verify(msg32, sigObj, point);
      return isValid ? 0 : 3
    },

    ecdsaRecover (output, sig, recid, msg32) {
      const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) };

      const sigr = new BN$5(sigObj.r);
      const sigs = new BN$5(sigObj.s);
      if (sigr.cmp(ecparams$2.n) >= 0 || sigs.cmp(ecparams$2.n) >= 0) return 1

      if (sigr.isZero() || sigs.isZero()) return 2

      // Can throw `throw new Error('Unable to find sencond key candinate');`
      let point;
      try {
        point = ec$2.recoverPubKey(msg32, sigObj, recid);
      } catch (err) {
        return 2
      }

      savePublicKey(output, point);

      return 0
    },

    ecdh (output, pubkey, seckey, data, hashfn, xbuf, ybuf) {
      const pair = loadPublicKey(pubkey);
      if (pair === null) return 1

      const scalar = new BN$5(seckey);
      if (scalar.cmp(ecparams$2.n) >= 0 || scalar.isZero()) return 2

      const point = pair.getPublic().mul(scalar);

      if (hashfn === undefined) {
        const data = point.encode(null, true);
        const sha256 = ec$2.hash().update(data).digest();
        for (let i = 0; i < 32; ++i) output[i] = sha256[i];
      } else {
        if (!xbuf) xbuf = new Uint8Array(32);
        const x = point.getX().toArray('be', 32);
        for (let i = 0; i < 32; ++i) xbuf[i] = x[i];

        if (!ybuf) ybuf = new Uint8Array(32);
        const y = point.getY().toArray('be', 32);
        for (let i = 0; i < 32; ++i) ybuf[i] = y[i];

        const hash = hashfn(xbuf, ybuf, data);

        const isValid = hash instanceof Uint8Array && hash.length === output.length;
        if (!isValid) return 2

        output.set(hash);
      }

      return 0
    }
  };

  var elliptic = lib$3(elliptic$1);

  try {
    secp256k1$2.exports = require('./bindings');
  } catch (err) {
    secp256k1$2.exports = elliptic;
  }

  var random = {};

  var randombytes$1 = require$$0__default$2["default"].randomBytes;

  Object.defineProperty(random, "__esModule", { value: true });
  var randombytes = randombytes$1;
  function getRandomBytes(bytes) {
      return new Promise(function (resolve, reject) {
          randombytes(bytes, function (err, resp) {
              if (err) {
                  reject(err);
                  return;
              }
              resolve(resp);
          });
      });
  }
  random.getRandomBytes = getRandomBytes;
  function getRandomBytesSync(bytes) {
      return randombytes(bytes);
  }
  random.getRandomBytesSync = getRandomBytesSync;

  (function (exports) {
  var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
      var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
      function verb(n) { return function (v) { return step([n, v]); }; }
      function step(op) {
          if (f) throw new TypeError("Generator is already executing.");
          while (_) try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
              if (y = 0, t) op = [op[0] & 2, t.value];
              switch (op[0]) {
                  case 0: case 1: t = op; break;
                  case 4: _.label++; return { value: op[1], done: false };
                  case 5: _.label++; y = op[1]; op = [0]; continue;
                  case 7: op = _.ops.pop(); _.trys.pop(); continue;
                  default:
                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                      if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                      if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                      if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                      if (t[2]) _.ops.pop();
                      _.trys.pop(); continue;
              }
              op = body.call(thisArg, _);
          } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
          if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
      }
  };
  function __export(m) {
      for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
  }
  Object.defineProperty(exports, "__esModule", { value: true });
  var secp256k1_1 = secp256k1$2.exports;
  var random_1 = random;
  var SECP256K1_PRIVATE_KEY_SIZE = 32;
  function createPrivateKey() {
      return __awaiter(this, void 0, void 0, function () {
          var pk;
          return __generator(this, function (_a) {
              switch (_a.label) {
                  case 0:
                      return [4 /*yield*/, random_1.getRandomBytes(SECP256K1_PRIVATE_KEY_SIZE)];
                  case 1:
                      pk = _a.sent();
                      if (secp256k1_1.privateKeyVerify(pk)) {
                          return [2 /*return*/, pk];
                      }
                      return [3 /*break*/, 0];
                  case 2: return [2 /*return*/];
              }
          });
      });
  }
  exports.createPrivateKey = createPrivateKey;
  function createPrivateKeySync() {
      while (true) {
          var pk = random_1.getRandomBytesSync(SECP256K1_PRIVATE_KEY_SIZE);
          if (secp256k1_1.privateKeyVerify(pk)) {
              return pk;
          }
      }
  }
  exports.createPrivateKeySync = createPrivateKeySync;
  __export(secp256k1$2.exports);

  }(secp256k1$3));

  var secp256k1Lib = {};

  // This file is imported from secp256k1 v3
  // https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE

  var BN$4 = bn$2.exports;
  var EC$1 = elliptic$2.ec;

  var ec$1 = new EC$1('secp256k1');
  var ecparams$1 = ec$1.curve;

  secp256k1Lib.privateKeyExport = function (privateKey, compressed) {
    var d = new BN$4(privateKey);
    if (d.ucmp(ecparams$1.n) >= 0) {
      throw new Error('couldn\'t export to DER format');
    }

    var point = ec$1.g.mul(d);
    return toPublicKey$1(point.getX(), point.getY(), compressed);
  };

  secp256k1Lib.privateKeyModInverse = function (privateKey) {
    var bn = new BN$4(privateKey);
    if (bn.ucmp(ecparams$1.n) >= 0 || bn.isZero()) {
      throw new Error('private key range is invalid');
    }

    return bn.invm(ecparams$1.n).toArrayLike(Buffer, 'be', 32);
  };

  secp256k1Lib.signatureImport = function (sigObj) {
    var r = new BN$4(sigObj.r);
    if (r.ucmp(ecparams$1.n) >= 0) {
      r = new BN$4(0);
    }

    var s = new BN$4(sigObj.s);
    if (s.ucmp(ecparams$1.n) >= 0) {
      s = new BN$4(0);
    }

    return Buffer.concat([r.toArrayLike(Buffer, 'be', 32), s.toArrayLike(Buffer, 'be', 32)]);
  };

  secp256k1Lib.ecdhUnsafe = function (publicKey, privateKey, compressed) {
    var point = ec$1.keyFromPublic(publicKey);

    var scalar = new BN$4(privateKey);
    if (scalar.ucmp(ecparams$1.n) >= 0 || scalar.isZero()) {
      throw new Error('scalar was invalid (zero or overflow)');
    }

    var shared = point.pub.mul(scalar);
    return toPublicKey$1(shared.getX(), shared.getY(), compressed);
  };

  var toPublicKey$1 = function toPublicKey(x, y, compressed) {
    var publicKey = void 0;

    if (compressed) {
      publicKey = Buffer.alloc(33);
      publicKey[0] = y.isOdd() ? 0x03 : 0x02;
      x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
    } else {
      publicKey = Buffer.alloc(65);
      publicKey[0] = 0x04;
      x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
      y.toArrayLike(Buffer, 'be', 32).copy(publicKey, 33);
    }

    return publicKey;
  };

  var der$2 = {};

  // This file is imported from secp256k1 v3
  // https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE

  var EC_PRIVKEY_EXPORT_DER_COMPRESSED$1 = Buffer.from([
  // begin
  0x30, 0x81, 0xd3, 0x02, 0x01, 0x01, 0x04, 0x20,
  // private key
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  // middle
  0xa0, 0x81, 0x85, 0x30, 0x81, 0x82, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x21, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x24, 0x03, 0x22, 0x00,
  // public key
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);

  var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED$1 = Buffer.from([
  // begin
  0x30, 0x82, 0x01, 0x13, 0x02, 0x01, 0x01, 0x04, 0x20,
  // private key
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  // middle
  0xa0, 0x81, 0xa5, 0x30, 0x81, 0xa2, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x41, 0x04, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x48, 0x3a, 0xda, 0x77, 0x26, 0xa3, 0xc4, 0x65, 0x5d, 0xa4, 0xfb, 0xfc, 0x0e, 0x11, 0x08, 0xa8, 0xfd, 0x17, 0xb4, 0x48, 0xa6, 0x85, 0x54, 0x19, 0x9c, 0x47, 0xd0, 0x8f, 0xfb, 0x10, 0xd4, 0xb8, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x44, 0x03, 0x42, 0x00,
  // public key
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);

  der$2.privateKeyExport = function (privateKey, publicKey, compressed) {
    var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED$1 : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED$1);
    privateKey.copy(result, compressed ? 8 : 9);
    publicKey.copy(result, compressed ? 181 : 214);
    return result;
  };

  der$2.privateKeyImport = function (privateKey) {
    var length = privateKey.length;

    // sequence header
    var index = 0;
    if (length < index + 1 || privateKey[index] !== 0x30) return null;
    index += 1;

    // sequence length constructor
    if (length < index + 1 || !(privateKey[index] & 0x80)) return null;

    var lenb = privateKey[index] & 0x7f;
    index += 1;
    if (lenb < 1 || lenb > 2) return null;
    if (length < index + lenb) return null;

    // sequence length
    var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);
    index += lenb;
    if (length < index + len) return null;

    // sequence element 0: version number (=1)
    if (length < index + 3 || privateKey[index] !== 0x02 || privateKey[index + 1] !== 0x01 || privateKey[index + 2] !== 0x01) {
      return null;
    }
    index += 3;

    // sequence element 1: octet string, up to 32 bytes
    if (length < index + 2 || privateKey[index] !== 0x04 || privateKey[index + 1] > 0x20 || length < index + 2 + privateKey[index + 1]) {
      return null;
    }

    return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);
  };

  der$2.signatureImportLax = function (signature) {
    var r = Buffer.alloc(32, 0);
    var s = Buffer.alloc(32, 0);

    var length = signature.length;
    var index = 0;

    // sequence tag byte
    if (signature[index++] !== 0x30) {
      return null;
    }

    // sequence length byte
    var lenbyte = signature[index++];
    if (lenbyte & 0x80) {
      index += lenbyte - 0x80;
      if (index > length) {
        return null;
      }
    }

    // sequence tag byte for r
    if (signature[index++] !== 0x02) {
      return null;
    }

    // length for r
    var rlen = signature[index++];
    if (rlen & 0x80) {
      lenbyte = rlen - 0x80;
      if (index + lenbyte > length) {
        return null;
      }
      for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1) {}
      for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) {
        rlen = (rlen << 8) + signature[index];
      }
    }
    if (rlen > length - index) {
      return null;
    }
    var rindex = index;
    index += rlen;

    // sequence tag byte for s
    if (signature[index++] !== 0x02) {
      return null;
    }

    // length for s
    var slen = signature[index++];
    if (slen & 0x80) {
      lenbyte = slen - 0x80;
      if (index + lenbyte > length) {
        return null;
      }
      for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1) {}
      for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) {
        slen = (slen << 8) + signature[index];
      }
    }
    if (slen > length - index) {
      return null;
    }
    var sindex = index;
    index += slen;

    // ignore leading zeros in r
    for (; rlen > 0 && signature[rindex] === 0x00; rlen -= 1, rindex += 1) {}
    // copy r value
    if (rlen > 32) {
      return null;
    }
    var rvalue = signature.slice(rindex, rindex + rlen);
    rvalue.copy(r, 32 - rvalue.length);

    // ignore leading zeros in s
    for (; slen > 0 && signature[sindex] === 0x00; slen -= 1, sindex += 1) {}
    // copy s value
    if (slen > 32) {
      return null;
    }
    var svalue = signature.slice(sindex, sindex + slen);
    svalue.copy(s, 32 - svalue.length);

    return { r: r, s: s };
  };

  var secp256k1$1 = secp256k1$3;

  var secp256k1v3 = secp256k1Lib;
  var der$1 = der$2;

  /**
   * Verify an ECDSA privateKey
   * @method privateKeyVerify
   * @param {Buffer} privateKey
   * @return {boolean}
   */
  var privateKeyVerify = function privateKeyVerify(privateKey) {
    // secp256k1 v4 version throws when privateKey length is not 32
    if (privateKey.length !== 32) {
      return false;
    }

    return secp256k1$1.privateKeyVerify(Uint8Array.from(privateKey));
  };

  /**
   * Export a privateKey in DER format
   * @method privateKeyExport
   * @param {Buffer} privateKey
   * @param {boolean} compressed
   * @return {boolean}
   */
  var privateKeyExport = function privateKeyExport(privateKey, compressed) {
    // privateKeyExport method is not part of secp256k1 v4 package
    // this implementation is based on v3
    if (privateKey.length !== 32) {
      throw new RangeError('private key length is invalid');
    }

    var publicKey = secp256k1v3.privateKeyExport(privateKey, compressed);

    return der$1.privateKeyExport(privateKey, publicKey, compressed);
  };

  /**
   * Import a privateKey in DER format
   * @method privateKeyImport
   * @param {Buffer} privateKey
   * @return {Buffer}
   */

  var privateKeyImport = function privateKeyImport(privateKey) {
    // privateKeyImport method is not part of secp256k1 v4 package
    // this implementation is based on v3
    privateKey = der$1.privateKeyImport(privateKey);
    if (privateKey !== null && privateKey.length === 32 && privateKeyVerify(privateKey)) {
      return privateKey;
    }

    throw new Error("couldn't import from DER format");
  };

  /**
   * Negate a privateKey by subtracting it from the order of the curve's base point
   * @method privateKeyNegate
   * @param {Buffer} privateKey
   * @return {Buffer}
   */
  var privateKeyNegate = function privateKeyNegate(privateKey) {
    return Buffer.from(secp256k1$1.privateKeyNegate(Uint8Array.from(privateKey)));
  };

  /**
   * Compute the inverse of a privateKey (modulo the order of the curve's base point).
   * @method privateKeyModInverse
   * @param {Buffer} privateKey
   * @return {Buffer}
   */
  var privateKeyModInverse = function privateKeyModInverse(privateKey) {
    if (privateKey.length !== 32) {
      throw new Error('private key length is invalid');
    }

    return Buffer.from(secp256k1v3.privateKeyModInverse(Uint8Array.from(privateKey)));
  };

  /**
   * Tweak a privateKey by adding tweak to it.
   * @method privateKeyTweakAdd
   * @param {Buffer} privateKey
   * @param {Buffer} tweak
   * @return {Buffer}
   */
  var privateKeyTweakAdd = function privateKeyTweakAdd(privateKey, tweak) {
    return Buffer.from(secp256k1$1.privateKeyTweakAdd(Uint8Array.from(privateKey), tweak));
  };

  /**
   * Tweak a privateKey by multiplying it by a tweak.
   * @method privateKeyTweakMul
   * @param {Buffer} privateKey
   * @param {Buffer} tweak
   * @return {Buffer}
   */
  var privateKeyTweakMul = function privateKeyTweakMul(privateKey, tweak) {
    return Buffer.from(secp256k1$1.privateKeyTweakMul(Uint8Array.from(privateKey), Uint8Array.from(tweak)));
  };

  /**
   * Compute the public key for a privateKey.
   * @method publicKeyCreate
   * @param {Buffer} privateKey
   * @param {boolean} compressed
   * @return {Buffer}
   */
  var publicKeyCreate = function publicKeyCreate(privateKey, compressed) {
    return Buffer.from(secp256k1$1.publicKeyCreate(Uint8Array.from(privateKey), compressed));
  };

  /**
   * Convert a publicKey to compressed or uncompressed form.
   * @method publicKeyConvert
   * @param {Buffer} publicKey
   * @param {boolean} compressed
   * @return {Buffer}
   */
  var publicKeyConvert = function publicKeyConvert(publicKey, compressed) {
    return Buffer.from(secp256k1$1.publicKeyConvert(Uint8Array.from(publicKey), compressed));
  };

  /**
   * Verify an ECDSA publicKey.
   * @method publicKeyVerify
   * @param {Buffer} publicKey
   * @return {boolean}
   */
  var publicKeyVerify = function publicKeyVerify(publicKey) {
    // secp256k1 v4 version throws when publicKey length is not 33 or 65
    if (publicKey.length !== 33 && publicKey.length !== 65) {
      return false;
    }

    return secp256k1$1.publicKeyVerify(Uint8Array.from(publicKey));
  };

  /**
   * Tweak a publicKey by adding tweak times the generator to it.
   * @method publicKeyTweakAdd
   * @param {Buffer} publicKey
   * @param {Buffer} tweak
   * @param {boolean} compressed
   * @return {Buffer}
   */
  var publicKeyTweakAdd = function publicKeyTweakAdd(publicKey, tweak, compressed) {
    return Buffer.from(secp256k1$1.publicKeyTweakAdd(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
  };

  /**
   * Tweak a publicKey by multiplying it by a tweak value
   * @method publicKeyTweakMul
   * @param {Buffer} publicKey
   * @param {Buffer} tweak
   * @param {boolean} compressed
   * @return {Buffer}
   */
  var publicKeyTweakMul = function publicKeyTweakMul(publicKey, tweak, compressed) {
    return Buffer.from(secp256k1$1.publicKeyTweakMul(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
  };

  /**
   * Add a given publicKeys together.
   * @method publicKeyCombine
   * @param {Array<Buffer>} publicKeys
   * @param {boolean} compressed
   * @return {Buffer}
   */
  var publicKeyCombine = function publicKeyCombine(publicKeys, compressed) {
    var keys = [];
    publicKeys.forEach(function (publicKey) {
      keys.push(Uint8Array.from(publicKey));
    });

    return Buffer.from(secp256k1$1.publicKeyCombine(keys, compressed));
  };

  /**
   * Convert a signature to a normalized lower-S form.
   * @method signatureNormalize
   * @param {Buffer} signature
   * @return {Buffer}
   */
  var signatureNormalize = function signatureNormalize(signature) {
    return Buffer.from(secp256k1$1.signatureNormalize(Uint8Array.from(signature)));
  };

  /**
   * Serialize an ECDSA signature in DER format.
   * @method signatureExport
   * @param {Buffer} signature
   * @return {Buffer}
   */
  var signatureExport = function signatureExport(signature) {
    return Buffer.from(secp256k1$1.signatureExport(Uint8Array.from(signature)));
  };

  /**
   * Parse a DER ECDSA signature (follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
   * @method signatureImport
   * @param {Buffer} signature
   * @return {Buffer}
   */
  var signatureImport = function signatureImport(signature) {
    return Buffer.from(secp256k1$1.signatureImport(Uint8Array.from(signature)));
  };

  /**
   * Parse a DER ECDSA signature (not follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
   * @method signatureImportLax
   * @param {Buffer} signature
   * @return {Buffer}
   */
  var signatureImportLax = function signatureImportLax(signature) {
    // signatureImportLax method is not part of secp256k1 v4 package
    // this implementation is based on v3
    // ensure that signature is greater than 0
    if (signature.length === 0) {
      throw new RangeError('signature length is invalid');
    }

    var sigObj = der$1.signatureImportLax(signature);
    if (sigObj === null) {
      throw new Error("couldn't parse DER signature");
    }

    return secp256k1v3.signatureImport(sigObj);
  };

  /**
   * Create an ECDSA signature. Always return low-S signature.
   * @method sign
   * @param {Buffer} message
   * @param {Buffer} privateKey
   * @param {Object} options
   * @return {Buffer}
   */
  var sign = function sign(message, privateKey, options) {
    if (options === null) {
      throw new TypeError('options should be an Object');
    }

    var signOptions = void 0;

    if (options) {
      signOptions = {};

      if (options.data === null) {
        throw new TypeError('options.data should be a Buffer');
      }

      if (options.data) {
        // validate option.data length
        if (options.data.length !== 32) {
          throw new RangeError('options.data length is invalid');
        }

        signOptions.data = new Uint8Array(options.data);
      }

      if (options.noncefn === null) {
        throw new TypeError('options.noncefn should be a Function');
      }

      if (options.noncefn) {
        //  convert option.noncefn function signature
        signOptions.noncefn = function (message, privateKey, algo, data, attempt) {
          var bufferAlgo = algo != null ? Buffer.from(algo) : null;
          var bufferData = data != null ? Buffer.from(data) : null;

          var buffer = Buffer.from('');

          if (options.noncefn) {
            buffer = options.noncefn(Buffer.from(message), Buffer.from(privateKey), bufferAlgo, bufferData, attempt);
          }

          return Uint8Array.from(buffer);
        };
      }
    }

    var sig = secp256k1$1.ecdsaSign(Uint8Array.from(message), Uint8Array.from(privateKey), signOptions);

    return {
      signature: Buffer.from(sig.signature),
      recovery: sig.recid
    };
  };

  /**
   * Verify an ECDSA signature.
   * @method verify
   * @param {Buffer} message
   * @param {Buffer} signature
   * @param {Buffer} publicKey
   * @return {boolean}
   */
  var verify = function verify(message, signature, publicKey) {
    // note: secp256k1 v4 verify method has a different argument order
    return secp256k1$1.ecdsaVerify(Uint8Array.from(signature), Uint8Array.from(message), publicKey);
  };

  /**
   * Recover an ECDSA public key from a signature.
   * @method recover
   * @param {Buffer} message
   * @param {Buffer} signature
   * @param {Number} recid
   * @param {boolean} compressed
   * @return {Buffer}
   */
  var recover = function recover(message, signature, recid, compressed) {
    // note: secp256k1 v4 recover method has a different argument order
    return Buffer.from(secp256k1$1.ecdsaRecover(Uint8Array.from(signature), recid, Uint8Array.from(message), compressed));
  };

  /**
   * Compute an EC Diffie-Hellman secret and applied sha256 to compressed public key.
   * @method ecdh
   * @param {Buffer} publicKey
   * @param {Buffer} privateKey
   * @return {Buffer}
   */
  var ecdh = function ecdh(publicKey, privateKey) {
    // note: secp256k1 v3 doesn't allow optional parameter
    return Buffer.from(secp256k1$1.ecdh(Uint8Array.from(publicKey), Uint8Array.from(privateKey), {}));
  };

  /**
   * Compute an EC Diffie-Hellman secret and return public key as result
   * @method ecdhUnsafe
   * @param {Buffer} publicKey
   * @param {Buffer} privateKey
   * @param {boolean} compressed
   * @return {Buffer}
   */
  var ecdhUnsafe = function ecdhUnsafe(publicKey, privateKey, compressed) {
    // ecdhUnsafe method is not part of secp256k1 v4 package
    // this implementation is based on v3
    // ensure valid publicKey length
    if (publicKey.length !== 33 && publicKey.length !== 65) {
      throw new RangeError('public key length is invalid');
    }

    // ensure valid privateKey length
    if (privateKey.length !== 32) {
      throw new RangeError('private key length is invalid');
    }

    return Buffer.from(secp256k1v3.ecdhUnsafe(Uint8Array.from(publicKey), Uint8Array.from(privateKey), compressed));
  };

  var secp256k1Adapter = {
    privateKeyVerify: privateKeyVerify,
    privateKeyExport: privateKeyExport,
    privateKeyImport: privateKeyImport,
    privateKeyNegate: privateKeyNegate,
    privateKeyModInverse: privateKeyModInverse,
    privateKeyTweakAdd: privateKeyTweakAdd,
    privateKeyTweakMul: privateKeyTweakMul,

    publicKeyCreate: publicKeyCreate,
    publicKeyConvert: publicKeyConvert,
    publicKeyVerify: publicKeyVerify,
    publicKeyTweakAdd: publicKeyTweakAdd,
    publicKeyTweakMul: publicKeyTweakMul,
    publicKeyCombine: publicKeyCombine,

    signatureNormalize: signatureNormalize,
    signatureExport: signatureExport,
    signatureImport: signatureImport,
    signatureImportLax: signatureImportLax,

    sign: sign,
    verify: verify,
    recover: recover,

    ecdh: ecdh,
    ecdhUnsafe: ecdhUnsafe
  };

  var dist$3 = {};

  var bn = {exports: {}};

  (function (module) {
  (function (module, exports) {

    // Utils
    function assert (val, msg) {
      if (!val) throw new Error(msg || 'Assertion failed');
    }

    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits (ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }

    // BN

    function BN (number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }

      this.negative = 0;
      this.words = null;
      this.length = 0;

      // Reduction context
      this.red = null;

      if (number !== null) {
        if (base === 'le' || base === 'be') {
          endian = base;
          base = 10;
        }

        this._init(number || 0, base || 10, endian || 'be');
      }
    }
    if (typeof module === 'object') {
      module.exports = BN;
    } else {
      exports.BN = BN;
    }

    BN.BN = BN;
    BN.wordSize = 26;

    var Buffer;
    try {
      if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
        Buffer = window.Buffer;
      } else {
        Buffer = require('buffer').Buffer;
      }
    } catch (e) {
    }

    BN.isBN = function isBN (num) {
      if (num instanceof BN) {
        return true;
      }

      return num !== null && typeof num === 'object' &&
        num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };

    BN.max = function max (left, right) {
      if (left.cmp(right) > 0) return left;
      return right;
    };

    BN.min = function min (left, right) {
      if (left.cmp(right) < 0) return left;
      return right;
    };

    BN.prototype._init = function init (number, base, endian) {
      if (typeof number === 'number') {
        return this._initNumber(number, base, endian);
      }

      if (typeof number === 'object') {
        return this._initArray(number, base, endian);
      }

      if (base === 'hex') {
        base = 16;
      }
      assert(base === (base | 0) && base >= 2 && base <= 36);

      number = number.toString().replace(/\s+/g, '');
      var start = 0;
      if (number[0] === '-') {
        start++;
        this.negative = 1;
      }

      if (start < number.length) {
        if (base === 16) {
          this._parseHex(number, start, endian);
        } else {
          this._parseBase(number, base, start);
          if (endian === 'le') {
            this._initArray(this.toArray(), base, endian);
          }
        }
      }
    };

    BN.prototype._initNumber = function _initNumber (number, base, endian) {
      if (number < 0) {
        this.negative = 1;
        number = -number;
      }
      if (number < 0x4000000) {
        this.words = [number & 0x3ffffff];
        this.length = 1;
      } else if (number < 0x10000000000000) {
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff
        ];
        this.length = 2;
      } else {
        assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff,
          1
        ];
        this.length = 3;
      }

      if (endian !== 'le') return;

      // Reverse the bytes
      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initArray = function _initArray (number, base, endian) {
      // Perhaps a Uint8Array
      assert(typeof number.length === 'number');
      if (number.length <= 0) {
        this.words = [0];
        this.length = 1;
        return this;
      }

      this.length = Math.ceil(number.length / 3);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      var off = 0;
      if (endian === 'be') {
        for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
          w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      } else if (endian === 'le') {
        for (i = 0, j = 0; i < number.length; i += 3) {
          w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      }
      return this._strip();
    };

    function parseHex4Bits (string, index) {
      var c = string.charCodeAt(index);
      // '0' - '9'
      if (c >= 48 && c <= 57) {
        return c - 48;
      // 'A' - 'F'
      } else if (c >= 65 && c <= 70) {
        return c - 55;
      // 'a' - 'f'
      } else if (c >= 97 && c <= 102) {
        return c - 87;
      } else {
        assert(false, 'Invalid character in ' + string);
      }
    }

    function parseHexByte (string, lowerBound, index) {
      var r = parseHex4Bits(string, index);
      if (index - 1 >= lowerBound) {
        r |= parseHex4Bits(string, index - 1) << 4;
      }
      return r;
    }

    BN.prototype._parseHex = function _parseHex (number, start, endian) {
      // Create possibly bigger array to ensure that it fits the number
      this.length = Math.ceil((number.length - start) / 6);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      // 24-bits chunks
      var off = 0;
      var j = 0;

      var w;
      if (endian === 'be') {
        for (i = number.length - 1; i >= start; i -= 2) {
          w = parseHexByte(number, start, i) << off;
          this.words[j] |= w & 0x3ffffff;
          if (off >= 18) {
            off -= 18;
            j += 1;
            this.words[j] |= w >>> 26;
          } else {
            off += 8;
          }
        }
      } else {
        var parseLength = number.length - start;
        for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
          w = parseHexByte(number, start, i) << off;
          this.words[j] |= w & 0x3ffffff;
          if (off >= 18) {
            off -= 18;
            j += 1;
            this.words[j] |= w >>> 26;
          } else {
            off += 8;
          }
        }
      }

      this._strip();
    };

    function parseBase (str, start, end, mul) {
      var r = 0;
      var b = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;

        r *= mul;

        // 'a'
        if (c >= 49) {
          b = c - 49 + 0xa;

        // 'A'
        } else if (c >= 17) {
          b = c - 17 + 0xa;

        // '0' - '9'
        } else {
          b = c;
        }
        assert(c >= 0 && b < mul, 'Invalid character');
        r += b;
      }
      return r;
    }

    BN.prototype._parseBase = function _parseBase (number, base, start) {
      // Initialize as zero
      this.words = [0];
      this.length = 1;

      // Find length of limb in base
      for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = (limbPow / base) | 0;

      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;

      var word = 0;
      for (var i = start; i < end; i += limbLen) {
        word = parseBase(number, i, i + limbLen, base);

        this.imuln(limbPow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }

      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i, number.length, base);

        for (i = 0; i < mod; i++) {
          pow *= base;
        }

        this.imuln(pow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }

      this._strip();
    };

    BN.prototype.copy = function copy (dest) {
      dest.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        dest.words[i] = this.words[i];
      }
      dest.length = this.length;
      dest.negative = this.negative;
      dest.red = this.red;
    };

    function move (dest, src) {
      dest.words = src.words;
      dest.length = src.length;
      dest.negative = src.negative;
      dest.red = src.red;
    }

    BN.prototype._move = function _move (dest) {
      move(dest, this);
    };

    BN.prototype.clone = function clone () {
      var r = new BN(null);
      this.copy(r);
      return r;
    };

    BN.prototype._expand = function _expand (size) {
      while (this.length < size) {
        this.words[this.length++] = 0;
      }
      return this;
    };

    // Remove leading `0` from `this`
    BN.prototype._strip = function strip () {
      while (this.length > 1 && this.words[this.length - 1] === 0) {
        this.length--;
      }
      return this._normSign();
    };

    BN.prototype._normSign = function _normSign () {
      // -0 = 0
      if (this.length === 1 && this.words[0] === 0) {
        this.negative = 0;
      }
      return this;
    };

    // Check Symbol.for because not everywhere where Symbol defined
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
    if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
      try {
        BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
      } catch (e) {
        BN.prototype.inspect = inspect;
      }
    } else {
      BN.prototype.inspect = inspect;
    }

    function inspect () {
      return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    }

    /*

    var zeros = [];
    var groupSizes = [];
    var groupBases = [];

    var s = '';
    var i = -1;
    while (++i < BN.wordSize) {
      zeros[i] = s;
      s += '0';
    }
    groupSizes[0] = 0;
    groupSizes[1] = 0;
    groupBases[0] = 0;
    groupBases[1] = 0;
    var base = 2 - 1;
    while (++base < 36 + 1) {
      var groupSize = 0;
      var groupBase = 1;
      while (groupBase < (1 << BN.wordSize) / base) {
        groupBase *= base;
        groupSize += 1;
      }
      groupSizes[base] = groupSize;
      groupBases[base] = groupBase;
    }

    */

    var zeros = [
      '',
      '0',
      '00',
      '000',
      '0000',
      '00000',
      '000000',
      '0000000',
      '00000000',
      '000000000',
      '0000000000',
      '00000000000',
      '000000000000',
      '0000000000000',
      '00000000000000',
      '000000000000000',
      '0000000000000000',
      '00000000000000000',
      '000000000000000000',
      '0000000000000000000',
      '00000000000000000000',
      '000000000000000000000',
      '0000000000000000000000',
      '00000000000000000000000',
      '000000000000000000000000',
      '0000000000000000000000000'
    ];

    var groupSizes = [
      0, 0,
      25, 16, 12, 11, 10, 9, 8,
      8, 7, 7, 7, 7, 6, 6,
      6, 6, 6, 6, 6, 5, 5,
      5, 5, 5, 5, 5, 5, 5,
      5, 5, 5, 5, 5, 5, 5
    ];

    var groupBases = [
      0, 0,
      33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
      43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
      16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
      6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
      24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
    ];

    BN.prototype.toString = function toString (base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;

      var out;
      if (base === 16 || base === 'hex') {
        out = '';
        var off = 0;
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = this.words[i];
          var word = (((w << off) | carry) & 0xffffff).toString(16);
          carry = (w >>> (24 - off)) & 0xffffff;
          if (carry !== 0 || i !== this.length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off += 2;
          if (off >= 26) {
            off -= 26;
            i--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      if (base === (base | 0) && base >= 2 && base <= 36) {
        // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
        var groupSize = groupSizes[base];
        // var groupBase = Math.pow(base, groupSize);
        var groupBase = groupBases[base];
        out = '';
        var c = this.clone();
        c.negative = 0;
        while (!c.isZero()) {
          var r = c.modrn(groupBase).toString(base);
          c = c.idivn(groupBase);

          if (!c.isZero()) {
            out = zeros[groupSize - r.length] + r + out;
          } else {
            out = r + out;
          }
        }
        if (this.isZero()) {
          out = '0' + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      assert(false, 'Base should be between 2 and 36');
    };

    BN.prototype.toNumber = function toNumber () {
      var ret = this.words[0];
      if (this.length === 2) {
        ret += this.words[1] * 0x4000000;
      } else if (this.length === 3 && this.words[2] === 0x01) {
        // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + (this.words[1] * 0x4000000);
      } else if (this.length > 2) {
        assert(false, 'Number can only safely store up to 53 bits');
      }
      return (this.negative !== 0) ? -ret : ret;
    };

    BN.prototype.toJSON = function toJSON () {
      return this.toString(16, 2);
    };

    if (Buffer) {
      BN.prototype.toBuffer = function toBuffer (endian, length) {
        return this.toArrayLike(Buffer, endian, length);
      };
    }

    BN.prototype.toArray = function toArray (endian, length) {
      return this.toArrayLike(Array, endian, length);
    };

    var allocate = function allocate (ArrayType, size) {
      if (ArrayType.allocUnsafe) {
        return ArrayType.allocUnsafe(size);
      }
      return new ArrayType(size);
    };

    BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
      this._strip();

      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert(byteLength <= reqLength, 'byte array longer than desired length');
      assert(reqLength > 0, 'Requested array length <= 0');

      var res = allocate(ArrayType, reqLength);
      var postfix = endian === 'le' ? 'LE' : 'BE';
      this['_toArrayLike' + postfix](res, byteLength);
      return res;
    };

    BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
      var position = 0;
      var carry = 0;

      for (var i = 0, shift = 0; i < this.length; i++) {
        var word = (this.words[i] << shift) | carry;

        res[position++] = word & 0xff;
        if (position < res.length) {
          res[position++] = (word >> 8) & 0xff;
        }
        if (position < res.length) {
          res[position++] = (word >> 16) & 0xff;
        }

        if (shift === 6) {
          if (position < res.length) {
            res[position++] = (word >> 24) & 0xff;
          }
          carry = 0;
          shift = 0;
        } else {
          carry = word >>> 24;
          shift += 2;
        }
      }

      if (position < res.length) {
        res[position++] = carry;

        while (position < res.length) {
          res[position++] = 0;
        }
      }
    };

    BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
      var position = res.length - 1;
      var carry = 0;

      for (var i = 0, shift = 0; i < this.length; i++) {
        var word = (this.words[i] << shift) | carry;

        res[position--] = word & 0xff;
        if (position >= 0) {
          res[position--] = (word >> 8) & 0xff;
        }
        if (position >= 0) {
          res[position--] = (word >> 16) & 0xff;
        }

        if (shift === 6) {
          if (position >= 0) {
            res[position--] = (word >> 24) & 0xff;
          }
          carry = 0;
          shift = 0;
        } else {
          carry = word >>> 24;
          shift += 2;
        }
      }

      if (position >= 0) {
        res[position--] = carry;

        while (position >= 0) {
          res[position--] = 0;
        }
      }
    };

    if (Math.clz32) {
      BN.prototype._countBits = function _countBits (w) {
        return 32 - Math.clz32(w);
      };
    } else {
      BN.prototype._countBits = function _countBits (w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
          r += 13;
          t >>>= 13;
        }
        if (t >= 0x40) {
          r += 7;
          t >>>= 7;
        }
        if (t >= 0x8) {
          r += 4;
          t >>>= 4;
        }
        if (t >= 0x02) {
          r += 2;
          t >>>= 2;
        }
        return r + t;
      };
    }

    BN.prototype._zeroBits = function _zeroBits (w) {
      // Short-cut
      if (w === 0) return 26;

      var t = w;
      var r = 0;
      if ((t & 0x1fff) === 0) {
        r += 13;
        t >>>= 13;
      }
      if ((t & 0x7f) === 0) {
        r += 7;
        t >>>= 7;
      }
      if ((t & 0xf) === 0) {
        r += 4;
        t >>>= 4;
      }
      if ((t & 0x3) === 0) {
        r += 2;
        t >>>= 2;
      }
      if ((t & 0x1) === 0) {
        r++;
      }
      return r;
    };

    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength () {
      var w = this.words[this.length - 1];
      var hi = this._countBits(w);
      return (this.length - 1) * 26 + hi;
    };

    function toBitArray (num) {
      var w = new Array(num.bitLength());

      for (var bit = 0; bit < w.length; bit++) {
        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        w[bit] = (num.words[off] >>> wbit) & 0x01;
      }

      return w;
    }

    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits () {
      if (this.isZero()) return 0;

      var r = 0;
      for (var i = 0; i < this.length; i++) {
        var b = this._zeroBits(this.words[i]);
        r += b;
        if (b !== 26) break;
      }
      return r;
    };

    BN.prototype.byteLength = function byteLength () {
      return Math.ceil(this.bitLength() / 8);
    };

    BN.prototype.toTwos = function toTwos (width) {
      if (this.negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };

    BN.prototype.fromTwos = function fromTwos (width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };

    BN.prototype.isNeg = function isNeg () {
      return this.negative !== 0;
    };

    // Return negative clone of `this`
    BN.prototype.neg = function neg () {
      return this.clone().ineg();
    };

    BN.prototype.ineg = function ineg () {
      if (!this.isZero()) {
        this.negative ^= 1;
      }

      return this;
    };

    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor (num) {
      while (this.length < num.length) {
        this.words[this.length++] = 0;
      }

      for (var i = 0; i < num.length; i++) {
        this.words[i] = this.words[i] | num.words[i];
      }

      return this._strip();
    };

    BN.prototype.ior = function ior (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuor(num);
    };

    // Or `num` with `this`
    BN.prototype.or = function or (num) {
      if (this.length > num.length) return this.clone().ior(num);
      return num.clone().ior(this);
    };

    BN.prototype.uor = function uor (num) {
      if (this.length > num.length) return this.clone().iuor(num);
      return num.clone().iuor(this);
    };

    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand (num) {
      // b = min-length(num, this)
      var b;
      if (this.length > num.length) {
        b = num;
      } else {
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = this.words[i] & num.words[i];
      }

      this.length = b.length;

      return this._strip();
    };

    BN.prototype.iand = function iand (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuand(num);
    };

    // And `num` with `this`
    BN.prototype.and = function and (num) {
      if (this.length > num.length) return this.clone().iand(num);
      return num.clone().iand(this);
    };

    BN.prototype.uand = function uand (num) {
      if (this.length > num.length) return this.clone().iuand(num);
      return num.clone().iuand(this);
    };

    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor (num) {
      // a.length > b.length
      var a;
      var b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = a.words[i] ^ b.words[i];
      }

      if (this !== a) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = a.length;

      return this._strip();
    };

    BN.prototype.ixor = function ixor (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuxor(num);
    };

    // Xor `num` with `this`
    BN.prototype.xor = function xor (num) {
      if (this.length > num.length) return this.clone().ixor(num);
      return num.clone().ixor(this);
    };

    BN.prototype.uxor = function uxor (num) {
      if (this.length > num.length) return this.clone().iuxor(num);
      return num.clone().iuxor(this);
    };

    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn (width) {
      assert(typeof width === 'number' && width >= 0);

      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;

      // Extend the buffer with leading zeroes
      this._expand(bytesNeeded);

      if (bitsLeft > 0) {
        bytesNeeded--;
      }

      // Handle complete words
      for (var i = 0; i < bytesNeeded; i++) {
        this.words[i] = ~this.words[i] & 0x3ffffff;
      }

      // Handle the residue
      if (bitsLeft > 0) {
        this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
      }

      // And remove leading zeroes
      return this._strip();
    };

    BN.prototype.notn = function notn (width) {
      return this.clone().inotn(width);
    };

    // Set `bit` of `this`
    BN.prototype.setn = function setn (bit, val) {
      assert(typeof bit === 'number' && bit >= 0);

      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      this._expand(off + 1);

      if (val) {
        this.words[off] = this.words[off] | (1 << wbit);
      } else {
        this.words[off] = this.words[off] & ~(1 << wbit);
      }

      return this._strip();
    };

    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd (num) {
      var r;

      // negative + positive
      if (this.negative !== 0 && num.negative === 0) {
        this.negative = 0;
        r = this.isub(num);
        this.negative ^= 1;
        return this._normSign();

      // positive + negative
      } else if (this.negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r = this.isub(num);
        num.negative = 1;
        return r._normSign();
      }

      // a.length > b.length
      var a, b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }

      this.length = a.length;
      if (carry !== 0) {
        this.words[this.length] = carry;
        this.length++;
      // Copy the rest of the words
      } else if (a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      return this;
    };

    // Add `num` to `this`
    BN.prototype.add = function add (num) {
      var res;
      if (num.negative !== 0 && this.negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && this.negative !== 0) {
        this.negative = 0;
        res = num.sub(this);
        this.negative = 1;
        return res;
      }

      if (this.length > num.length) return this.clone().iadd(num);

      return num.clone().iadd(this);
    };

    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub (num) {
      // this - (-num) = this + num
      if (num.negative !== 0) {
        num.negative = 0;
        var r = this.iadd(num);
        num.negative = 1;
        return r._normSign();

      // -this - num = -(this + num)
      } else if (this.negative !== 0) {
        this.negative = 0;
        this.iadd(num);
        this.negative = 1;
        return this._normSign();
      }

      // At this point both numbers are positive
      var cmp = this.cmp(num);

      // Optimization - zeroify
      if (cmp === 0) {
        this.negative = 0;
        this.length = 1;
        this.words[0] = 0;
        return this;
      }

      // a > b
      var a, b;
      if (cmp > 0) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }

      // Copy rest of the words
      if (carry === 0 && i < a.length && a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = Math.max(this.length, i);

      if (a !== this) {
        this.negative = 1;
      }

      return this._strip();
    };

    // Subtract `num` from `this`
    BN.prototype.sub = function sub (num) {
      return this.clone().isub(num);
    };

    function smallMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      var len = (self.length + num.length) | 0;
      out.length = len;
      len = (len - 1) | 0;

      // Peel one iteration (compiler can't do it, because of code complexity)
      var a = self.words[0] | 0;
      var b = num.words[0] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      var carry = (r / 0x4000000) | 0;
      out.words[0] = lo;

      for (var k = 1; k < len; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = carry >>> 26;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = (k - j) | 0;
          a = self.words[i] | 0;
          b = num.words[j] | 0;
          r = a * b + rword;
          ncarry += (r / 0x4000000) | 0;
          rword = r & 0x3ffffff;
        }
        out.words[k] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k] = carry | 0;
      } else {
        out.length--;
      }

      return out._strip();
    }

    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo (self, num, out) {
      var a = self.words;
      var b = num.words;
      var o = out.words;
      var c = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a[0] | 0;
      var al0 = a0 & 0x1fff;
      var ah0 = a0 >>> 13;
      var a1 = a[1] | 0;
      var al1 = a1 & 0x1fff;
      var ah1 = a1 >>> 13;
      var a2 = a[2] | 0;
      var al2 = a2 & 0x1fff;
      var ah2 = a2 >>> 13;
      var a3 = a[3] | 0;
      var al3 = a3 & 0x1fff;
      var ah3 = a3 >>> 13;
      var a4 = a[4] | 0;
      var al4 = a4 & 0x1fff;
      var ah4 = a4 >>> 13;
      var a5 = a[5] | 0;
      var al5 = a5 & 0x1fff;
      var ah5 = a5 >>> 13;
      var a6 = a[6] | 0;
      var al6 = a6 & 0x1fff;
      var ah6 = a6 >>> 13;
      var a7 = a[7] | 0;
      var al7 = a7 & 0x1fff;
      var ah7 = a7 >>> 13;
      var a8 = a[8] | 0;
      var al8 = a8 & 0x1fff;
      var ah8 = a8 >>> 13;
      var a9 = a[9] | 0;
      var al9 = a9 & 0x1fff;
      var ah9 = a9 >>> 13;
      var b0 = b[0] | 0;
      var bl0 = b0 & 0x1fff;
      var bh0 = b0 >>> 13;
      var b1 = b[1] | 0;
      var bl1 = b1 & 0x1fff;
      var bh1 = b1 >>> 13;
      var b2 = b[2] | 0;
      var bl2 = b2 & 0x1fff;
      var bh2 = b2 >>> 13;
      var b3 = b[3] | 0;
      var bl3 = b3 & 0x1fff;
      var bh3 = b3 >>> 13;
      var b4 = b[4] | 0;
      var bl4 = b4 & 0x1fff;
      var bh4 = b4 >>> 13;
      var b5 = b[5] | 0;
      var bl5 = b5 & 0x1fff;
      var bh5 = b5 >>> 13;
      var b6 = b[6] | 0;
      var bl6 = b6 & 0x1fff;
      var bh6 = b6 >>> 13;
      var b7 = b[7] | 0;
      var bl7 = b7 & 0x1fff;
      var bh7 = b7 >>> 13;
      var b8 = b[8] | 0;
      var bl8 = b8 & 0x1fff;
      var bh8 = b8 >>> 13;
      var b9 = b[9] | 0;
      var bl9 = b9 & 0x1fff;
      var bh9 = b9 >>> 13;

      out.negative = self.negative ^ num.negative;
      out.length = 19;
      /* k = 0 */
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = (mid + Math.imul(ah0, bl0)) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
      w0 &= 0x3ffffff;
      /* k = 1 */
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = (mid + Math.imul(ah1, bl0)) | 0;
      hi = Math.imul(ah1, bh0);
      lo = (lo + Math.imul(al0, bl1)) | 0;
      mid = (mid + Math.imul(al0, bh1)) | 0;
      mid = (mid + Math.imul(ah0, bl1)) | 0;
      hi = (hi + Math.imul(ah0, bh1)) | 0;
      var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
      w1 &= 0x3ffffff;
      /* k = 2 */
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = (mid + Math.imul(ah2, bl0)) | 0;
      hi = Math.imul(ah2, bh0);
      lo = (lo + Math.imul(al1, bl1)) | 0;
      mid = (mid + Math.imul(al1, bh1)) | 0;
      mid = (mid + Math.imul(ah1, bl1)) | 0;
      hi = (hi + Math.imul(ah1, bh1)) | 0;
      lo = (lo + Math.imul(al0, bl2)) | 0;
      mid = (mid + Math.imul(al0, bh2)) | 0;
      mid = (mid + Math.imul(ah0, bl2)) | 0;
      hi = (hi + Math.imul(ah0, bh2)) | 0;
      var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
      w2 &= 0x3ffffff;
      /* k = 3 */
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = (mid + Math.imul(ah3, bl0)) | 0;
      hi = Math.imul(ah3, bh0);
      lo = (lo + Math.imul(al2, bl1)) | 0;
      mid = (mid + Math.imul(al2, bh1)) | 0;
      mid = (mid + Math.imul(ah2, bl1)) | 0;
      hi = (hi + Math.imul(ah2, bh1)) | 0;
      lo = (lo + Math.imul(al1, bl2)) | 0;
      mid = (mid + Math.imul(al1, bh2)) | 0;
      mid = (mid + Math.imul(ah1, bl2)) | 0;
      hi = (hi + Math.imul(ah1, bh2)) | 0;
      lo = (lo + Math.imul(al0, bl3)) | 0;
      mid = (mid + Math.imul(al0, bh3)) | 0;
      mid = (mid + Math.imul(ah0, bl3)) | 0;
      hi = (hi + Math.imul(ah0, bh3)) | 0;
      var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
      w3 &= 0x3ffffff;
      /* k = 4 */
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = (mid + Math.imul(ah4, bl0)) | 0;
      hi = Math.imul(ah4, bh0);
      lo = (lo + Math.imul(al3, bl1)) | 0;
      mid = (mid + Math.imul(al3, bh1)) | 0;
      mid = (mid + Math.imul(ah3, bl1)) | 0;
      hi = (hi + Math.imul(ah3, bh1)) | 0;
      lo = (lo + Math.imul(al2, bl2)) | 0;
      mid = (mid + Math.imul(al2, bh2)) | 0;
      mid = (mid + Math.imul(ah2, bl2)) | 0;
      hi = (hi + Math.imul(ah2, bh2)) | 0;
      lo = (lo + Math.imul(al1, bl3)) | 0;
      mid = (mid + Math.imul(al1, bh3)) | 0;
      mid = (mid + Math.imul(ah1, bl3)) | 0;
      hi = (hi + Math.imul(ah1, bh3)) | 0;
      lo = (lo + Math.imul(al0, bl4)) | 0;
      mid = (mid + Math.imul(al0, bh4)) | 0;
      mid = (mid + Math.imul(ah0, bl4)) | 0;
      hi = (hi + Math.imul(ah0, bh4)) | 0;
      var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
      w4 &= 0x3ffffff;
      /* k = 5 */
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = (mid + Math.imul(ah5, bl0)) | 0;
      hi = Math.imul(ah5, bh0);
      lo = (lo + Math.imul(al4, bl1)) | 0;
      mid = (mid + Math.imul(al4, bh1)) | 0;
      mid = (mid + Math.imul(ah4, bl1)) | 0;
      hi = (hi + Math.imul(ah4, bh1)) | 0;
      lo = (lo + Math.imul(al3, bl2)) | 0;
      mid = (mid + Math.imul(al3, bh2)) | 0;
      mid = (mid + Math.imul(ah3, bl2)) | 0;
      hi = (hi + Math.imul(ah3, bh2)) | 0;
      lo = (lo + Math.imul(al2, bl3)) | 0;
      mid = (mid + Math.imul(al2, bh3)) | 0;
      mid = (mid + Math.imul(ah2, bl3)) | 0;
      hi = (hi + Math.imul(ah2, bh3)) | 0;
      lo = (lo + Math.imul(al1, bl4)) | 0;
      mid = (mid + Math.imul(al1, bh4)) | 0;
      mid = (mid + Math.imul(ah1, bl4)) | 0;
      hi = (hi + Math.imul(ah1, bh4)) | 0;
      lo = (lo + Math.imul(al0, bl5)) | 0;
      mid = (mid + Math.imul(al0, bh5)) | 0;
      mid = (mid + Math.imul(ah0, bl5)) | 0;
      hi = (hi + Math.imul(ah0, bh5)) | 0;
      var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
      w5 &= 0x3ffffff;
      /* k = 6 */
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = (mid + Math.imul(ah6, bl0)) | 0;
      hi = Math.imul(ah6, bh0);
      lo = (lo + Math.imul(al5, bl1)) | 0;
      mid = (mid + Math.imul(al5, bh1)) | 0;
      mid = (mid + Math.imul(ah5, bl1)) | 0;
      hi = (hi + Math.imul(ah5, bh1)) | 0;
      lo = (lo + Math.imul(al4, bl2)) | 0;
      mid = (mid + Math.imul(al4, bh2)) | 0;
      mid = (mid + Math.imul(ah4, bl2)) | 0;
      hi = (hi + Math.imul(ah4, bh2)) | 0;
      lo = (lo + Math.imul(al3, bl3)) | 0;
      mid = (mid + Math.imul(al3, bh3)) | 0;
      mid = (mid + Math.imul(ah3, bl3)) | 0;
      hi = (hi + Math.imul(ah3, bh3)) | 0;
      lo = (lo + Math.imul(al2, bl4)) | 0;
      mid = (mid + Math.imul(al2, bh4)) | 0;
      mid = (mid + Math.imul(ah2, bl4)) | 0;
      hi = (hi + Math.imul(ah2, bh4)) | 0;
      lo = (lo + Math.imul(al1, bl5)) | 0;
      mid = (mid + Math.imul(al1, bh5)) | 0;
      mid = (mid + Math.imul(ah1, bl5)) | 0;
      hi = (hi + Math.imul(ah1, bh5)) | 0;
      lo = (lo + Math.imul(al0, bl6)) | 0;
      mid = (mid + Math.imul(al0, bh6)) | 0;
      mid = (mid + Math.imul(ah0, bl6)) | 0;
      hi = (hi + Math.imul(ah0, bh6)) | 0;
      var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
      w6 &= 0x3ffffff;
      /* k = 7 */
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = (mid + Math.imul(ah7, bl0)) | 0;
      hi = Math.imul(ah7, bh0);
      lo = (lo + Math.imul(al6, bl1)) | 0;
      mid = (mid + Math.imul(al6, bh1)) | 0;
      mid = (mid + Math.imul(ah6, bl1)) | 0;
      hi = (hi + Math.imul(ah6, bh1)) | 0;
      lo = (lo + Math.imul(al5, bl2)) | 0;
      mid = (mid + Math.imul(al5, bh2)) | 0;
      mid = (mid + Math.imul(ah5, bl2)) | 0;
      hi = (hi + Math.imul(ah5, bh2)) | 0;
      lo = (lo + Math.imul(al4, bl3)) | 0;
      mid = (mid + Math.imul(al4, bh3)) | 0;
      mid = (mid + Math.imul(ah4, bl3)) | 0;
      hi = (hi + Math.imul(ah4, bh3)) | 0;
      lo = (lo + Math.imul(al3, bl4)) | 0;
      mid = (mid + Math.imul(al3, bh4)) | 0;
      mid = (mid + Math.imul(ah3, bl4)) | 0;
      hi = (hi + Math.imul(ah3, bh4)) | 0;
      lo = (lo + Math.imul(al2, bl5)) | 0;
      mid = (mid + Math.imul(al2, bh5)) | 0;
      mid = (mid + Math.imul(ah2, bl5)) | 0;
      hi = (hi + Math.imul(ah2, bh5)) | 0;
      lo = (lo + Math.imul(al1, bl6)) | 0;
      mid = (mid + Math.imul(al1, bh6)) | 0;
      mid = (mid + Math.imul(ah1, bl6)) | 0;
      hi = (hi + Math.imul(ah1, bh6)) | 0;
      lo = (lo + Math.imul(al0, bl7)) | 0;
      mid = (mid + Math.imul(al0, bh7)) | 0;
      mid = (mid + Math.imul(ah0, bl7)) | 0;
      hi = (hi + Math.imul(ah0, bh7)) | 0;
      var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
      w7 &= 0x3ffffff;
      /* k = 8 */
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = (mid + Math.imul(ah8, bl0)) | 0;
      hi = Math.imul(ah8, bh0);
      lo = (lo + Math.imul(al7, bl1)) | 0;
      mid = (mid + Math.imul(al7, bh1)) | 0;
      mid = (mid + Math.imul(ah7, bl1)) | 0;
      hi = (hi + Math.imul(ah7, bh1)) | 0;
      lo = (lo + Math.imul(al6, bl2)) | 0;
      mid = (mid + Math.imul(al6, bh2)) | 0;
      mid = (mid + Math.imul(ah6, bl2)) | 0;
      hi = (hi + Math.imul(ah6, bh2)) | 0;
      lo = (lo + Math.imul(al5, bl3)) | 0;
      mid = (mid + Math.imul(al5, bh3)) | 0;
      mid = (mid + Math.imul(ah5, bl3)) | 0;
      hi = (hi + Math.imul(ah5, bh3)) | 0;
      lo = (lo + Math.imul(al4, bl4)) | 0;
      mid = (mid + Math.imul(al4, bh4)) | 0;
      mid = (mid + Math.imul(ah4, bl4)) | 0;
      hi = (hi + Math.imul(ah4, bh4)) | 0;
      lo = (lo + Math.imul(al3, bl5)) | 0;
      mid = (mid + Math.imul(al3, bh5)) | 0;
      mid = (mid + Math.imul(ah3, bl5)) | 0;
      hi = (hi + Math.imul(ah3, bh5)) | 0;
      lo = (lo + Math.imul(al2, bl6)) | 0;
      mid = (mid + Math.imul(al2, bh6)) | 0;
      mid = (mid + Math.imul(ah2, bl6)) | 0;
      hi = (hi + Math.imul(ah2, bh6)) | 0;
      lo = (lo + Math.imul(al1, bl7)) | 0;
      mid = (mid + Math.imul(al1, bh7)) | 0;
      mid = (mid + Math.imul(ah1, bl7)) | 0;
      hi = (hi + Math.imul(ah1, bh7)) | 0;
      lo = (lo + Math.imul(al0, bl8)) | 0;
      mid = (mid + Math.imul(al0, bh8)) | 0;
      mid = (mid + Math.imul(ah0, bl8)) | 0;
      hi = (hi + Math.imul(ah0, bh8)) | 0;
      var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
      w8 &= 0x3ffffff;
      /* k = 9 */
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = (mid + Math.imul(ah9, bl0)) | 0;
      hi = Math.imul(ah9, bh0);
      lo = (lo + Math.imul(al8, bl1)) | 0;
      mid = (mid + Math.imul(al8, bh1)) | 0;
      mid = (mid + Math.imul(ah8, bl1)) | 0;
      hi = (hi + Math.imul(ah8, bh1)) | 0;
      lo = (lo + Math.imul(al7, bl2)) | 0;
      mid = (mid + Math.imul(al7, bh2)) | 0;
      mid = (mid + Math.imul(ah7, bl2)) | 0;
      hi = (hi + Math.imul(ah7, bh2)) | 0;
      lo = (lo + Math.imul(al6, bl3)) | 0;
      mid = (mid + Math.imul(al6, bh3)) | 0;
      mid = (mid + Math.imul(ah6, bl3)) | 0;
      hi = (hi + Math.imul(ah6, bh3)) | 0;
      lo = (lo + Math.imul(al5, bl4)) | 0;
      mid = (mid + Math.imul(al5, bh4)) | 0;
      mid = (mid + Math.imul(ah5, bl4)) | 0;
      hi = (hi + Math.imul(ah5, bh4)) | 0;
      lo = (lo + Math.imul(al4, bl5)) | 0;
      mid = (mid + Math.imul(al4, bh5)) | 0;
      mid = (mid + Math.imul(ah4, bl5)) | 0;
      hi = (hi + Math.imul(ah4, bh5)) | 0;
      lo = (lo + Math.imul(al3, bl6)) | 0;
      mid = (mid + Math.imul(al3, bh6)) | 0;
      mid = (mid + Math.imul(ah3, bl6)) | 0;
      hi = (hi + Math.imul(ah3, bh6)) | 0;
      lo = (lo + Math.imul(al2, bl7)) | 0;
      mid = (mid + Math.imul(al2, bh7)) | 0;
      mid = (mid + Math.imul(ah2, bl7)) | 0;
      hi = (hi + Math.imul(ah2, bh7)) | 0;
      lo = (lo + Math.imul(al1, bl8)) | 0;
      mid = (mid + Math.imul(al1, bh8)) | 0;
      mid = (mid + Math.imul(ah1, bl8)) | 0;
      hi = (hi + Math.imul(ah1, bh8)) | 0;
      lo = (lo + Math.imul(al0, bl9)) | 0;
      mid = (mid + Math.imul(al0, bh9)) | 0;
      mid = (mid + Math.imul(ah0, bl9)) | 0;
      hi = (hi + Math.imul(ah0, bh9)) | 0;
      var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
      w9 &= 0x3ffffff;
      /* k = 10 */
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = (mid + Math.imul(ah9, bl1)) | 0;
      hi = Math.imul(ah9, bh1);
      lo = (lo + Math.imul(al8, bl2)) | 0;
      mid = (mid + Math.imul(al8, bh2)) | 0;
      mid = (mid + Math.imul(ah8, bl2)) | 0;
      hi = (hi + Math.imul(ah8, bh2)) | 0;
      lo = (lo + Math.imul(al7, bl3)) | 0;
      mid = (mid + Math.imul(al7, bh3)) | 0;
      mid = (mid + Math.imul(ah7, bl3)) | 0;
      hi = (hi + Math.imul(ah7, bh3)) | 0;
      lo = (lo + Math.imul(al6, bl4)) | 0;
      mid = (mid + Math.imul(al6, bh4)) | 0;
      mid = (mid + Math.imul(ah6, bl4)) | 0;
      hi = (hi + Math.imul(ah6, bh4)) | 0;
      lo = (lo + Math.imul(al5, bl5)) | 0;
      mid = (mid + Math.imul(al5, bh5)) | 0;
      mid = (mid + Math.imul(ah5, bl5)) | 0;
      hi = (hi + Math.imul(ah5, bh5)) | 0;
      lo = (lo + Math.imul(al4, bl6)) | 0;
      mid = (mid + Math.imul(al4, bh6)) | 0;
      mid = (mid + Math.imul(ah4, bl6)) | 0;
      hi = (hi + Math.imul(ah4, bh6)) | 0;
      lo = (lo + Math.imul(al3, bl7)) | 0;
      mid = (mid + Math.imul(al3, bh7)) | 0;
      mid = (mid + Math.imul(ah3, bl7)) | 0;
      hi = (hi + Math.imul(ah3, bh7)) | 0;
      lo = (lo + Math.imul(al2, bl8)) | 0;
      mid = (mid + Math.imul(al2, bh8)) | 0;
      mid = (mid + Math.imul(ah2, bl8)) | 0;
      hi = (hi + Math.imul(ah2, bh8)) | 0;
      lo = (lo + Math.imul(al1, bl9)) | 0;
      mid = (mid + Math.imul(al1, bh9)) | 0;
      mid = (mid + Math.imul(ah1, bl9)) | 0;
      hi = (hi + Math.imul(ah1, bh9)) | 0;
      var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
      w10 &= 0x3ffffff;
      /* k = 11 */
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = (mid + Math.imul(ah9, bl2)) | 0;
      hi = Math.imul(ah9, bh2);
      lo = (lo + Math.imul(al8, bl3)) | 0;
      mid = (mid + Math.imul(al8, bh3)) | 0;
      mid = (mid + Math.imul(ah8, bl3)) | 0;
      hi = (hi + Math.imul(ah8, bh3)) | 0;
      lo = (lo + Math.imul(al7, bl4)) | 0;
      mid = (mid + Math.imul(al7, bh4)) | 0;
      mid = (mid + Math.imul(ah7, bl4)) | 0;
      hi = (hi + Math.imul(ah7, bh4)) | 0;
      lo = (lo + Math.imul(al6, bl5)) | 0;
      mid = (mid + Math.imul(al6, bh5)) | 0;
      mid = (mid + Math.imul(ah6, bl5)) | 0;
      hi = (hi + Math.imul(ah6, bh5)) | 0;
      lo = (lo + Math.imul(al5, bl6)) | 0;
      mid = (mid + Math.imul(al5, bh6)) | 0;
      mid = (mid + Math.imul(ah5, bl6)) | 0;
      hi = (hi + Math.imul(ah5, bh6)) | 0;
      lo = (lo + Math.imul(al4, bl7)) | 0;
      mid = (mid + Math.imul(al4, bh7)) | 0;
      mid = (mid + Math.imul(ah4, bl7)) | 0;
      hi = (hi + Math.imul(ah4, bh7)) | 0;
      lo = (lo + Math.imul(al3, bl8)) | 0;
      mid = (mid + Math.imul(al3, bh8)) | 0;
      mid = (mid + Math.imul(ah3, bl8)) | 0;
      hi = (hi + Math.imul(ah3, bh8)) | 0;
      lo = (lo + Math.imul(al2, bl9)) | 0;
      mid = (mid + Math.imul(al2, bh9)) | 0;
      mid = (mid + Math.imul(ah2, bl9)) | 0;
      hi = (hi + Math.imul(ah2, bh9)) | 0;
      var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
      w11 &= 0x3ffffff;
      /* k = 12 */
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = (mid + Math.imul(ah9, bl3)) | 0;
      hi = Math.imul(ah9, bh3);
      lo = (lo + Math.imul(al8, bl4)) | 0;
      mid = (mid + Math.imul(al8, bh4)) | 0;
      mid = (mid + Math.imul(ah8, bl4)) | 0;
      hi = (hi + Math.imul(ah8, bh4)) | 0;
      lo = (lo + Math.imul(al7, bl5)) | 0;
      mid = (mid + Math.imul(al7, bh5)) | 0;
      mid = (mid + Math.imul(ah7, bl5)) | 0;
      hi = (hi + Math.imul(ah7, bh5)) | 0;
      lo = (lo + Math.imul(al6, bl6)) | 0;
      mid = (mid + Math.imul(al6, bh6)) | 0;
      mid = (mid + Math.imul(ah6, bl6)) | 0;
      hi = (hi + Math.imul(ah6, bh6)) | 0;
      lo = (lo + Math.imul(al5, bl7)) | 0;
      mid = (mid + Math.imul(al5, bh7)) | 0;
      mid = (mid + Math.imul(ah5, bl7)) | 0;
      hi = (hi + Math.imul(ah5, bh7)) | 0;
      lo = (lo + Math.imul(al4, bl8)) | 0;
      mid = (mid + Math.imul(al4, bh8)) | 0;
      mid = (mid + Math.imul(ah4, bl8)) | 0;
      hi = (hi + Math.imul(ah4, bh8)) | 0;
      lo = (lo + Math.imul(al3, bl9)) | 0;
      mid = (mid + Math.imul(al3, bh9)) | 0;
      mid = (mid + Math.imul(ah3, bl9)) | 0;
      hi = (hi + Math.imul(ah3, bh9)) | 0;
      var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
      w12 &= 0x3ffffff;
      /* k = 13 */
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = (mid + Math.imul(ah9, bl4)) | 0;
      hi = Math.imul(ah9, bh4);
      lo = (lo + Math.imul(al8, bl5)) | 0;
      mid = (mid + Math.imul(al8, bh5)) | 0;
      mid = (mid + Math.imul(ah8, bl5)) | 0;
      hi = (hi + Math.imul(ah8, bh5)) | 0;
      lo = (lo + Math.imul(al7, bl6)) | 0;
      mid = (mid + Math.imul(al7, bh6)) | 0;
      mid = (mid + Math.imul(ah7, bl6)) | 0;
      hi = (hi + Math.imul(ah7, bh6)) | 0;
      lo = (lo + Math.imul(al6, bl7)) | 0;
      mid = (mid + Math.imul(al6, bh7)) | 0;
      mid = (mid + Math.imul(ah6, bl7)) | 0;
      hi = (hi + Math.imul(ah6, bh7)) | 0;
      lo = (lo + Math.imul(al5, bl8)) | 0;
      mid = (mid + Math.imul(al5, bh8)) | 0;
      mid = (mid + Math.imul(ah5, bl8)) | 0;
      hi = (hi + Math.imul(ah5, bh8)) | 0;
      lo = (lo + Math.imul(al4, bl9)) | 0;
      mid = (mid + Math.imul(al4, bh9)) | 0;
      mid = (mid + Math.imul(ah4, bl9)) | 0;
      hi = (hi + Math.imul(ah4, bh9)) | 0;
      var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
      w13 &= 0x3ffffff;
      /* k = 14 */
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = (mid + Math.imul(ah9, bl5)) | 0;
      hi = Math.imul(ah9, bh5);
      lo = (lo + Math.imul(al8, bl6)) | 0;
      mid = (mid + Math.imul(al8, bh6)) | 0;
      mid = (mid + Math.imul(ah8, bl6)) | 0;
      hi = (hi + Math.imul(ah8, bh6)) | 0;
      lo = (lo + Math.imul(al7, bl7)) | 0;
      mid = (mid + Math.imul(al7, bh7)) | 0;
      mid = (mid + Math.imul(ah7, bl7)) | 0;
      hi = (hi + Math.imul(ah7, bh7)) | 0;
      lo = (lo + Math.imul(al6, bl8)) | 0;
      mid = (mid + Math.imul(al6, bh8)) | 0;
      mid = (mid + Math.imul(ah6, bl8)) | 0;
      hi = (hi + Math.imul(ah6, bh8)) | 0;
      lo = (lo + Math.imul(al5, bl9)) | 0;
      mid = (mid + Math.imul(al5, bh9)) | 0;
      mid = (mid + Math.imul(ah5, bl9)) | 0;
      hi = (hi + Math.imul(ah5, bh9)) | 0;
      var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
      w14 &= 0x3ffffff;
      /* k = 15 */
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = (mid + Math.imul(ah9, bl6)) | 0;
      hi = Math.imul(ah9, bh6);
      lo = (lo + Math.imul(al8, bl7)) | 0;
      mid = (mid + Math.imul(al8, bh7)) | 0;
      mid = (mid + Math.imul(ah8, bl7)) | 0;
      hi = (hi + Math.imul(ah8, bh7)) | 0;
      lo = (lo + Math.imul(al7, bl8)) | 0;
      mid = (mid + Math.imul(al7, bh8)) | 0;
      mid = (mid + Math.imul(ah7, bl8)) | 0;
      hi = (hi + Math.imul(ah7, bh8)) | 0;
      lo = (lo + Math.imul(al6, bl9)) | 0;
      mid = (mid + Math.imul(al6, bh9)) | 0;
      mid = (mid + Math.imul(ah6, bl9)) | 0;
      hi = (hi + Math.imul(ah6, bh9)) | 0;
      var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
      w15 &= 0x3ffffff;
      /* k = 16 */
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = (mid + Math.imul(ah9, bl7)) | 0;
      hi = Math.imul(ah9, bh7);
      lo = (lo + Math.imul(al8, bl8)) | 0;
      mid = (mid + Math.imul(al8, bh8)) | 0;
      mid = (mid + Math.imul(ah8, bl8)) | 0;
      hi = (hi + Math.imul(ah8, bh8)) | 0;
      lo = (lo + Math.imul(al7, bl9)) | 0;
      mid = (mid + Math.imul(al7, bh9)) | 0;
      mid = (mid + Math.imul(ah7, bl9)) | 0;
      hi = (hi + Math.imul(ah7, bh9)) | 0;
      var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
      w16 &= 0x3ffffff;
      /* k = 17 */
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = (mid + Math.imul(ah9, bl8)) | 0;
      hi = Math.imul(ah9, bh8);
      lo = (lo + Math.imul(al8, bl9)) | 0;
      mid = (mid + Math.imul(al8, bh9)) | 0;
      mid = (mid + Math.imul(ah8, bl9)) | 0;
      hi = (hi + Math.imul(ah8, bh9)) | 0;
      var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
      w17 &= 0x3ffffff;
      /* k = 18 */
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = (mid + Math.imul(ah9, bl9)) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
      w18 &= 0x3ffffff;
      o[0] = w0;
      o[1] = w1;
      o[2] = w2;
      o[3] = w3;
      o[4] = w4;
      o[5] = w5;
      o[6] = w6;
      o[7] = w7;
      o[8] = w8;
      o[9] = w9;
      o[10] = w10;
      o[11] = w11;
      o[12] = w12;
      o[13] = w13;
      o[14] = w14;
      o[15] = w15;
      o[16] = w16;
      o[17] = w17;
      o[18] = w18;
      if (c !== 0) {
        o[19] = c;
        out.length++;
      }
      return out;
    };

    // Polyfill comb
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }

    function bigMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      out.length = self.length + num.length;

      var carry = 0;
      var hncarry = 0;
      for (var k = 0; k < out.length - 1; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = k - j;
          var a = self.words[i] | 0;
          var b = num.words[j] | 0;
          var r = a * b;

          var lo = r & 0x3ffffff;
          ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
          lo = (lo + rword) | 0;
          rword = lo & 0x3ffffff;
          ncarry = (ncarry + (lo >>> 26)) | 0;

          hncarry += ncarry >>> 26;
          ncarry &= 0x3ffffff;
        }
        out.words[k] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k] = carry;
      } else {
        out.length--;
      }

      return out._strip();
    }

    function jumboMulTo (self, num, out) {
      // Temporary disable, see https://github.com/indutny/bn.js/issues/211
      // var fftm = new FFTM();
      // return fftm.mulp(self, num, out);
      return bigMulTo(self, num, out);
    }

    BN.prototype.mulTo = function mulTo (num, out) {
      var res;
      var len = this.length + num.length;
      if (this.length === 10 && num.length === 10) {
        res = comb10MulTo(this, num, out);
      } else if (len < 63) {
        res = smallMulTo(this, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this, num, out);
      } else {
        res = jumboMulTo(this, num, out);
      }

      return res;
    };

    // Multiply `this` by `num`
    BN.prototype.mul = function mul (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return this.mulTo(num, out);
    };

    // Multiply employing FFT
    BN.prototype.mulf = function mulf (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return jumboMulTo(this, num, out);
    };

    // In-place Multiplication
    BN.prototype.imul = function imul (num) {
      return this.clone().mulTo(num, this);
    };

    BN.prototype.imuln = function imuln (num) {
      var isNegNum = num < 0;
      if (isNegNum) num = -num;

      assert(typeof num === 'number');
      assert(num < 0x4000000);

      // Carry
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = (this.words[i] | 0) * num;
        var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
        carry >>= 26;
        carry += (w / 0x4000000) | 0;
        // NOTE: lo is 27bit maximum
        carry += lo >>> 26;
        this.words[i] = lo & 0x3ffffff;
      }

      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }

      return isNegNum ? this.ineg() : this;
    };

    BN.prototype.muln = function muln (num) {
      return this.clone().imuln(num);
    };

    // `this` * `this`
    BN.prototype.sqr = function sqr () {
      return this.mul(this);
    };

    // `this` * `this` in-place
    BN.prototype.isqr = function isqr () {
      return this.imul(this.clone());
    };

    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow (num) {
      var w = toBitArray(num);
      if (w.length === 0) return new BN(1);

      // Skip leading zeroes
      var res = this;
      for (var i = 0; i < w.length; i++, res = res.sqr()) {
        if (w[i] !== 0) break;
      }

      if (++i < w.length) {
        for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
          if (w[i] === 0) continue;

          res = res.mul(q);
        }
      }

      return res;
    };

    // Shift-left in-place
    BN.prototype.iushln = function iushln (bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
      var i;

      if (r !== 0) {
        var carry = 0;

        for (i = 0; i < this.length; i++) {
          var newCarry = this.words[i] & carryMask;
          var c = ((this.words[i] | 0) - newCarry) << r;
          this.words[i] = c | carry;
          carry = newCarry >>> (26 - r);
        }

        if (carry) {
          this.words[i] = carry;
          this.length++;
        }
      }

      if (s !== 0) {
        for (i = this.length - 1; i >= 0; i--) {
          this.words[i + s] = this.words[i];
        }

        for (i = 0; i < s; i++) {
          this.words[i] = 0;
        }

        this.length += s;
      }

      return this._strip();
    };

    BN.prototype.ishln = function ishln (bits) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushln(bits);
    };

    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn (bits, hint, extended) {
      assert(typeof bits === 'number' && bits >= 0);
      var h;
      if (hint) {
        h = (hint - (hint % 26)) / 26;
      } else {
        h = 0;
      }

      var r = bits % 26;
      var s = Math.min((bits - r) / 26, this.length);
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      var maskedWords = extended;

      h -= s;
      h = Math.max(0, h);

      // Extended mode, copy masked part
      if (maskedWords) {
        for (var i = 0; i < s; i++) {
          maskedWords.words[i] = this.words[i];
        }
        maskedWords.length = s;
      }

      if (s === 0) ; else if (this.length > s) {
        this.length -= s;
        for (i = 0; i < this.length; i++) {
          this.words[i] = this.words[i + s];
        }
      } else {
        this.words[0] = 0;
        this.length = 1;
      }

      var carry = 0;
      for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
        var word = this.words[i] | 0;
        this.words[i] = (carry << (26 - r)) | (word >>> r);
        carry = word & mask;
      }

      // Push carried bits as a mask
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }

      if (this.length === 0) {
        this.words[0] = 0;
        this.length = 1;
      }

      return this._strip();
    };

    BN.prototype.ishrn = function ishrn (bits, hint, extended) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushrn(bits, hint, extended);
    };

    // Shift-left
    BN.prototype.shln = function shln (bits) {
      return this.clone().ishln(bits);
    };

    BN.prototype.ushln = function ushln (bits) {
      return this.clone().iushln(bits);
    };

    // Shift-right
    BN.prototype.shrn = function shrn (bits) {
      return this.clone().ishrn(bits);
    };

    BN.prototype.ushrn = function ushrn (bits) {
      return this.clone().iushrn(bits);
    };

    // Test if n bit is set
    BN.prototype.testn = function testn (bit) {
      assert(typeof bit === 'number' && bit >= 0);
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) return false;

      // Check bit and return
      var w = this.words[s];

      return !!(w & q);
    };

    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn (bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;

      assert(this.negative === 0, 'imaskn works only with positive numbers');

      if (this.length <= s) {
        return this;
      }

      if (r !== 0) {
        s++;
      }
      this.length = Math.min(s, this.length);

      if (r !== 0) {
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        this.words[this.length - 1] &= mask;
      }

      return this._strip();
    };

    // Return only lowers bits of number
    BN.prototype.maskn = function maskn (bits) {
      return this.clone().imaskn(bits);
    };

    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.isubn(-num);

      // Possible sign change
      if (this.negative !== 0) {
        if (this.length === 1 && (this.words[0] | 0) <= num) {
          this.words[0] = num - (this.words[0] | 0);
          this.negative = 0;
          return this;
        }

        this.negative = 0;
        this.isubn(num);
        this.negative = 1;
        return this;
      }

      // Add without checks
      return this._iaddn(num);
    };

    BN.prototype._iaddn = function _iaddn (num) {
      this.words[0] += num;

      // Carry
      for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
        this.words[i] -= 0x4000000;
        if (i === this.length - 1) {
          this.words[i + 1] = 1;
        } else {
          this.words[i + 1]++;
        }
      }
      this.length = Math.max(this.length, i + 1);

      return this;
    };

    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.iaddn(-num);

      if (this.negative !== 0) {
        this.negative = 0;
        this.iaddn(num);
        this.negative = 1;
        return this;
      }

      this.words[0] -= num;

      if (this.length === 1 && this.words[0] < 0) {
        this.words[0] = -this.words[0];
        this.negative = 1;
      } else {
        // Carry
        for (var i = 0; i < this.length && this.words[i] < 0; i++) {
          this.words[i] += 0x4000000;
          this.words[i + 1] -= 1;
        }
      }

      return this._strip();
    };

    BN.prototype.addn = function addn (num) {
      return this.clone().iaddn(num);
    };

    BN.prototype.subn = function subn (num) {
      return this.clone().isubn(num);
    };

    BN.prototype.iabs = function iabs () {
      this.negative = 0;

      return this;
    };

    BN.prototype.abs = function abs () {
      return this.clone().iabs();
    };

    BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
      var len = num.length + shift;
      var i;

      this._expand(len);

      var w;
      var carry = 0;
      for (i = 0; i < num.length; i++) {
        w = (this.words[i + shift] | 0) + carry;
        var right = (num.words[i] | 0) * mul;
        w -= right & 0x3ffffff;
        carry = (w >> 26) - ((right / 0x4000000) | 0);
        this.words[i + shift] = w & 0x3ffffff;
      }
      for (; i < this.length - shift; i++) {
        w = (this.words[i + shift] | 0) + carry;
        carry = w >> 26;
        this.words[i + shift] = w & 0x3ffffff;
      }

      if (carry === 0) return this._strip();

      // Subtraction overflow
      assert(carry === -1);
      carry = 0;
      for (i = 0; i < this.length; i++) {
        w = -(this.words[i] | 0) + carry;
        carry = w >> 26;
        this.words[i] = w & 0x3ffffff;
      }
      this.negative = 1;

      return this._strip();
    };

    BN.prototype._wordDiv = function _wordDiv (num, mode) {
      var shift = this.length - num.length;

      var a = this.clone();
      var b = num;

      // Normalize
      var bhi = b.words[b.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b = b.ushln(shift);
        a.iushln(shift);
        bhi = b.words[b.length - 1] | 0;
      }

      // Initialize quotient
      var m = a.length - b.length;
      var q;

      if (mode !== 'mod') {
        q = new BN(null);
        q.length = m + 1;
        q.words = new Array(q.length);
        for (var i = 0; i < q.length; i++) {
          q.words[i] = 0;
        }
      }

      var diff = a.clone()._ishlnsubmul(b, 1, m);
      if (diff.negative === 0) {
        a = diff;
        if (q) {
          q.words[m] = 1;
        }
      }

      for (var j = m - 1; j >= 0; j--) {
        var qj = (a.words[b.length + j] | 0) * 0x4000000 +
          (a.words[b.length + j - 1] | 0);

        // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
        // (0x7ffffff)
        qj = Math.min((qj / bhi) | 0, 0x3ffffff);

        a._ishlnsubmul(b, qj, j);
        while (a.negative !== 0) {
          qj--;
          a.negative = 0;
          a._ishlnsubmul(b, 1, j);
          if (!a.isZero()) {
            a.negative ^= 1;
          }
        }
        if (q) {
          q.words[j] = qj;
        }
      }
      if (q) {
        q._strip();
      }
      a._strip();

      // Denormalize
      if (mode !== 'div' && shift !== 0) {
        a.iushrn(shift);
      }

      return {
        div: q || null,
        mod: a
      };
    };

    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod (num, mode, positive) {
      assert(!num.isZero());

      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }

      var div, mod, res;
      if (this.negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }

        return {
          div: div,
          mod: mod
        };
      }

      if (this.negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        return {
          div: div,
          mod: res.mod
        };
      }

      if ((this.negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }

        return {
          div: res.div,
          mod: mod
        };
      }

      // Both numbers are positive at this point

      // Strip both numbers to approximate shift value
      if (num.length > this.length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this
        };
      }

      // Very short reduction
      if (num.length === 1) {
        if (mode === 'div') {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }

        if (mode === 'mod') {
          return {
            div: null,
            mod: new BN(this.modrn(num.words[0]))
          };
        }

        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modrn(num.words[0]))
        };
      }

      return this._wordDiv(num, mode);
    };

    // Find `this` / `num`
    BN.prototype.div = function div (num) {
      return this.divmod(num, 'div', false).div;
    };

    // Find `this` % `num`
    BN.prototype.mod = function mod (num) {
      return this.divmod(num, 'mod', false).mod;
    };

    BN.prototype.umod = function umod (num) {
      return this.divmod(num, 'mod', true).mod;
    };

    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound (num) {
      var dm = this.divmod(num);

      // Fast case - exact division
      if (dm.mod.isZero()) return dm.div;

      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

      var half = num.ushrn(1);
      var r2 = num.andln(1);
      var cmp = mod.cmp(half);

      // Round down
      if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

      // Round up
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };

    BN.prototype.modrn = function modrn (num) {
      var isNegNum = num < 0;
      if (isNegNum) num = -num;

      assert(num <= 0x3ffffff);
      var p = (1 << 26) % num;

      var acc = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        acc = (p * acc + (this.words[i] | 0)) % num;
      }

      return isNegNum ? -acc : acc;
    };

    // WARNING: DEPRECATED
    BN.prototype.modn = function modn (num) {
      return this.modrn(num);
    };

    // In-place division by number
    BN.prototype.idivn = function idivn (num) {
      var isNegNum = num < 0;
      if (isNegNum) num = -num;

      assert(num <= 0x3ffffff);

      var carry = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var w = (this.words[i] | 0) + carry * 0x4000000;
        this.words[i] = (w / num) | 0;
        carry = w % num;
      }

      this._strip();
      return isNegNum ? this.ineg() : this;
    };

    BN.prototype.divn = function divn (num) {
      return this.clone().idivn(num);
    };

    BN.prototype.egcd = function egcd (p) {
      assert(p.negative === 0);
      assert(!p.isZero());

      var x = this;
      var y = p.clone();

      if (x.negative !== 0) {
        x = x.umod(p);
      } else {
        x = x.clone();
      }

      // A * x + B * y = x
      var A = new BN(1);
      var B = new BN(0);

      // C * x + D * y = y
      var C = new BN(0);
      var D = new BN(1);

      var g = 0;

      while (x.isEven() && y.isEven()) {
        x.iushrn(1);
        y.iushrn(1);
        ++g;
      }

      var yp = y.clone();
      var xp = x.clone();

      while (!x.isZero()) {
        for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          x.iushrn(i);
          while (i-- > 0) {
            if (A.isOdd() || B.isOdd()) {
              A.iadd(yp);
              B.isub(xp);
            }

            A.iushrn(1);
            B.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          y.iushrn(j);
          while (j-- > 0) {
            if (C.isOdd() || D.isOdd()) {
              C.iadd(yp);
              D.isub(xp);
            }

            C.iushrn(1);
            D.iushrn(1);
          }
        }

        if (x.cmp(y) >= 0) {
          x.isub(y);
          A.isub(C);
          B.isub(D);
        } else {
          y.isub(x);
          C.isub(A);
          D.isub(B);
        }
      }

      return {
        a: C,
        b: D,
        gcd: y.iushln(g)
      };
    };

    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp (p) {
      assert(p.negative === 0);
      assert(!p.isZero());

      var a = this;
      var b = p.clone();

      if (a.negative !== 0) {
        a = a.umod(p);
      } else {
        a = a.clone();
      }

      var x1 = new BN(1);
      var x2 = new BN(0);

      var delta = b.clone();

      while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
        for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          a.iushrn(i);
          while (i-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }

            x1.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          b.iushrn(j);
          while (j-- > 0) {
            if (x2.isOdd()) {
              x2.iadd(delta);
            }

            x2.iushrn(1);
          }
        }

        if (a.cmp(b) >= 0) {
          a.isub(b);
          x1.isub(x2);
        } else {
          b.isub(a);
          x2.isub(x1);
        }
      }

      var res;
      if (a.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x2;
      }

      if (res.cmpn(0) < 0) {
        res.iadd(p);
      }

      return res;
    };

    BN.prototype.gcd = function gcd (num) {
      if (this.isZero()) return num.abs();
      if (num.isZero()) return this.abs();

      var a = this.clone();
      var b = num.clone();
      a.negative = 0;
      b.negative = 0;

      // Remove common factor of two
      for (var shift = 0; a.isEven() && b.isEven(); shift++) {
        a.iushrn(1);
        b.iushrn(1);
      }

      do {
        while (a.isEven()) {
          a.iushrn(1);
        }
        while (b.isEven()) {
          b.iushrn(1);
        }

        var r = a.cmp(b);
        if (r < 0) {
          // Swap `a` and `b` to make `a` always bigger than `b`
          var t = a;
          a = b;
          b = t;
        } else if (r === 0 || b.cmpn(1) === 0) {
          break;
        }

        a.isub(b);
      } while (true);

      return b.iushln(shift);
    };

    // Invert number in the field F(num)
    BN.prototype.invm = function invm (num) {
      return this.egcd(num).a.umod(num);
    };

    BN.prototype.isEven = function isEven () {
      return (this.words[0] & 1) === 0;
    };

    BN.prototype.isOdd = function isOdd () {
      return (this.words[0] & 1) === 1;
    };

    // And first word and num
    BN.prototype.andln = function andln (num) {
      return this.words[0] & num;
    };

    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn (bit) {
      assert(typeof bit === 'number');
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) {
        this._expand(s + 1);
        this.words[s] |= q;
        return this;
      }

      // Add bit and propagate, if needed
      var carry = q;
      for (var i = s; carry !== 0 && i < this.length; i++) {
        var w = this.words[i] | 0;
        w += carry;
        carry = w >>> 26;
        w &= 0x3ffffff;
        this.words[i] = w;
      }
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
      return this;
    };

    BN.prototype.isZero = function isZero () {
      return this.length === 1 && this.words[0] === 0;
    };

    BN.prototype.cmpn = function cmpn (num) {
      var negative = num < 0;

      if (this.negative !== 0 && !negative) return -1;
      if (this.negative === 0 && negative) return 1;

      this._strip();

      var res;
      if (this.length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }

        assert(num <= 0x3ffffff, 'Number is too big');

        var w = this.words[0] | 0;
        res = w === num ? 0 : w < num ? -1 : 1;
      }
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp (num) {
      if (this.negative !== 0 && num.negative === 0) return -1;
      if (this.negative === 0 && num.negative !== 0) return 1;

      var res = this.ucmp(num);
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Unsigned comparison
    BN.prototype.ucmp = function ucmp (num) {
      // At this point both numbers have the same sign
      if (this.length > num.length) return 1;
      if (this.length < num.length) return -1;

      var res = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var a = this.words[i] | 0;
        var b = num.words[i] | 0;

        if (a === b) continue;
        if (a < b) {
          res = -1;
        } else if (a > b) {
          res = 1;
        }
        break;
      }
      return res;
    };

    BN.prototype.gtn = function gtn (num) {
      return this.cmpn(num) === 1;
    };

    BN.prototype.gt = function gt (num) {
      return this.cmp(num) === 1;
    };

    BN.prototype.gten = function gten (num) {
      return this.cmpn(num) >= 0;
    };

    BN.prototype.gte = function gte (num) {
      return this.cmp(num) >= 0;
    };

    BN.prototype.ltn = function ltn (num) {
      return this.cmpn(num) === -1;
    };

    BN.prototype.lt = function lt (num) {
      return this.cmp(num) === -1;
    };

    BN.prototype.lten = function lten (num) {
      return this.cmpn(num) <= 0;
    };

    BN.prototype.lte = function lte (num) {
      return this.cmp(num) <= 0;
    };

    BN.prototype.eqn = function eqn (num) {
      return this.cmpn(num) === 0;
    };

    BN.prototype.eq = function eq (num) {
      return this.cmp(num) === 0;
    };

    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red (num) {
      return new Red(num);
    };

    BN.prototype.toRed = function toRed (ctx) {
      assert(!this.red, 'Already a number in reduction context');
      assert(this.negative === 0, 'red works only with positives');
      return ctx.convertTo(this)._forceRed(ctx);
    };

    BN.prototype.fromRed = function fromRed () {
      assert(this.red, 'fromRed works only with numbers in reduction context');
      return this.red.convertFrom(this);
    };

    BN.prototype._forceRed = function _forceRed (ctx) {
      this.red = ctx;
      return this;
    };

    BN.prototype.forceRed = function forceRed (ctx) {
      assert(!this.red, 'Already a number in reduction context');
      return this._forceRed(ctx);
    };

    BN.prototype.redAdd = function redAdd (num) {
      assert(this.red, 'redAdd works only with red numbers');
      return this.red.add(this, num);
    };

    BN.prototype.redIAdd = function redIAdd (num) {
      assert(this.red, 'redIAdd works only with red numbers');
      return this.red.iadd(this, num);
    };

    BN.prototype.redSub = function redSub (num) {
      assert(this.red, 'redSub works only with red numbers');
      return this.red.sub(this, num);
    };

    BN.prototype.redISub = function redISub (num) {
      assert(this.red, 'redISub works only with red numbers');
      return this.red.isub(this, num);
    };

    BN.prototype.redShl = function redShl (num) {
      assert(this.red, 'redShl works only with red numbers');
      return this.red.shl(this, num);
    };

    BN.prototype.redMul = function redMul (num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.mul(this, num);
    };

    BN.prototype.redIMul = function redIMul (num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.imul(this, num);
    };

    BN.prototype.redSqr = function redSqr () {
      assert(this.red, 'redSqr works only with red numbers');
      this.red._verify1(this);
      return this.red.sqr(this);
    };

    BN.prototype.redISqr = function redISqr () {
      assert(this.red, 'redISqr works only with red numbers');
      this.red._verify1(this);
      return this.red.isqr(this);
    };

    // Square root over p
    BN.prototype.redSqrt = function redSqrt () {
      assert(this.red, 'redSqrt works only with red numbers');
      this.red._verify1(this);
      return this.red.sqrt(this);
    };

    BN.prototype.redInvm = function redInvm () {
      assert(this.red, 'redInvm works only with red numbers');
      this.red._verify1(this);
      return this.red.invm(this);
    };

    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg () {
      assert(this.red, 'redNeg works only with red numbers');
      this.red._verify1(this);
      return this.red.neg(this);
    };

    BN.prototype.redPow = function redPow (num) {
      assert(this.red && !num.red, 'redPow(normalNum)');
      this.red._verify1(this);
      return this.red.pow(this, num);
    };

    // Prime numbers with efficient reduction
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };

    // Pseudo-Mersenne prime
    function MPrime (name, p) {
      // P = 2 ^ N - K
      this.name = name;
      this.p = new BN(p, 16);
      this.n = this.p.bitLength();
      this.k = new BN(1).iushln(this.n).isub(this.p);

      this.tmp = this._tmp();
    }

    MPrime.prototype._tmp = function _tmp () {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil(this.n / 13));
      return tmp;
    };

    MPrime.prototype.ireduce = function ireduce (num) {
      // Assumes that `num` is less than `P^2`
      // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
      var r = num;
      var rlen;

      do {
        this.split(r, this.tmp);
        r = this.imulK(r);
        r = r.iadd(this.tmp);
        rlen = r.bitLength();
      } while (rlen > this.n);

      var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
      if (cmp === 0) {
        r.words[0] = 0;
        r.length = 1;
      } else if (cmp > 0) {
        r.isub(this.p);
      } else {
        if (r.strip !== undefined) {
          // r is a BN v4 instance
          r.strip();
        } else {
          // r is a BN v5 instance
          r._strip();
        }
      }

      return r;
    };

    MPrime.prototype.split = function split (input, out) {
      input.iushrn(this.n, 0, out);
    };

    MPrime.prototype.imulK = function imulK (num) {
      return num.imul(this.k);
    };

    function K256 () {
      MPrime.call(
        this,
        'k256',
        'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);

    K256.prototype.split = function split (input, output) {
      // 256 = 9 * 26 + 22
      var mask = 0x3fffff;

      var outLen = Math.min(input.length, 9);
      for (var i = 0; i < outLen; i++) {
        output.words[i] = input.words[i];
      }
      output.length = outLen;

      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }

      // Shift by 9 limbs
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;

      for (i = 10; i < input.length; i++) {
        var next = input.words[i] | 0;
        input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
        prev = next;
      }
      prev >>>= 22;
      input.words[i - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };

    K256.prototype.imulK = function imulK (num) {
      // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;

      // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
      var lo = 0;
      for (var i = 0; i < num.length; i++) {
        var w = num.words[i] | 0;
        lo += w * 0x3d1;
        num.words[i] = lo & 0x3ffffff;
        lo = w * 0x40 + ((lo / 0x4000000) | 0);
      }

      // Fast length reduction
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };

    function P224 () {
      MPrime.call(
        this,
        'p224',
        'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);

    function P192 () {
      MPrime.call(
        this,
        'p192',
        'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);

    function P25519 () {
      // 2 ^ 255 - 19
      MPrime.call(
        this,
        '25519',
        '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);

    P25519.prototype.imulK = function imulK (num) {
      // K = 0x13
      var carry = 0;
      for (var i = 0; i < num.length; i++) {
        var hi = (num.words[i] | 0) * 0x13 + carry;
        var lo = hi & 0x3ffffff;
        hi >>>= 26;

        num.words[i] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };

    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime (name) {
      // Cached version of prime
      if (primes[name]) return primes[name];

      var prime;
      if (name === 'k256') {
        prime = new K256();
      } else if (name === 'p224') {
        prime = new P224();
      } else if (name === 'p192') {
        prime = new P192();
      } else if (name === 'p25519') {
        prime = new P25519();
      } else {
        throw new Error('Unknown prime ' + name);
      }
      primes[name] = prime;

      return prime;
    };

    //
    // Base reduction engine
    //
    function Red (m) {
      if (typeof m === 'string') {
        var prime = BN._prime(m);
        this.m = prime.p;
        this.prime = prime;
      } else {
        assert(m.gtn(1), 'modulus must be greater than 1');
        this.m = m;
        this.prime = null;
      }
    }

    Red.prototype._verify1 = function _verify1 (a) {
      assert(a.negative === 0, 'red works only with positives');
      assert(a.red, 'red works only with red numbers');
    };

    Red.prototype._verify2 = function _verify2 (a, b) {
      assert((a.negative | b.negative) === 0, 'red works only with positives');
      assert(a.red && a.red === b.red,
        'red works only with red numbers');
    };

    Red.prototype.imod = function imod (a) {
      if (this.prime) return this.prime.ireduce(a)._forceRed(this);

      move(a, a.umod(this.m)._forceRed(this));
      return a;
    };

    Red.prototype.neg = function neg (a) {
      if (a.isZero()) {
        return a.clone();
      }

      return this.m.sub(a)._forceRed(this);
    };

    Red.prototype.add = function add (a, b) {
      this._verify2(a, b);

      var res = a.add(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.iadd = function iadd (a, b) {
      this._verify2(a, b);

      var res = a.iadd(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res;
    };

    Red.prototype.sub = function sub (a, b) {
      this._verify2(a, b);

      var res = a.sub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.isub = function isub (a, b) {
      this._verify2(a, b);

      var res = a.isub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res;
    };

    Red.prototype.shl = function shl (a, num) {
      this._verify1(a);
      return this.imod(a.ushln(num));
    };

    Red.prototype.imul = function imul (a, b) {
      this._verify2(a, b);
      return this.imod(a.imul(b));
    };

    Red.prototype.mul = function mul (a, b) {
      this._verify2(a, b);
      return this.imod(a.mul(b));
    };

    Red.prototype.isqr = function isqr (a) {
      return this.imul(a, a.clone());
    };

    Red.prototype.sqr = function sqr (a) {
      return this.mul(a, a);
    };

    Red.prototype.sqrt = function sqrt (a) {
      if (a.isZero()) return a.clone();

      var mod3 = this.m.andln(3);
      assert(mod3 % 2 === 1);

      // Fast case
      if (mod3 === 3) {
        var pow = this.m.add(new BN(1)).iushrn(2);
        return this.pow(a, pow);
      }

      // Tonelli-Shanks algorithm (Totally unoptimized and slow)
      //
      // Find Q and S, that Q * 2 ^ S = (P - 1)
      var q = this.m.subn(1);
      var s = 0;
      while (!q.isZero() && q.andln(1) === 0) {
        s++;
        q.iushrn(1);
      }
      assert(!q.isZero());

      var one = new BN(1).toRed(this);
      var nOne = one.redNeg();

      // Find quadratic non-residue
      // NOTE: Max is such because of generalized Riemann hypothesis.
      var lpow = this.m.subn(1).iushrn(1);
      var z = this.m.bitLength();
      z = new BN(2 * z * z).toRed(this);

      while (this.pow(z, lpow).cmp(nOne) !== 0) {
        z.redIAdd(nOne);
      }

      var c = this.pow(z, q);
      var r = this.pow(a, q.addn(1).iushrn(1));
      var t = this.pow(a, q);
      var m = s;
      while (t.cmp(one) !== 0) {
        var tmp = t;
        for (var i = 0; tmp.cmp(one) !== 0; i++) {
          tmp = tmp.redSqr();
        }
        assert(i < m);
        var b = this.pow(c, new BN(1).iushln(m - i - 1));

        r = r.redMul(b);
        c = b.redSqr();
        t = t.redMul(c);
        m = i;
      }

      return r;
    };

    Red.prototype.invm = function invm (a) {
      var inv = a._invmp(this.m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };

    Red.prototype.pow = function pow (a, num) {
      if (num.isZero()) return new BN(1).toRed(this);
      if (num.cmpn(1) === 0) return a.clone();

      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this);
      wnd[1] = a;
      for (var i = 2; i < wnd.length; i++) {
        wnd[i] = this.mul(wnd[i - 1], a);
      }

      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }

      for (i = num.length - 1; i >= 0; i--) {
        var word = num.words[i];
        for (var j = start - 1; j >= 0; j--) {
          var bit = (word >> j) & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }

          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }

          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }

      return res;
    };

    Red.prototype.convertTo = function convertTo (num) {
      var r = num.umod(this.m);

      return r === num ? r.clone() : r;
    };

    Red.prototype.convertFrom = function convertFrom (num) {
      var res = num.clone();
      res.red = null;
      return res;
    };

    //
    // Montgomery method engine
    //

    BN.mont = function mont (num) {
      return new Mont(num);
    };

    function Mont (m) {
      Red.call(this, m);

      this.shift = this.m.bitLength();
      if (this.shift % 26 !== 0) {
        this.shift += 26 - (this.shift % 26);
      }

      this.r = new BN(1).iushln(this.shift);
      this.r2 = this.imod(this.r.sqr());
      this.rinv = this.r._invmp(this.m);

      this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
      this.minv = this.minv.umod(this.r);
      this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);

    Mont.prototype.convertTo = function convertTo (num) {
      return this.imod(num.ushln(this.shift));
    };

    Mont.prototype.convertFrom = function convertFrom (num) {
      var r = this.imod(num.mul(this.rinv));
      r.red = null;
      return r;
    };

    Mont.prototype.imul = function imul (a, b) {
      if (a.isZero() || b.isZero()) {
        a.words[0] = 0;
        a.length = 1;
        return a;
      }

      var t = a.imul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;

      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.mul = function mul (a, b) {
      if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

      var t = a.mul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;
      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.invm = function invm (a) {
      // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
      var res = this.imod(a._invmp(this.m).mul(this.r2));
      return res._forceRed(this);
    };
  })(module, commonjsGlobal);
  }(bn));

  var __importDefault$1 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
      return (mod && mod.__esModule) ? mod : { "default": mod };
  };
  Object.defineProperty(dist$3, "__esModule", { value: true });
  dist$3.getLength = dist$3.decode = dist$3.encode = void 0;
  const bn_js_1 = __importDefault$1(bn.exports);
  /**
   * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP
   * This function takes in a data, convert it to buffer if not, and a length for recursion
   * @param input - will be converted to buffer
   * @returns returns buffer of encoded data
   **/
  function encode(input) {
      if (Array.isArray(input)) {
          const output = [];
          for (let i = 0; i < input.length; i++) {
              output.push(encode(input[i]));
          }
          const buf = Buffer.concat(output);
          return Buffer.concat([encodeLength(buf.length, 192), buf]);
      }
      else {
          const inputBuf = toBuffer(input);
          return inputBuf.length === 1 && inputBuf[0] < 128
              ? inputBuf
              : Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);
      }
  }
  dist$3.encode = encode;
  /**
   * Parse integers. Check if there is no leading zeros
   * @param v The value to parse
   * @param base The base to parse the integer into
   */
  function safeParseInt(v, base) {
      if (v[0] === '0' && v[1] === '0') {
          throw new Error('invalid RLP: extra zeros');
      }
      return parseInt(v, base);
  }
  function encodeLength(len, offset) {
      if (len < 56) {
          return Buffer.from([len + offset]);
      }
      else {
          const hexLength = intToHex$4(len);
          const lLength = hexLength.length / 2;
          const firstByte = intToHex$4(offset + 55 + lLength);
          return Buffer.from(firstByte + hexLength, 'hex');
      }
  }
  function decode(input, stream = false) {
      if (!input || input.length === 0) {
          return Buffer.from([]);
      }
      const inputBuffer = toBuffer(input);
      const decoded = _decode(inputBuffer);
      if (stream) {
          return decoded;
      }
      if (decoded.remainder.length !== 0) {
          throw new Error('invalid remainder');
      }
      return decoded.data;
  }
  dist$3.decode = decode;
  /**
   * Get the length of the RLP input
   * @param input
   * @returns The length of the input or an empty Buffer if no input
   */
  function getLength(input) {
      if (!input || input.length === 0) {
          return Buffer.from([]);
      }
      const inputBuffer = toBuffer(input);
      const firstByte = inputBuffer[0];
      if (firstByte <= 0x7f) {
          return inputBuffer.length;
      }
      else if (firstByte <= 0xb7) {
          return firstByte - 0x7f;
      }
      else if (firstByte <= 0xbf) {
          return firstByte - 0xb6;
      }
      else if (firstByte <= 0xf7) {
          // a list between  0-55 bytes long
          return firstByte - 0xbf;
      }
      else {
          // a list  over 55 bytes long
          const llength = firstByte - 0xf6;
          const length = safeParseInt(inputBuffer.slice(1, llength).toString('hex'), 16);
          return llength + length;
      }
  }
  dist$3.getLength = getLength;
  /** Decode an input with RLP */
  function _decode(input) {
      let length, llength, data, innerRemainder, d;
      const decoded = [];
      const firstByte = input[0];
      if (firstByte <= 0x7f) {
          // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.
          return {
              data: input.slice(0, 1),
              remainder: input.slice(1),
          };
      }
      else if (firstByte <= 0xb7) {
          // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string
          // The range of the first byte is [0x80, 0xb7]
          length = firstByte - 0x7f;
          // set 0x80 null to 0
          if (firstByte === 0x80) {
              data = Buffer.from([]);
          }
          else {
              data = input.slice(1, length);
          }
          if (length === 2 && data[0] < 0x80) {
              throw new Error('invalid rlp encoding: byte must be less 0x80');
          }
          return {
              data: data,
              remainder: input.slice(length),
          };
      }
      else if (firstByte <= 0xbf) {
          // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),
          // followed by the length, followed by the string
          llength = firstByte - 0xb6;
          if (input.length - 1 < llength) {
              throw new Error('invalid RLP: not enough bytes for string length');
          }
          length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
          if (length <= 55) {
              throw new Error('invalid RLP: expected string length to be greater than 55');
          }
          data = input.slice(llength, length + llength);
          if (data.length < length) {
              throw new Error('invalid RLP: not enough bytes for string');
          }
          return {
              data: data,
              remainder: input.slice(length + llength),
          };
      }
      else if (firstByte <= 0xf7) {
          // a list between  0-55 bytes long
          length = firstByte - 0xbf;
          innerRemainder = input.slice(1, length);
          while (innerRemainder.length) {
              d = _decode(innerRemainder);
              decoded.push(d.data);
              innerRemainder = d.remainder;
          }
          return {
              data: decoded,
              remainder: input.slice(length),
          };
      }
      else {
          // a list  over 55 bytes long
          llength = firstByte - 0xf6;
          length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
          const totalLength = llength + length;
          if (totalLength > input.length) {
              throw new Error('invalid rlp: total length is larger than the data');
          }
          innerRemainder = input.slice(llength, totalLength);
          if (innerRemainder.length === 0) {
              throw new Error('invalid rlp, List has a invalid length');
          }
          while (innerRemainder.length) {
              d = _decode(innerRemainder);
              decoded.push(d.data);
              innerRemainder = d.remainder;
          }
          return {
              data: decoded,
              remainder: input.slice(totalLength),
          };
      }
  }
  /** Check if a string is prefixed by 0x */
  function isHexPrefixed$2(str) {
      return str.slice(0, 2) === '0x';
  }
  /** Removes 0x from a given String */
  function stripHexPrefix$1(str) {
      if (typeof str !== 'string') {
          return str;
      }
      return isHexPrefixed$2(str) ? str.slice(2) : str;
  }
  /** Transform an integer into its hexadecimal value */
  function intToHex$4(integer) {
      if (integer < 0) {
          throw new Error('Invalid integer as argument, must be unsigned!');
      }
      const hex = integer.toString(16);
      return hex.length % 2 ? `0${hex}` : hex;
  }
  /** Pad a string to be even */
  function padToEven$1(a) {
      return a.length % 2 ? `0${a}` : a;
  }
  /** Transform an integer into a Buffer */
  function intToBuffer$1(integer) {
      const hex = intToHex$4(integer);
      return Buffer.from(hex, 'hex');
  }
  /** Transform anything into a Buffer */
  function toBuffer(v) {
      if (!Buffer.isBuffer(v)) {
          if (typeof v === 'string') {
              if (isHexPrefixed$2(v)) {
                  return Buffer.from(padToEven$1(stripHexPrefix$1(v)), 'hex');
              }
              else {
                  return Buffer.from(v);
              }
          }
          else if (typeof v === 'number' || typeof v === 'bigint') {
              if (!v) {
                  return Buffer.from([]);
              }
              else {
                  return intToBuffer$1(v);
              }
          }
          else if (v === null || v === undefined) {
              return Buffer.from([]);
          }
          else if (v instanceof Uint8Array) {
              return Buffer.from(v);
          }
          else if (bn_js_1.default.isBN(v)) {
              // converts a BN to a Buffer
              return Buffer.from(v.toArray());
          }
          else {
              throw new Error('invalid type');
          }
      }
      return v;
  }

  var createHash = require$$0__default$2["default"].createHash;

  /**
   * Returns a `Boolean` on whether or not the a `String` starts with '0x'
   * @param {String} str the string input value
   * @return {Boolean} a boolean if it is or is not hex prefixed
   * @throws if the str input is not a string
   */

  var src$1 = function isHexPrefixed(str) {
    if (typeof str !== 'string') {
      throw new Error("[is-hex-prefixed] value must be type 'string', is currently type " + (typeof str) + ", while checking isHexPrefixed.");
    }

    return str.slice(0, 2) === '0x';
  };

  var isHexPrefixed$1 = src$1;

  /**
   * Removes '0x' from a given `String` is present
   * @param {String} str the string value
   * @return {String|Optional} a string by pass if necessary
   */
  var src = function stripHexPrefix(str) {
    if (typeof str !== 'string') {
      return str;
    }

    return isHexPrefixed$1(str) ? str.slice(2) : str;
  };

  var isHexPrefixed = src$1;
  var stripHexPrefix = src;

  /**
   * Pads a `String` to have an even length
   * @param {String} value
   * @return {String} output
   */
  function padToEven(value) {
    var a = value; // eslint-disable-line

    if (typeof a !== 'string') {
      throw new Error('[ethjs-util] while padding to even, value must be string, is currently ' + typeof a + ', while padToEven.');
    }

    if (a.length % 2) {
      a = '0' + a;
    }

    return a;
  }

  /**
   * Converts a `Number` into a hex `String`
   * @param {Number} i
   * @return {String}
   */
  function intToHex$3(i) {
    var hex = i.toString(16); // eslint-disable-line

    return '0x' + hex;
  }

  /**
   * Converts an `Number` to a `Buffer`
   * @param {Number} i
   * @return {Buffer}
   */
  function intToBuffer(i) {
    var hex = intToHex$3(i);

    return new Buffer(padToEven(hex.slice(2)), 'hex');
  }

  /**
   * Get the binary size of a string
   * @param {String} str
   * @return {Number}
   */
  function getBinarySize(str) {
    if (typeof str !== 'string') {
      throw new Error('[ethjs-util] while getting binary size, method getBinarySize requires input \'str\' to be type String, got \'' + typeof str + '\'.');
    }

    return Buffer.byteLength(str, 'utf8');
  }

  /**
   * Returns TRUE if the first specified array contains all elements
   * from the second one. FALSE otherwise.
   *
   * @param {array} superset
   * @param {array} subset
   *
   * @returns {boolean}
   */
  function arrayContainsArray(superset, subset, some) {
    if (Array.isArray(superset) !== true) {
      throw new Error('[ethjs-util] method arrayContainsArray requires input \'superset\' to be an array got type \'' + typeof superset + '\'');
    }
    if (Array.isArray(subset) !== true) {
      throw new Error('[ethjs-util] method arrayContainsArray requires input \'subset\' to be an array got type \'' + typeof subset + '\'');
    }

    return subset[Boolean(some) && 'some' || 'every'](function (value) {
      return superset.indexOf(value) >= 0;
    });
  }

  /**
   * Should be called to get utf8 from it's hex representation
   *
   * @method toUtf8
   * @param {String} string in hex
   * @returns {String} ascii string representation of hex value
   */
  function toUtf8(hex) {
    var bufferValue = new Buffer(padToEven(stripHexPrefix(hex).replace(/^0+|0+$/g, '')), 'hex');

    return bufferValue.toString('utf8');
  }

  /**
   * Should be called to get ascii from it's hex representation
   *
   * @method toAscii
   * @param {String} string in hex
   * @returns {String} ascii string representation of hex value
   */
  function toAscii(hex) {
    var str = ''; // eslint-disable-line
    var i = 0,
        l = hex.length; // eslint-disable-line

    if (hex.substring(0, 2) === '0x') {
      i = 2;
    }

    for (; i < l; i += 2) {
      var code = parseInt(hex.substr(i, 2), 16);
      str += String.fromCharCode(code);
    }

    return str;
  }

  /**
   * Should be called to get hex representation (prefixed by 0x) of utf8 string
   *
   * @method fromUtf8
   * @param {String} string
   * @param {Number} optional padding
   * @returns {String} hex representation of input string
   */
  function fromUtf8(stringValue) {
    var str = new Buffer(stringValue, 'utf8');

    return '0x' + padToEven(str.toString('hex')).replace(/^0+|0+$/g, '');
  }

  /**
   * Should be called to get hex representation (prefixed by 0x) of ascii string
   *
   * @method fromAscii
   * @param {String} string
   * @param {Number} optional padding
   * @returns {String} hex representation of input string
   */
  function fromAscii(stringValue) {
    var hex = ''; // eslint-disable-line
    for (var i = 0; i < stringValue.length; i++) {
      // eslint-disable-line
      var code = stringValue.charCodeAt(i);
      var n = code.toString(16);
      hex += n.length < 2 ? '0' + n : n;
    }

    return '0x' + hex;
  }

  /**
   * getKeys([{a: 1, b: 2}, {a: 3, b: 4}], 'a') => [1, 3]
   *
   * @method getKeys get specific key from inner object array of objects
   * @param {String} params
   * @param {String} key
   * @param {Boolean} allowEmpty
   * @returns {Array} output just a simple array of output keys
   */
  function getKeys(params, key, allowEmpty) {
    if (!Array.isArray(params)) {
      throw new Error('[ethjs-util] method getKeys expecting type Array as \'params\' input, got \'' + typeof params + '\'');
    }
    if (typeof key !== 'string') {
      throw new Error('[ethjs-util] method getKeys expecting type String for input \'key\' got \'' + typeof key + '\'.');
    }

    var result = []; // eslint-disable-line

    for (var i = 0; i < params.length; i++) {
      // eslint-disable-line
      var value = params[i][key]; // eslint-disable-line
      if (allowEmpty && !value) {
        value = '';
      } else if (typeof value !== 'string') {
        throw new Error('invalid abi');
      }
      result.push(value);
    }

    return result;
  }

  /**
   * Is the string a hex string.
   *
   * @method check if string is hex string of specific length
   * @param {String} value
   * @param {Number} length
   * @returns {Boolean} output the string is a hex string
   */
  function isHexString(value, length) {
    if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }

    if (length && value.length !== 2 + 2 * length) {
      return false;
    }

    return true;
  }

  var lib$2 = {
    arrayContainsArray: arrayContainsArray,
    intToBuffer: intToBuffer,
    getBinarySize: getBinarySize,
    isHexPrefixed: isHexPrefixed,
    stripHexPrefix: stripHexPrefix,
    padToEven: padToEven,
    intToHex: intToHex$3,
    fromAscii: fromAscii,
    fromUtf8: fromUtf8,
    toAscii: toAscii,
    toUtf8: toUtf8,
    getKeys: getKeys,
    isHexString: isHexString
  };

  (function (exports) {

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

  var _require = keccak$3,
      keccak224 = _require.keccak224,
      keccak384 = _require.keccak384,
      k256 = _require.keccak256,
      keccak512 = _require.keccak512;

  var secp256k1 = secp256k1Adapter;
  var assert = require$$0__default$5["default"];
  var rlp = dist$3;
  var BN = bn$2.exports;
  var createHash$1 = createHash;
  var Buffer = safeBuffer.exports.Buffer;
  Object.assign(exports, lib$2);

  /**
   * the max integer that this VM can handle (a ```BN```)
   * @var {BN} MAX_INTEGER
   */
  exports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);

  /**
   * 2^256 (a ```BN```)
   * @var {BN} TWO_POW256
   */
  exports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);

  /**
   * Keccak-256 hash of null (a ```String```)
   * @var {String} KECCAK256_NULL_S
   */
  exports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
  exports.SHA3_NULL_S = exports.KECCAK256_NULL_S;

  /**
   * Keccak-256 hash of null (a ```Buffer```)
   * @var {Buffer} KECCAK256_NULL
   */
  exports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');
  exports.SHA3_NULL = exports.KECCAK256_NULL;

  /**
   * Keccak-256 of an RLP of an empty array (a ```String```)
   * @var {String} KECCAK256_RLP_ARRAY_S
   */
  exports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
  exports.SHA3_RLP_ARRAY_S = exports.KECCAK256_RLP_ARRAY_S;

  /**
   * Keccak-256 of an RLP of an empty array (a ```Buffer```)
   * @var {Buffer} KECCAK256_RLP_ARRAY
   */
  exports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');
  exports.SHA3_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY;

  /**
   * Keccak-256 hash of the RLP of null  (a ```String```)
   * @var {String} KECCAK256_RLP_S
   */
  exports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
  exports.SHA3_RLP_S = exports.KECCAK256_RLP_S;

  /**
   * Keccak-256 hash of the RLP of null (a ```Buffer```)
   * @var {Buffer} KECCAK256_RLP
   */
  exports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');
  exports.SHA3_RLP = exports.KECCAK256_RLP;

  /**
   * [`BN`](https://github.com/indutny/bn.js)
   * @var {Function}
   */
  exports.BN = BN;

  /**
   * [`rlp`](https://github.com/ethereumjs/rlp)
   * @var {Function}
   */
  exports.rlp = rlp;

  /**
   * [`secp256k1`](https://github.com/cryptocoinjs/secp256k1-node/)
   * @var {Object}
   */
  exports.secp256k1 = secp256k1;

  /**
   * Returns a buffer filled with 0s
   * @method zeros
   * @param {Number} bytes  the number of bytes the buffer should be
   * @return {Buffer}
   */
  exports.zeros = function (bytes) {
    return Buffer.allocUnsafe(bytes).fill(0);
  };

  /**
    * Returns a zero address
    * @method zeroAddress
    * @return {String}
    */
  exports.zeroAddress = function () {
    var addressLength = 20;
    var zeroAddress = exports.zeros(addressLength);
    return exports.bufferToHex(zeroAddress);
  };

  /**
   * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
   * Or it truncates the beginning if it exceeds.
   * @method lsetLength
   * @param {Buffer|Array} msg the value to pad
   * @param {Number} length the number of bytes the output should be
   * @param {Boolean} [right=false] whether to start padding form the left or right
   * @return {Buffer|Array}
   */
  exports.setLengthLeft = exports.setLength = function (msg, length, right) {
    var buf = exports.zeros(length);
    msg = exports.toBuffer(msg);
    if (right) {
      if (msg.length < length) {
        msg.copy(buf);
        return buf;
      }
      return msg.slice(0, length);
    } else {
      if (msg.length < length) {
        msg.copy(buf, length - msg.length);
        return buf;
      }
      return msg.slice(-length);
    }
  };

  /**
   * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
   * Or it truncates the beginning if it exceeds.
   * @param {Buffer|Array} msg the value to pad
   * @param {Number} length the number of bytes the output should be
   * @return {Buffer|Array}
   */
  exports.setLengthRight = function (msg, length) {
    return exports.setLength(msg, length, true);
  };

  /**
   * Trims leading zeros from a `Buffer` or an `Array`
   * @param {Buffer|Array|String} a
   * @return {Buffer|Array|String}
   */
  exports.unpad = exports.stripZeros = function (a) {
    a = exports.stripHexPrefix(a);
    var first = a[0];
    while (a.length > 0 && first.toString() === '0') {
      a = a.slice(1);
      first = a[0];
    }
    return a;
  };
  /**
   * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
   * @param {*} v the value
   */
  exports.toBuffer = function (v) {
    if (!Buffer.isBuffer(v)) {
      if (Array.isArray(v)) {
        v = Buffer.from(v);
      } else if (typeof v === 'string') {
        if (exports.isHexString(v)) {
          v = Buffer.from(exports.padToEven(exports.stripHexPrefix(v)), 'hex');
        } else {
          v = Buffer.from(v);
        }
      } else if (typeof v === 'number') {
        v = exports.intToBuffer(v);
      } else if (v === null || v === undefined) {
        v = Buffer.allocUnsafe(0);
      } else if (BN.isBN(v)) {
        v = v.toArrayLike(Buffer);
      } else if (v.toArray) {
        // converts a BN to a Buffer
        v = Buffer.from(v.toArray());
      } else {
        throw new Error('invalid type');
      }
    }
    return v;
  };

  /**
   * Converts a `Buffer` to a `Number`
   * @param {Buffer} buf
   * @return {Number}
   * @throws If the input number exceeds 53 bits.
   */
  exports.bufferToInt = function (buf) {
    return new BN(exports.toBuffer(buf)).toNumber();
  };

  /**
   * Converts a `Buffer` into a hex `String`
   * @param {Buffer} buf
   * @return {String}
   */
  exports.bufferToHex = function (buf) {
    buf = exports.toBuffer(buf);
    return '0x' + buf.toString('hex');
  };

  /**
   * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
   * @param {Buffer} num
   * @return {BN}
   */
  exports.fromSigned = function (num) {
    return new BN(num).fromTwos(256);
  };

  /**
   * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
   * @param {BN} num
   * @return {Buffer}
   */
  exports.toUnsigned = function (num) {
    return Buffer.from(num.toTwos(256).toArray());
  };

  /**
   * Creates Keccak hash of the input
   * @param {Buffer|Array|String|Number} a the input data
   * @param {Number} [bits=256] the Keccak width
   * @return {Buffer}
   */
  exports.keccak = function (a, bits) {
    a = exports.toBuffer(a);
    if (!bits) bits = 256;

    switch (bits) {
      case 224:
        {
          return keccak224(a);
        }
      case 256:
        {
          return k256(a);
        }
      case 384:
        {
          return keccak384(a);
        }
      case 512:
        {
          return keccak512(a);
        }
      default:
        {
          throw new Error('Invald algorithm: keccak' + bits);
        }
    }
  };

  /**
   * Creates Keccak-256 hash of the input, alias for keccak(a, 256)
   * @param {Buffer|Array|String|Number} a the input data
   * @return {Buffer}
   */
  exports.keccak256 = function (a) {
    return exports.keccak(a);
  };

  /**
   * Creates SHA-3 (Keccak) hash of the input [OBSOLETE]
   * @param {Buffer|Array|String|Number} a the input data
   * @param {Number} [bits=256] the SHA-3 width
   * @return {Buffer}
   */
  exports.sha3 = exports.keccak;

  /**
   * Creates SHA256 hash of the input
   * @param {Buffer|Array|String|Number} a the input data
   * @return {Buffer}
   */
  exports.sha256 = function (a) {
    a = exports.toBuffer(a);
    return createHash$1('sha256').update(a).digest();
  };

  /**
   * Creates RIPEMD160 hash of the input
   * @param {Buffer|Array|String|Number} a the input data
   * @param {Boolean} padded whether it should be padded to 256 bits or not
   * @return {Buffer}
   */
  exports.ripemd160 = function (a, padded) {
    a = exports.toBuffer(a);
    var hash = createHash$1('rmd160').update(a).digest();
    if (padded === true) {
      return exports.setLength(hash, 32);
    } else {
      return hash;
    }
  };

  /**
   * Creates SHA-3 hash of the RLP encoded version of the input
   * @param {Buffer|Array|String|Number} a the input data
   * @return {Buffer}
   */
  exports.rlphash = function (a) {
    return exports.keccak(rlp.encode(a));
  };

  /**
   * Checks if the private key satisfies the rules of the curve secp256k1.
   * @param {Buffer} privateKey
   * @return {Boolean}
   */
  exports.isValidPrivate = function (privateKey) {
    return secp256k1.privateKeyVerify(privateKey);
  };

  /**
   * Checks if the public key satisfies the rules of the curve secp256k1
   * and the requirements of Ethereum.
   * @param {Buffer} publicKey The two points of an uncompressed key, unless sanitize is enabled
   * @param {Boolean} [sanitize=false] Accept public keys in other formats
   * @return {Boolean}
   */
  exports.isValidPublic = function (publicKey, sanitize) {
    if (publicKey.length === 64) {
      // Convert to SEC1 for secp256k1
      return secp256k1.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));
    }

    if (!sanitize) {
      return false;
    }

    return secp256k1.publicKeyVerify(publicKey);
  };

  /**
   * Returns the ethereum address of a given public key.
   * Accepts "Ethereum public keys" and SEC1 encoded keys.
   * @param {Buffer} pubKey The two points of an uncompressed key, unless sanitize is enabled
   * @param {Boolean} [sanitize=false] Accept public keys in other formats
   * @return {Buffer}
   */
  exports.pubToAddress = exports.publicToAddress = function (pubKey, sanitize) {
    pubKey = exports.toBuffer(pubKey);
    if (sanitize && pubKey.length !== 64) {
      pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);
    }
    assert(pubKey.length === 64);
    // Only take the lower 160bits of the hash
    return exports.keccak(pubKey).slice(-20);
  };

  /**
   * Returns the ethereum public key of a given private key
   * @param {Buffer} privateKey A private key must be 256 bits wide
   * @return {Buffer}
   */
  var privateToPublic = exports.privateToPublic = function (privateKey) {
    privateKey = exports.toBuffer(privateKey);
    // skip the type flag and use the X, Y points
    return secp256k1.publicKeyCreate(privateKey, false).slice(1);
  };

  /**
   * Converts a public key to the Ethereum format.
   * @param {Buffer} publicKey
   * @return {Buffer}
   */
  exports.importPublic = function (publicKey) {
    publicKey = exports.toBuffer(publicKey);
    if (publicKey.length !== 64) {
      publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);
    }
    return publicKey;
  };

  /**
   * ECDSA sign
   * @param {Buffer} msgHash
   * @param {Buffer} privateKey
   * @return {Object}
   */
  exports.ecsign = function (msgHash, privateKey) {
    var sig = secp256k1.sign(msgHash, privateKey);

    var ret = {};
    ret.r = sig.signature.slice(0, 32);
    ret.s = sig.signature.slice(32, 64);
    ret.v = sig.recovery + 27;
    return ret;
  };

  /**
   * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
   * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
   * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
   * used to produce the signature.
   * @param message
   * @returns {Buffer} hash
   */
  exports.hashPersonalMessage = function (message) {
    var prefix = exports.toBuffer('\x19Ethereum Signed Message:\n' + message.length.toString());
    return exports.keccak(Buffer.concat([prefix, message]));
  };

  /**
   * ECDSA public key recovery from signature
   * @param {Buffer} msgHash
   * @param {Number} v
   * @param {Buffer} r
   * @param {Buffer} s
   * @return {Buffer} publicKey
   */
  exports.ecrecover = function (msgHash, v, r, s) {
    var signature = Buffer.concat([exports.setLength(r, 32), exports.setLength(s, 32)], 64);
    var recovery = v - 27;
    if (recovery !== 0 && recovery !== 1) {
      throw new Error('Invalid signature v value');
    }
    var senderPubKey = secp256k1.recover(msgHash, signature, recovery);
    return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);
  };

  /**
   * Convert signature parameters into the format of `eth_sign` RPC method
   * @param {Number} v
   * @param {Buffer} r
   * @param {Buffer} s
   * @return {String} sig
   */
  exports.toRpcSig = function (v, r, s) {
    // NOTE: with potential introduction of chainId this might need to be updated
    if (v !== 27 && v !== 28) {
      throw new Error('Invalid recovery id');
    }

    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
    // FIXME: this might change in the future - https://github.com/ethereum/go-ethereum/issues/2053
    return exports.bufferToHex(Buffer.concat([exports.setLengthLeft(r, 32), exports.setLengthLeft(s, 32), exports.toBuffer(v - 27)]));
  };

  /**
   * Convert signature format of the `eth_sign` RPC method to signature parameters
   * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
   * @param {String} sig
   * @return {Object}
   */
  exports.fromRpcSig = function (sig) {
    sig = exports.toBuffer(sig);

    // NOTE: with potential introduction of chainId this might need to be updated
    if (sig.length !== 65) {
      throw new Error('Invalid signature length');
    }

    var v = sig[64];
    // support both versions of `eth_sign` responses
    if (v < 27) {
      v += 27;
    }

    return {
      v: v,
      r: sig.slice(0, 32),
      s: sig.slice(32, 64)
    };
  };

  /**
   * Returns the ethereum address of a given private key
   * @param {Buffer} privateKey A private key must be 256 bits wide
   * @return {Buffer}
   */
  exports.privateToAddress = function (privateKey) {
    return exports.publicToAddress(privateToPublic(privateKey));
  };

  /**
   * Checks if the address is a valid. Accepts checksummed addresses too
   * @param {String} address
   * @return {Boolean}
   */
  exports.isValidAddress = function (address) {
    return (/^0x[0-9a-fA-F]{40}$/.test(address)
    );
  };

  /**
    * Checks if a given address is a zero address
    * @method isZeroAddress
    * @param {String} address
    * @return {Boolean}
    */
  exports.isZeroAddress = function (address) {
    var zeroAddress = exports.zeroAddress();
    return zeroAddress === exports.addHexPrefix(address);
  };

  /**
   * Returns a checksummed address
   * @param {String} address
   * @return {String}
   */
  exports.toChecksumAddress = function (address) {
    address = exports.stripHexPrefix(address).toLowerCase();
    var hash = exports.keccak(address).toString('hex');
    var ret = '0x';

    for (var i = 0; i < address.length; i++) {
      if (parseInt(hash[i], 16) >= 8) {
        ret += address[i].toUpperCase();
      } else {
        ret += address[i];
      }
    }

    return ret;
  };

  /**
   * Checks if the address is a valid checksummed address
   * @param {Buffer} address
   * @return {Boolean}
   */
  exports.isValidChecksumAddress = function (address) {
    return exports.isValidAddress(address) && exports.toChecksumAddress(address) === address;
  };

  /**
   * Generates an address of a newly created contract
   * @param {Buffer} from the address which is creating this new address
   * @param {Buffer} nonce the nonce of the from account
   * @return {Buffer}
   */
  exports.generateAddress = function (from, nonce) {
    from = exports.toBuffer(from);
    nonce = new BN(nonce);

    if (nonce.isZero()) {
      // in RLP we want to encode null in the case of zero nonce
      // read the RLP documentation for an answer if you dare
      nonce = null;
    } else {
      nonce = Buffer.from(nonce.toArray());
    }

    // Only take the lower 160bits of the hash
    return exports.rlphash([from, nonce]).slice(-20);
  };

  /**
   * Returns true if the supplied address belongs to a precompiled account (Byzantium)
   * @param {Buffer|String} address
   * @return {Boolean}
   */
  exports.isPrecompiled = function (address) {
    var a = exports.unpad(address);
    return a.length === 1 && a[0] >= 1 && a[0] <= 8;
  };

  /**
   * Adds "0x" to a given `String` if it does not already start with "0x"
   * @param {String} str
   * @return {String}
   */
  exports.addHexPrefix = function (str) {
    if (typeof str !== 'string') {
      return str;
    }

    return exports.isHexPrefixed(str) ? str : '0x' + str;
  };

  /**
   * Validate ECDSA signature
   * @method isValidSignature
   * @param {Buffer} v
   * @param {Buffer} r
   * @param {Buffer} s
   * @param {Boolean} [homestead=true]
   * @return {Boolean}
   */

  exports.isValidSignature = function (v, r, s, homestead) {
    var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
    var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);

    if (r.length !== 32 || s.length !== 32) {
      return false;
    }

    if (v !== 27 && v !== 28) {
      return false;
    }

    r = new BN(r);
    s = new BN(s);

    if (r.isZero() || r.gt(SECP256K1_N) || s.isZero() || s.gt(SECP256K1_N)) {
      return false;
    }

    if (homestead === false && new BN(s).cmp(SECP256K1_N_DIV_2) === 1) {
      return false;
    }

    return true;
  };

  /**
   * Converts a `Buffer` or `Array` to JSON
   * @param {Buffer|Array} ba
   * @return {Array|String|null}
   */
  exports.baToJSON = function (ba) {
    if (Buffer.isBuffer(ba)) {
      return '0x' + ba.toString('hex');
    } else if (ba instanceof Array) {
      var array = [];
      for (var i = 0; i < ba.length; i++) {
        array.push(exports.baToJSON(ba[i]));
      }
      return array;
    }
  };

  /**
   * Defines properties on a `Object`. It make the assumption that underlying data is binary.
   * @param {Object} self the `Object` to define properties on
   * @param {Array} fields an array fields to define. Fields can contain:
   * * `name` - the name of the properties
   * * `length` - the number of bytes the field can have
   * * `allowLess` - if the field can be less than the length
   * * `allowEmpty`
   * @param {*} data data to be validated against the definitions
   */
  exports.defineProperties = function (self, fields, data) {
    self.raw = [];
    self._fields = [];

    // attach the `toJSON`
    self.toJSON = function (label) {
      if (label) {
        var obj = {};
        self._fields.forEach(function (field) {
          obj[field] = '0x' + self[field].toString('hex');
        });
        return obj;
      }
      return exports.baToJSON(this.raw);
    };

    self.serialize = function serialize() {
      return rlp.encode(self.raw);
    };

    fields.forEach(function (field, i) {
      self._fields.push(field.name);
      function getter() {
        return self.raw[i];
      }
      function setter(v) {
        v = exports.toBuffer(v);

        if (v.toString('hex') === '00' && !field.allowZero) {
          v = Buffer.allocUnsafe(0);
        }

        if (field.allowLess && field.length) {
          v = exports.stripZeros(v);
          assert(field.length >= v.length, 'The field ' + field.name + ' must not have more ' + field.length + ' bytes');
        } else if (!(field.allowZero && v.length === 0) && field.length) {
          assert(field.length === v.length, 'The field ' + field.name + ' must have byte length of ' + field.length);
        }

        self.raw[i] = v;
      }

      Object.defineProperty(self, field.name, {
        enumerable: true,
        configurable: true,
        get: getter,
        set: setter
      });

      if (field.default) {
        self[field.name] = field.default;
      }

      // attach alias
      if (field.alias) {
        Object.defineProperty(self, field.alias, {
          enumerable: false,
          configurable: true,
          set: setter,
          get: getter
        });
      }
    });

    // if the constuctor is passed data
    if (data) {
      if (typeof data === 'string') {
        data = Buffer.from(exports.stripHexPrefix(data), 'hex');
      }

      if (Buffer.isBuffer(data)) {
        data = rlp.decode(data);
      }

      if (Array.isArray(data)) {
        if (data.length > self._fields.length) {
          throw new Error('wrong number of fields in data');
        }

        // make sure all the items are buffers
        data.forEach(function (d, i) {
          self[self._fields[i]] = exports.toBuffer(d);
        });
      } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
        var keys = Object.keys(data);
        fields.forEach(function (field) {
          if (keys.indexOf(field.name) !== -1) self[field.name] = data[field.name];
          if (keys.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias];
        });
      } else {
        throw new Error('invalid data');
      }
    }
  };
  }(dist$4));

  const processFn$1 = (fn, opts) => function () {
  	const P = opts.promiseModule;
  	const args = new Array(arguments.length);

  	for (let i = 0; i < arguments.length; i++) {
  		args[i] = arguments[i];
  	}

  	return new P((resolve, reject) => {
  		if (opts.errorFirst) {
  			args.push(function (err, result) {
  				if (opts.multiArgs) {
  					const results = new Array(arguments.length - 1);

  					for (let i = 1; i < arguments.length; i++) {
  						results[i - 1] = arguments[i];
  					}

  					if (err) {
  						results.unshift(err);
  						reject(results);
  					} else {
  						resolve(results);
  					}
  				} else if (err) {
  					reject(err);
  				} else {
  					resolve(result);
  				}
  			});
  		} else {
  			args.push(function (result) {
  				if (opts.multiArgs) {
  					const results = new Array(arguments.length - 1);

  					for (let i = 0; i < arguments.length; i++) {
  						results[i] = arguments[i];
  					}

  					resolve(results);
  				} else {
  					resolve(result);
  				}
  			});
  		}

  		fn.apply(this, args);
  	});
  };

  var pify$3 = (obj, opts) => {
  	opts = Object.assign({
  		exclude: [/.+(Sync|Stream)$/],
  		errorFirst: true,
  		promiseModule: Promise
  	}, opts);

  	const filter = key => {
  		const match = pattern => typeof pattern === 'string' ? key === pattern : pattern.test(key);
  		return opts.include ? opts.include.some(match) : !opts.exclude.some(match);
  	};

  	let ret;
  	if (typeof obj === 'function') {
  		ret = function () {
  			if (opts.excludeMain) {
  				return obj.apply(this, arguments);
  			}

  			return processFn$1(obj, opts).apply(this, arguments);
  		};
  	} else {
  		ret = Object.create(Object.getPrototypeOf(obj));
  	}

  	for (const key in obj) { // eslint-disable-line guard-for-in
  		const x = obj[key];
  		ret[key] = typeof x === 'function' && filter(key) ? processFn$1(x, opts) : x;
  	}

  	return ret;
  };

  var immutable = extend$3;

  var hasOwnProperty$4 = Object.prototype.hasOwnProperty;

  function extend$3() {
      var target = {};

      for (var i = 0; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
              if (hasOwnProperty$4.call(source, key)) {
                  target[key] = source[key];
              }
          }
      }

      return target
  }

  var jsonRpcRandomId = IdIterator;

  function IdIterator(opts){
    opts = opts || {};
    var max = opts.max || Number.MAX_SAFE_INTEGER;
    var idCounter = typeof opts.start !== 'undefined' ? opts.start : Math.floor(Math.random() * max);

    return function createRandomId () {
      idCounter = idCounter % max;
      return idCounter++
    }

  }

  const extend$2 = immutable;
  const createRandomId$1 = jsonRpcRandomId();

  var ethQuery = EthQuery$1;


  function EthQuery$1(provider){
    const self = this;
    self.currentProvider = provider;
  }

  //
  // base queries
  //

  // default block
  EthQuery$1.prototype.getBalance =                          generateFnWithDefaultBlockFor(2, 'eth_getBalance');
  EthQuery$1.prototype.getCode =                             generateFnWithDefaultBlockFor(2, 'eth_getCode');
  EthQuery$1.prototype.getTransactionCount =                 generateFnWithDefaultBlockFor(2, 'eth_getTransactionCount');
  EthQuery$1.prototype.getStorageAt =                        generateFnWithDefaultBlockFor(3, 'eth_getStorageAt');
  EthQuery$1.prototype.call =                                generateFnWithDefaultBlockFor(2, 'eth_call');
  // standard
  EthQuery$1.prototype.protocolVersion =                     generateFnFor('eth_protocolVersion');
  EthQuery$1.prototype.syncing =                             generateFnFor('eth_syncing');
  EthQuery$1.prototype.coinbase =                            generateFnFor('eth_coinbase');
  EthQuery$1.prototype.mining =                              generateFnFor('eth_mining');
  EthQuery$1.prototype.hashrate =                            generateFnFor('eth_hashrate');
  EthQuery$1.prototype.gasPrice =                            generateFnFor('eth_gasPrice');
  EthQuery$1.prototype.accounts =                            generateFnFor('eth_accounts');
  EthQuery$1.prototype.blockNumber =                         generateFnFor('eth_blockNumber');
  EthQuery$1.prototype.getBlockTransactionCountByHash =      generateFnFor('eth_getBlockTransactionCountByHash');
  EthQuery$1.prototype.getBlockTransactionCountByNumber =    generateFnFor('eth_getBlockTransactionCountByNumber');
  EthQuery$1.prototype.getUncleCountByBlockHash =            generateFnFor('eth_getUncleCountByBlockHash');
  EthQuery$1.prototype.getUncleCountByBlockNumber =          generateFnFor('eth_getUncleCountByBlockNumber');
  EthQuery$1.prototype.sign =                                generateFnFor('eth_sign');
  EthQuery$1.prototype.sendTransaction =                     generateFnFor('eth_sendTransaction');
  EthQuery$1.prototype.sendRawTransaction =                  generateFnFor('eth_sendRawTransaction');
  EthQuery$1.prototype.estimateGas =                         generateFnFor('eth_estimateGas');
  EthQuery$1.prototype.getBlockByHash =                      generateFnFor('eth_getBlockByHash');
  EthQuery$1.prototype.getBlockByNumber =                    generateFnFor('eth_getBlockByNumber');
  EthQuery$1.prototype.getTransactionByHash =                generateFnFor('eth_getTransactionByHash');
  EthQuery$1.prototype.getTransactionByBlockHashAndIndex =   generateFnFor('eth_getTransactionByBlockHashAndIndex');
  EthQuery$1.prototype.getTransactionByBlockNumberAndIndex = generateFnFor('eth_getTransactionByBlockNumberAndIndex');
  EthQuery$1.prototype.getTransactionReceipt =               generateFnFor('eth_getTransactionReceipt');
  EthQuery$1.prototype.getUncleByBlockHashAndIndex =         generateFnFor('eth_getUncleByBlockHashAndIndex');
  EthQuery$1.prototype.getUncleByBlockNumberAndIndex =       generateFnFor('eth_getUncleByBlockNumberAndIndex');
  EthQuery$1.prototype.getCompilers =                        generateFnFor('eth_getCompilers');
  EthQuery$1.prototype.compileLLL =                          generateFnFor('eth_compileLLL');
  EthQuery$1.prototype.compileSolidity =                     generateFnFor('eth_compileSolidity');
  EthQuery$1.prototype.compileSerpent =                      generateFnFor('eth_compileSerpent');
  EthQuery$1.prototype.newFilter =                           generateFnFor('eth_newFilter');
  EthQuery$1.prototype.newBlockFilter =                      generateFnFor('eth_newBlockFilter');
  EthQuery$1.prototype.newPendingTransactionFilter =         generateFnFor('eth_newPendingTransactionFilter');
  EthQuery$1.prototype.uninstallFilter =                     generateFnFor('eth_uninstallFilter');
  EthQuery$1.prototype.getFilterChanges =                    generateFnFor('eth_getFilterChanges');
  EthQuery$1.prototype.getFilterLogs =                       generateFnFor('eth_getFilterLogs');
  EthQuery$1.prototype.getLogs =                             generateFnFor('eth_getLogs');
  EthQuery$1.prototype.getWork =                             generateFnFor('eth_getWork');
  EthQuery$1.prototype.submitWork =                          generateFnFor('eth_submitWork');
  EthQuery$1.prototype.submitHashrate =                      generateFnFor('eth_submitHashrate');

  // network level

  EthQuery$1.prototype.sendAsync = function(opts, cb){
    const self = this;
    self.currentProvider.sendAsync(createPayload$4(opts), function(err, response){
      if (!err && response.error) err = new Error('EthQuery - RPC Error - '+response.error.message);
      if (err) return cb(err)
      cb(null, response.result);
    });
  };

  // util

  function generateFnFor(methodName){
    return function(){
      const self = this;
      var args = [].slice.call(arguments);
      var cb = args.pop();
      self.sendAsync({
        method: methodName,
        params: args,
      }, cb);
    }
  }

  function generateFnWithDefaultBlockFor(argCount, methodName){
    return function(){
      const self = this;
      var args = [].slice.call(arguments);
      var cb = args.pop();
      // set optional default block param
      if (args.length < argCount) args.push('latest');
      self.sendAsync({
        method: methodName,
        params: args,
      }, cb);
    }
  }

  function createPayload$4(data){
    return extend$2({
      // defaults
      id: createRandomId$1(),
      jsonrpc: '2.0',
      params: [],
      // user-specified
    }, data)
  }

  var events = {exports: {}};

  var R$1 = typeof Reflect === 'object' ? Reflect : null;
  var ReflectApply$1 = R$1 && typeof R$1.apply === 'function'
    ? R$1.apply
    : function ReflectApply(target, receiver, args) {
      return Function.prototype.apply.call(target, receiver, args);
    };

  var ReflectOwnKeys;
  if (R$1 && typeof R$1.ownKeys === 'function') {
    ReflectOwnKeys = R$1.ownKeys;
  } else if (Object.getOwnPropertySymbols) {
    ReflectOwnKeys = function ReflectOwnKeys(target) {
      return Object.getOwnPropertyNames(target)
        .concat(Object.getOwnPropertySymbols(target));
    };
  } else {
    ReflectOwnKeys = function ReflectOwnKeys(target) {
      return Object.getOwnPropertyNames(target);
    };
  }

  function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
  }

  var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
  };

  function EventEmitter$3() {
    EventEmitter$3.init.call(this);
  }
  events.exports = EventEmitter$3;
  events.exports.once = once$1;

  // Backwards-compat with node 0.10.x
  EventEmitter$3.EventEmitter = EventEmitter$3;

  EventEmitter$3.prototype._events = undefined;
  EventEmitter$3.prototype._eventsCount = 0;
  EventEmitter$3.prototype._maxListeners = undefined;

  // By default EventEmitters will print a warning if more than 10 listeners are
  // added to it. This is a useful default which helps finding memory leaks.
  var defaultMaxListeners = 10;

  function checkListener(listener) {
    if (typeof listener !== 'function') {
      throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
    }
  }

  Object.defineProperty(EventEmitter$3, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
        throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
      }
      defaultMaxListeners = arg;
    }
  });

  EventEmitter$3.init = function() {

    if (this._events === undefined ||
        this._events === Object.getPrototypeOf(this)._events) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    }

    this._maxListeners = this._maxListeners || undefined;
  };

  // Obviously not all Emitters should be limited to 10. This function allows
  // that to be increased. Set to zero for unlimited.
  EventEmitter$3.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
      throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
    }
    this._maxListeners = n;
    return this;
  };

  function _getMaxListeners(that) {
    if (that._maxListeners === undefined)
      return EventEmitter$3.defaultMaxListeners;
    return that._maxListeners;
  }

  EventEmitter$3.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
  };

  EventEmitter$3.prototype.emit = function emit(type) {
    var args = [];
    for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
    var doError = (type === 'error');

    var events = this._events;
    if (events !== undefined)
      doError = (doError && events.error === undefined);
    else if (!doError)
      return false;

    // If there is no 'error' event listener then throw.
    if (doError) {
      var er;
      if (args.length > 0)
        er = args[0];
      if (er instanceof Error) {
        // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
      }
      // At least give some kind of context to the user
      var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
      err.context = er;
      throw err; // Unhandled 'error' event
    }

    var handler = events[type];

    if (handler === undefined)
      return false;

    if (typeof handler === 'function') {
      ReflectApply$1(handler, this, args);
    } else {
      var len = handler.length;
      var listeners = arrayClone$2(handler, len);
      for (var i = 0; i < len; ++i)
        ReflectApply$1(listeners[i], this, args);
    }

    return true;
  };

  function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;

    checkListener(listener);

    events = target._events;
    if (events === undefined) {
      events = target._events = Object.create(null);
      target._eventsCount = 0;
    } else {
      // To avoid recursion in the case that type === "newListener"! Before
      // adding it to the listeners, first emit "newListener".
      if (events.newListener !== undefined) {
        target.emit('newListener', type,
                    listener.listener ? listener.listener : listener);

        // Re-assign `events` because a newListener handler could have caused the
        // this._events to be assigned to a new object
        events = target._events;
      }
      existing = events[type];
    }

    if (existing === undefined) {
      // Optimize the case of one listener. Don't need the extra array object.
      existing = events[type] = listener;
      ++target._eventsCount;
    } else {
      if (typeof existing === 'function') {
        // Adding the second element, need to change to array.
        existing = events[type] =
          prepend ? [listener, existing] : [existing, listener];
        // If we've already got an array, just append.
      } else if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }

      // Check for listener leak
      m = _getMaxListeners(target);
      if (m > 0 && existing.length > m && !existing.warned) {
        existing.warned = true;
        // No error code for this since it is a Warning
        // eslint-disable-next-line no-restricted-syntax
        var w = new Error('Possible EventEmitter memory leak detected. ' +
                            existing.length + ' ' + String(type) + ' listeners ' +
                            'added. Use emitter.setMaxListeners() to ' +
                            'increase limit');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        ProcessEmitWarning(w);
      }
    }

    return target;
  }

  EventEmitter$3.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
  };

  EventEmitter$3.prototype.on = EventEmitter$3.prototype.addListener;

  EventEmitter$3.prototype.prependListener =
      function prependListener(type, listener) {
        return _addListener(this, type, listener, true);
      };

  function onceWrapper() {
    if (!this.fired) {
      this.target.removeListener(this.type, this.wrapFn);
      this.fired = true;
      if (arguments.length === 0)
        return this.listener.call(this.target);
      return this.listener.apply(this.target, arguments);
    }
  }

  function _onceWrap(target, type, listener) {
    var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
    var wrapped = onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
  }

  EventEmitter$3.prototype.once = function once(type, listener) {
    checkListener(listener);
    this.on(type, _onceWrap(this, type, listener));
    return this;
  };

  EventEmitter$3.prototype.prependOnceListener =
      function prependOnceListener(type, listener) {
        checkListener(listener);
        this.prependListener(type, _onceWrap(this, type, listener));
        return this;
      };

  // Emits a 'removeListener' event if and only if the listener was removed.
  EventEmitter$3.prototype.removeListener =
      function removeListener(type, listener) {
        var list, events, position, i, originalListener;

        checkListener(listener);

        events = this._events;
        if (events === undefined)
          return this;

        list = events[type];
        if (list === undefined)
          return this;

        if (list === listener || list.listener === listener) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else {
            delete events[type];
            if (events.removeListener)
              this.emit('removeListener', type, list.listener || listener);
          }
        } else if (typeof list !== 'function') {
          position = -1;

          for (i = list.length - 1; i >= 0; i--) {
            if (list[i] === listener || list[i].listener === listener) {
              originalListener = list[i].listener;
              position = i;
              break;
            }
          }

          if (position < 0)
            return this;

          if (position === 0)
            list.shift();
          else {
            spliceOne(list, position);
          }

          if (list.length === 1)
            events[type] = list[0];

          if (events.removeListener !== undefined)
            this.emit('removeListener', type, originalListener || listener);
        }

        return this;
      };

  EventEmitter$3.prototype.off = EventEmitter$3.prototype.removeListener;

  EventEmitter$3.prototype.removeAllListeners =
      function removeAllListeners(type) {
        var listeners, events, i;

        events = this._events;
        if (events === undefined)
          return this;

        // not listening for removeListener, no need to emit
        if (events.removeListener === undefined) {
          if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
          } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0)
              this._events = Object.create(null);
            else
              delete events[type];
          }
          return this;
        }

        // emit removeListener for all listeners on all events
        if (arguments.length === 0) {
          var keys = Object.keys(events);
          var key;
          for (i = 0; i < keys.length; ++i) {
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
          }
          this.removeAllListeners('removeListener');
          this._events = Object.create(null);
          this._eventsCount = 0;
          return this;
        }

        listeners = events[type];

        if (typeof listeners === 'function') {
          this.removeListener(type, listeners);
        } else if (listeners !== undefined) {
          // LIFO order
          for (i = listeners.length - 1; i >= 0; i--) {
            this.removeListener(type, listeners[i]);
          }
        }

        return this;
      };

  function _listeners(target, type, unwrap) {
    var events = target._events;

    if (events === undefined)
      return [];

    var evlistener = events[type];
    if (evlistener === undefined)
      return [];

    if (typeof evlistener === 'function')
      return unwrap ? [evlistener.listener || evlistener] : [evlistener];

    return unwrap ?
      unwrapListeners(evlistener) : arrayClone$2(evlistener, evlistener.length);
  }

  EventEmitter$3.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
  };

  EventEmitter$3.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
  };

  EventEmitter$3.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === 'function') {
      return emitter.listenerCount(type);
    } else {
      return listenerCount.call(emitter, type);
    }
  };

  EventEmitter$3.prototype.listenerCount = listenerCount;
  function listenerCount(type) {
    var events = this._events;

    if (events !== undefined) {
      var evlistener = events[type];

      if (typeof evlistener === 'function') {
        return 1;
      } else if (evlistener !== undefined) {
        return evlistener.length;
      }
    }

    return 0;
  }

  EventEmitter$3.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
  };

  function arrayClone$2(arr, n) {
    var copy = new Array(n);
    for (var i = 0; i < n; ++i)
      copy[i] = arr[i];
    return copy;
  }

  function spliceOne(list, index) {
    for (; index + 1 < list.length; index++)
      list[index] = list[index + 1];
    list.pop();
  }

  function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for (var i = 0; i < ret.length; ++i) {
      ret[i] = arr[i].listener || arr[i];
    }
    return ret;
  }

  function once$1(emitter, name) {
    return new Promise(function (resolve, reject) {
      function errorListener(err) {
        emitter.removeListener(name, resolver);
        reject(err);
      }

      function resolver() {
        if (typeof emitter.removeListener === 'function') {
          emitter.removeListener('error', errorListener);
        }
        resolve([].slice.call(arguments));
      }
      eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
      if (name !== 'error') {
        addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
      }
    });
  }

  function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === 'function') {
      eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
    }
  }

  function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === 'function') {
      if (flags.once) {
        emitter.once(name, listener);
      } else {
        emitter.on(name, listener);
      }
    } else if (typeof emitter.addEventListener === 'function') {
      // EventTarget does not have `error` event semantics like Node
      // EventEmitters, we do not listen for `error` events here.
      emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) {
          emitter.removeEventListener(name, wrapListener);
        }
        listener(arg);
      });
    } else {
      throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
    }
  }

  const util = require$$0__default$4["default"];
  const EventEmitter$2 = events.exports;

  var R = typeof Reflect === 'object' ? Reflect : null;
  var ReflectApply = R && typeof R.apply === 'function'
    ? R.apply
    : function ReflectApply(target, receiver, args) {
      return Function.prototype.apply.call(target, receiver, args);
  };

  var safeEventEmitter$1 = SafeEventEmitter$4;


  function SafeEventEmitter$4() {
    EventEmitter$2.call(this);
  }

  util.inherits(SafeEventEmitter$4, EventEmitter$2);

  SafeEventEmitter$4.prototype.emit = function (type) {
    // copied from https://github.com/Gozala/events/blob/master/events.js
    // modified lines are commented with "edited:"
    var args = [];
    for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
    var doError = (type === 'error');

    var events = this._events;
    if (events !== undefined)
      doError = (doError && events.error === undefined);
    else if (!doError)
      return false;

    // If there is no 'error' event listener then throw.
    if (doError) {
      var er;
      if (args.length > 0)
        er = args[0];
      if (er instanceof Error) {
        // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
      }
      // At least give some kind of context to the user
      var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
      err.context = er;
      throw err; // Unhandled 'error' event
    }

    var handler = events[type];

    if (handler === undefined)
      return false;

    if (typeof handler === 'function') {
      // edited: using safeApply
      safeApply$1(handler, this, args);
    } else {
      var len = handler.length;
      var listeners = arrayClone$1(handler, len);
      for (var i = 0; i < len; ++i)
        // edited: using safeApply
        safeApply$1(listeners[i], this, args);
    }

    return true;
  };

  function safeApply$1(handler, context, args) {
    try {
      ReflectApply(handler, context, args);
    } catch (err) {
      // throw error after timeout so as not to interupt the stack
      setTimeout(() => {
        throw err
      });
    }
  }

  function arrayClone$1(arr, n) {
    var copy = new Array(n);
    for (var i = 0; i < n; ++i)
      copy[i] = arr[i];
    return copy;
  }

  const SafeEventEmitter$3 = safeEventEmitter$1;

  const sec$1 = 1000;

  const calculateSum = (accumulator, currentValue) => accumulator + currentValue;
  const blockTrackerEvents = ['sync', 'latest'];

  class BaseBlockTracker$1 extends SafeEventEmitter$3 {

    //
    // public
    //

    constructor (opts = {}) {
      super();
      // config
      this._blockResetDuration = opts.blockResetDuration || 20 * sec$1;
      // state
      this._blockResetTimeout;
      this._currentBlock = null;
      this._isRunning = false;
      // bind functions for internal use
      this._onNewListener = this._onNewListener.bind(this);
      this._onRemoveListener = this._onRemoveListener.bind(this);
      this._resetCurrentBlock = this._resetCurrentBlock.bind(this);
      // listen for handler changes
      this._setupInternalEvents();
    }

    isRunning () {
      return this._isRunning
    }

    getCurrentBlock () {
      return this._currentBlock
    }

    async getLatestBlock () {
      // return if available
      if (this._currentBlock) return this._currentBlock
      // wait for a new latest block
      const latestBlock = await new Promise(resolve => this.once('latest', resolve));
      // return newly set current block
      return latestBlock
    }

    // dont allow module consumer to remove our internal event listeners
    removeAllListeners (eventName) {
      // perform default behavior, preserve fn arity
      if (eventName) {
        super.removeAllListeners(eventName);
      } else {
        super.removeAllListeners();
      }
      // re-add internal events
      this._setupInternalEvents();
      // trigger stop check just in case
      this._onRemoveListener();
    }

    //
    // to be implemented in subclass
    //

    _start () {
      // default behavior is noop
    }

    _end () {
      // default behavior is noop
    }

    //
    // private
    //

    _setupInternalEvents () {
      // first remove listeners for idempotence
      this.removeListener('newListener', this._onNewListener);
      this.removeListener('removeListener', this._onRemoveListener);
      // then add them
      this.on('newListener', this._onNewListener);
      this.on('removeListener', this._onRemoveListener);
    }

    _onNewListener (eventName, handler) {
      // `newListener` is called *before* the listener is added
      if (!blockTrackerEvents.includes(eventName)) return
      this._maybeStart();
    }

    _onRemoveListener (eventName, handler) {
      // `removeListener` is called *after* the listener is removed
      if (this._getBlockTrackerEventCount() > 0) return
      this._maybeEnd();
    }

    _maybeStart () {
      if (this._isRunning) return
      this._isRunning = true;
      // cancel setting latest block to stale
      this._cancelBlockResetTimeout();
      this._start();
    }

    _maybeEnd () {
      if (!this._isRunning) return
      this._isRunning = false;
      this._setupBlockResetTimeout();
      this._end();
    }

    _getBlockTrackerEventCount () {
      return blockTrackerEvents
        .map(eventName => this.listenerCount(eventName))
        .reduce(calculateSum)
    }

    _newPotentialLatest (newBlock) {
      const currentBlock = this._currentBlock;
      // only update if blok number is higher
      if (currentBlock && (hexToInt$4(newBlock) <= hexToInt$4(currentBlock))) return
      this._setCurrentBlock(newBlock);
    }

    _setCurrentBlock (newBlock) {
      const oldBlock = this._currentBlock;
      this._currentBlock = newBlock;
      this.emit('latest', newBlock);
      this.emit('sync', { oldBlock, newBlock });
    }

    _setupBlockResetTimeout () {
      // clear any existing timeout
      this._cancelBlockResetTimeout();
      // clear latest block when stale
      this._blockResetTimeout = setTimeout(this._resetCurrentBlock, this._blockResetDuration);
      // nodejs - dont hold process open
      if (this._blockResetTimeout.unref) {
        this._blockResetTimeout.unref();
      }
    }

    _cancelBlockResetTimeout () {
      clearTimeout(this._blockResetTimeout);
    }

    _resetCurrentBlock () {
      this._currentBlock = null;
    }

  }

  var base = BaseBlockTracker$1;

  function hexToInt$4(hexInt) {
    return Number.parseInt(hexInt, 16)
  }

  const pify$2 = pify$3;
  const BaseBlockTracker = base;

  const sec = 1000;

  class PollingBlockTracker extends BaseBlockTracker {

    constructor (opts = {}) {
      // parse + validate args
      if (!opts.provider) throw new Error('PollingBlockTracker - no provider specified.')
      const pollingInterval = opts.pollingInterval || 20 * sec;
      const retryTimeout = opts.retryTimeout || pollingInterval / 10;
      const keepEventLoopActive = opts.keepEventLoopActive !== undefined ? opts.keepEventLoopActive : true;
      const setSkipCacheFlag = opts.setSkipCacheFlag || false;
      // BaseBlockTracker constructor
      super(Object.assign({
        blockResetDuration: pollingInterval,
      }, opts));
      // config
      this._provider = opts.provider;
      this._pollingInterval = pollingInterval;
      this._retryTimeout = retryTimeout;
      this._keepEventLoopActive = keepEventLoopActive;
      this._setSkipCacheFlag = setSkipCacheFlag;
    }

    //
    // public
    //

    // trigger block polling
    async checkForLatestBlock () {
      await this._updateLatestBlock();
      return await this.getLatestBlock()
    }

    //
    // private
    //

    _start () {
      this._performSync().catch(err => this.emit('error', err));
    }

    async _performSync () {
      while (this._isRunning) {
        try {
          await this._updateLatestBlock();
          await timeout(this._pollingInterval, !this._keepEventLoopActive);
        } catch (err) {
          const newErr = new Error(`PollingBlockTracker - encountered an error while attempting to update latest block:\n${err.stack}`);
          try {
            this.emit('error', newErr);
          } catch (emitErr) {
            console.error(newErr);
          }
          await timeout(this._retryTimeout, !this._keepEventLoopActive);
        }
      }
    }

    async _updateLatestBlock () {
      // fetch + set latest block
      const latestBlock = await this._fetchLatestBlock();
      this._newPotentialLatest(latestBlock);
    }

    async _fetchLatestBlock () {
      const req = { jsonrpc: "2.0", id: 1, method: 'eth_blockNumber', params: [] };
      if (this._setSkipCacheFlag) req.skipCache = true;
      const res = await pify$2((cb) => this._provider.sendAsync(req, cb))();
      if (res.error) throw new Error(`PollingBlockTracker - encountered error fetching block:\n${res.error}`)
      return res.result
    }

  }

  var polling = PollingBlockTracker;

  function timeout (duration, unref) {
    return new Promise(resolve => {
      const timoutRef = setTimeout(resolve, duration);
      // don't keep process open
      if (timoutRef.unref && unref) {
        timoutRef.unref();
      }
    })
  }

  var map$2 = {exports: {}};

  var doParallel = {exports: {}};

  var eachOf = {exports: {}};

  /** Detect free variable `global` from Node.js. */

  var freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  var _freeGlobal = freeGlobal$1;

  var freeGlobal = _freeGlobal;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root$1 = freeGlobal || freeSelf || Function('return this')();

  var _root = root$1;

  var root = _root;

  /** Built-in value references. */
  var Symbol$3 = root.Symbol;

  var _Symbol = Symbol$3;

  var Symbol$2 = _Symbol;

  /** Used for built-in method references. */
  var objectProto$5 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$3 = objectProto$5.hasOwnProperty;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString$1 = objectProto$5.toString;

  /** Built-in value references. */
  var symToStringTag$1 = Symbol$2 ? Symbol$2.toStringTag : undefined;

  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */
  function getRawTag$1(value) {
    var isOwn = hasOwnProperty$3.call(value, symToStringTag$1),
        tag = value[symToStringTag$1];

    try {
      value[symToStringTag$1] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString$1.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag$1] = tag;
      } else {
        delete value[symToStringTag$1];
      }
    }
    return result;
  }

  var _getRawTag = getRawTag$1;

  /** Used for built-in method references. */

  var objectProto$4 = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString = objectProto$4.toString;

  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */
  function objectToString$1(value) {
    return nativeObjectToString.call(value);
  }

  var _objectToString = objectToString$1;

  var Symbol$1 = _Symbol,
      getRawTag = _getRawTag,
      objectToString = _objectToString;

  /** `Object#toString` result references. */
  var nullTag = '[object Null]',
      undefinedTag = '[object Undefined]';

  /** Built-in value references. */
  var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;

  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  function baseGetTag$3(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }
    return (symToStringTag && symToStringTag in Object(value))
      ? getRawTag(value)
      : objectToString(value);
  }

  var _baseGetTag = baseGetTag$3;

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */

  function isObject$1(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
  }

  var isObject_1 = isObject$1;

  var baseGetTag$2 = _baseGetTag,
      isObject = isObject_1;

  /** `Object#toString` result references. */
  var asyncTag = '[object AsyncFunction]',
      funcTag$1 = '[object Function]',
      genTag = '[object GeneratorFunction]',
      proxyTag = '[object Proxy]';

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction$1(value) {
    if (!isObject(value)) {
      return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag$2(value);
    return tag == funcTag$1 || tag == genTag || tag == asyncTag || tag == proxyTag;
  }

  var isFunction_1 = isFunction$1;

  /** Used as references for various `Number` constants. */

  var MAX_SAFE_INTEGER$1 = 9007199254740991;

  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */
  function isLength$2(value) {
    return typeof value == 'number' &&
      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
  }

  var isLength_1 = isLength$2;

  var isFunction = isFunction_1,
      isLength$1 = isLength_1;

  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */
  function isArrayLike$1(value) {
    return value != null && isLength$1(value.length) && !isFunction(value);
  }

  var isArrayLike_1 = isArrayLike$1;

  var breakLoop = {exports: {}};

  (function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  // A temporary value used to identify if the loop should be broken.
  // See #1064, #1293
  exports.default = {};
  module.exports = exports["default"];
  }(breakLoop, breakLoop.exports));

  var eachOfLimit$1 = {exports: {}};

  var eachOfLimit = {exports: {}};

  /**
   * This method returns `undefined`.
   *
   * @static
   * @memberOf _
   * @since 2.3.0
   * @category Util
   * @example
   *
   * _.times(2, _.noop);
   * // => [undefined, undefined]
   */

  function noop$1() {
    // No operation performed.
  }

  var noop_1 = noop$1;

  var once = {exports: {}};

  (function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.default = once;
  function once(fn) {
      return function () {
          if (fn === null) return;
          var callFn = fn;
          fn = null;
          callFn.apply(this, arguments);
      };
  }
  module.exports = exports["default"];
  }(once, once.exports));

  var iterator = {exports: {}};

  var getIterator = {exports: {}};

  (function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
      value: true
  });

  exports.default = function (coll) {
      return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();
  };

  var iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;

  module.exports = exports['default'];
  }(getIterator, getIterator.exports));

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */

  function baseTimes$1(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  var _baseTimes = baseTimes$1;

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */

  function isObjectLike$3(value) {
    return value != null && typeof value == 'object';
  }

  var isObjectLike_1 = isObjectLike$3;

  var baseGetTag$1 = _baseGetTag,
      isObjectLike$2 = isObjectLike_1;

  /** `Object#toString` result references. */
  var argsTag$1 = '[object Arguments]';

  /**
   * The base implementation of `_.isArguments`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   */
  function baseIsArguments$1(value) {
    return isObjectLike$2(value) && baseGetTag$1(value) == argsTag$1;
  }

  var _baseIsArguments = baseIsArguments$1;

  var baseIsArguments = _baseIsArguments,
      isObjectLike$1 = isObjectLike_1;

  /** Used for built-in method references. */
  var objectProto$3 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$2 = objectProto$3.hasOwnProperty;

  /** Built-in value references. */
  var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;

  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  var isArguments$1 = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
    return isObjectLike$1(value) && hasOwnProperty$2.call(value, 'callee') &&
      !propertyIsEnumerable.call(value, 'callee');
  };

  var isArguments_1 = isArguments$1;

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */

  var isArray$3 = Array.isArray;

  var isArray_1 = isArray$3;

  var isBuffer$1 = {exports: {}};

  /**
   * This method returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */

  function stubFalse() {
    return false;
  }

  var stubFalse_1 = stubFalse;

  (function (module, exports) {
  var root = _root,
      stubFalse = stubFalse_1;

  /** Detect free variable `exports`. */
  var freeExports = exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Built-in value references. */
  var Buffer = moduleExports ? root.Buffer : undefined;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

  /**
   * Checks if `value` is a buffer.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
   * @example
   *
   * _.isBuffer(new Buffer(2));
   * // => true
   *
   * _.isBuffer(new Uint8Array(2));
   * // => false
   */
  var isBuffer = nativeIsBuffer || stubFalse;

  module.exports = isBuffer;
  }(isBuffer$1, isBuffer$1.exports));

  /** Used as references for various `Number` constants. */

  var MAX_SAFE_INTEGER = 9007199254740991;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex$1(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;

    return !!length &&
      (type == 'number' ||
        (type != 'symbol' && reIsUint.test(value))) &&
          (value > -1 && value % 1 == 0 && value < length);
  }

  var _isIndex = isIndex$1;

  var baseGetTag = _baseGetTag,
      isLength = isLength_1,
      isObjectLike = isObjectLike_1;

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /**
   * The base implementation of `_.isTypedArray` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   */
  function baseIsTypedArray$1(value) {
    return isObjectLike(value) &&
      isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
  }

  var _baseIsTypedArray = baseIsTypedArray$1;

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */

  function baseUnary$1(func) {
    return function(value) {
      return func(value);
    };
  }

  var _baseUnary = baseUnary$1;

  var _nodeUtil = {exports: {}};

  (function (module, exports) {
  var freeGlobal = _freeGlobal;

  /** Detect free variable `exports`. */
  var freeExports = exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  module.exports = nodeUtil;
  }(_nodeUtil, _nodeUtil.exports));

  var baseIsTypedArray = _baseIsTypedArray,
      baseUnary = _baseUnary,
      nodeUtil = _nodeUtil.exports;

  /* Node.js helper references. */
  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */
  var isTypedArray$1 = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

  var isTypedArray_1 = isTypedArray$1;

  var baseTimes = _baseTimes,
      isArguments = isArguments_1,
      isArray$2 = isArray_1,
      isBuffer = isBuffer$1.exports,
      isIndex = _isIndex,
      isTypedArray = isTypedArray_1;

  /** Used for built-in method references. */
  var objectProto$2 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$1 = objectProto$2.hasOwnProperty;

  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */
  function arrayLikeKeys$1(value, inherited) {
    var isArr = isArray$2(value),
        isArg = !isArr && isArguments(value),
        isBuff = !isArr && !isArg && isBuffer(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? baseTimes(value.length, String) : [],
        length = result.length;

    for (var key in value) {
      if ((inherited || hasOwnProperty$1.call(value, key)) &&
          !(skipIndexes && (
             // Safari 9 has enumerable `arguments.length` in strict mode.
             key == 'length' ||
             // Node.js 0.10 has enumerable non-index properties on buffers.
             (isBuff && (key == 'offset' || key == 'parent')) ||
             // PhantomJS 2 has enumerable non-index properties on typed arrays.
             (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
             // Skip index properties.
             isIndex(key, length)
          ))) {
        result.push(key);
      }
    }
    return result;
  }

  var _arrayLikeKeys = arrayLikeKeys$1;

  /** Used for built-in method references. */

  var objectProto$1 = Object.prototype;

  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */
  function isPrototype$1(value) {
    var Ctor = value && value.constructor,
        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$1;

    return value === proto;
  }

  var _isPrototype = isPrototype$1;

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */

  function overArg$1(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  var _overArg = overArg$1;

  var overArg = _overArg;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeKeys$1 = overArg(Object.keys, Object);

  var _nativeKeys = nativeKeys$1;

  var isPrototype = _isPrototype,
      nativeKeys = _nativeKeys;

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeys$1(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }
    return result;
  }

  var _baseKeys = baseKeys$1;

  var arrayLikeKeys = _arrayLikeKeys,
      baseKeys = _baseKeys,
      isArrayLike = isArrayLike_1;

  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */
  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }

  var keys_1 = keys;

  (function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.default = iterator;

  var _isArrayLike = isArrayLike_1;

  var _isArrayLike2 = _interopRequireDefault(_isArrayLike);

  var _getIterator = getIterator.exports;

  var _getIterator2 = _interopRequireDefault(_getIterator);

  var _keys = keys_1;

  var _keys2 = _interopRequireDefault(_keys);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function createArrayIterator(coll) {
      var i = -1;
      var len = coll.length;
      return function next() {
          return ++i < len ? { value: coll[i], key: i } : null;
      };
  }

  function createES2015Iterator(iterator) {
      var i = -1;
      return function next() {
          var item = iterator.next();
          if (item.done) return null;
          i++;
          return { value: item.value, key: i };
      };
  }

  function createObjectIterator(obj) {
      var okeys = (0, _keys2.default)(obj);
      var i = -1;
      var len = okeys.length;
      return function next() {
          var key = okeys[++i];
          return i < len ? { value: obj[key], key: key } : null;
      };
  }

  function iterator(coll) {
      if ((0, _isArrayLike2.default)(coll)) {
          return createArrayIterator(coll);
      }

      var iterator = (0, _getIterator2.default)(coll);
      return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);
  }
  module.exports = exports['default'];
  }(iterator, iterator.exports));

  var onlyOnce = {exports: {}};

  (function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.default = onlyOnce;
  function onlyOnce(fn) {
      return function () {
          if (fn === null) throw new Error("Callback was already called.");
          var callFn = fn;
          fn = null;
          callFn.apply(this, arguments);
      };
  }
  module.exports = exports["default"];
  }(onlyOnce, onlyOnce.exports));

  (function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.default = _eachOfLimit;

  var _noop = noop_1;

  var _noop2 = _interopRequireDefault(_noop);

  var _once = once.exports;

  var _once2 = _interopRequireDefault(_once);

  var _iterator = iterator.exports;

  var _iterator2 = _interopRequireDefault(_iterator);

  var _onlyOnce = onlyOnce.exports;

  var _onlyOnce2 = _interopRequireDefault(_onlyOnce);

  var _breakLoop = breakLoop.exports;

  var _breakLoop2 = _interopRequireDefault(_breakLoop);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _eachOfLimit(limit) {
      return function (obj, iteratee, callback) {
          callback = (0, _once2.default)(callback || _noop2.default);
          if (limit <= 0 || !obj) {
              return callback(null);
          }
          var nextElem = (0, _iterator2.default)(obj);
          var done = false;
          var running = 0;
          var looping = false;

          function iterateeCallback(err, value) {
              running -= 1;
              if (err) {
                  done = true;
                  callback(err);
              } else if (value === _breakLoop2.default || done && running <= 0) {
                  done = true;
                  return callback(null);
              } else if (!looping) {
                  replenish();
              }
          }

          function replenish() {
              looping = true;
              while (running < limit && !done) {
                  var elem = nextElem();
                  if (elem === null) {
                      done = true;
                      if (running <= 0) {
                          callback(null);
                      }
                      return;
                  }
                  running += 1;
                  iteratee(elem.value, elem.key, (0, _onlyOnce2.default)(iterateeCallback));
              }
              looping = false;
          }

          replenish();
      };
  }
  module.exports = exports['default'];
  }(eachOfLimit, eachOfLimit.exports));

  var wrapAsync$1 = {};

  var asyncify = {exports: {}};

  var initialParams = {exports: {}};

  var slice = {exports: {}};

  (function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.default = slice;
  function slice(arrayLike, start) {
      start = start | 0;
      var newLen = Math.max(arrayLike.length - start, 0);
      var newArr = Array(newLen);
      for (var idx = 0; idx < newLen; idx++) {
          newArr[idx] = arrayLike[start + idx];
      }
      return newArr;
  }
  module.exports = exports["default"];
  }(slice, slice.exports));

  (function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
      value: true
  });

  exports.default = function (fn) {
      return function () /*...args, callback*/{
          var args = (0, _slice2.default)(arguments);
          var callback = args.pop();
          fn.call(this, args, callback);
      };
  };

  var _slice = slice.exports;

  var _slice2 = _interopRequireDefault(_slice);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  module.exports = exports['default'];
  }(initialParams, initialParams.exports));

  var setImmediate$1 = {};

  Object.defineProperty(setImmediate$1, "__esModule", {
      value: true
  });
  setImmediate$1.hasNextTick = setImmediate$1.hasSetImmediate = undefined;
  setImmediate$1.fallback = fallback;
  setImmediate$1.wrap = wrap;

  var _slice = slice.exports;

  var _slice2 = _interopRequireDefault$1(_slice);

  function _interopRequireDefault$1(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var hasSetImmediate = setImmediate$1.hasSetImmediate = typeof setImmediate === 'function' && setImmediate;
  var hasNextTick = setImmediate$1.hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';

  function fallback(fn) {
      setTimeout(fn, 0);
  }

  function wrap(defer) {
      return function (fn /*, ...args*/) {
          var args = (0, _slice2.default)(arguments, 1);
          defer(function () {
              fn.apply(null, args);
          });
      };
  }

  var _defer;

  if (hasSetImmediate) {
      _defer = setImmediate;
  } else if (hasNextTick) {
      _defer = process.nextTick;
  } else {
      _defer = fallback;
  }

  setImmediate$1.default = wrap(_defer);

  (function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.default = asyncify;

  var _isObject = isObject_1;

  var _isObject2 = _interopRequireDefault(_isObject);

  var _initialParams = initialParams.exports;

  var _initialParams2 = _interopRequireDefault(_initialParams);

  var _setImmediate = setImmediate$1;

  var _setImmediate2 = _interopRequireDefault(_setImmediate);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Take a sync function and make it async, passing its return value to a
   * callback. This is useful for plugging sync functions into a waterfall,
   * series, or other async functions. Any arguments passed to the generated
   * function will be passed to the wrapped function (except for the final
   * callback argument). Errors thrown will be passed to the callback.
   *
   * If the function passed to `asyncify` returns a Promise, that promises's
   * resolved/rejected state will be used to call the callback, rather than simply
   * the synchronous return value.
   *
   * This also means you can asyncify ES2017 `async` functions.
   *
   * @name asyncify
   * @static
   * @memberOf module:Utils
   * @method
   * @alias wrapSync
   * @category Util
   * @param {Function} func - The synchronous function, or Promise-returning
   * function to convert to an {@link AsyncFunction}.
   * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be
   * invoked with `(args..., callback)`.
   * @example
   *
   * // passing a regular synchronous function
   * async.waterfall([
   *     async.apply(fs.readFile, filename, "utf8"),
   *     async.asyncify(JSON.parse),
   *     function (data, next) {
   *         // data is the result of parsing the text.
   *         // If there was a parsing error, it would have been caught.
   *     }
   * ], callback);
   *
   * // passing a function returning a promise
   * async.waterfall([
   *     async.apply(fs.readFile, filename, "utf8"),
   *     async.asyncify(function (contents) {
   *         return db.model.create(contents);
   *     }),
   *     function (model, next) {
   *         // `model` is the instantiated model object.
   *         // If there was an error, this function would be skipped.
   *     }
   * ], callback);
   *
   * // es2017 example, though `asyncify` is not needed if your JS environment
   * // supports async functions out of the box
   * var q = async.queue(async.asyncify(async function(file) {
   *     var intermediateStep = await processFile(file);
   *     return await somePromise(intermediateStep)
   * }));
   *
   * q.push(files);
   */
  function asyncify(func) {
      return (0, _initialParams2.default)(function (args, callback) {
          var result;
          try {
              result = func.apply(this, args);
          } catch (e) {
              return callback(e);
          }
          // if result is Promise object
          if ((0, _isObject2.default)(result) && typeof result.then === 'function') {
              result.then(function (value) {
                  invokeCallback(callback, null, value);
              }, function (err) {
                  invokeCallback(callback, err.message ? err : new Error(err));
              });
          } else {
              callback(null, result);
          }
      });
  }

  function invokeCallback(callback, error, value) {
      try {
          callback(error, value);
      } catch (e) {
          (0, _setImmediate2.default)(rethrow, e);
      }
  }

  function rethrow(error) {
      throw error;
  }
  module.exports = exports['default'];
  }(asyncify, asyncify.exports));

  Object.defineProperty(wrapAsync$1, "__esModule", {
      value: true
  });
  wrapAsync$1.isAsync = undefined;

  var _asyncify = asyncify.exports;

  var _asyncify2 = _interopRequireDefault(_asyncify);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var supportsSymbol = typeof Symbol === 'function';

  function isAsync(fn) {
      return supportsSymbol && fn[Symbol.toStringTag] === 'AsyncFunction';
  }

  function wrapAsync(asyncFn) {
      return isAsync(asyncFn) ? (0, _asyncify2.default)(asyncFn) : asyncFn;
  }

  wrapAsync$1.default = wrapAsync;
  wrapAsync$1.isAsync = isAsync;

  (function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = eachOfLimit$1;

  var _eachOfLimit2 = eachOfLimit.exports;

  var _eachOfLimit3 = _interopRequireDefault(_eachOfLimit2);

  var _wrapAsync = wrapAsync$1;

  var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a
   * time.
   *
   * @name eachOfLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.eachOf]{@link module:Collections.eachOf}
   * @alias forEachOfLimit
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {AsyncFunction} iteratee - An async function to apply to each
   * item in `coll`. The `key` is the item's key, or index in the case of an
   * array.
   * Invoked with (item, key, callback).
   * @param {Function} [callback] - A callback which is called when all
   * `iteratee` functions have finished, or an error occurs. Invoked with (err).
   */
  function eachOfLimit$1(coll, limit, iteratee, callback) {
    (0, _eachOfLimit3.default)(limit)(coll, (0, _wrapAsync2.default)(iteratee), callback);
  }
  module.exports = exports['default'];
  }(eachOfLimit$1, eachOfLimit$1.exports));

  var doLimit = {exports: {}};

  (function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.default = doLimit;
  function doLimit(fn, limit) {
      return function (iterable, iteratee, callback) {
          return fn(iterable, limit, iteratee, callback);
      };
  }
  module.exports = exports["default"];
  }(doLimit, doLimit.exports));

  (function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
      value: true
  });

  exports.default = function (coll, iteratee, callback) {
      var eachOfImplementation = (0, _isArrayLike2.default)(coll) ? eachOfArrayLike : eachOfGeneric;
      eachOfImplementation(coll, (0, _wrapAsync2.default)(iteratee), callback);
  };

  var _isArrayLike = isArrayLike_1;

  var _isArrayLike2 = _interopRequireDefault(_isArrayLike);

  var _breakLoop = breakLoop.exports;

  var _breakLoop2 = _interopRequireDefault(_breakLoop);

  var _eachOfLimit = eachOfLimit$1.exports;

  var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);

  var _doLimit = doLimit.exports;

  var _doLimit2 = _interopRequireDefault(_doLimit);

  var _noop = noop_1;

  var _noop2 = _interopRequireDefault(_noop);

  var _once = once.exports;

  var _once2 = _interopRequireDefault(_once);

  var _onlyOnce = onlyOnce.exports;

  var _onlyOnce2 = _interopRequireDefault(_onlyOnce);

  var _wrapAsync = wrapAsync$1;

  var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  // eachOf implementation optimized for array-likes
  function eachOfArrayLike(coll, iteratee, callback) {
      callback = (0, _once2.default)(callback || _noop2.default);
      var index = 0,
          completed = 0,
          length = coll.length;
      if (length === 0) {
          callback(null);
      }

      function iteratorCallback(err, value) {
          if (err) {
              callback(err);
          } else if (++completed === length || value === _breakLoop2.default) {
              callback(null);
          }
      }

      for (; index < length; index++) {
          iteratee(coll[index], index, (0, _onlyOnce2.default)(iteratorCallback));
      }
  }

  // a generic version of eachOf which can handle array, object, and iterator cases.
  var eachOfGeneric = (0, _doLimit2.default)(_eachOfLimit2.default, Infinity);

  /**
   * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument
   * to the iteratee.
   *
   * @name eachOf
   * @static
   * @memberOf module:Collections
   * @method
   * @alias forEachOf
   * @category Collection
   * @see [async.each]{@link module:Collections.each}
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - A function to apply to each
   * item in `coll`.
   * The `key` is the item's key, or index in the case of an array.
   * Invoked with (item, key, callback).
   * @param {Function} [callback] - A callback which is called when all
   * `iteratee` functions have finished, or an error occurs. Invoked with (err).
   * @example
   *
   * var obj = {dev: "/dev.json", test: "/test.json", prod: "/prod.json"};
   * var configs = {};
   *
   * async.forEachOf(obj, function (value, key, callback) {
   *     fs.readFile(__dirname + value, "utf8", function (err, data) {
   *         if (err) return callback(err);
   *         try {
   *             configs[key] = JSON.parse(data);
   *         } catch (e) {
   *             return callback(e);
   *         }
   *         callback();
   *     });
   * }, function (err) {
   *     if (err) console.error(err.message);
   *     // configs is now a map of JSON data
   *     doSomethingWith(configs);
   * });
   */
  module.exports = exports['default'];
  }(eachOf, eachOf.exports));

  (function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.default = doParallel;

  var _eachOf = eachOf.exports;

  var _eachOf2 = _interopRequireDefault(_eachOf);

  var _wrapAsync = wrapAsync$1;

  var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function doParallel(fn) {
      return function (obj, iteratee, callback) {
          return fn(_eachOf2.default, obj, (0, _wrapAsync2.default)(iteratee), callback);
      };
  }
  module.exports = exports['default'];
  }(doParallel, doParallel.exports));

  var map$1 = {exports: {}};

  (function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.default = _asyncMap;

  var _noop = noop_1;

  var _noop2 = _interopRequireDefault(_noop);

  var _wrapAsync = wrapAsync$1;

  var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _asyncMap(eachfn, arr, iteratee, callback) {
      callback = callback || _noop2.default;
      arr = arr || [];
      var results = [];
      var counter = 0;
      var _iteratee = (0, _wrapAsync2.default)(iteratee);

      eachfn(arr, function (value, _, callback) {
          var index = counter++;
          _iteratee(value, function (err, v) {
              results[index] = v;
              callback(err);
          });
      }, function (err) {
          callback(err, results);
      });
  }
  module.exports = exports['default'];
  }(map$1, map$1.exports));

  (function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _doParallel = doParallel.exports;

  var _doParallel2 = _interopRequireDefault(_doParallel);

  var _map = map$1.exports;

  var _map2 = _interopRequireDefault(_map);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Produces a new collection of values by mapping each value in `coll` through
   * the `iteratee` function. The `iteratee` is called with an item from `coll`
   * and a callback for when it has finished processing. Each of these callback
   * takes 2 arguments: an `error`, and the transformed item from `coll`. If
   * `iteratee` passes an error to its callback, the main `callback` (for the
   * `map` function) is immediately called with the error.
   *
   * Note, that since this function applies the `iteratee` to each item in
   * parallel, there is no guarantee that the `iteratee` functions will complete
   * in order. However, the results array will be in the same order as the
   * original `coll`.
   *
   * If `map` is passed an Object, the results will be an Array.  The results
   * will roughly be in the order of the original Objects' keys (but this can
   * vary across JavaScript engines).
   *
   * @name map
   * @static
   * @memberOf module:Collections
   * @method
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - An async function to apply to each item in
   * `coll`.
   * The iteratee should complete with the transformed item.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called when all `iteratee`
   * functions have finished, or an error occurs. Results is an Array of the
   * transformed items from the `coll`. Invoked with (err, results).
   * @example
   *
   * async.map(['file1','file2','file3'], fs.stat, function(err, results) {
   *     // results is now an array of stats for each file
   * });
   */
  exports.default = (0, _doParallel2.default)(_map2.default);
  module.exports = exports['default'];
  }(map$2, map$2.exports));

  var eachSeries$1 = {exports: {}};

  var eachLimit = {exports: {}};

  var withoutIndex = {exports: {}};

  (function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.default = _withoutIndex;
  function _withoutIndex(iteratee) {
      return function (value, index, callback) {
          return iteratee(value, callback);
      };
  }
  module.exports = exports["default"];
  }(withoutIndex, withoutIndex.exports));

  (function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = eachLimit;

  var _eachOfLimit = eachOfLimit.exports;

  var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);

  var _withoutIndex = withoutIndex.exports;

  var _withoutIndex2 = _interopRequireDefault(_withoutIndex);

  var _wrapAsync = wrapAsync$1;

  var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.
   *
   * @name eachLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.each]{@link module:Collections.each}
   * @alias forEachLimit
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {AsyncFunction} iteratee - An async function to apply to each item in
   * `coll`.
   * The array index is not passed to the iteratee.
   * If you need the index, use `eachOfLimit`.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called when all
   * `iteratee` functions have finished, or an error occurs. Invoked with (err).
   */
  function eachLimit(coll, limit, iteratee, callback) {
    (0, _eachOfLimit2.default)(limit)(coll, (0, _withoutIndex2.default)((0, _wrapAsync2.default)(iteratee)), callback);
  }
  module.exports = exports['default'];
  }(eachLimit, eachLimit.exports));

  (function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _eachLimit = eachLimit.exports;

  var _eachLimit2 = _interopRequireDefault(_eachLimit);

  var _doLimit = doLimit.exports;

  var _doLimit2 = _interopRequireDefault(_doLimit);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.
   *
   * @name eachSeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.each]{@link module:Collections.each}
   * @alias forEachSeries
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - An async function to apply to each
   * item in `coll`.
   * The array index is not passed to the iteratee.
   * If you need the index, use `eachOfSeries`.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called when all
   * `iteratee` functions have finished, or an error occurs. Invoked with (err).
   */
  exports.default = (0, _doLimit2.default)(_eachLimit2.default, 1);
  module.exports = exports['default'];
  }(eachSeries$1, eachSeries$1.exports));

  const EventEmitter$1 = require$$0__default$3["default"].EventEmitter;
  const inherits$4 = require$$0__default$4["default"].inherits;

  var stoplight = Stoplight$1;


  inherits$4(Stoplight$1, EventEmitter$1);

  function Stoplight$1(){
    const self = this;
    EventEmitter$1.call(self);
    self.isLocked = true;
  }

  Stoplight$1.prototype.go = function(){
    const self = this;
    self.isLocked = false;
    self.emit('unlock');
  };

  Stoplight$1.prototype.stop = function(){
    const self = this;
    self.isLocked = true;
    self.emit('lock');
  };

  Stoplight$1.prototype.await = function(fn){
    const self = this;
    if (self.isLocked) {
      self.once('unlock', fn);
    } else {
      setTimeout(fn);
    }
  };

  var jsonify$1 = {};

  var at, // The index of the current character
      ch, // The current character
      escapee = {
          '"':  '"',
          '\\': '\\',
          '/':  '/',
          b:    '\b',
          f:    '\f',
          n:    '\n',
          r:    '\r',
          t:    '\t'
      },
      text,

      error = function (m) {
          // Call error when something is wrong.
          throw {
              name:    'SyntaxError',
              message: m,
              at:      at,
              text:    text
          };
      },
      
      next = function (c) {
          // If a c parameter is provided, verify that it matches the current character.
          if (c && c !== ch) {
              error("Expected '" + c + "' instead of '" + ch + "'");
          }
          
          // Get the next character. When there are no more characters,
          // return the empty string.
          
          ch = text.charAt(at);
          at += 1;
          return ch;
      },
      
      number = function () {
          // Parse a number value.
          var number,
              string = '';
          
          if (ch === '-') {
              string = '-';
              next('-');
          }
          while (ch >= '0' && ch <= '9') {
              string += ch;
              next();
          }
          if (ch === '.') {
              string += '.';
              while (next() && ch >= '0' && ch <= '9') {
                  string += ch;
              }
          }
          if (ch === 'e' || ch === 'E') {
              string += ch;
              next();
              if (ch === '-' || ch === '+') {
                  string += ch;
                  next();
              }
              while (ch >= '0' && ch <= '9') {
                  string += ch;
                  next();
              }
          }
          number = +string;
          if (!isFinite(number)) {
              error("Bad number");
          } else {
              return number;
          }
      },
      
      string = function () {
          // Parse a string value.
          var hex,
              i,
              string = '',
              uffff;
          
          // When parsing for string values, we must look for " and \ characters.
          if (ch === '"') {
              while (next()) {
                  if (ch === '"') {
                      next();
                      return string;
                  } else if (ch === '\\') {
                      next();
                      if (ch === 'u') {
                          uffff = 0;
                          for (i = 0; i < 4; i += 1) {
                              hex = parseInt(next(), 16);
                              if (!isFinite(hex)) {
                                  break;
                              }
                              uffff = uffff * 16 + hex;
                          }
                          string += String.fromCharCode(uffff);
                      } else if (typeof escapee[ch] === 'string') {
                          string += escapee[ch];
                      } else {
                          break;
                      }
                  } else {
                      string += ch;
                  }
              }
          }
          error("Bad string");
      },

      white = function () {

  // Skip whitespace.

          while (ch && ch <= ' ') {
              next();
          }
      },

      word = function () {

  // true, false, or null.

          switch (ch) {
          case 't':
              next('t');
              next('r');
              next('u');
              next('e');
              return true;
          case 'f':
              next('f');
              next('a');
              next('l');
              next('s');
              next('e');
              return false;
          case 'n':
              next('n');
              next('u');
              next('l');
              next('l');
              return null;
          }
          error("Unexpected '" + ch + "'");
      },

      value,  // Place holder for the value function.

      array = function () {

  // Parse an array value.

          var array = [];

          if (ch === '[') {
              next('[');
              white();
              if (ch === ']') {
                  next(']');
                  return array;   // empty array
              }
              while (ch) {
                  array.push(value());
                  white();
                  if (ch === ']') {
                      next(']');
                      return array;
                  }
                  next(',');
                  white();
              }
          }
          error("Bad array");
      },

      object$1 = function () {

  // Parse an object value.

          var key,
              object = {};

          if (ch === '{') {
              next('{');
              white();
              if (ch === '}') {
                  next('}');
                  return object;   // empty object
              }
              while (ch) {
                  key = string();
                  white();
                  next(':');
                  if (Object.hasOwnProperty.call(object, key)) {
                      error('Duplicate key "' + key + '"');
                  }
                  object[key] = value();
                  white();
                  if (ch === '}') {
                      next('}');
                      return object;
                  }
                  next(',');
                  white();
              }
          }
          error("Bad object");
      };

  value = function () {

  // Parse a JSON value. It could be an object, an array, a string, a number,
  // or a word.

      white();
      switch (ch) {
      case '{':
          return object$1();
      case '[':
          return array();
      case '"':
          return string();
      case '-':
          return number();
      default:
          return ch >= '0' && ch <= '9' ? number() : word();
      }
  };

  // Return the json_parse function. It will have access to all of the above
  // functions and variables.

  var parse = function (source, reviver) {
      var result;
      
      text = source;
      at = 0;
      ch = ' ';
      result = value();
      white();
      if (ch) {
          error("Syntax error");
      }

      // If there is a reviver function, we recursively walk the new structure,
      // passing each name/value pair to the reviver function for possible
      // transformation, starting with a temporary root object that holds the result
      // in an empty key. If there is not a reviver function, we simply return the
      // result.

      return typeof reviver === 'function' ? (function walk(holder, key) {
          var k, v, value = holder[key];
          if (value && typeof value === 'object') {
              for (k in value) {
                  if (Object.prototype.hasOwnProperty.call(value, k)) {
                      v = walk(value, k);
                      if (v !== undefined) {
                          value[k] = v;
                      } else {
                          delete value[k];
                      }
                  }
              }
          }
          return reviver.call(holder, key, value);
      }({'': result}, '')) : result;
  };

  var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
      gap,
      indent,
      meta = {    // table of character substitutions
          '\b': '\\b',
          '\t': '\\t',
          '\n': '\\n',
          '\f': '\\f',
          '\r': '\\r',
          '"' : '\\"',
          '\\': '\\\\'
      },
      rep;

  function quote(string) {
      // If the string contains no control characters, no quote characters, and no
      // backslash characters, then we can safely slap some quotes around it.
      // Otherwise we must also replace the offending characters with safe escape
      // sequences.
      
      escapable.lastIndex = 0;
      return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
          var c = meta[a];
          return typeof c === 'string' ? c :
              '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
      }) + '"' : '"' + string + '"';
  }

  function str(key, holder) {
      // Produce a string from holder[key].
      var i,          // The loop counter.
          k,          // The member key.
          v,          // The member value.
          length,
          mind = gap,
          partial,
          value = holder[key];
      
      // If the value has a toJSON method, call it to obtain a replacement value.
      if (value && typeof value === 'object' &&
              typeof value.toJSON === 'function') {
          value = value.toJSON(key);
      }
      
      // If we were called with a replacer function, then call the replacer to
      // obtain a replacement value.
      if (typeof rep === 'function') {
          value = rep.call(holder, key, value);
      }
      
      // What happens next depends on the value's type.
      switch (typeof value) {
          case 'string':
              return quote(value);
          
          case 'number':
              // JSON numbers must be finite. Encode non-finite numbers as null.
              return isFinite(value) ? String(value) : 'null';
          
          case 'boolean':
          case 'null':
              // If the value is a boolean or null, convert it to a string. Note:
              // typeof null does not produce 'null'. The case is included here in
              // the remote chance that this gets fixed someday.
              return String(value);
              
          case 'object':
              if (!value) return 'null';
              gap += indent;
              partial = [];
              
              // Array.isArray
              if (Object.prototype.toString.apply(value) === '[object Array]') {
                  length = value.length;
                  for (i = 0; i < length; i += 1) {
                      partial[i] = str(i, value) || 'null';
                  }
                  
                  // Join all of the elements together, separated with commas, and
                  // wrap them in brackets.
                  v = partial.length === 0 ? '[]' : gap ?
                      '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' :
                      '[' + partial.join(',') + ']';
                  gap = mind;
                  return v;
              }
              
              // If the replacer is an array, use it to select the members to be
              // stringified.
              if (rep && typeof rep === 'object') {
                  length = rep.length;
                  for (i = 0; i < length; i += 1) {
                      k = rep[i];
                      if (typeof k === 'string') {
                          v = str(k, value);
                          if (v) {
                              partial.push(quote(k) + (gap ? ': ' : ':') + v);
                          }
                      }
                  }
              }
              else {
                  // Otherwise, iterate through all of the keys in the object.
                  for (k in value) {
                      if (Object.prototype.hasOwnProperty.call(value, k)) {
                          v = str(k, value);
                          if (v) {
                              partial.push(quote(k) + (gap ? ': ' : ':') + v);
                          }
                      }
                  }
              }
              
          // Join all of the member texts together, separated with commas,
          // and wrap them in braces.

          v = partial.length === 0 ? '{}' : gap ?
              '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' :
              '{' + partial.join(',') + '}';
          gap = mind;
          return v;
      }
  }

  var stringify$4 = function (value, replacer, space) {
      var i;
      gap = '';
      indent = '';
      
      // If the space parameter is a number, make an indent string containing that
      // many spaces.
      if (typeof space === 'number') {
          for (i = 0; i < space; i += 1) {
              indent += ' ';
          }
      }
      // If the space parameter is a string, it will be used as the indent string.
      else if (typeof space === 'string') {
          indent = space;
      }

      // If there is a replacer, it must be a function or an array.
      // Otherwise, throw an error.
      rep = replacer;
      if (replacer && typeof replacer !== 'function'
      && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {
          throw new Error('JSON.stringify');
      }
      
      // Make a fake root object containing our value under the key of ''.
      // Return the result of stringifying the value.
      return str('', {'': value});
  };

  jsonify$1.parse = parse;
  jsonify$1.stringify = stringify$4;

  var json = typeof JSON !== 'undefined' ? JSON : jsonify$1;

  var jsonStableStringify = function (obj, opts) {
      if (!opts) opts = {};
      if (typeof opts === 'function') opts = { cmp: opts };
      var space = opts.space || '';
      if (typeof space === 'number') space = Array(space+1).join(' ');
      var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;
      var replacer = opts.replacer || function(key, value) { return value; };

      var cmp = opts.cmp && (function (f) {
          return function (node) {
              return function (a, b) {
                  var aobj = { key: a, value: node[a] };
                  var bobj = { key: b, value: node[b] };
                  return f(aobj, bobj);
              };
          };
      })(opts.cmp);

      var seen = [];
      return (function stringify (parent, key, node, level) {
          var indent = space ? ('\n' + new Array(level + 1).join(space)) : '';
          var colonSeparator = space ? ': ' : ':';

          if (node && node.toJSON && typeof node.toJSON === 'function') {
              node = node.toJSON();
          }

          node = replacer.call(parent, key, node);

          if (node === undefined) {
              return;
          }
          if (typeof node !== 'object' || node === null) {
              return json.stringify(node);
          }
          if (isArray$1(node)) {
              var out = [];
              for (var i = 0; i < node.length; i++) {
                  var item = stringify(node, i, node[i], level+1) || json.stringify(null);
                  out.push(indent + space + item);
              }
              return '[' + out.join(',') + indent + ']';
          }
          else {
              if (seen.indexOf(node) !== -1) {
                  if (cycles) return json.stringify('__cycle__');
                  throw new TypeError('Converting circular structure to JSON');
              }
              else seen.push(node);

              var keys = objectKeys(node).sort(cmp && cmp(node));
              var out = [];
              for (var i = 0; i < keys.length; i++) {
                  var key = keys[i];
                  var value = stringify(node, key, node[key], level+1);

                  if(!value) continue;

                  var keyValue = json.stringify(key)
                      + colonSeparator
                      + value;
                  out.push(indent + space + keyValue);
              }
              seen.splice(seen.indexOf(node), 1);
              return '{' + out.join(',') + indent + '}';
          }
      })({ '': obj }, '', obj, 0);
  };

  var isArray$1 = Array.isArray || function (x) {
      return {}.toString.call(x) === '[object Array]';
  };

  var objectKeys = Object.keys || function (obj) {
      var has = Object.prototype.hasOwnProperty || function () { return true };
      var keys = [];
      for (var key in obj) {
          if (has.call(obj, key)) keys.push(key);
      }
      return keys;
  };

  const stringify$3 = jsonStableStringify;

  var rpcCacheUtils = {
    cacheIdentifierForPayload: cacheIdentifierForPayload$1,
    canCache: canCache$1,
    blockTagForPayload: blockTagForPayload$2,
    paramsWithoutBlockTag: paramsWithoutBlockTag$1,
    blockTagParamIndex: blockTagParamIndex$1,
    cacheTypeForPayload: cacheTypeForPayload$1,
  };

  function cacheIdentifierForPayload$1(payload, opts = {}){
    if (!canCache$1(payload)) return null
    const { includeBlockRef } = opts;
    const params = includeBlockRef ? payload.params : paramsWithoutBlockTag$1(payload);
    return payload.method + ':' + stringify$3(params)
  }

  function canCache$1(payload){
    return cacheTypeForPayload$1(payload) !== 'never'
  }

  function blockTagForPayload$2(payload){
    var index = blockTagParamIndex$1(payload);

    // Block tag param not passed.
    if (index >= payload.params.length) {
      return null;
    }

    return payload.params[index];
  }

  function paramsWithoutBlockTag$1(payload){
    var index = blockTagParamIndex$1(payload);

    // Block tag param not passed.
    if (index >= payload.params.length) {
      return payload.params;
    }

    // eth_getBlockByNumber has the block tag first, then the optional includeTx? param
    if (payload.method === 'eth_getBlockByNumber') {
      return payload.params.slice(1);
    }

    return payload.params.slice(0,index);
  }

  function blockTagParamIndex$1(payload){
    switch(payload.method) {
      // blockTag is third param
      case 'eth_getStorageAt':
        return 2
      // blockTag is second param
      case 'eth_getBalance':
      case 'eth_getCode':
      case 'eth_getTransactionCount':
      case 'eth_call':
      case 'eth_estimateGas':
        return 1
      // blockTag is first param
      case 'eth_getBlockByNumber':
        return 0
      // there is no blockTag
      default:
        return undefined
    }
  }

  function cacheTypeForPayload$1(payload) {
    switch (payload.method) {
      // cache permanently
      case 'web3_clientVersion':
      case 'web3_sha3':
      case 'eth_protocolVersion':
      case 'eth_getBlockTransactionCountByHash':
      case 'eth_getUncleCountByBlockHash':
      case 'eth_getCode':
      case 'eth_getBlockByHash':
      case 'eth_getTransactionByHash':
      case 'eth_getTransactionByBlockHashAndIndex':
      case 'eth_getTransactionReceipt':
      case 'eth_getUncleByBlockHashAndIndex':
      case 'eth_getCompilers':
      case 'eth_compileLLL':
      case 'eth_compileSolidity':
      case 'eth_compileSerpent':
      case 'shh_version':
        return 'perma'

      // cache until fork
      case 'eth_getBlockByNumber':
      case 'eth_getBlockTransactionCountByNumber':
      case 'eth_getUncleCountByBlockNumber':
      case 'eth_getTransactionByBlockNumberAndIndex':
      case 'eth_getUncleByBlockNumberAndIndex':
        return 'fork'

      // cache for block
      case 'eth_gasPrice':
      case 'eth_getBalance':
      case 'eth_getStorageAt':
      case 'eth_getTransactionCount':
      case 'eth_call':
      case 'eth_estimateGas':
      case 'eth_getFilterLogs':
      case 'eth_getLogs':
      case 'eth_blockNumber':
        return 'block'

      // never cache
      case 'net_version':
      case 'net_peerCount':
      case 'net_listening':
      case 'eth_syncing':
      case 'eth_sign':
      case 'eth_coinbase':
      case 'eth_mining':
      case 'eth_hashrate':
      case 'eth_accounts':
      case 'eth_sendTransaction':
      case 'eth_sendRawTransaction':
      case 'eth_newFilter':
      case 'eth_newBlockFilter':
      case 'eth_newPendingTransactionFilter':
      case 'eth_uninstallFilter':
      case 'eth_getFilterChanges':
      case 'eth_getWork':
      case 'eth_submitWork':
      case 'eth_submitHashrate':
      case 'db_putString':
      case 'db_getString':
      case 'db_putHex':
      case 'db_getHex':
      case 'shh_post':
      case 'shh_newIdentity':
      case 'shh_hasIdentity':
      case 'shh_newGroup':
      case 'shh_addToGroup':
      case 'shh_newFilter':
      case 'shh_uninstallFilter':
      case 'shh_getFilterChanges':
      case 'shh_getMessages':
        return 'never'
    }
  }

  var randomId = createRandomId;


  function createRandomId () {
    // random id
    return Math.floor(Number.MAX_SAFE_INTEGER * Math.random())
  }

  const getRandomId = randomId;
  const extend$1 = immutable;

  var createPayload_1 = createPayload$3;


  function createPayload$3(data){
    return extend$1({
      // defaults
      id: getRandomId(),
      jsonrpc: '2.0',
      params: [],
      // user-specified
    }, data)
  }

  const EventEmitter = require$$0__default$3["default"].EventEmitter;
  const inherits$3 = require$$0__default$4["default"].inherits;
  const ethUtil$4 = dist$4;
  const EthBlockTracker = polling;
  const map = map$2.exports;
  const eachSeries = eachSeries$1.exports;
  const Stoplight = stoplight;
  const createPayload$2 = createPayload_1;
  const noop = function(){};

  var web3ProviderEngine = Web3ProviderEngine;


  inherits$3(Web3ProviderEngine, EventEmitter);

  function Web3ProviderEngine(opts) {
    const self = this;
    EventEmitter.call(self);
    self.setMaxListeners(30);
    // parse options
    opts = opts || {};

    // block polling
    const directProvider = { sendAsync: self._handleAsync.bind(self) };
    const blockTrackerProvider = opts.blockTrackerProvider || directProvider;
    self._blockTracker = opts.blockTracker || new EthBlockTracker({
      provider: blockTrackerProvider,
      pollingInterval: opts.pollingInterval || 4000,
      setSkipCacheFlag: true,
    });

    // set initialization blocker
    self._ready = new Stoplight();

    // local state
    self.currentBlock = null;
    self._providers = [];
  }

  // public

  Web3ProviderEngine.prototype.start = function(cb = noop){
    const self = this;

    // trigger start
    self._ready.go();

    // on new block, request block body and emit as events
    self._blockTracker.on('latest', (blockNumber) => {
      // get block body
      self._getBlockByNumberWithRetry(blockNumber, (err, block) => {
        if (err) {
          this.emit('error', err);
          return
        }
        if (!block) {
          console.log(block);
          this.emit('error', new Error("Could not find block"));
          return
        }
        const bufferBlock = toBufferBlock(block);
        // set current + emit "block" event
        self._setCurrentBlock(bufferBlock);
        // emit other events
        self.emit('rawBlock', block);
        self.emit('latest', block);
      });
    });

    // forward other events
    self._blockTracker.on('sync', self.emit.bind(self, 'sync'));
    self._blockTracker.on('error', self.emit.bind(self, 'error'));

    // update state
    self._running = true;
    // signal that we started
    self.emit('start');
  };

  Web3ProviderEngine.prototype.stop = function(){
    const self = this;
    // stop block polling by removing event listeners
    self._blockTracker.removeAllListeners();
    // update state
    self._running = false;
    // signal that we stopped
    self.emit('stop');
  };

  Web3ProviderEngine.prototype.isRunning = function(){
    const self = this;
    return self._running
  };

  Web3ProviderEngine.prototype.addProvider = function(source, index){
    const self = this;
    if (typeof index === 'number') {
      self._providers.splice(index, 0, source);
    } else {
      self._providers.push(source);
    }
    source.setEngine(this);
  };

  Web3ProviderEngine.prototype.removeProvider = function(source){
    const self = this;
    const index = self._providers.indexOf(source);
    if (index < 0) throw new Error('Provider not found.')
    self._providers.splice(index, 1);
  };

  Web3ProviderEngine.prototype.send = function(payload){
    throw new Error('Web3ProviderEngine does not support synchronous requests.')
  };

  Web3ProviderEngine.prototype.sendAsync = function(payload, cb){
    const self = this;
    self._ready.await(function(){

      if (Array.isArray(payload)) {
        // handle batch
        map(payload, self._handleAsync.bind(self), cb);
      } else {
        // handle single
        self._handleAsync(payload, cb);
      }

    });
  };

  // private

  Web3ProviderEngine.prototype._getBlockByNumberWithRetry = function(blockNumber, cb) {
    const self = this;

    let retriesRemaining = 5;

    attemptRequest();
    return

    function attemptRequest () {
      self._getBlockByNumber(blockNumber, afterRequest);
    }

    function afterRequest (err, block) {
      // anomalous error occurred
      if (err) return cb(err)
      // block not ready yet
      if (!block) {
        if (retriesRemaining > 0) {
          // wait 1s then try again
          retriesRemaining--;
          setTimeout(function () {
            attemptRequest();
          }, 1000);
          return
        } else {
          // give up, return a null block
          cb(null, null);
          return
        }
      }
      // otherwise return result
      cb(null, block);
      return
    }
  };


  Web3ProviderEngine.prototype._getBlockByNumber = function(blockNumber, cb) {
    const req = createPayload$2({ method: 'eth_getBlockByNumber', params: [blockNumber, false], skipCache: true });
    this._handleAsync(req, (err, res) => {
      if (err) return cb(err)
      return cb(null, res.result)
    });
  };

  Web3ProviderEngine.prototype._handleAsync = function(payload, finished) {
    var self = this;
    var currentProvider = -1;
    var result = null;
    var error = null;

    var stack = [];

    next();

    function next(after) {
      currentProvider += 1;
      stack.unshift(after);

      // Bubbled down as far as we could go, and the request wasn't
      // handled. Return an error.
      if (currentProvider >= self._providers.length) {
        end(new Error('Request for method "' + payload.method + '" not handled by any subprovider. Please check your subprovider configuration to ensure this method is handled.'));
      } else {
        try {
          var provider = self._providers[currentProvider];
          provider.handleRequest(payload, next, end);
        } catch (e) {
          end(e);
        }
      }
    }

    function end(_error, _result) {
      error = _error;
      result = _result;

      eachSeries(stack, function(fn, callback) {

        if (fn) {
          fn(error, result, callback);
        } else {
          callback();
        }
      }, function() {

        var resultObj = {
          id: payload.id,
          jsonrpc: payload.jsonrpc,
          result: result
        };

        if (error != null) {
          resultObj.error = {
            message: error.stack || error.message || error,
            code: -32000
          };
          // respond with both error formats
          finished(error, resultObj);
        } else {
          finished(null, resultObj);
        }
      });
    }
  };

  //
  // from remote-data
  //

  Web3ProviderEngine.prototype._setCurrentBlock = function(block){
    const self = this;
    self.currentBlock = block;
    self.emit('block', block);
  };

  // util

  function toBufferBlock (jsonBlock) {
    return {
      number:           ethUtil$4.toBuffer(jsonBlock.number),
      hash:             ethUtil$4.toBuffer(jsonBlock.hash),
      parentHash:       ethUtil$4.toBuffer(jsonBlock.parentHash),
      nonce:            ethUtil$4.toBuffer(jsonBlock.nonce),
      mixHash:          ethUtil$4.toBuffer(jsonBlock.mixHash),
      sha3Uncles:       ethUtil$4.toBuffer(jsonBlock.sha3Uncles),
      logsBloom:        ethUtil$4.toBuffer(jsonBlock.logsBloom),
      transactionsRoot: ethUtil$4.toBuffer(jsonBlock.transactionsRoot),
      stateRoot:        ethUtil$4.toBuffer(jsonBlock.stateRoot),
      receiptsRoot:     ethUtil$4.toBuffer(jsonBlock.receiptRoot || jsonBlock.receiptsRoot),
      miner:            ethUtil$4.toBuffer(jsonBlock.miner),
      difficulty:       ethUtil$4.toBuffer(jsonBlock.difficulty),
      totalDifficulty:  ethUtil$4.toBuffer(jsonBlock.totalDifficulty),
      size:             ethUtil$4.toBuffer(jsonBlock.size),
      extraData:        ethUtil$4.toBuffer(jsonBlock.extraData),
      gasLimit:         ethUtil$4.toBuffer(jsonBlock.gasLimit),
      gasUsed:          ethUtil$4.toBuffer(jsonBlock.gasUsed),
      timestamp:        ethUtil$4.toBuffer(jsonBlock.timestamp),
      transactions:     jsonBlock.transactions,
    }
  }

  const createPayload$1 = createPayload_1;

  var subprovider = SubProvider;

  // this is the base class for a subprovider -- mostly helpers


  function SubProvider() {

  }

  SubProvider.prototype.setEngine = function(engine) {
    const self = this;
    if (self.engine) return
    self.engine = engine;
    engine.on('block', function(block) {
      self.currentBlock = block;
    });

    engine.on('start', function () {
      self.start();
    });

    engine.on('stop', function () {
      self.stop();
    });
  };

  SubProvider.prototype.handleRequest = function(payload, next, end) {
    throw new Error('Subproviders should override `handleRequest`.')
  };

  SubProvider.prototype.emitPayload = function(payload, cb){
    const self = this;
    self.engine.sendAsync(createPayload$1(payload), cb);
  };

  // dummies for overriding

  SubProvider.prototype.stop = function () {};

  SubProvider.prototype.start = function () {};

  const Subprovider$3 = subprovider;

  // wraps a json-rpc-engine middleware in a subprovider interface

  class JsonRpcEngineMiddlewareSubprovider extends Subprovider$3 {

    // take a constructorFn to call once we have a reference to the engine
    constructor (constructorFn) {
      super();
      if (!constructorFn) throw new Error('JsonRpcEngineMiddlewareSubprovider - no constructorFn specified')
      this._constructorFn = constructorFn;
    }

    // this is called once the subprovider has been added to the provider engine
    setEngine (engine) {
      if (this.middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - subprovider added to engine twice')
      const blockTracker = engine._blockTracker;
      const middleware = this._constructorFn({ engine, provider: engine, blockTracker });
      if (!middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - _constructorFn did not return middleware')
      if (typeof middleware !== 'function') throw new Error('JsonRpcEngineMiddlewareSubprovider - specified middleware is not a function')
      this.middleware = middleware;
    }

    handleRequest (req, provEngNext, provEngEnd) {
      const res = { id: req.id };
      this.middleware(req, res, middlewareNext, middlewareEnd);

      function middlewareNext (handler) {
        provEngNext((err, result, cb) => {
          // update response object with result or error
          if (err) {
            delete res.result;
            res.error = { message: err.message || err };
          } else {
            res.result = result;
          }
          // call middleware's next handler (even if error)
          if (handler) {
            handler(cb);
          } else {
            cb();
          }
        });
      }

      function middlewareEnd (err) {
        if (err) return provEngEnd(err)
        provEngEnd(null, res.result);
      }
    }

  }

  var jsonRpcEngineMiddleware = JsonRpcEngineMiddlewareSubprovider;

  const stringify$2 = jsonStableStringify;

  var cacheUtils$1 = {
    cacheIdentifierForPayload: cacheIdentifierForPayload,
    canCache: canCache,
    blockTagForPayload: blockTagForPayload$1,
    paramsWithoutBlockTag: paramsWithoutBlockTag,
    blockTagParamIndex: blockTagParamIndex,
    cacheTypeForPayload: cacheTypeForPayload
  };

  function cacheIdentifierForPayload (payload, skipBlockRef) {
    const simpleParams = skipBlockRef ? paramsWithoutBlockTag(payload) : payload.params;
    if (canCache(payload)) {
      return payload.method + ':' + stringify$2(simpleParams)
    } else {
      return null
    }
  }

  function canCache (payload) {
    return cacheTypeForPayload(payload) !== 'never'
  }

  function blockTagForPayload$1 (payload) {
    let index = blockTagParamIndex(payload);

    // Block tag param not passed.
    if (index >= payload.params.length) {
      return null
    }

    return payload.params[index]
  }

  function paramsWithoutBlockTag (payload) {
    const index = blockTagParamIndex(payload);

    // Block tag param not passed.
    if (index >= payload.params.length) {
      return payload.params
    }

    // eth_getBlockByNumber has the block tag first, then the optional includeTx? param
    if (payload.method === 'eth_getBlockByNumber') {
      return payload.params.slice(1)
    }

    return payload.params.slice(0, index)
  }

  function blockTagParamIndex (payload) {
    switch (payload.method) {
      // blockTag is at index 2
      case 'eth_getStorageAt':
        return 2
      // blockTag is at index 1
      case 'eth_getBalance':
      case 'eth_getCode':
      case 'eth_getTransactionCount':
      case 'eth_call':
        return 1
      // blockTag is at index 0
      case 'eth_getBlockByNumber':
        return 0
      // there is no blockTag
      default:
        return undefined
    }
  }

  function cacheTypeForPayload (payload) {
    switch (payload.method) {
      // cache permanently
      case 'web3_clientVersion':
      case 'web3_sha3':
      case 'eth_protocolVersion':
      case 'eth_getBlockTransactionCountByHash':
      case 'eth_getUncleCountByBlockHash':
      case 'eth_getCode':
      case 'eth_getBlockByHash':
      case 'eth_getTransactionByHash':
      case 'eth_getTransactionByBlockHashAndIndex':
      case 'eth_getTransactionReceipt':
      case 'eth_getUncleByBlockHashAndIndex':
      case 'eth_getCompilers':
      case 'eth_compileLLL':
      case 'eth_compileSolidity':
      case 'eth_compileSerpent':
      case 'shh_version':
      case 'test_permaCache':
        return 'perma'

      // cache until fork
      case 'eth_getBlockByNumber':
      case 'eth_getBlockTransactionCountByNumber':
      case 'eth_getUncleCountByBlockNumber':
      case 'eth_getTransactionByBlockNumberAndIndex':
      case 'eth_getUncleByBlockNumberAndIndex':
      case 'test_forkCache':
        return 'fork'

      // cache for block
      case 'eth_gasPrice':
      case 'eth_blockNumber':
      case 'eth_getBalance':
      case 'eth_getStorageAt':
      case 'eth_getTransactionCount':
      case 'eth_call':
      case 'eth_estimateGas':
      case 'eth_getFilterLogs':
      case 'eth_getLogs':
      case 'test_blockCache':
        return 'block'

      // never cache
      case 'net_version':
      case 'net_peerCount':
      case 'net_listening':
      case 'eth_syncing':
      case 'eth_sign':
      case 'eth_coinbase':
      case 'eth_mining':
      case 'eth_hashrate':
      case 'eth_accounts':
      case 'eth_sendTransaction':
      case 'eth_sendRawTransaction':
      case 'eth_newFilter':
      case 'eth_newBlockFilter':
      case 'eth_newPendingTransactionFilter':
      case 'eth_uninstallFilter':
      case 'eth_getFilterChanges':
      case 'eth_getWork':
      case 'eth_submitWork':
      case 'eth_submitHashrate':
      case 'db_putString':
      case 'db_getString':
      case 'db_putHex':
      case 'db_getHex':
      case 'shh_post':
      case 'shh_newIdentity':
      case 'shh_hasIdentity':
      case 'shh_newGroup':
      case 'shh_addToGroup':
      case 'shh_newFilter':
      case 'shh_uninstallFilter':
      case 'shh_getFilterChanges':
      case 'shh_getMessages':
      case 'test_neverCache':
        return 'never'
    }
  }

  /**
   * JsonRpcEngine only accepts callback-based middleware directly.
   * createAsyncMiddleware exists to enable consumers to pass in async middleware
   * functions.
   *
   * Async middleware have no "end" function. Instead, they "end" if they return
   * without calling "next". Rather than passing in explicit return handlers,
   * async middleware can simply await "next", and perform operations on the
   * response object when execution resumes.
   *
   * To accomplish this, createAsyncMiddleware passes the async middleware a
   * wrapped "next" function. That function calls the internal JsonRpcEngine
   * "next" function with a return handler that resolves a promise when called.
   *
   * The return handler will always be called. Its resolution of the promise
   * enables the control flow described above.
   */

  var createAsyncMiddleware$5 = function createAsyncMiddleware (asyncMiddleware) {
    return (req, res, next, end) => {

      // nextPromise is the key to the implementation
      // it is resolved by the return handler passed to the
      // "next" function
      let resolveNextPromise;
      const nextPromise = new Promise((resolve) => {
        resolveNextPromise = resolve;
      });

      let returnHandlerCallback, nextWasCalled;

      const asyncNext = async () => {

        nextWasCalled = true;

        next((callback) => { // eslint-disable-line callback-return
          returnHandlerCallback = callback;
          resolveNextPromise();
        });
        await nextPromise;
      };

      asyncMiddleware(req, res, asyncNext)
        .then(async () => {
          if (nextWasCalled) {
            await nextPromise; // we must wait until the return handler is called
            returnHandlerCallback(null);
          } else {
            end(null);
          }
        })
        .catch((error) => {
          if (returnHandlerCallback) {
            returnHandlerCallback(error);
          } else {
            end(error);
          }
        });
    }
  };

  const cacheUtils = cacheUtils$1;
  const createAsyncMiddleware$4 = createAsyncMiddleware$5;
  // `<nil>` comes from https://github.com/ethereum/go-ethereum/issues/16925
  const emptyValues = [undefined, null, '\u003cnil\u003e'];

  var blockCache = createBlockCacheMiddleware$1;


  function createBlockCacheMiddleware$1(opts = {}) {
    // validate options
    const { blockTracker } = opts;
    if (!blockTracker) throw new Error('createBlockCacheMiddleware - No BlockTracker specified')

    // create caching strategies
    const blockCache = new BlockCacheStrategy();
    const strategies = {
      perma: blockCache,
      block: blockCache,
      fork: blockCache,
    };

    return createAsyncMiddleware$4(async (req, res, next) => {
      // allow cach to be skipped if so specified
      if (req.skipCache) {
        return next()
      }
      // check type and matching strategy
      const type = cacheUtils.cacheTypeForPayload(req);
      const strategy = strategies[type];
      // If there's no strategy in place, pass it down the chain.
      if (!strategy) {
        return next()
      }
      // If the strategy can't cache this request, ignore it.
      if (!strategy.canCacheRequest(req)) {
        return next()
      }

      // get block reference (number or keyword)
      let blockTag = cacheUtils.blockTagForPayload(req);
      if (!blockTag) blockTag = 'latest';

      // get exact block number
      let requestedBlockNumber;
      if (blockTag === 'earliest') {
        // this just exists for symmetry with "latest"
        requestedBlockNumber = '0x00';
      } else if (blockTag === 'latest') {
        // fetch latest block number
        const latestBlockNumber = await blockTracker.getLatestBlock();
        // clear all cache before latest block
        blockCache.clearBefore(latestBlockNumber);
        requestedBlockNumber = latestBlockNumber;
      } else {
        // We have a hex number
        requestedBlockNumber = blockTag;
      }

      // end on a hit, continue on a miss
      const cacheResult = await strategy.get(req, requestedBlockNumber);
      if (cacheResult === undefined) {
        // cache miss
        // wait for other middleware to handle request
        await next();
        // add result to cache
        await strategy.set(req, requestedBlockNumber, res.result);
      } else {
        // fill in result from cache
        res.result = cacheResult;
      }
    })
  }


  //
  // Cache Strategies
  //

  class BlockCacheStrategy {
    
    constructor () {
      this.cache = {};
    }

    getBlockCacheForPayload (payload, blockNumberHex) {
      const blockNumber = Number.parseInt(blockNumberHex, 16);
      let blockCache = this.cache[blockNumber];
      // create new cache if necesary
      if (!blockCache) {
        const newCache = {};
        this.cache[blockNumber] = newCache;
        blockCache = newCache;
      }
      return blockCache
    }

    async get (payload, requestedBlockNumber) {
      // lookup block cache
      const blockCache = this.getBlockCacheForPayload(payload, requestedBlockNumber);
      if (!blockCache) return
      // lookup payload in block cache
      const identifier = cacheUtils.cacheIdentifierForPayload(payload, true);
      const cached = blockCache[identifier];
      // may be undefined
      return cached
    }

    async set (payload, requestedBlockNumber, result) {
      // check if we can cached this result
      const canCache = this.canCacheResult(payload, result);
      if (!canCache) return
      // set the value in the cache
      const blockCache = this.getBlockCacheForPayload(payload, requestedBlockNumber);
      const identifier = cacheUtils.cacheIdentifierForPayload(payload, true);
      blockCache[identifier] = result;
    }

    canCacheRequest (payload) {
      // check request method
      if (!cacheUtils.canCache(payload)) {
        return false
      }
      // check blockTag
      const blockTag = cacheUtils.blockTagForPayload(payload);
      if (blockTag === 'pending') {
        return false
      }
      // can be cached
      return true
    }

    canCacheResult (payload, result) {
      // never cache empty values (e.g. undefined)
      if (emptyValues.includes(result)) return
      // check if transactions have block reference before caching
      if (['eth_getTransactionByHash', 'eth_getTransactionReceipt'].includes(payload.method)) {
        if (!result || !result.blockHash || result.blockHash === '0x0000000000000000000000000000000000000000000000000000000000000000') {
          return false
        }
      }
      // otherwise true
      return true
    }

    // removes all block caches with block number lower than `oldBlockHex`
    clearBefore (oldBlockHex){
      const self = this;
      const oldBlockNumber = Number.parseInt(oldBlockHex, 16);
      // clear old caches
      Object.keys(self.cache)
        .map(Number)
        .filter(num => num < oldBlockNumber)
        .forEach(num => delete self.cache[num]);
    }

  }

  const ProviderSubprovider$2 = jsonRpcEngineMiddleware;
  const createBlockCacheMiddleware = blockCache;

  class BlockCacheSubprovider extends ProviderSubprovider$2 {
    constructor(opts) {
      super(({ blockTracker }) => createBlockCacheMiddleware(Object.assign({ blockTracker }, opts)));
    }
  }

  var cache = BlockCacheSubprovider;

  const inherits$2 = require$$0__default$4["default"].inherits;
  const Subprovider$2 = subprovider;

  var fixture = FixtureProvider;

  inherits$2(FixtureProvider, Subprovider$2);

  function FixtureProvider(staticResponses){
    const self = this;
    staticResponses = staticResponses || {};
    self.staticResponses = staticResponses;
  }

  FixtureProvider.prototype.handleRequest = function(payload, next, end){
    const self = this;
    var staticResponse = self.staticResponses[payload.method];
    // async function
    if ('function' === typeof staticResponse) {
      staticResponse(payload, next, end);
    // static response - null is valid response
    } else if (staticResponse !== undefined) {
      // return result asynchronously
      setTimeout(() => end(null, staticResponse));
    // no prepared response - skip
    } else {
      next();
    }
  };

  var lib$1 = {};

  var Mutex$2 = {};

  var Semaphore$2 = {};

  Object.defineProperty(Semaphore$2, "__esModule", { value: true });
  var tslib_1$3 = require$$0$1;
  var Semaphore$1 = /** @class */ (function () {
      function Semaphore(_maxConcurrency) {
          this._maxConcurrency = _maxConcurrency;
          this._queue = [];
          if (_maxConcurrency <= 0) {
              throw new Error('semaphore must be initialized to a positive value');
          }
          this._value = _maxConcurrency;
      }
      Semaphore.prototype.acquire = function () {
          var _this = this;
          var locked = this.isLocked();
          var ticket = new Promise(function (r) { return _this._queue.push(r); });
          if (!locked)
              this._dispatch();
          return ticket;
      };
      Semaphore.prototype.runExclusive = function (callback) {
          return tslib_1$3.__awaiter(this, void 0, void 0, function () {
              var _a, value, release;
              return tslib_1$3.__generator(this, function (_b) {
                  switch (_b.label) {
                      case 0: return [4 /*yield*/, this.acquire()];
                      case 1:
                          _a = _b.sent(), value = _a[0], release = _a[1];
                          _b.label = 2;
                      case 2:
                          _b.trys.push([2, , 4, 5]);
                          return [4 /*yield*/, callback(value)];
                      case 3: return [2 /*return*/, _b.sent()];
                      case 4:
                          release();
                          return [7 /*endfinally*/];
                      case 5: return [2 /*return*/];
                  }
              });
          });
      };
      Semaphore.prototype.isLocked = function () {
          return this._value <= 0;
      };
      Semaphore.prototype.release = function () {
          if (this._maxConcurrency > 1) {
              throw new Error('this method is unavailabel on semaphores with concurrency > 1; use the scoped release returned by acquire instead');
          }
          if (this._currentReleaser) {
              var releaser = this._currentReleaser;
              this._currentReleaser = undefined;
              releaser();
          }
      };
      Semaphore.prototype._dispatch = function () {
          var _this = this;
          var nextConsumer = this._queue.shift();
          if (!nextConsumer)
              return;
          var released = false;
          this._currentReleaser = function () {
              if (released)
                  return;
              released = true;
              _this._value++;
              _this._dispatch();
          };
          nextConsumer([this._value--, this._currentReleaser]);
      };
      return Semaphore;
  }());
  Semaphore$2.default = Semaphore$1;

  Object.defineProperty(Mutex$2, "__esModule", { value: true });
  var tslib_1$2 = require$$0$1;
  var Semaphore_1 = Semaphore$2;
  var Mutex$1 = /** @class */ (function () {
      function Mutex() {
          this._semaphore = new Semaphore_1.default(1);
      }
      Mutex.prototype.acquire = function () {
          return tslib_1$2.__awaiter(this, void 0, void 0, function () {
              var _a, releaser;
              return tslib_1$2.__generator(this, function (_b) {
                  switch (_b.label) {
                      case 0: return [4 /*yield*/, this._semaphore.acquire()];
                      case 1:
                          _a = _b.sent(), releaser = _a[1];
                          return [2 /*return*/, releaser];
                  }
              });
          });
      };
      Mutex.prototype.runExclusive = function (callback) {
          return this._semaphore.runExclusive(function () { return callback(); });
      };
      Mutex.prototype.isLocked = function () {
          return this._semaphore.isLocked();
      };
      Mutex.prototype.release = function () {
          this._semaphore.release();
      };
      return Mutex;
  }());
  Mutex$2.default = Mutex$1;

  var withTimeout$1 = {};

  Object.defineProperty(withTimeout$1, "__esModule", { value: true });
  withTimeout$1.withTimeout = void 0;
  var tslib_1$1 = require$$0$1;
  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
  function withTimeout(sync, timeout, timeoutError) {
      var _this = this;
      if (timeoutError === void 0) { timeoutError = new Error('timeout'); }
      return {
          acquire: function () {
              return new Promise(function (resolve, reject) { return tslib_1$1.__awaiter(_this, void 0, void 0, function () {
                  var isTimeout, ticket, release;
                  return tslib_1$1.__generator(this, function (_a) {
                      switch (_a.label) {
                          case 0:
                              isTimeout = false;
                              setTimeout(function () {
                                  isTimeout = true;
                                  reject(timeoutError);
                              }, timeout);
                              return [4 /*yield*/, sync.acquire()];
                          case 1:
                              ticket = _a.sent();
                              if (isTimeout) {
                                  release = Array.isArray(ticket) ? ticket[1] : ticket;
                                  release();
                              }
                              else {
                                  resolve(ticket);
                              }
                              return [2 /*return*/];
                      }
                  });
              }); });
          },
          runExclusive: function (callback) {
              return tslib_1$1.__awaiter(this, void 0, void 0, function () {
                  var release, ticket;
                  return tslib_1$1.__generator(this, function (_a) {
                      switch (_a.label) {
                          case 0:
                              release = function () { return undefined; };
                              _a.label = 1;
                          case 1:
                              _a.trys.push([1, , 7, 8]);
                              return [4 /*yield*/, this.acquire()];
                          case 2:
                              ticket = _a.sent();
                              if (!Array.isArray(ticket)) return [3 /*break*/, 4];
                              release = ticket[1];
                              return [4 /*yield*/, callback(ticket[0])];
                          case 3: return [2 /*return*/, _a.sent()];
                          case 4:
                              release = ticket;
                              return [4 /*yield*/, callback()];
                          case 5: return [2 /*return*/, _a.sent()];
                          case 6: return [3 /*break*/, 8];
                          case 7:
                              release();
                              return [7 /*endfinally*/];
                          case 8: return [2 /*return*/];
                      }
                  });
              });
          },
          release: function () {
              sync.release();
          },
          isLocked: function () { return sync.isLocked(); },
      };
  }
  withTimeout$1.withTimeout = withTimeout;

  (function (exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.withTimeout = exports.Semaphore = exports.Mutex = void 0;
  var Mutex_1 = Mutex$2;
  Object.defineProperty(exports, "Mutex", { enumerable: true, get: function () { return Mutex_1.default; } });
  var Semaphore_1 = Semaphore$2;
  Object.defineProperty(exports, "Semaphore", { enumerable: true, get: function () { return Semaphore_1.default; } });
  var withTimeout_1 = withTimeout$1;
  Object.defineProperty(exports, "withTimeout", { enumerable: true, get: function () { return withTimeout_1.withTimeout; } });
  }(lib$1));

  var dist$2 = {};

  var idRemapMiddleware = {};

  var getUniqueId$1 = {};

  Object.defineProperty(getUniqueId$1, "__esModule", { value: true });
  getUniqueId$1.getUniqueId = void 0;
  // uint32 (two's complement) max
  // more conservative than Number.MAX_SAFE_INTEGER
  const MAX = 4294967295;
  let idCounter = Math.floor(Math.random() * MAX);
  function getUniqueId() {
      idCounter = (idCounter + 1) % MAX;
      return idCounter;
  }
  getUniqueId$1.getUniqueId = getUniqueId;

  Object.defineProperty(idRemapMiddleware, "__esModule", { value: true });
  idRemapMiddleware.createIdRemapMiddleware = void 0;
  const getUniqueId_1 = getUniqueId$1;
  function createIdRemapMiddleware() {
      return (req, res, next, _end) => {
          const originalId = req.id;
          const newId = getUniqueId_1.getUniqueId();
          req.id = newId;
          res.id = newId;
          next((done) => {
              req.id = originalId;
              res.id = originalId;
              done();
          });
      };
  }
  idRemapMiddleware.createIdRemapMiddleware = createIdRemapMiddleware;

  var createAsyncMiddleware$3 = {};

  Object.defineProperty(createAsyncMiddleware$3, "__esModule", { value: true });
  createAsyncMiddleware$3.createAsyncMiddleware = void 0;
  /**
   * JsonRpcEngine only accepts callback-based middleware directly.
   * createAsyncMiddleware exists to enable consumers to pass in async middleware
   * functions.
   *
   * Async middleware have no "end" function. Instead, they "end" if they return
   * without calling "next". Rather than passing in explicit return handlers,
   * async middleware can simply await "next", and perform operations on the
   * response object when execution resumes.
   *
   * To accomplish this, createAsyncMiddleware passes the async middleware a
   * wrapped "next" function. That function calls the internal JsonRpcEngine
   * "next" function with a return handler that resolves a promise when called.
   *
   * The return handler will always be called. Its resolution of the promise
   * enables the control flow described above.
   */
  function createAsyncMiddleware$2(asyncMiddleware) {
      return async (req, res, next, end) => {
          // nextPromise is the key to the implementation
          // it is resolved by the return handler passed to the
          // "next" function
          let resolveNextPromise;
          const nextPromise = new Promise((resolve) => {
              resolveNextPromise = resolve;
          });
          let returnHandlerCallback = null;
          let nextWasCalled = false;
          // This will be called by the consumer's async middleware.
          const asyncNext = async () => {
              nextWasCalled = true;
              // We pass a return handler to next(). When it is called by the engine,
              // the consumer's async middleware will resume executing.
              // eslint-disable-next-line node/callback-return
              next((runReturnHandlersCallback) => {
                  // This callback comes from JsonRpcEngine._runReturnHandlers
                  returnHandlerCallback = runReturnHandlersCallback;
                  resolveNextPromise();
              });
              await nextPromise;
          };
          try {
              await asyncMiddleware(req, res, asyncNext);
              if (nextWasCalled) {
                  await nextPromise; // we must wait until the return handler is called
                  returnHandlerCallback(null);
              }
              else {
                  end(null);
              }
          }
          catch (error) {
              if (returnHandlerCallback) {
                  returnHandlerCallback(error);
              }
              else {
                  end(error);
              }
          }
      };
  }
  createAsyncMiddleware$3.createAsyncMiddleware = createAsyncMiddleware$2;

  var createScaffoldMiddleware$3 = {};

  Object.defineProperty(createScaffoldMiddleware$3, "__esModule", { value: true });
  createScaffoldMiddleware$3.createScaffoldMiddleware = void 0;
  function createScaffoldMiddleware$2(handlers) {
      return (req, res, next, end) => {
          const handler = handlers[req.method];
          // if no handler, return
          if (handler === undefined) {
              return next();
          }
          // if handler is fn, call as middleware
          if (typeof handler === 'function') {
              return handler(req, res, next, end);
          }
          // if handler is some other value, use as result
          res.result = handler;
          return end();
      };
  }
  createScaffoldMiddleware$3.createScaffoldMiddleware = createScaffoldMiddleware$2;

  var JsonRpcEngine$1 = {};

  var safeEventEmitter = {};

  Object.defineProperty(safeEventEmitter, "__esModule", { value: true });
  const events_1 = require$$0__default$3["default"];
  function safeApply(handler, context, args) {
      try {
          Reflect.apply(handler, context, args);
      }
      catch (err) {
          // Throw error after timeout so as not to interrupt the stack
          setTimeout(() => {
              throw err;
          });
      }
  }
  function arrayClone(arr) {
      const n = arr.length;
      const copy = new Array(n);
      for (let i = 0; i < n; i += 1) {
          copy[i] = arr[i];
      }
      return copy;
  }
  class SafeEventEmitter$2 extends events_1.EventEmitter {
      emit(type, ...args) {
          let doError = type === 'error';
          const events = this._events;
          if (events !== undefined) {
              doError = doError && events.error === undefined;
          }
          else if (!doError) {
              return false;
          }
          // If there is no 'error' event listener then throw.
          if (doError) {
              let er;
              if (args.length > 0) {
                  [er] = args;
              }
              if (er instanceof Error) {
                  // Note: The comments on the `throw` lines are intentional, they show
                  // up in Node's output if this results in an unhandled exception.
                  throw er; // Unhandled 'error' event
              }
              // At least give some kind of context to the user
              const err = new Error(`Unhandled error.${er ? ` (${er.message})` : ''}`);
              err.context = er;
              throw err; // Unhandled 'error' event
          }
          const handler = events[type];
          if (handler === undefined) {
              return false;
          }
          if (typeof handler === 'function') {
              safeApply(handler, this, args);
          }
          else {
              const len = handler.length;
              const listeners = arrayClone(handler);
              for (let i = 0; i < len; i += 1) {
                  safeApply(listeners[i], this, args);
              }
          }
          return true;
      }
  }
  safeEventEmitter.default = SafeEventEmitter$2;

  var dist$1 = {};

  var classes = {};

  var fastSafeStringify = stringify$1;
  stringify$1.default = stringify$1;
  stringify$1.stable = deterministicStringify;
  stringify$1.stableStringify = deterministicStringify;

  var LIMIT_REPLACE_NODE = '[...]';
  var CIRCULAR_REPLACE_NODE = '[Circular]';

  var arr = [];
  var replacerStack = [];

  function defaultOptions () {
    return {
      depthLimit: Number.MAX_SAFE_INTEGER,
      edgesLimit: Number.MAX_SAFE_INTEGER
    }
  }

  // Regular stringify
  function stringify$1 (obj, replacer, spacer, options) {
    if (typeof options === 'undefined') {
      options = defaultOptions();
    }

    decirc(obj, '', 0, [], undefined, 0, options);
    var res;
    try {
      if (replacerStack.length === 0) {
        res = JSON.stringify(obj, replacer, spacer);
      } else {
        res = JSON.stringify(obj, replaceGetterValues(replacer), spacer);
      }
    } catch (_) {
      return JSON.stringify('[unable to serialize, circular reference is too complex to analyze]')
    } finally {
      while (arr.length !== 0) {
        var part = arr.pop();
        if (part.length === 4) {
          Object.defineProperty(part[0], part[1], part[3]);
        } else {
          part[0][part[1]] = part[2];
        }
      }
    }
    return res
  }

  function setReplace (replace, val, k, parent) {
    var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k);
    if (propertyDescriptor.get !== undefined) {
      if (propertyDescriptor.configurable) {
        Object.defineProperty(parent, k, { value: replace });
        arr.push([parent, k, val, propertyDescriptor]);
      } else {
        replacerStack.push([val, k, replace]);
      }
    } else {
      parent[k] = replace;
      arr.push([parent, k, val]);
    }
  }

  function decirc (val, k, edgeIndex, stack, parent, depth, options) {
    depth += 1;
    var i;
    if (typeof val === 'object' && val !== null) {
      for (i = 0; i < stack.length; i++) {
        if (stack[i] === val) {
          setReplace(CIRCULAR_REPLACE_NODE, val, k, parent);
          return
        }
      }

      if (
        typeof options.depthLimit !== 'undefined' &&
        depth > options.depthLimit
      ) {
        setReplace(LIMIT_REPLACE_NODE, val, k, parent);
        return
      }

      if (
        typeof options.edgesLimit !== 'undefined' &&
        edgeIndex + 1 > options.edgesLimit
      ) {
        setReplace(LIMIT_REPLACE_NODE, val, k, parent);
        return
      }

      stack.push(val);
      // Optimize for Arrays. Big arrays could kill the performance otherwise!
      if (Array.isArray(val)) {
        for (i = 0; i < val.length; i++) {
          decirc(val[i], i, i, stack, val, depth, options);
        }
      } else {
        var keys = Object.keys(val);
        for (i = 0; i < keys.length; i++) {
          var key = keys[i];
          decirc(val[key], key, i, stack, val, depth, options);
        }
      }
      stack.pop();
    }
  }

  // Stable-stringify
  function compareFunction (a, b) {
    if (a < b) {
      return -1
    }
    if (a > b) {
      return 1
    }
    return 0
  }

  function deterministicStringify (obj, replacer, spacer, options) {
    if (typeof options === 'undefined') {
      options = defaultOptions();
    }

    var tmp = deterministicDecirc(obj, '', 0, [], undefined, 0, options) || obj;
    var res;
    try {
      if (replacerStack.length === 0) {
        res = JSON.stringify(tmp, replacer, spacer);
      } else {
        res = JSON.stringify(tmp, replaceGetterValues(replacer), spacer);
      }
    } catch (_) {
      return JSON.stringify('[unable to serialize, circular reference is too complex to analyze]')
    } finally {
      // Ensure that we restore the object as it was.
      while (arr.length !== 0) {
        var part = arr.pop();
        if (part.length === 4) {
          Object.defineProperty(part[0], part[1], part[3]);
        } else {
          part[0][part[1]] = part[2];
        }
      }
    }
    return res
  }

  function deterministicDecirc (val, k, edgeIndex, stack, parent, depth, options) {
    depth += 1;
    var i;
    if (typeof val === 'object' && val !== null) {
      for (i = 0; i < stack.length; i++) {
        if (stack[i] === val) {
          setReplace(CIRCULAR_REPLACE_NODE, val, k, parent);
          return
        }
      }
      try {
        if (typeof val.toJSON === 'function') {
          return
        }
      } catch (_) {
        return
      }

      if (
        typeof options.depthLimit !== 'undefined' &&
        depth > options.depthLimit
      ) {
        setReplace(LIMIT_REPLACE_NODE, val, k, parent);
        return
      }

      if (
        typeof options.edgesLimit !== 'undefined' &&
        edgeIndex + 1 > options.edgesLimit
      ) {
        setReplace(LIMIT_REPLACE_NODE, val, k, parent);
        return
      }

      stack.push(val);
      // Optimize for Arrays. Big arrays could kill the performance otherwise!
      if (Array.isArray(val)) {
        for (i = 0; i < val.length; i++) {
          deterministicDecirc(val[i], i, i, stack, val, depth, options);
        }
      } else {
        // Create a temporary object in the required way
        var tmp = {};
        var keys = Object.keys(val).sort(compareFunction);
        for (i = 0; i < keys.length; i++) {
          var key = keys[i];
          deterministicDecirc(val[key], key, i, stack, val, depth, options);
          tmp[key] = val[key];
        }
        if (typeof parent !== 'undefined') {
          arr.push([parent, k, val]);
          parent[k] = tmp;
        } else {
          return tmp
        }
      }
      stack.pop();
    }
  }

  // wraps replacer function to handle values we couldn't replace
  // and mark them as replaced value
  function replaceGetterValues (replacer) {
    replacer =
      typeof replacer !== 'undefined'
        ? replacer
        : function (k, v) {
          return v
        };
    return function (key, val) {
      if (replacerStack.length > 0) {
        for (var i = 0; i < replacerStack.length; i++) {
          var part = replacerStack[i];
          if (part[1] === key && part[0] === val) {
            val = part[2];
            replacerStack.splice(i, 1);
            break
          }
        }
      }
      return replacer.call(this, key, val)
    }
  }

  Object.defineProperty(classes, "__esModule", { value: true });
  classes.EthereumProviderError = classes.EthereumRpcError = void 0;
  const fast_safe_stringify_1 = fastSafeStringify;
  /**
   * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors
   * per EIP-1474.
   * Permits any integer error code.
   */
  class EthereumRpcError extends Error {
      constructor(code, message, data) {
          if (!Number.isInteger(code)) {
              throw new Error('"code" must be an integer.');
          }
          if (!message || typeof message !== 'string') {
              throw new Error('"message" must be a nonempty string.');
          }
          super(message);
          this.code = code;
          if (data !== undefined) {
              this.data = data;
          }
      }
      /**
       * Returns a plain object with all public class properties.
       */
      serialize() {
          const serialized = {
              code: this.code,
              message: this.message,
          };
          if (this.data !== undefined) {
              serialized.data = this.data;
          }
          if (this.stack) {
              serialized.stack = this.stack;
          }
          return serialized;
      }
      /**
       * Return a string representation of the serialized error, omitting
       * any circular references.
       */
      toString() {
          return fast_safe_stringify_1.default(this.serialize(), stringifyReplacer, 2);
      }
  }
  classes.EthereumRpcError = EthereumRpcError;
  /**
   * Error subclass implementing Ethereum Provider errors per EIP-1193.
   * Permits integer error codes in the [ 1000 <= 4999 ] range.
   */
  class EthereumProviderError extends EthereumRpcError {
      /**
       * Create an Ethereum Provider JSON-RPC error.
       * `code` must be an integer in the 1000 <= 4999 range.
       */
      constructor(code, message, data) {
          if (!isValidEthProviderCode(code)) {
              throw new Error('"code" must be an integer such that: 1000 <= code <= 4999');
          }
          super(code, message, data);
      }
  }
  classes.EthereumProviderError = EthereumProviderError;
  // Internal
  function isValidEthProviderCode(code) {
      return Number.isInteger(code) && code >= 1000 && code <= 4999;
  }
  function stringifyReplacer(_, value) {
      if (value === '[Circular]') {
          return undefined;
      }
      return value;
  }

  var utils$1 = {};

  var errorConstants = {};

  Object.defineProperty(errorConstants, "__esModule", { value: true });
  errorConstants.errorValues = errorConstants.errorCodes = void 0;
  errorConstants.errorCodes = {
      rpc: {
          invalidInput: -32000,
          resourceNotFound: -32001,
          resourceUnavailable: -32002,
          transactionRejected: -32003,
          methodNotSupported: -32004,
          limitExceeded: -32005,
          parse: -32700,
          invalidRequest: -32600,
          methodNotFound: -32601,
          invalidParams: -32602,
          internal: -32603,
      },
      provider: {
          userRejectedRequest: 4001,
          unauthorized: 4100,
          unsupportedMethod: 4200,
          disconnected: 4900,
          chainDisconnected: 4901,
      },
  };
  errorConstants.errorValues = {
      '-32700': {
          standard: 'JSON RPC 2.0',
          message: 'Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.',
      },
      '-32600': {
          standard: 'JSON RPC 2.0',
          message: 'The JSON sent is not a valid Request object.',
      },
      '-32601': {
          standard: 'JSON RPC 2.0',
          message: 'The method does not exist / is not available.',
      },
      '-32602': {
          standard: 'JSON RPC 2.0',
          message: 'Invalid method parameter(s).',
      },
      '-32603': {
          standard: 'JSON RPC 2.0',
          message: 'Internal JSON-RPC error.',
      },
      '-32000': {
          standard: 'EIP-1474',
          message: 'Invalid input.',
      },
      '-32001': {
          standard: 'EIP-1474',
          message: 'Resource not found.',
      },
      '-32002': {
          standard: 'EIP-1474',
          message: 'Resource unavailable.',
      },
      '-32003': {
          standard: 'EIP-1474',
          message: 'Transaction rejected.',
      },
      '-32004': {
          standard: 'EIP-1474',
          message: 'Method not supported.',
      },
      '-32005': {
          standard: 'EIP-1474',
          message: 'Request limit exceeded.',
      },
      '4001': {
          standard: 'EIP-1193',
          message: 'User rejected the request.',
      },
      '4100': {
          standard: 'EIP-1193',
          message: 'The requested account and/or method has not been authorized by the user.',
      },
      '4200': {
          standard: 'EIP-1193',
          message: 'The requested method is not supported by this Ethereum provider.',
      },
      '4900': {
          standard: 'EIP-1193',
          message: 'The provider is disconnected from all chains.',
      },
      '4901': {
          standard: 'EIP-1193',
          message: 'The provider is disconnected from the specified chain.',
      },
  };

  (function (exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.serializeError = exports.isValidCode = exports.getMessageFromCode = exports.JSON_RPC_SERVER_ERROR_MESSAGE = void 0;
  const error_constants_1 = errorConstants;
  const classes_1 = classes;
  const FALLBACK_ERROR_CODE = error_constants_1.errorCodes.rpc.internal;
  const FALLBACK_MESSAGE = 'Unspecified error message. This is a bug, please report it.';
  const FALLBACK_ERROR = {
      code: FALLBACK_ERROR_CODE,
      message: getMessageFromCode(FALLBACK_ERROR_CODE),
  };
  exports.JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.';
  /**
   * Gets the message for a given code, or a fallback message if the code has
   * no corresponding message.
   */
  function getMessageFromCode(code, fallbackMessage = FALLBACK_MESSAGE) {
      if (Number.isInteger(code)) {
          const codeString = code.toString();
          if (hasKey(error_constants_1.errorValues, codeString)) {
              return error_constants_1.errorValues[codeString].message;
          }
          if (isJsonRpcServerError(code)) {
              return exports.JSON_RPC_SERVER_ERROR_MESSAGE;
          }
      }
      return fallbackMessage;
  }
  exports.getMessageFromCode = getMessageFromCode;
  /**
   * Returns whether the given code is valid.
   * A code is only valid if it has a message.
   */
  function isValidCode(code) {
      if (!Number.isInteger(code)) {
          return false;
      }
      const codeString = code.toString();
      if (error_constants_1.errorValues[codeString]) {
          return true;
      }
      if (isJsonRpcServerError(code)) {
          return true;
      }
      return false;
  }
  exports.isValidCode = isValidCode;
  /**
   * Serializes the given error to an Ethereum JSON RPC-compatible error object.
   * Merely copies the given error's values if it is already compatible.
   * If the given error is not fully compatible, it will be preserved on the
   * returned object's data.originalError property.
   */
  function serializeError(error, { fallbackError = FALLBACK_ERROR, shouldIncludeStack = false, } = {}) {
      var _a, _b;
      if (!fallbackError ||
          !Number.isInteger(fallbackError.code) ||
          typeof fallbackError.message !== 'string') {
          throw new Error('Must provide fallback error with integer number code and string message.');
      }
      if (error instanceof classes_1.EthereumRpcError) {
          return error.serialize();
      }
      const serialized = {};
      if (error &&
          typeof error === 'object' &&
          !Array.isArray(error) &&
          hasKey(error, 'code') &&
          isValidCode(error.code)) {
          const _error = error;
          serialized.code = _error.code;
          if (_error.message && typeof _error.message === 'string') {
              serialized.message = _error.message;
              if (hasKey(_error, 'data')) {
                  serialized.data = _error.data;
              }
          }
          else {
              serialized.message = getMessageFromCode(serialized.code);
              serialized.data = { originalError: assignOriginalError(error) };
          }
      }
      else {
          serialized.code = fallbackError.code;
          const message = (_a = error) === null || _a === void 0 ? void 0 : _a.message;
          serialized.message = (message && typeof message === 'string'
              ? message
              : fallbackError.message);
          serialized.data = { originalError: assignOriginalError(error) };
      }
      const stack = (_b = error) === null || _b === void 0 ? void 0 : _b.stack;
      if (shouldIncludeStack && error && stack && typeof stack === 'string') {
          serialized.stack = stack;
      }
      return serialized;
  }
  exports.serializeError = serializeError;
  // Internal
  function isJsonRpcServerError(code) {
      return code >= -32099 && code <= -32000;
  }
  function assignOriginalError(error) {
      if (error && typeof error === 'object' && !Array.isArray(error)) {
          return Object.assign({}, error);
      }
      return error;
  }
  function hasKey(obj, key) {
      return Object.prototype.hasOwnProperty.call(obj, key);
  }

  }(utils$1));

  var errors = {};

  Object.defineProperty(errors, "__esModule", { value: true });
  errors.ethErrors = void 0;
  const classes_1 = classes;
  const utils_1$1 = utils$1;
  const error_constants_1 = errorConstants;
  errors.ethErrors = {
      rpc: {
          /**
           * Get a JSON RPC 2.0 Parse (-32700) error.
           */
          parse: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.parse, arg),
          /**
           * Get a JSON RPC 2.0 Invalid Request (-32600) error.
           */
          invalidRequest: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidRequest, arg),
          /**
           * Get a JSON RPC 2.0 Invalid Params (-32602) error.
           */
          invalidParams: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidParams, arg),
          /**
           * Get a JSON RPC 2.0 Method Not Found (-32601) error.
           */
          methodNotFound: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotFound, arg),
          /**
           * Get a JSON RPC 2.0 Internal (-32603) error.
           */
          internal: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.internal, arg),
          /**
           * Get a JSON RPC 2.0 Server error.
           * Permits integer error codes in the [ -32099 <= -32005 ] range.
           * Codes -32000 through -32004 are reserved by EIP-1474.
           */
          server: (opts) => {
              if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {
                  throw new Error('Ethereum RPC Server errors must provide single object argument.');
              }
              const { code } = opts;
              if (!Number.isInteger(code) || code > -32005 || code < -32099) {
                  throw new Error('"code" must be an integer such that: -32099 <= code <= -32005');
              }
              return getEthJsonRpcError(code, opts);
          },
          /**
           * Get an Ethereum JSON RPC Invalid Input (-32000) error.
           */
          invalidInput: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidInput, arg),
          /**
           * Get an Ethereum JSON RPC Resource Not Found (-32001) error.
           */
          resourceNotFound: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceNotFound, arg),
          /**
           * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.
           */
          resourceUnavailable: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceUnavailable, arg),
          /**
           * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.
           */
          transactionRejected: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.transactionRejected, arg),
          /**
           * Get an Ethereum JSON RPC Method Not Supported (-32004) error.
           */
          methodNotSupported: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotSupported, arg),
          /**
           * Get an Ethereum JSON RPC Limit Exceeded (-32005) error.
           */
          limitExceeded: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.limitExceeded, arg),
      },
      provider: {
          /**
           * Get an Ethereum Provider User Rejected Request (4001) error.
           */
          userRejectedRequest: (arg) => {
              return getEthProviderError(error_constants_1.errorCodes.provider.userRejectedRequest, arg);
          },
          /**
           * Get an Ethereum Provider Unauthorized (4100) error.
           */
          unauthorized: (arg) => {
              return getEthProviderError(error_constants_1.errorCodes.provider.unauthorized, arg);
          },
          /**
           * Get an Ethereum Provider Unsupported Method (4200) error.
           */
          unsupportedMethod: (arg) => {
              return getEthProviderError(error_constants_1.errorCodes.provider.unsupportedMethod, arg);
          },
          /**
           * Get an Ethereum Provider Not Connected (4900) error.
           */
          disconnected: (arg) => {
              return getEthProviderError(error_constants_1.errorCodes.provider.disconnected, arg);
          },
          /**
           * Get an Ethereum Provider Chain Not Connected (4901) error.
           */
          chainDisconnected: (arg) => {
              return getEthProviderError(error_constants_1.errorCodes.provider.chainDisconnected, arg);
          },
          /**
           * Get a custom Ethereum Provider error.
           */
          custom: (opts) => {
              if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {
                  throw new Error('Ethereum Provider custom errors must provide single object argument.');
              }
              const { code, message, data } = opts;
              if (!message || typeof message !== 'string') {
                  throw new Error('"message" must be a nonempty string');
              }
              return new classes_1.EthereumProviderError(code, message, data);
          },
      },
  };
  // Internal
  function getEthJsonRpcError(code, arg) {
      const [message, data] = parseOpts(arg);
      return new classes_1.EthereumRpcError(code, message || utils_1$1.getMessageFromCode(code), data);
  }
  function getEthProviderError(code, arg) {
      const [message, data] = parseOpts(arg);
      return new classes_1.EthereumProviderError(code, message || utils_1$1.getMessageFromCode(code), data);
  }
  function parseOpts(arg) {
      if (arg) {
          if (typeof arg === 'string') {
              return [arg];
          }
          else if (typeof arg === 'object' && !Array.isArray(arg)) {
              const { message, data } = arg;
              if (message && typeof message !== 'string') {
                  throw new Error('Must specify string message.');
              }
              return [message || undefined, data];
          }
      }
      return [];
  }

  (function (exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getMessageFromCode = exports.serializeError = exports.EthereumProviderError = exports.EthereumRpcError = exports.ethErrors = exports.errorCodes = void 0;
  const classes_1 = classes;
  Object.defineProperty(exports, "EthereumRpcError", { enumerable: true, get: function () { return classes_1.EthereumRpcError; } });
  Object.defineProperty(exports, "EthereumProviderError", { enumerable: true, get: function () { return classes_1.EthereumProviderError; } });
  const utils_1 = utils$1;
  Object.defineProperty(exports, "serializeError", { enumerable: true, get: function () { return utils_1.serializeError; } });
  Object.defineProperty(exports, "getMessageFromCode", { enumerable: true, get: function () { return utils_1.getMessageFromCode; } });
  const errors_1 = errors;
  Object.defineProperty(exports, "ethErrors", { enumerable: true, get: function () { return errors_1.ethErrors; } });
  const error_constants_1 = errorConstants;
  Object.defineProperty(exports, "errorCodes", { enumerable: true, get: function () { return error_constants_1.errorCodes; } });

  }(dist$1));

  var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
      return (mod && mod.__esModule) ? mod : { "default": mod };
  };
  Object.defineProperty(JsonRpcEngine$1, "__esModule", { value: true });
  JsonRpcEngine$1.JsonRpcEngine = void 0;
  const safe_event_emitter_1 = __importDefault(safeEventEmitter);
  const eth_rpc_errors_1 = dist$1;
  /**
   * A JSON-RPC request and response processor.
   * Give it a stack of middleware, pass it requests, and get back responses.
   */
  class JsonRpcEngine extends safe_event_emitter_1.default {
      constructor() {
          super();
          this._middleware = [];
      }
      /**
       * Add a middleware function to the engine's middleware stack.
       *
       * @param middleware - The middleware function to add.
       */
      push(middleware) {
          this._middleware.push(middleware);
      }
      handle(req, cb) {
          if (cb && typeof cb !== 'function') {
              throw new Error('"callback" must be a function if provided.');
          }
          if (Array.isArray(req)) {
              if (cb) {
                  return this._handleBatch(req, cb);
              }
              return this._handleBatch(req);
          }
          if (cb) {
              return this._handle(req, cb);
          }
          return this._promiseHandle(req);
      }
      /**
       * Returns this engine as a middleware function that can be pushed to other
       * engines.
       *
       * @returns This engine as a middleware function.
       */
      asMiddleware() {
          return async (req, res, next, end) => {
              try {
                  const [middlewareError, isComplete, returnHandlers,] = await JsonRpcEngine._runAllMiddleware(req, res, this._middleware);
                  if (isComplete) {
                      await JsonRpcEngine._runReturnHandlers(returnHandlers);
                      return end(middlewareError);
                  }
                  return next(async (handlerCallback) => {
                      try {
                          await JsonRpcEngine._runReturnHandlers(returnHandlers);
                      }
                      catch (error) {
                          return handlerCallback(error);
                      }
                      return handlerCallback();
                  });
              }
              catch (error) {
                  return end(error);
              }
          };
      }
      async _handleBatch(reqs, cb) {
          // The order here is important
          try {
              // 2. Wait for all requests to finish, or throw on some kind of fatal
              // error
              const responses = await Promise.all(
              // 1. Begin executing each request in the order received
              reqs.map(this._promiseHandle.bind(this)));
              // 3. Return batch response
              if (cb) {
                  return cb(null, responses);
              }
              return responses;
          }
          catch (error) {
              if (cb) {
                  return cb(error);
              }
              throw error;
          }
      }
      /**
       * A promise-wrapped _handle.
       */
      _promiseHandle(req) {
          return new Promise((resolve) => {
              this._handle(req, (_err, res) => {
                  // There will always be a response, and it will always have any error
                  // that is caught and propagated.
                  resolve(res);
              });
          });
      }
      /**
       * Ensures that the request object is valid, processes it, and passes any
       * error and the response object to the given callback.
       *
       * Does not reject.
       */
      async _handle(callerReq, cb) {
          if (!callerReq ||
              Array.isArray(callerReq) ||
              typeof callerReq !== 'object') {
              const error = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, `Requests must be plain objects. Received: ${typeof callerReq}`, { request: callerReq });
              return cb(error, { id: undefined, jsonrpc: '2.0', error });
          }
          if (typeof callerReq.method !== 'string') {
              const error = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, `Must specify a string method. Received: ${typeof callerReq.method}`, { request: callerReq });
              return cb(error, { id: callerReq.id, jsonrpc: '2.0', error });
          }
          const req = Object.assign({}, callerReq);
          const res = {
              id: req.id,
              jsonrpc: req.jsonrpc,
          };
          let error = null;
          try {
              await this._processRequest(req, res);
          }
          catch (_error) {
              // A request handler error, a re-thrown middleware error, or something
              // unexpected.
              error = _error;
          }
          if (error) {
              // Ensure no result is present on an errored response
              delete res.result;
              if (!res.error) {
                  res.error = eth_rpc_errors_1.serializeError(error);
              }
          }
          return cb(error, res);
      }
      /**
       * For the given request and response, runs all middleware and their return
       * handlers, if any, and ensures that internal request processing semantics
       * are satisfied.
       */
      async _processRequest(req, res) {
          const [error, isComplete, returnHandlers,] = await JsonRpcEngine._runAllMiddleware(req, res, this._middleware);
          // Throw if "end" was not called, or if the response has neither a result
          // nor an error.
          JsonRpcEngine._checkForCompletion(req, res, isComplete);
          // The return handlers should run even if an error was encountered during
          // middleware processing.
          await JsonRpcEngine._runReturnHandlers(returnHandlers);
          // Now we re-throw the middleware processing error, if any, to catch it
          // further up the call chain.
          if (error) {
              throw error;
          }
      }
      /**
       * Serially executes the given stack of middleware.
       *
       * @returns An array of any error encountered during middleware execution,
       * a boolean indicating whether the request was completed, and an array of
       * middleware-defined return handlers.
       */
      static async _runAllMiddleware(req, res, middlewareStack) {
          const returnHandlers = [];
          let error = null;
          let isComplete = false;
          // Go down stack of middleware, call and collect optional returnHandlers
          for (const middleware of middlewareStack) {
              [error, isComplete] = await JsonRpcEngine._runMiddleware(req, res, middleware, returnHandlers);
              if (isComplete) {
                  break;
              }
          }
          return [error, isComplete, returnHandlers.reverse()];
      }
      /**
       * Runs an individual middleware.
       *
       * @returns An array of any error encountered during middleware exection,
       * and a boolean indicating whether the request should end.
       */
      static _runMiddleware(req, res, middleware, returnHandlers) {
          return new Promise((resolve) => {
              const end = (err) => {
                  const error = err || res.error;
                  if (error) {
                      res.error = eth_rpc_errors_1.serializeError(error);
                  }
                  // True indicates that the request should end
                  resolve([error, true]);
              };
              const next = (returnHandler) => {
                  if (res.error) {
                      end(res.error);
                  }
                  else {
                      if (returnHandler) {
                          if (typeof returnHandler !== 'function') {
                              end(new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: "next" return handlers must be functions. ` +
                                  `Received "${typeof returnHandler}" for request:\n${jsonify(req)}`, { request: req }));
                          }
                          returnHandlers.push(returnHandler);
                      }
                      // False indicates that the request should not end
                      resolve([null, false]);
                  }
              };
              try {
                  middleware(req, res, next, end);
              }
              catch (error) {
                  end(error);
              }
          });
      }
      /**
       * Serially executes array of return handlers. The request and response are
       * assumed to be in their scope.
       */
      static async _runReturnHandlers(handlers) {
          for (const handler of handlers) {
              await new Promise((resolve, reject) => {
                  handler((err) => (err ? reject(err) : resolve()));
              });
          }
      }
      /**
       * Throws an error if the response has neither a result nor an error, or if
       * the "isComplete" flag is falsy.
       */
      static _checkForCompletion(req, res, isComplete) {
          if (!('result' in res) && !('error' in res)) {
              throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: Response has no error or result for request:\n${jsonify(req)}`, { request: req });
          }
          if (!isComplete) {
              throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: Nothing ended request:\n${jsonify(req)}`, { request: req });
          }
      }
  }
  JsonRpcEngine$1.JsonRpcEngine = JsonRpcEngine;
  function jsonify(request) {
      return JSON.stringify(request, null, 2);
  }

  var mergeMiddleware$1 = {};

  Object.defineProperty(mergeMiddleware$1, "__esModule", { value: true });
  mergeMiddleware$1.mergeMiddleware = void 0;
  const JsonRpcEngine_1 = JsonRpcEngine$1;
  function mergeMiddleware(middlewareStack) {
      const engine = new JsonRpcEngine_1.JsonRpcEngine();
      middlewareStack.forEach((middleware) => engine.push(middleware));
      return engine.asMiddleware();
  }
  mergeMiddleware$1.mergeMiddleware = mergeMiddleware;

  (function (exports) {
  var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
  }) : (function(o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
  }));
  var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  __exportStar(idRemapMiddleware, exports);
  __exportStar(createAsyncMiddleware$3, exports);
  __exportStar(createScaffoldMiddleware$3, exports);
  __exportStar(getUniqueId$1, exports);
  __exportStar(JsonRpcEngine$1, exports);
  __exportStar(mergeMiddleware$1, exports);

  }(dist$2));

  var createScaffoldMiddleware$1 = function createScaffoldMiddleware (handlers) {
    return (req, res, next, end) => {
      const handler = handlers[req.method];
      // if no handler, return
      if (handler === undefined) {
        return next()
      }
      // if handler is fn, call as middleware
      if (typeof handler === 'function') {
        return handler(req, res, next, end)
      }
      // if handler is some other value, use as result
      res.result = handler;
      return end()
    }
  };

  // for backwards compat
  var scaffold = createScaffoldMiddleware$1;

  const processFn = (fn, options, proxy, unwrapped) => function (...arguments_) {
  	const P = options.promiseModule;

  	return new P((resolve, reject) => {
  		if (options.multiArgs) {
  			arguments_.push((...result) => {
  				if (options.errorFirst) {
  					if (result[0]) {
  						reject(result);
  					} else {
  						result.shift();
  						resolve(result);
  					}
  				} else {
  					resolve(result);
  				}
  			});
  		} else if (options.errorFirst) {
  			arguments_.push((error, result) => {
  				if (error) {
  					reject(error);
  				} else {
  					resolve(result);
  				}
  			});
  		} else {
  			arguments_.push(resolve);
  		}

  		const self = this === proxy ? unwrapped : this;
  		Reflect.apply(fn, self, arguments_);
  	});
  };

  const filterCache = new WeakMap();

  var pify$1 = (input, options) => {
  	options = {
  		exclude: [/.+(?:Sync|Stream)$/],
  		errorFirst: true,
  		promiseModule: Promise,
  		...options
  	};

  	const objectType = typeof input;
  	if (!(input !== null && (objectType === 'object' || objectType === 'function'))) {
  		throw new TypeError(`Expected \`input\` to be a \`Function\` or \`Object\`, got \`${input === null ? 'null' : objectType}\``);
  	}

  	const filter = (target, key) => {
  		let cached = filterCache.get(target);

  		if (!cached) {
  			cached = {};
  			filterCache.set(target, cached);
  		}

  		if (key in cached) {
  			return cached[key];
  		}

  		const match = pattern => (typeof pattern === 'string' || typeof key === 'symbol') ? key === pattern : pattern.test(key);
  		const desc = Reflect.getOwnPropertyDescriptor(target, key);
  		const writableOrConfigurableOwn = (desc === undefined || desc.writable || desc.configurable);
  		const included = options.include ? options.include.some(match) : !options.exclude.some(match);
  		const shouldFilter = included && writableOrConfigurableOwn;
  		cached[key] = shouldFilter;
  		return shouldFilter;
  	};

  	const cache = new WeakMap();

  	const proxy = new Proxy(input, {
  		apply(target, thisArg, args) {
  			const cached = cache.get(target);

  			if (cached) {
  				return Reflect.apply(cached, thisArg, args);
  			}

  			const pified = options.excludeMain ? target : processFn(target, options, proxy, target);
  			cache.set(target, pified);
  			return Reflect.apply(pified, thisArg, args);
  		},

  		get(target, key) {
  			const property = target[key];

  			// eslint-disable-next-line no-use-extend-native/no-use-extend-native
  			if (!filter(target, key) || property === Function.prototype[key]) {
  				return property;
  			}

  			const cached = cache.get(property);

  			if (cached) {
  				return cached;
  			}

  			if (typeof property === 'function') {
  				const pified = processFn(property, options, proxy, target);
  				cache.set(property, pified);
  				return pified;
  			}

  			return property;
  		}
  	});

  	return proxy;
  };

  const SafeEventEmitter$1 = safeEventEmitter.default;

  class BaseFilter$3 extends SafeEventEmitter$1 {

    constructor () {
      super();
      this.updates = [];
    }

    async initialize () {}

    async update () {
      throw new Error('BaseFilter - no update method specified')
    }

    addResults (newResults) {
      this.updates = this.updates.concat(newResults);
      newResults.forEach(result => this.emit('update', result));
    }

    addInitialResults (newResults) {}

    getChangesAndClear () {
      const updates = this.updates;
      this.updates = [];
      return updates
    }
    
  }

  var baseFilter = BaseFilter$3;

  const BaseFilter$2 = baseFilter;

  // tracks all results ever recorded
  class BaseFilterWithHistory$1 extends BaseFilter$2 {

    constructor () {
      super();
      this.allResults = [];
    }

    async update () {
      throw new Error('BaseFilterWithHistory - no update method specified')
    }

    addResults (newResults) {
      this.allResults = this.allResults.concat(newResults);
      super.addResults(newResults);
    }

    addInitialResults (newResults) {
      this.allResults = this.allResults.concat(newResults);
      super.addInitialResults(newResults);
    }

    getAllResults () {
      return this.allResults
    }

  }

  var baseFilterHistory = BaseFilterWithHistory$1;

  var hexUtils = {
    minBlockRef: minBlockRef$1,
    maxBlockRef,
    sortBlockRefs,
    bnToHex: bnToHex$1,
    blockRefIsNumber: blockRefIsNumber$1,
    hexToInt: hexToInt$3,
    incrementHexInt: incrementHexInt$4,
    intToHex: intToHex$2,
    unsafeRandomBytes: unsafeRandomBytes$1,
  };

  function minBlockRef$1(...refs) {
    const sortedRefs = sortBlockRefs(refs);
    return sortedRefs[0]
  }

  function maxBlockRef(...refs) {
    const sortedRefs = sortBlockRefs(refs);
    return sortedRefs[sortedRefs.length-1]
  }

  function sortBlockRefs(refs) {
    return refs.sort((refA, refB) => {
      if (refA === 'latest' || refB === 'earliest') return 1
      if (refB === 'latest' || refA === 'earliest') return -1
      return hexToInt$3(refA) - hexToInt$3(refB)
    })
  }

  function bnToHex$1(bn) {
    return '0x' + bn.toString(16)
  }

  function blockRefIsNumber$1(blockRef){
    return blockRef && !['earliest', 'latest', 'pending'].includes(blockRef)
  }

  function hexToInt$3(hexString) {
    if (hexString === undefined || hexString === null) return hexString
    return Number.parseInt(hexString, 16)
  }

  function incrementHexInt$4(hexString){
    if (hexString === undefined || hexString === null) return hexString
    const value = hexToInt$3(hexString);
    return intToHex$2(value + 1)
  }

  function intToHex$2(int) {
    if (int === undefined || int === null) return int
    let hexString = int.toString(16);
    const needsLeftPad = hexString.length % 2;
    if (needsLeftPad) hexString = '0' + hexString;
    return '0x' + hexString
  }

  function unsafeRandomBytes$1(byteCount) {
    let result = '0x';
    for (let i = 0; i < byteCount; i++) {
      result += unsafeRandomNibble();
      result += unsafeRandomNibble();
    }
    return result
  }

  function unsafeRandomNibble() {
    return Math.floor(Math.random() * 16).toString(16)
  }

  const EthQuery = ethQuery;
  const pify = pify$1;
  const BaseFilterWithHistory = baseFilterHistory;
  const { bnToHex, hexToInt: hexToInt$2, incrementHexInt: incrementHexInt$3, minBlockRef, blockRefIsNumber } = hexUtils;

  class LogFilter$1 extends BaseFilterWithHistory {

    constructor ({ provider, params }) {
      super();
      this.type = 'log';
      this.ethQuery = new EthQuery(provider);
      this.params = Object.assign({
        fromBlock: 'latest',
        toBlock: 'latest',
        address: undefined,
        topics: [],
      }, params);
      // normalize address parameter
      if (this.params.address) {
        // ensure array
        if (!Array.isArray(this.params.address)) {
          this.params.address = [this.params.address];
        }
        // ensure lowercase
        this.params.address = this.params.address.map(address => address.toLowerCase());
      }
    }

    async initialize({ currentBlock }) {
      // resolve params.fromBlock
      let fromBlock = this.params.fromBlock;
      if (['latest', 'pending'].includes(fromBlock)) fromBlock = currentBlock;
      if ('earliest' === fromBlock) fromBlock = '0x0';
      this.params.fromBlock = fromBlock;
      // set toBlock for initial lookup
      const toBlock = minBlockRef(this.params.toBlock, currentBlock);
      const params = Object.assign({}, this.params, { toBlock });
      // fetch logs and add to results
      const newLogs = await this._fetchLogs(params);
      this.addInitialResults(newLogs);
    }

    async update ({ oldBlock, newBlock }) {
      // configure params for this update
      const toBlock = newBlock;
      let fromBlock;
      // oldBlock is empty on first sync
      if (oldBlock) {
        fromBlock = incrementHexInt$3(oldBlock);
      } else {
        fromBlock = newBlock;
      }
      // fetch logs
      const params = Object.assign({}, this.params, { fromBlock, toBlock });
      const newLogs = await this._fetchLogs(params);
      const matchingLogs = newLogs.filter(log => this.matchLog(log));

      // add to results
      this.addResults(matchingLogs);
    }

    async _fetchLogs (params) {
      const newLogs = await pify(cb => this.ethQuery.getLogs(params, cb))();
      // add to results
      return newLogs
    }

    matchLog(log) {
      // check if block number in bounds:
      if (hexToInt$2(this.params.fromBlock) >= hexToInt$2(log.blockNumber)) return false
      if (blockRefIsNumber(this.params.toBlock) && hexToInt$2(this.params.toBlock) <= hexToInt$2(log.blockNumber)) return false

      // address is correct:
      const normalizedLogAddress = log.address && log.address.toLowerCase();
      if (this.params.address && normalizedLogAddress && !this.params.address.includes(normalizedLogAddress)) return false

      // topics match:
      // topics are position-dependant
      // topics can be nested to represent `or` [[a || b], c]
      // topics can be null, representing a wild card for that position
      const topicsMatch = this.params.topics.every((topicPattern, index) => {
        // pattern is longer than actual topics
        let logTopic = log.topics[index];
        if (!logTopic) return false
        logTopic = logTopic.toLowerCase();
        // normalize subTopics
        let subtopicsToMatch = Array.isArray(topicPattern) ? topicPattern : [topicPattern];
        // check for wild card
        const subtopicsIncludeWildcard = subtopicsToMatch.includes(null);
        if (subtopicsIncludeWildcard) return true
        subtopicsToMatch = subtopicsToMatch.map(topic => topic.toLowerCase());
        // check each possible matching topic
        const topicDoesMatch = subtopicsToMatch.includes(logTopic);
        return topicDoesMatch
      });

      return topicsMatch
    }

  }

  var logFilter = LogFilter$1;

  var getBlocksForRange_1 = getBlocksForRange$3;

  async function getBlocksForRange$3({ provider, fromBlock, toBlock }) {
    if (!fromBlock) fromBlock = toBlock;

    const fromBlockNumber = hexToInt$1(fromBlock);
    const toBlockNumber = hexToInt$1(toBlock);
    const blockCountToQuery = toBlockNumber - fromBlockNumber + 1;
    // load all blocks from old to new (inclusive)
    const missingBlockNumbers = Array(blockCountToQuery).fill()
                                .map((_,index) => fromBlockNumber + index)
                                .map(intToHex$1);
    const blockBodies = await Promise.all(
      missingBlockNumbers.map(blockNum => query(provider, 'eth_getBlockByNumber', [blockNum, false]))
    );
    return blockBodies
  }

  function hexToInt$1(hexString) {
    if (hexString === undefined || hexString === null) return hexString
    return Number.parseInt(hexString, 16)
  }

  function intToHex$1(int) {
    if (int === undefined || int === null) return int
    const hexString = int.toString(16);
    return '0x' + hexString
  }

  function query(provider, method, params) {
    return new Promise((resolve, reject) => {
      provider.sendAsync({ id: 1, jsonrpc: '2.0', method, params }, (err, res) => {
        if (err) return reject(err)
        resolve(res.result);
      });
    })
  }

  const BaseFilter$1 = baseFilter;
  const getBlocksForRange$2 = getBlocksForRange_1;
  const { incrementHexInt: incrementHexInt$2 } = hexUtils;

  class BlockFilter$1 extends BaseFilter$1 {

    constructor ({ provider, params }) {
      super();
      this.type = 'block';
      this.provider = provider;
    }

    async update ({ oldBlock, newBlock }) {
      const toBlock = newBlock;
      const fromBlock = incrementHexInt$2(oldBlock);
      const blockBodies = await getBlocksForRange$2({ provider: this.provider, fromBlock, toBlock });
      const blockHashes = blockBodies.map((block) => block.hash);
      this.addResults(blockHashes);
    }

  }

  var blockFilter = BlockFilter$1;

  const BaseFilter = baseFilter;
  const getBlocksForRange$1 = getBlocksForRange_1;
  const { incrementHexInt: incrementHexInt$1 } = hexUtils;

  class TxFilter$1 extends BaseFilter {

    constructor ({ provider }) {
      super();
      this.type = 'tx';
      this.provider = provider;
    }

    async update ({ oldBlock }) {
      const toBlock = oldBlock;
      const fromBlock = incrementHexInt$1(oldBlock);
      const blocks = await getBlocksForRange$1({ provider: this.provider, fromBlock, toBlock });
      const blockTxHashes = [];
      for (const block of blocks) {
        blockTxHashes.push(...block.transactions);
      }
      // add to results
      this.addResults(blockTxHashes);
    }

  }

  var txFilter = TxFilter$1;

  const Mutex = lib$1.Mutex;
  const { createAsyncMiddleware: createAsyncMiddleware$1 } = dist$2;
  const createJsonRpcMiddleware = scaffold;
  const LogFilter = logFilter;
  const BlockFilter = blockFilter;
  const TxFilter = txFilter;
  const { intToHex, hexToInt } = hexUtils;

  var ethJsonRpcFilters = createEthFilterMiddleware;

  function createEthFilterMiddleware({ blockTracker, provider }) {

    // create filter collection
    let filterIndex = 0;
    let filters = {};
    // create update mutex
    const mutex = new Mutex();
    const waitForFree = mutexMiddlewareWrapper({ mutex });

    const middleware = createJsonRpcMiddleware({
      // install filters
      eth_newFilter:                   waitForFree(toFilterCreationMiddleware(newLogFilter)),
      eth_newBlockFilter:              waitForFree(toFilterCreationMiddleware(newBlockFilter)),
      eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),
      // uninstall filters
      eth_uninstallFilter:             waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),
      // checking filter changes
      eth_getFilterChanges:            waitForFree(toAsyncRpcMiddleware(getFilterChanges)),
      eth_getFilterLogs:               waitForFree(toAsyncRpcMiddleware(getFilterLogs)),
    });

    // setup filter updating and destroy handler
    const filterUpdater = async ({ oldBlock, newBlock }) => {
      if (filters.length === 0) return
      // lock update reads
      const releaseLock = await mutex.acquire();
      try {
        // process all filters in parallel
        await Promise.all(objValues(filters).map(async (filter) => {
          try {
           await filter.update({ oldBlock, newBlock });
          } catch (err) {
            // handle each error individually so filter update errors don't affect other filters
            console.error(err);
          }
        }));
      } catch (err) {
        // log error so we don't skip the releaseLock
        console.error(err);
      }
      // unlock update reads
      releaseLock();
    };

    // expose filter methods directly
    middleware.newLogFilter = newLogFilter;
    middleware.newBlockFilter = newBlockFilter;
    middleware.newPendingTransactionFilter = newPendingTransactionFilter;
    middleware.uninstallFilter = uninstallFilterHandler;
    middleware.getFilterChanges = getFilterChanges;
    middleware.getFilterLogs = getFilterLogs;

    // expose destroy method for cleanup
    middleware.destroy = () => {
      uninstallAllFilters();
    };

    return middleware

    //
    // new filters
    //

    async function newLogFilter(params) {
      const filter = new LogFilter({ provider, params });
      await installFilter(filter);
      return filter
    }

    async function newBlockFilter() {
      const filter = new BlockFilter({ provider });
      await installFilter(filter);
      return filter
    }

    async function newPendingTransactionFilter() {
      const filter = new TxFilter({ provider });
      await installFilter(filter);
      return filter
    }

    //
    // get filter changes
    //

    async function getFilterChanges(filterIndexHex) {
      const filterIndex = hexToInt(filterIndexHex);
      const filter = filters[filterIndex];
      if (!filter) {
        throw new Error(`No filter for index "${filterIndex}"`)
      }
      const results = filter.getChangesAndClear();
      return results
    }

    async function getFilterLogs(filterIndexHex) {
      const filterIndex = hexToInt(filterIndexHex);
      const filter = filters[filterIndex];
      if (!filter) {
        throw new Error(`No filter for index "${filterIndex}"`)
      }
      // only return results for log filters
      if (filter.type === 'log') {
        results = filter.getAllResults();
      } else {
        results = [];
      }
      return results
    }


    //
    // remove filters
    //


    async function uninstallFilterHandler(filterIndexHex) {
      // check filter exists
      const filterIndex = hexToInt(filterIndexHex);
      const filter = filters[filterIndex];
      const result = Boolean(filter);
      // uninstall filter
      if (result) {
        await uninstallFilter(filterIndex);
      }
      return result
    }

    //
    // utils
    //

    async function installFilter(filter) {
      const prevFilterCount = objValues(filters).length;
      // install filter
      const currentBlock = await blockTracker.getLatestBlock();
      await filter.initialize({ currentBlock });
      filterIndex++;
      filters[filterIndex] = filter;
      filter.id = filterIndex;
      filter.idHex = intToHex(filterIndex);
      // update block tracker subs
      const newFilterCount = objValues(filters).length;
      updateBlockTrackerSubs({ prevFilterCount, newFilterCount });
      return filterIndex
    }

    async function uninstallFilter(filterIndex) {
      const prevFilterCount = objValues(filters).length;
      delete filters[filterIndex];
      // update block tracker subs
      const newFilterCount = objValues(filters).length;
      updateBlockTrackerSubs({ prevFilterCount, newFilterCount });
    }

    async function uninstallAllFilters() {
      const prevFilterCount = objValues(filters).length;
      filters = {};
      // update block tracker subs
      updateBlockTrackerSubs({ prevFilterCount, newFilterCount: 0 });
    }

    function updateBlockTrackerSubs({ prevFilterCount, newFilterCount }) {
      // subscribe
      if (prevFilterCount === 0 && newFilterCount > 0) {
        blockTracker.on('sync', filterUpdater);
        return
      }
      // unsubscribe
      if (prevFilterCount > 0 && newFilterCount === 0) {
        blockTracker.removeListener('sync', filterUpdater);
        return
      }
    }

  }

  // helper for turning filter constructors into rpc middleware
  function toFilterCreationMiddleware(createFilterFn) {
    return toAsyncRpcMiddleware(async (...args) => {
      const filter = await createFilterFn(...args);
      const result = intToHex(filter.id);
      return result
    })
  }

  // helper for pulling out req.params and setting res.result
  function toAsyncRpcMiddleware(asyncFn) {
    return createAsyncMiddleware$1(async (req, res) => {
      const result = await asyncFn.apply(null, req.params);
      res.result = result;
    })
  }

  function mutexMiddlewareWrapper({ mutex }) {
    return (middleware) => {
      return async (req, res, next, end) => {
        // wait for mutex available
        // we can release immediately because
        // we just need to make sure updates aren't active
        const releaseLock = await mutex.acquire();
        releaseLock();
        middleware(req, res, next, end);
      }
    }
  }

  function objValues(obj, fn){
    const values = [];
    for (let key in obj) {
      values.push(obj[key]);
    }
    return values
  }

  const ProviderSubprovider$1 = jsonRpcEngineMiddleware;
  const createFilterMiddleware$1 = ethJsonRpcFilters;

  class SubscriptionsSubprovider$2 extends ProviderSubprovider$1 {
    constructor() {
      super(({ blockTracker, provider, engine }) => {
        return createFilterMiddleware$1({ blockTracker, provider })
      });
    }
  }

  var filters = SubscriptionsSubprovider$2;

  var waterfall$1 = {exports: {}};

  (function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
      value: true
  });

  exports.default = function (tasks, callback) {
      callback = (0, _once2.default)(callback || _noop2.default);
      if (!(0, _isArray2.default)(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));
      if (!tasks.length) return callback();
      var taskIndex = 0;

      function nextTask(args) {
          var task = (0, _wrapAsync2.default)(tasks[taskIndex++]);
          args.push((0, _onlyOnce2.default)(next));
          task.apply(null, args);
      }

      function next(err /*, ...args*/) {
          if (err || taskIndex === tasks.length) {
              return callback.apply(null, arguments);
          }
          nextTask((0, _slice2.default)(arguments, 1));
      }

      nextTask([]);
  };

  var _isArray = isArray_1;

  var _isArray2 = _interopRequireDefault(_isArray);

  var _noop = noop_1;

  var _noop2 = _interopRequireDefault(_noop);

  var _once = once.exports;

  var _once2 = _interopRequireDefault(_once);

  var _slice = slice.exports;

  var _slice2 = _interopRequireDefault(_slice);

  var _onlyOnce = onlyOnce.exports;

  var _onlyOnce2 = _interopRequireDefault(_onlyOnce);

  var _wrapAsync = wrapAsync$1;

  var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  module.exports = exports['default'];

  /**
   * Runs the `tasks` array of functions in series, each passing their results to
   * the next in the array. However, if any of the `tasks` pass an error to their
   * own callback, the next function is not executed, and the main `callback` is
   * immediately called with the error.
   *
   * @name waterfall
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}
   * to run.
   * Each function should complete with any number of `result` values.
   * The `result` values will be passed as arguments, in order, to the next task.
   * @param {Function} [callback] - An optional callback to run once all the
   * functions have completed. This will be passed the results of the last task's
   * callback. Invoked with (err, [results]).
   * @returns undefined
   * @example
   *
   * async.waterfall([
   *     function(callback) {
   *         callback(null, 'one', 'two');
   *     },
   *     function(arg1, arg2, callback) {
   *         // arg1 now equals 'one' and arg2 now equals 'two'
   *         callback(null, 'three');
   *     },
   *     function(arg1, callback) {
   *         // arg1 now equals 'three'
   *         callback(null, 'done');
   *     }
   * ], function (err, result) {
   *     // result now equals 'done'
   * });
   *
   * // Or, with named functions:
   * async.waterfall([
   *     myFirstFunction,
   *     mySecondFunction,
   *     myLastFunction,
   * ], function (err, result) {
   *     // result now equals 'done'
   * });
   * function myFirstFunction(callback) {
   *     callback(null, 'one', 'two');
   * }
   * function mySecondFunction(arg1, arg2, callback) {
   *     // arg1 now equals 'one' and arg2 now equals 'two'
   *     callback(null, 'three');
   * }
   * function myLastFunction(arg1, callback) {
   *     // arg1 now equals 'three'
   *     callback(null, 'done');
   * }
   */
  }(waterfall$1, waterfall$1.exports));

  var parallel$2 = {exports: {}};

  var parallel$1 = {exports: {}};

  (function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.default = _parallel;

  var _noop = noop_1;

  var _noop2 = _interopRequireDefault(_noop);

  var _isArrayLike = isArrayLike_1;

  var _isArrayLike2 = _interopRequireDefault(_isArrayLike);

  var _slice = slice.exports;

  var _slice2 = _interopRequireDefault(_slice);

  var _wrapAsync = wrapAsync$1;

  var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _parallel(eachfn, tasks, callback) {
      callback = callback || _noop2.default;
      var results = (0, _isArrayLike2.default)(tasks) ? [] : {};

      eachfn(tasks, function (task, key, callback) {
          (0, _wrapAsync2.default)(task)(function (err, result) {
              if (arguments.length > 2) {
                  result = (0, _slice2.default)(arguments, 1);
              }
              results[key] = result;
              callback(err);
          });
      }, function (err) {
          callback(err, results);
      });
  }
  module.exports = exports['default'];
  }(parallel$1, parallel$1.exports));

  (function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = parallelLimit;

  var _eachOf = eachOf.exports;

  var _eachOf2 = _interopRequireDefault(_eachOf);

  var _parallel = parallel$1.exports;

  var _parallel2 = _interopRequireDefault(_parallel);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Run the `tasks` collection of functions in parallel, without waiting until
   * the previous function has completed. If any of the functions pass an error to
   * its callback, the main `callback` is immediately called with the value of the
   * error. Once the `tasks` have completed, the results are passed to the final
   * `callback` as an array.
   *
   * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about
   * parallel execution of code.  If your tasks do not use any timers or perform
   * any I/O, they will actually be executed in series.  Any synchronous setup
   * sections for each task will happen one after the other.  JavaScript remains
   * single-threaded.
   *
   * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the
   * execution of other tasks when a task fails.
   *
   * It is also possible to use an object instead of an array. Each property will
   * be run as a function and the results will be passed to the final `callback`
   * as an object instead of an array. This can be a more readable way of handling
   * results from {@link async.parallel}.
   *
   * @name parallel
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {Array|Iterable|Object} tasks - A collection of
   * [async functions]{@link AsyncFunction} to run.
   * Each async function can complete with any number of optional `result` values.
   * @param {Function} [callback] - An optional callback to run once all the
   * functions have completed successfully. This function gets a results array
   * (or object) containing all the result arguments passed to the task callbacks.
   * Invoked with (err, results).
   *
   * @example
   * async.parallel([
   *     function(callback) {
   *         setTimeout(function() {
   *             callback(null, 'one');
   *         }, 200);
   *     },
   *     function(callback) {
   *         setTimeout(function() {
   *             callback(null, 'two');
   *         }, 100);
   *     }
   * ],
   * // optional callback
   * function(err, results) {
   *     // the results array will equal ['one','two'] even though
   *     // the second function had a shorter timeout.
   * });
   *
   * // an example using an object instead of an array
   * async.parallel({
   *     one: function(callback) {
   *         setTimeout(function() {
   *             callback(null, 1);
   *         }, 200);
   *     },
   *     two: function(callback) {
   *         setTimeout(function() {
   *             callback(null, 2);
   *         }, 100);
   *     }
   * }, function(err, results) {
   *     // results is now equals to: {one: 1, two: 2}
   * });
   */
  function parallelLimit(tasks, callback) {
    (0, _parallel2.default)(_eachOf2.default, tasks, callback);
  }
  module.exports = exports['default'];
  }(parallel$2, parallel$2.exports));

  var dist = {};

  var secp256k1v3Adapter = {};

  var secp256k1v3Lib = {};

  // This file is imported from secp256k1 v3
  // https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE
  Object.defineProperty(secp256k1v3Lib, "__esModule", { value: true });
  var BN$3 = bn$2.exports;
  var EC = elliptic$2.ec;
  var ec = new EC('secp256k1');
  var ecparams = ec.curve;
  secp256k1v3Lib.privateKeyExport = function (privateKey, compressed) {
      if (compressed === void 0) { compressed = true; }
      var d = new BN$3(privateKey);
      if (d.ucmp(ecparams.n) >= 0) {
          throw new Error("couldn't export to DER format");
      }
      var point = ec.g.mul(d);
      return toPublicKey(point.getX(), point.getY(), compressed);
  };
  secp256k1v3Lib.privateKeyModInverse = function (privateKey) {
      var bn = new BN$3(privateKey);
      if (bn.ucmp(ecparams.n) >= 0 || bn.isZero()) {
          throw new Error('private key range is invalid');
      }
      return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32);
  };
  secp256k1v3Lib.signatureImport = function (sigObj) {
      var r = new BN$3(sigObj.r);
      if (r.ucmp(ecparams.n) >= 0) {
          r = new BN$3(0);
      }
      var s = new BN$3(sigObj.s);
      if (s.ucmp(ecparams.n) >= 0) {
          s = new BN$3(0);
      }
      return Buffer.concat([r.toArrayLike(Buffer, 'be', 32), s.toArrayLike(Buffer, 'be', 32)]);
  };
  secp256k1v3Lib.ecdhUnsafe = function (publicKey, privateKey, compressed) {
      if (compressed === void 0) { compressed = true; }
      var point = ec.keyFromPublic(publicKey);
      var scalar = new BN$3(privateKey);
      if (scalar.ucmp(ecparams.n) >= 0 || scalar.isZero()) {
          throw new Error('scalar was invalid (zero or overflow)');
      }
      var shared = point.pub.mul(scalar);
      return toPublicKey(shared.getX(), shared.getY(), compressed);
  };
  var toPublicKey = function (x, y, compressed) {
      var publicKey;
      if (compressed) {
          publicKey = Buffer.alloc(33);
          publicKey[0] = y.isOdd() ? 0x03 : 0x02;
          x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
      }
      else {
          publicKey = Buffer.alloc(65);
          publicKey[0] = 0x04;
          x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
          y.toArrayLike(Buffer, 'be', 32).copy(publicKey, 33);
      }
      return publicKey;
  };

  var der = {};

  // This file is imported from secp256k1 v3
  // https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE
  Object.defineProperty(der, "__esModule", { value: true });
  var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([
      // begin
      0x30,
      0x81,
      0xd3,
      0x02,
      0x01,
      0x01,
      0x04,
      0x20,
      // private key
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      // middle
      0xa0,
      0x81,
      0x85,
      0x30,
      0x81,
      0x82,
      0x02,
      0x01,
      0x01,
      0x30,
      0x2c,
      0x06,
      0x07,
      0x2a,
      0x86,
      0x48,
      0xce,
      0x3d,
      0x01,
      0x01,
      0x02,
      0x21,
      0x00,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xfe,
      0xff,
      0xff,
      0xfc,
      0x2f,
      0x30,
      0x06,
      0x04,
      0x01,
      0x00,
      0x04,
      0x01,
      0x07,
      0x04,
      0x21,
      0x02,
      0x79,
      0xbe,
      0x66,
      0x7e,
      0xf9,
      0xdc,
      0xbb,
      0xac,
      0x55,
      0xa0,
      0x62,
      0x95,
      0xce,
      0x87,
      0x0b,
      0x07,
      0x02,
      0x9b,
      0xfc,
      0xdb,
      0x2d,
      0xce,
      0x28,
      0xd9,
      0x59,
      0xf2,
      0x81,
      0x5b,
      0x16,
      0xf8,
      0x17,
      0x98,
      0x02,
      0x21,
      0x00,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xfe,
      0xba,
      0xae,
      0xdc,
      0xe6,
      0xaf,
      0x48,
      0xa0,
      0x3b,
      0xbf,
      0xd2,
      0x5e,
      0x8c,
      0xd0,
      0x36,
      0x41,
      0x41,
      0x02,
      0x01,
      0x01,
      0xa1,
      0x24,
      0x03,
      0x22,
      0x00,
      // public key
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
  ]);
  var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([
      // begin
      0x30,
      0x82,
      0x01,
      0x13,
      0x02,
      0x01,
      0x01,
      0x04,
      0x20,
      // private key
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      // middle
      0xa0,
      0x81,
      0xa5,
      0x30,
      0x81,
      0xa2,
      0x02,
      0x01,
      0x01,
      0x30,
      0x2c,
      0x06,
      0x07,
      0x2a,
      0x86,
      0x48,
      0xce,
      0x3d,
      0x01,
      0x01,
      0x02,
      0x21,
      0x00,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xfe,
      0xff,
      0xff,
      0xfc,
      0x2f,
      0x30,
      0x06,
      0x04,
      0x01,
      0x00,
      0x04,
      0x01,
      0x07,
      0x04,
      0x41,
      0x04,
      0x79,
      0xbe,
      0x66,
      0x7e,
      0xf9,
      0xdc,
      0xbb,
      0xac,
      0x55,
      0xa0,
      0x62,
      0x95,
      0xce,
      0x87,
      0x0b,
      0x07,
      0x02,
      0x9b,
      0xfc,
      0xdb,
      0x2d,
      0xce,
      0x28,
      0xd9,
      0x59,
      0xf2,
      0x81,
      0x5b,
      0x16,
      0xf8,
      0x17,
      0x98,
      0x48,
      0x3a,
      0xda,
      0x77,
      0x26,
      0xa3,
      0xc4,
      0x65,
      0x5d,
      0xa4,
      0xfb,
      0xfc,
      0x0e,
      0x11,
      0x08,
      0xa8,
      0xfd,
      0x17,
      0xb4,
      0x48,
      0xa6,
      0x85,
      0x54,
      0x19,
      0x9c,
      0x47,
      0xd0,
      0x8f,
      0xfb,
      0x10,
      0xd4,
      0xb8,
      0x02,
      0x21,
      0x00,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xff,
      0xfe,
      0xba,
      0xae,
      0xdc,
      0xe6,
      0xaf,
      0x48,
      0xa0,
      0x3b,
      0xbf,
      0xd2,
      0x5e,
      0x8c,
      0xd0,
      0x36,
      0x41,
      0x41,
      0x02,
      0x01,
      0x01,
      0xa1,
      0x44,
      0x03,
      0x42,
      0x00,
      // public key
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
      0x00,
  ]);
  der.privateKeyExport = function (privateKey, publicKey, compressed) {
      if (compressed === void 0) { compressed = true; }
      var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);
      privateKey.copy(result, compressed ? 8 : 9);
      publicKey.copy(result, compressed ? 181 : 214);
      return result;
  };
  der.privateKeyImport = function (privateKey) {
      var length = privateKey.length;
      // sequence header
      var index = 0;
      if (length < index + 1 || privateKey[index] !== 0x30)
          return null;
      index += 1;
      // sequence length constructor
      if (length < index + 1 || !(privateKey[index] & 0x80))
          return null;
      var lenb = privateKey[index] & 0x7f;
      index += 1;
      if (lenb < 1 || lenb > 2)
          return null;
      if (length < index + lenb)
          return null;
      // sequence length
      var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);
      index += lenb;
      if (length < index + len)
          return null;
      // sequence element 0: version number (=1)
      if (length < index + 3 ||
          privateKey[index] !== 0x02 ||
          privateKey[index + 1] !== 0x01 ||
          privateKey[index + 2] !== 0x01) {
          return null;
      }
      index += 3;
      // sequence element 1: octet string, up to 32 bytes
      if (length < index + 2 ||
          privateKey[index] !== 0x04 ||
          privateKey[index + 1] > 0x20 ||
          length < index + 2 + privateKey[index + 1]) {
          return null;
      }
      return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);
  };
  der.signatureImportLax = function (signature) {
      var r = Buffer.alloc(32, 0);
      var s = Buffer.alloc(32, 0);
      var length = signature.length;
      var index = 0;
      // sequence tag byte
      if (signature[index++] !== 0x30) {
          return null;
      }
      // sequence length byte
      var lenbyte = signature[index++];
      if (lenbyte & 0x80) {
          index += lenbyte - 0x80;
          if (index > length) {
              return null;
          }
      }
      // sequence tag byte for r
      if (signature[index++] !== 0x02) {
          return null;
      }
      // length for r
      var rlen = signature[index++];
      if (rlen & 0x80) {
          lenbyte = rlen - 0x80;
          if (index + lenbyte > length) {
              return null;
          }
          for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1)
              ;
          for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1)
              rlen = (rlen << 8) + signature[index];
      }
      if (rlen > length - index) {
          return null;
      }
      var rindex = index;
      index += rlen;
      // sequence tag byte for s
      if (signature[index++] !== 0x02) {
          return null;
      }
      // length for s
      var slen = signature[index++];
      if (slen & 0x80) {
          lenbyte = slen - 0x80;
          if (index + lenbyte > length) {
              return null;
          }
          for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1)
              ;
          for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1)
              slen = (slen << 8) + signature[index];
      }
      if (slen > length - index) {
          return null;
      }
      var sindex = index;
      index += slen;
      // ignore leading zeros in r
      for (; rlen > 0 && signature[rindex] === 0x00; rlen -= 1, rindex += 1)
          ;
      // copy r value
      if (rlen > 32) {
          return null;
      }
      var rvalue = signature.slice(rindex, rindex + rlen);
      rvalue.copy(r, 32 - rvalue.length);
      // ignore leading zeros in s
      for (; slen > 0 && signature[sindex] === 0x00; slen -= 1, sindex += 1)
          ;
      // copy s value
      if (slen > 32) {
          return null;
      }
      var svalue = signature.slice(sindex, sindex + slen);
      svalue.copy(s, 32 - svalue.length);
      return { r: r, s: s };
  };

  (function (exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.ecdhUnsafe = exports.ecdh = exports.recover = exports.verify = exports.sign = exports.signatureImportLax = exports.signatureImport = exports.signatureExport = exports.signatureNormalize = exports.publicKeyCombine = exports.publicKeyTweakMul = exports.publicKeyTweakAdd = exports.publicKeyVerify = exports.publicKeyConvert = exports.publicKeyCreate = exports.privateKeyTweakMul = exports.privateKeyTweakAdd = exports.privateKeyModInverse = exports.privateKeyNegate = exports.privateKeyImport = exports.privateKeyExport = exports.privateKeyVerify = void 0;
  var secp256k1 = secp256k1$3;
  var secp256k1v3 = secp256k1v3Lib;
  var der$1 = der;
  /**
   * Verify an ECDSA privateKey
   * @method privateKeyVerify
   * @param {Buffer} privateKey
   * @return {boolean}
   */
  exports.privateKeyVerify = function (privateKey) {
      // secp256k1 v4 version throws when privateKey length is not 32
      if (privateKey.length !== 32) {
          return false;
      }
      return secp256k1.privateKeyVerify(Uint8Array.from(privateKey));
  };
  /**
   * Export a privateKey in DER format
   * @method privateKeyExport
   * @param {Buffer} privateKey
   * @param {boolean} compressed
   * @return {boolean}
   */
  exports.privateKeyExport = function (privateKey, compressed) {
      // secp256k1 v4 version throws when privateKey length is not 32
      if (privateKey.length !== 32) {
          throw new RangeError('private key length is invalid');
      }
      var publicKey = secp256k1v3.privateKeyExport(privateKey, compressed);
      return der$1.privateKeyExport(privateKey, publicKey, compressed);
  };
  /**
   * Import a privateKey in DER format
   * @method privateKeyImport
   * @param {Buffer} privateKey
   * @return {Buffer}
   */
  exports.privateKeyImport = function (privateKey) {
      // privateKeyImport method is not part of secp256k1 v4 package
      // this implementation is based on v3
      privateKey = der$1.privateKeyImport(privateKey);
      if (privateKey !== null && privateKey.length === 32 && exports.privateKeyVerify(privateKey)) {
          return privateKey;
      }
      throw new Error("couldn't import from DER format");
  };
  /**
   * Negate a privateKey by subtracting it from the order of the curve's base point
   * @method privateKeyNegate
   * @param {Buffer} privateKey
   * @return {Buffer}
   */
  exports.privateKeyNegate = function (privateKey) {
      return Buffer.from(secp256k1.privateKeyNegate(Uint8Array.from(privateKey)));
  };
  /**
   * Compute the inverse of a privateKey (modulo the order of the curve's base point).
   * @method privateKeyModInverse
   * @param {Buffer} privateKey
   * @return {Buffer}
   */
  exports.privateKeyModInverse = function (privateKey) {
      if (privateKey.length !== 32) {
          throw new Error('private key length is invalid');
      }
      return Buffer.from(secp256k1v3.privateKeyModInverse(Uint8Array.from(privateKey)));
  };
  /**
   * Tweak a privateKey by adding tweak to it.
   * @method privateKeyTweakAdd
   * @param {Buffer} privateKey
   * @param {Buffer} tweak
   * @return {Buffer}
   */
  exports.privateKeyTweakAdd = function (privateKey, tweak) {
      return Buffer.from(secp256k1.privateKeyTweakAdd(Uint8Array.from(privateKey), tweak));
  };
  /**
   * Tweak a privateKey by multiplying it by a tweak.
   * @method privateKeyTweakMul
   * @param {Buffer} privateKey
   * @param {Buffer} tweak
   * @return {Buffer}
   */
  exports.privateKeyTweakMul = function (privateKey, tweak) {
      return Buffer.from(secp256k1.privateKeyTweakMul(Uint8Array.from(privateKey), Uint8Array.from(tweak)));
  };
  /**
   * Compute the public key for a privateKey.
   * @method publicKeyCreate
   * @param {Buffer} privateKey
   * @param {boolean} compressed
   * @return {Buffer}
   */
  exports.publicKeyCreate = function (privateKey, compressed) {
      return Buffer.from(secp256k1.publicKeyCreate(Uint8Array.from(privateKey), compressed));
  };
  /**
   * Convert a publicKey to compressed or uncompressed form.
   * @method publicKeyConvert
   * @param {Buffer} publicKey
   * @param {boolean} compressed
   * @return {Buffer}
   */
  exports.publicKeyConvert = function (publicKey, compressed) {
      return Buffer.from(secp256k1.publicKeyConvert(Uint8Array.from(publicKey), compressed));
  };
  /**
   * Verify an ECDSA publicKey.
   * @method publicKeyVerify
   * @param {Buffer} publicKey
   * @return {boolean}
   */
  exports.publicKeyVerify = function (publicKey) {
      // secp256k1 v4 version throws when publicKey length is not 33 or 65
      if (publicKey.length !== 33 && publicKey.length !== 65) {
          return false;
      }
      return secp256k1.publicKeyVerify(Uint8Array.from(publicKey));
  };
  /**
   * Tweak a publicKey by adding tweak times the generator to it.
   * @method publicKeyTweakAdd
   * @param {Buffer} publicKey
   * @param {Buffer} tweak
   * @param {boolean} compressed
   * @return {Buffer}
   */
  exports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {
      return Buffer.from(secp256k1.publicKeyTweakAdd(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
  };
  /**
   * Tweak a publicKey by multiplying it by a tweak value
   * @method publicKeyTweakMul
   * @param {Buffer} publicKey
   * @param {Buffer} tweak
   * @param {boolean} compressed
   * @return {Buffer}
   */
  exports.publicKeyTweakMul = function (publicKey, tweak, compressed) {
      return Buffer.from(secp256k1.publicKeyTweakMul(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
  };
  /**
   * Add a given publicKeys together.
   * @method publicKeyCombine
   * @param {Array<Buffer>} publicKeys
   * @param {boolean} compressed
   * @return {Buffer}
   */
  exports.publicKeyCombine = function (publicKeys, compressed) {
      var keys = [];
      publicKeys.forEach(function (publicKey) {
          keys.push(Uint8Array.from(publicKey));
      });
      return Buffer.from(secp256k1.publicKeyCombine(keys, compressed));
  };
  /**
   * Convert a signature to a normalized lower-S form.
   * @method signatureNormalize
   * @param {Buffer} signature
   * @return {Buffer}
   */
  exports.signatureNormalize = function (signature) {
      return Buffer.from(secp256k1.signatureNormalize(Uint8Array.from(signature)));
  };
  /**
   * Serialize an ECDSA signature in DER format.
   * @method signatureExport
   * @param {Buffer} signature
   * @return {Buffer}
   */
  exports.signatureExport = function (signature) {
      return Buffer.from(secp256k1.signatureExport(Uint8Array.from(signature)));
  };
  /**
   * Parse a DER ECDSA signature (follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
   * @method signatureImport
   * @param {Buffer} signature
   * @return {Buffer}
   */
  exports.signatureImport = function (signature) {
      return Buffer.from(secp256k1.signatureImport(Uint8Array.from(signature)));
  };
  /**
   * Parse a DER ECDSA signature (not follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
   * @method signatureImportLax
   * @param {Buffer} signature
   * @return {Buffer}
   */
  exports.signatureImportLax = function (signature) {
      // signatureImportLax method is not part of secp256k1 v4 package
      // this implementation is based on v3
      // ensure that signature is greater than 0
      if (signature.length === 0) {
          throw new RangeError('signature length is invalid');
      }
      var sigObj = der$1.signatureImportLax(signature);
      if (sigObj === null) {
          throw new Error("couldn't parse DER signature");
      }
      return secp256k1v3.signatureImport(sigObj);
  };
  /**
   * Create an ECDSA signature. Always return low-S signature.
   * @method sign
   * @param {Buffer} message
   * @param {Buffer} privateKey
   * @param {Object} options
   * @return {Buffer}
   */
  exports.sign = function (message, privateKey, options) {
      if (options === null) {
          throw new TypeError('options should be an Object');
      }
      var signOptions = undefined;
      if (options) {
          signOptions = {};
          if (options.data === null) {
              // validate option.data length
              throw new TypeError('options.data should be a Buffer');
          }
          if (options.data) {
              if (options.data.length != 32) {
                  throw new RangeError('options.data length is invalid');
              }
              signOptions.data = new Uint8Array(options.data);
          }
          if (options.noncefn === null) {
              throw new TypeError('options.noncefn should be a Function');
          }
          if (options.noncefn) {
              // convert option.noncefn function signature
              signOptions.noncefn = function (message, privateKey, algo, data, attempt) {
                  var bufferAlgo = algo != null ? Buffer.from(algo) : null;
                  var bufferData = data != null ? Buffer.from(data) : null;
                  var buffer = Buffer.from('');
                  if (options.noncefn) {
                      buffer = options.noncefn(Buffer.from(message), Buffer.from(privateKey), bufferAlgo, bufferData, attempt);
                  }
                  return new Uint8Array(buffer);
              };
          }
      }
      var sig = secp256k1.ecdsaSign(Uint8Array.from(message), Uint8Array.from(privateKey), signOptions);
      return {
          signature: Buffer.from(sig.signature),
          recovery: sig.recid,
      };
  };
  /**
   * Verify an ECDSA signature.
   * @method verify
   * @param {Buffer} message
   * @param {Buffer} signature
   * @param {Buffer} publicKey
   * @return {boolean}
   */
  exports.verify = function (message, signature, publicKey) {
      return secp256k1.ecdsaVerify(Uint8Array.from(signature), Uint8Array.from(message), publicKey);
  };
  /**
   * Recover an ECDSA public key from a signature.
   * @method recover
   * @param {Buffer} message
   * @param {Buffer} signature
   * @param {Number} recid
   * @param {boolean} compressed
   * @return {Buffer}
   */
  exports.recover = function (message, signature, recid, compressed) {
      return Buffer.from(secp256k1.ecdsaRecover(Uint8Array.from(signature), recid, Uint8Array.from(message), compressed));
  };
  /**
   * Compute an EC Diffie-Hellman secret and applied sha256 to compressed public key.
   * @method ecdh
   * @param {Buffer} publicKey
   * @param {Buffer} privateKey
   * @return {Buffer}
   */
  exports.ecdh = function (publicKey, privateKey) {
      // note: secp256k1 v3 doesn't allow optional parameter
      return Buffer.from(secp256k1.ecdh(Uint8Array.from(publicKey), Uint8Array.from(privateKey), {}));
  };
  exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {
      // ecdhUnsafe method is not part of secp256k1 v4 package
      // this implementation is based on v3
      // ensure valid publicKey length
      if (publicKey.length !== 33 && publicKey.length !== 65) {
          throw new RangeError('public key length is invalid');
      }
      // ensure valid privateKey length
      if (privateKey.length !== 32) {
          throw new RangeError('private key length is invalid');
      }
      return Buffer.from(secp256k1v3.ecdhUnsafe(Uint8Array.from(publicKey), Uint8Array.from(privateKey), compressed));
  };

  }(secp256k1v3Adapter));

  var constants = {};

  (function (exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.KECCAK256_RLP = exports.KECCAK256_RLP_S = exports.KECCAK256_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY_S = exports.KECCAK256_NULL = exports.KECCAK256_NULL_S = exports.TWO_POW256 = exports.MAX_INTEGER = void 0;
  var BN = bn$2.exports;
  /**
   * The max integer that this VM can handle
   */
  exports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);
  /**
   * 2^256
   */
  exports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);
  /**
   * Keccak-256 hash of null
   */
  exports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
  /**
   * Keccak-256 hash of null
   */
  exports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');
  /**
   * Keccak-256 of an RLP of an empty array
   */
  exports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
  /**
   * Keccak-256 of an RLP of an empty array
   */
  exports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');
  /**
   * Keccak-256 hash of the RLP of null
   */
  exports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
  /**
   * Keccak-256 hash of the RLP of null
   */
  exports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');

  }(constants));

  var account = {};

  var bytes = {};

  (function (exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.baToJSON = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.stripZeros = exports.unpad = exports.setLengthRight = exports.setLength = exports.setLengthLeft = exports.zeros = void 0;
  var ethjsUtil = lib$2;
  var BN = bn$2.exports;
  /**
   * Returns a buffer filled with 0s.
   * @param bytes the number of bytes the buffer should be
   */
  exports.zeros = function (bytes) {
      return Buffer.allocUnsafe(bytes).fill(0);
  };
  /**
   * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
   * Or it truncates the beginning if it exceeds.
   * @param msg the value to pad (Buffer|Array)
   * @param length the number of bytes the output should be
   * @param right whether to start padding form the left or right
   * @return (Buffer|Array)
   */
  exports.setLengthLeft = function (msg, length, right) {
      if (right === void 0) { right = false; }
      var buf = exports.zeros(length);
      msg = exports.toBuffer(msg);
      if (right) {
          if (msg.length < length) {
              msg.copy(buf);
              return buf;
          }
          return msg.slice(0, length);
      }
      else {
          if (msg.length < length) {
              msg.copy(buf, length - msg.length);
              return buf;
          }
          return msg.slice(-length);
      }
  };
  exports.setLength = exports.setLengthLeft;
  /**
   * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
   * Or it truncates the beginning if it exceeds.
   * @param msg the value to pad (Buffer|Array)
   * @param length the number of bytes the output should be
   * @return (Buffer|Array)
   */
  exports.setLengthRight = function (msg, length) {
      return exports.setLength(msg, length, true);
  };
  /**
   * Trims leading zeros from a `Buffer` or an `Array`.
   * @param a (Buffer|Array|String)
   * @return (Buffer|Array|String)
   */
  exports.unpad = function (a) {
      a = ethjsUtil.stripHexPrefix(a);
      var first = a[0];
      while (a.length > 0 && first.toString() === '0') {
          a = a.slice(1);
          first = a[0];
      }
      return a;
  };
  exports.stripZeros = exports.unpad;
  /**
   * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
   * @param v the value
   */
  exports.toBuffer = function (v) {
      if (!Buffer.isBuffer(v)) {
          if (Array.isArray(v)) {
              v = Buffer.from(v);
          }
          else if (typeof v === 'string') {
              if (ethjsUtil.isHexString(v)) {
                  v = Buffer.from(ethjsUtil.padToEven(ethjsUtil.stripHexPrefix(v)), 'hex');
              }
              else {
                  throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: " + v);
              }
          }
          else if (typeof v === 'number') {
              v = ethjsUtil.intToBuffer(v);
          }
          else if (v === null || v === undefined) {
              v = Buffer.allocUnsafe(0);
          }
          else if (BN.isBN(v)) {
              v = v.toArrayLike(Buffer);
          }
          else if (v.toArray) {
              // converts a BN to a Buffer
              v = Buffer.from(v.toArray());
          }
          else {
              throw new Error('invalid type');
          }
      }
      return v;
  };
  /**
   * Converts a `Buffer` to a `Number`.
   * @param buf `Buffer` object to convert
   * @throws If the input number exceeds 53 bits.
   */
  exports.bufferToInt = function (buf) {
      return new BN(exports.toBuffer(buf)).toNumber();
  };
  /**
   * Converts a `Buffer` into a `0x`-prefixed hex `String`.
   * @param buf `Buffer` object to convert
   */
  exports.bufferToHex = function (buf) {
      buf = exports.toBuffer(buf);
      return '0x' + buf.toString('hex');
  };
  /**
   * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
   * @param num Signed integer value
   */
  exports.fromSigned = function (num) {
      return new BN(num).fromTwos(256);
  };
  /**
   * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
   * @param num
   */
  exports.toUnsigned = function (num) {
      return Buffer.from(num.toTwos(256).toArray());
  };
  /**
   * Adds "0x" to a given `String` if it does not already start with "0x".
   */
  exports.addHexPrefix = function (str) {
      if (typeof str !== 'string') {
          return str;
      }
      return ethjsUtil.isHexPrefixed(str) ? str : '0x' + str;
  };
  /**
   * Converts a `Buffer` or `Array` to JSON.
   * @param ba (Buffer|Array)
   * @return (Array|String|null)
   */
  exports.baToJSON = function (ba) {
      if (Buffer.isBuffer(ba)) {
          return "0x" + ba.toString('hex');
      }
      else if (ba instanceof Array) {
          var array = [];
          for (var i = 0; i < ba.length; i++) {
              array.push(exports.baToJSON(ba[i]));
          }
          return array;
      }
  };

  }(bytes));

  var hash = {};

  (function (exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.rlphash = exports.ripemd160 = exports.sha256 = exports.keccak256 = exports.keccak = void 0;
  var _a = keccak$3, keccak224 = _a.keccak224, keccak384 = _a.keccak384, k256 = _a.keccak256, keccak512 = _a.keccak512;
  var createHash$1 = createHash;
  var ethjsUtil = lib$2;
  var rlp = dist$3;
  var bytes_1 = bytes;
  /**
   * Creates Keccak hash of the input
   * @param a The input data (Buffer|Array|String|Number) If the string is a 0x-prefixed hex value
   * it's interpreted as hexadecimal, otherwise as utf8.
   * @param bits The Keccak width
   */
  exports.keccak = function (a, bits) {
      if (bits === void 0) { bits = 256; }
      if (typeof a === 'string' && !ethjsUtil.isHexString(a)) {
          a = Buffer.from(a, 'utf8');
      }
      else {
          a = bytes_1.toBuffer(a);
      }
      if (!bits)
          bits = 256;
      switch (bits) {
          case 224: {
              return keccak224(a);
          }
          case 256: {
              return k256(a);
          }
          case 384: {
              return keccak384(a);
          }
          case 512: {
              return keccak512(a);
          }
          default: {
              throw new Error("Invald algorithm: keccak" + bits);
          }
      }
  };
  /**
   * Creates Keccak-256 hash of the input, alias for keccak(a, 256).
   * @param a The input data (Buffer|Array|String|Number)
   */
  exports.keccak256 = function (a) {
      return exports.keccak(a);
  };
  /**
   * Creates SHA256 hash of the input.
   * @param a The input data (Buffer|Array|String|Number)
   */
  exports.sha256 = function (a) {
      a = bytes_1.toBuffer(a);
      return createHash$1('sha256')
          .update(a)
          .digest();
  };
  /**
   * Creates RIPEMD160 hash of the input.
   * @param a The input data (Buffer|Array|String|Number)
   * @param padded Whether it should be padded to 256 bits or not
   */
  exports.ripemd160 = function (a, padded) {
      a = bytes_1.toBuffer(a);
      var hash = createHash$1('rmd160')
          .update(a)
          .digest();
      if (padded === true) {
          return bytes_1.setLength(hash, 32);
      }
      else {
          return hash;
      }
  };
  /**
   * Creates SHA-3 hash of the RLP encoded version of the input.
   * @param a The input data
   */
  exports.rlphash = function (a) {
      return exports.keccak(rlp.encode(a));
  };

  }(hash));

  (function (exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.importPublic = exports.privateToPublic = exports.privateToAddress = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.isPrecompiled = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isZeroAddress = exports.isValidAddress = exports.zeroAddress = void 0;
  var assert = require$$0__default$5["default"];
  var ethjsUtil = lib$2;
  var secp256k1 = secp256k1v3Adapter;
  var BN = bn$2.exports;
  var bytes_1 = bytes;
  var hash_1 = hash;
  /**
   * Returns a zero address.
   */
  exports.zeroAddress = function () {
      var addressLength = 20;
      var addr = bytes_1.zeros(addressLength);
      return bytes_1.bufferToHex(addr);
  };
  /**
   * Checks if the address is a valid. Accepts checksummed addresses too.
   */
  exports.isValidAddress = function (address) {
      return /^0x[0-9a-fA-F]{40}$/.test(address);
  };
  /**
   * Checks if a given address is a zero address.
   */
  exports.isZeroAddress = function (address) {
      var zeroAddr = exports.zeroAddress();
      return zeroAddr === bytes_1.addHexPrefix(address);
  };
  /**
   * Returns a checksummed address.
   *
   * If a eip1191ChainId is provided, the chainId will be included in the checksum calculation. This
   * has the effect of checksummed addresses for one chain having invalid checksums for others.
   * For more details, consult EIP-1191.
   *
   * WARNING: Checksums with and without the chainId will differ. As of 2019-06-26, the most commonly
   * used variation in Ethereum was without the chainId. This may change in the future.
   */
  exports.toChecksumAddress = function (address, eip1191ChainId) {
      address = ethjsUtil.stripHexPrefix(address).toLowerCase();
      var prefix = eip1191ChainId !== undefined ? eip1191ChainId.toString() + '0x' : '';
      var hash = hash_1.keccak(prefix + address).toString('hex');
      var ret = '0x';
      for (var i = 0; i < address.length; i++) {
          if (parseInt(hash[i], 16) >= 8) {
              ret += address[i].toUpperCase();
          }
          else {
              ret += address[i];
          }
      }
      return ret;
  };
  /**
   * Checks if the address is a valid checksummed address.
   *
   * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.
   */
  exports.isValidChecksumAddress = function (address, eip1191ChainId) {
      return exports.isValidAddress(address) && exports.toChecksumAddress(address, eip1191ChainId) === address;
  };
  /**
   * Generates an address of a newly created contract.
   * @param from The address which is creating this new address
   * @param nonce The nonce of the from account
   */
  exports.generateAddress = function (from, nonce) {
      from = bytes_1.toBuffer(from);
      var nonceBN = new BN(nonce);
      if (nonceBN.isZero()) {
          // in RLP we want to encode null in the case of zero nonce
          // read the RLP documentation for an answer if you dare
          return hash_1.rlphash([from, null]).slice(-20);
      }
      // Only take the lower 160bits of the hash
      return hash_1.rlphash([from, Buffer.from(nonceBN.toArray())]).slice(-20);
  };
  /**
   * Generates an address for a contract created using CREATE2.
   * @param from The address which is creating this new address
   * @param salt A salt
   * @param initCode The init code of the contract being created
   */
  exports.generateAddress2 = function (from, salt, initCode) {
      var fromBuf = bytes_1.toBuffer(from);
      var saltBuf = bytes_1.toBuffer(salt);
      var initCodeBuf = bytes_1.toBuffer(initCode);
      assert(fromBuf.length === 20);
      assert(saltBuf.length === 32);
      var address = hash_1.keccak256(Buffer.concat([Buffer.from('ff', 'hex'), fromBuf, saltBuf, hash_1.keccak256(initCodeBuf)]));
      return address.slice(-20);
  };
  /**
   * Returns true if the supplied address belongs to a precompiled account (Byzantium).
   */
  exports.isPrecompiled = function (address) {
      var a = bytes_1.unpad(address);
      return a.length === 1 && a[0] >= 1 && a[0] <= 8;
  };
  /**
   * Checks if the private key satisfies the rules of the curve secp256k1.
   */
  exports.isValidPrivate = function (privateKey) {
      return secp256k1.privateKeyVerify(privateKey);
  };
  /**
   * Checks if the public key satisfies the rules of the curve secp256k1
   * and the requirements of Ethereum.
   * @param publicKey The two points of an uncompressed key, unless sanitize is enabled
   * @param sanitize Accept public keys in other formats
   */
  exports.isValidPublic = function (publicKey, sanitize) {
      if (sanitize === void 0) { sanitize = false; }
      if (publicKey.length === 64) {
          // Convert to SEC1 for secp256k1
          return secp256k1.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));
      }
      if (!sanitize) {
          return false;
      }
      return secp256k1.publicKeyVerify(publicKey);
  };
  /**
   * Returns the ethereum address of a given public key.
   * Accepts "Ethereum public keys" and SEC1 encoded keys.
   * @param pubKey The two points of an uncompressed key, unless sanitize is enabled
   * @param sanitize Accept public keys in other formats
   */
  exports.pubToAddress = function (pubKey, sanitize) {
      if (sanitize === void 0) { sanitize = false; }
      pubKey = bytes_1.toBuffer(pubKey);
      if (sanitize && pubKey.length !== 64) {
          pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);
      }
      assert(pubKey.length === 64);
      // Only take the lower 160bits of the hash
      return hash_1.keccak(pubKey).slice(-20);
  };
  exports.publicToAddress = exports.pubToAddress;
  /**
   * Returns the ethereum address of a given private key.
   * @param privateKey A private key must be 256 bits wide
   */
  exports.privateToAddress = function (privateKey) {
      return exports.publicToAddress(exports.privateToPublic(privateKey));
  };
  /**
   * Returns the ethereum public key of a given private key.
   * @param privateKey A private key must be 256 bits wide
   */
  exports.privateToPublic = function (privateKey) {
      privateKey = bytes_1.toBuffer(privateKey);
      // skip the type flag and use the X, Y points
      return secp256k1.publicKeyCreate(privateKey, false).slice(1);
  };
  /**
   * Converts a public key to the Ethereum format.
   */
  exports.importPublic = function (publicKey) {
      publicKey = bytes_1.toBuffer(publicKey);
      if (publicKey.length !== 64) {
          publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);
      }
      return publicKey;
  };

  }(account));

  var signature = {};

  Object.defineProperty(signature, "__esModule", { value: true });
  signature.hashPersonalMessage = signature.isValidSignature = signature.fromRpcSig = signature.toRpcSig = signature.ecrecover = signature.ecsign = void 0;
  var secp256k1 = secp256k1v3Adapter;
  var BN$2 = bn$2.exports;
  var bytes_1$1 = bytes;
  var hash_1 = hash;
  /**
   * Returns the ECDSA signature of a message hash.
   */
  signature.ecsign = function (msgHash, privateKey, chainId) {
      var sig = secp256k1.sign(msgHash, privateKey);
      var recovery = sig.recovery;
      var ret = {
          r: sig.signature.slice(0, 32),
          s: sig.signature.slice(32, 64),
          v: chainId ? recovery + (chainId * 2 + 35) : recovery + 27,
      };
      return ret;
  };
  /**
   * ECDSA public key recovery from signature.
   * @returns Recovered public key
   */
  signature.ecrecover = function (msgHash, v, r, s, chainId) {
      var signature = Buffer.concat([bytes_1$1.setLength(r, 32), bytes_1$1.setLength(s, 32)], 64);
      var recovery = calculateSigRecovery(v, chainId);
      if (!isValidSigRecovery(recovery)) {
          throw new Error('Invalid signature v value');
      }
      var senderPubKey = secp256k1.recover(msgHash, signature, recovery);
      return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);
  };
  /**
   * Convert signature parameters into the format of `eth_sign` RPC method.
   * @returns Signature
   */
  signature.toRpcSig = function (v, r, s, chainId) {
      var recovery = calculateSigRecovery(v, chainId);
      if (!isValidSigRecovery(recovery)) {
          throw new Error('Invalid signature v value');
      }
      // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
      return bytes_1$1.bufferToHex(Buffer.concat([bytes_1$1.setLengthLeft(r, 32), bytes_1$1.setLengthLeft(s, 32), bytes_1$1.toBuffer(v)]));
  };
  /**
   * Convert signature format of the `eth_sign` RPC method to signature parameters
   * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
   */
  signature.fromRpcSig = function (sig) {
      var buf = bytes_1$1.toBuffer(sig);
      // NOTE: with potential introduction of chainId this might need to be updated
      if (buf.length !== 65) {
          throw new Error('Invalid signature length');
      }
      var v = buf[64];
      // support both versions of `eth_sign` responses
      if (v < 27) {
          v += 27;
      }
      return {
          v: v,
          r: buf.slice(0, 32),
          s: buf.slice(32, 64),
      };
  };
  /**
   * Validate a ECDSA signature.
   * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one
   */
  signature.isValidSignature = function (v, r, s, homesteadOrLater, chainId) {
      if (homesteadOrLater === void 0) { homesteadOrLater = true; }
      var SECP256K1_N_DIV_2 = new BN$2('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
      var SECP256K1_N = new BN$2('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);
      if (r.length !== 32 || s.length !== 32) {
          return false;
      }
      if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {
          return false;
      }
      var rBN = new BN$2(r);
      var sBN = new BN$2(s);
      if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {
          return false;
      }
      if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {
          return false;
      }
      return true;
  };
  /**
   * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
   * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
   * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
   * used to produce the signature.
   */
  signature.hashPersonalMessage = function (message) {
      var prefix = Buffer.from("\u0019Ethereum Signed Message:\n" + message.length.toString(), 'utf-8');
      return hash_1.keccak(Buffer.concat([prefix, message]));
  };
  function calculateSigRecovery(v, chainId) {
      return chainId ? v - (2 * chainId + 35) : v - 27;
  }
  function isValidSigRecovery(recovery) {
      return recovery === 0 || recovery === 1;
  }

  var object = {};

  Object.defineProperty(object, "__esModule", { value: true });
  object.defineProperties = void 0;
  var assert = require$$0__default$5["default"];
  var ethjsUtil = lib$2;
  var rlp = dist$3;
  var bytes_1 = bytes;
  /**
   * Defines properties on a `Object`. It make the assumption that underlying data is binary.
   * @param self the `Object` to define properties on
   * @param fields an array fields to define. Fields can contain:
   * * `name` - the name of the properties
   * * `length` - the number of bytes the field can have
   * * `allowLess` - if the field can be less than the length
   * * `allowEmpty`
   * @param data data to be validated against the definitions
   * @deprecated
   */
  object.defineProperties = function (self, fields, data) {
      self.raw = [];
      self._fields = [];
      // attach the `toJSON`
      self.toJSON = function (label) {
          if (label === void 0) { label = false; }
          if (label) {
              var obj_1 = {};
              self._fields.forEach(function (field) {
                  obj_1[field] = "0x" + self[field].toString('hex');
              });
              return obj_1;
          }
          return bytes_1.baToJSON(self.raw);
      };
      self.serialize = function serialize() {
          return rlp.encode(self.raw);
      };
      fields.forEach(function (field, i) {
          self._fields.push(field.name);
          function getter() {
              return self.raw[i];
          }
          function setter(v) {
              v = bytes_1.toBuffer(v);
              if (v.toString('hex') === '00' && !field.allowZero) {
                  v = Buffer.allocUnsafe(0);
              }
              if (field.allowLess && field.length) {
                  v = bytes_1.stripZeros(v);
                  assert(field.length >= v.length, "The field " + field.name + " must not have more " + field.length + " bytes");
              }
              else if (!(field.allowZero && v.length === 0) && field.length) {
                  assert(field.length === v.length, "The field " + field.name + " must have byte length of " + field.length);
              }
              self.raw[i] = v;
          }
          Object.defineProperty(self, field.name, {
              enumerable: true,
              configurable: true,
              get: getter,
              set: setter,
          });
          if (field.default) {
              self[field.name] = field.default;
          }
          // attach alias
          if (field.alias) {
              Object.defineProperty(self, field.alias, {
                  enumerable: false,
                  configurable: true,
                  set: setter,
                  get: getter,
              });
          }
      });
      // if the constuctor is passed data
      if (data) {
          if (typeof data === 'string') {
              data = Buffer.from(ethjsUtil.stripHexPrefix(data), 'hex');
          }
          if (Buffer.isBuffer(data)) {
              data = rlp.decode(data);
          }
          if (Array.isArray(data)) {
              if (data.length > self._fields.length) {
                  throw new Error('wrong number of fields in data');
              }
              // make sure all the items are buffers
              data.forEach(function (d, i) {
                  self[self._fields[i]] = bytes_1.toBuffer(d);
              });
          }
          else if (typeof data === 'object') {
              var keys_1 = Object.keys(data);
              fields.forEach(function (field) {
                  if (keys_1.indexOf(field.name) !== -1)
                      self[field.name] = data[field.name];
                  if (keys_1.indexOf(field.alias) !== -1)
                      self[field.alias] = data[field.alias];
              });
          }
          else {
              throw new Error('invalid data');
          }
      }
  };

  (function (exports) {
  var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
  }) : (function(o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
  }));
  var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
      for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.secp256k1 = exports.rlp = exports.BN = void 0;
  var secp256k1 = secp256k1v3Adapter;
  exports.secp256k1 = secp256k1;
  var ethjsUtil = lib$2;
  var BN = bn$2.exports;
  exports.BN = BN;
  var rlp = dist$3;
  exports.rlp = rlp;
  Object.assign(exports, ethjsUtil);
  /**
   * Constants
   */
  __exportStar(constants, exports);
  /**
   * Public-key cryptography (secp256k1) and addresses
   */
  __exportStar(account, exports);
  /**
   * Hash functions
   */
  __exportStar(hash, exports);
  /**
   * ECDSA signature
   */
  __exportStar(signature, exports);
  /**
   * Utilities for manipulating Buffers, byte arrays, etc.
   */
  __exportStar(bytes, exports);
  /**
   * Function for definining properties on an object
   */
  __exportStar(object, exports);

  }(dist));

  /* eslint-disable no-useless-escape */

  const utils = dist;
  const BN$1 = bn$2.exports;

  var ABI = function () {
  };

  // Convert from short to canonical names
  // FIXME: optimise or make this nicer?
  function elementaryName (name) {
    if (name.startsWith('int[')) {
      return 'int256' + name.slice(3)
    } else if (name === 'int') {
      return 'int256'
    } else if (name.startsWith('uint[')) {
      return 'uint256' + name.slice(4)
    } else if (name === 'uint') {
      return 'uint256'
    } else if (name.startsWith('fixed[')) {
      return 'fixed128x128' + name.slice(5)
    } else if (name === 'fixed') {
      return 'fixed128x128'
    } else if (name.startsWith('ufixed[')) {
      return 'ufixed128x128' + name.slice(6)
    } else if (name === 'ufixed') {
      return 'ufixed128x128'
    }
    return name
  }

  ABI.eventID = function (name, types) {
    // FIXME: use node.js util.format?
    var sig = name + '(' + types.map(elementaryName).join(',') + ')';
    return utils.keccak256(Buffer.from(sig))
  };

  ABI.methodID = function (name, types) {
    return ABI.eventID(name, types).slice(0, 4)
  };

  // Parse N from type<N>
  function parseTypeN (type) {
    return parseInt(/^\D+(\d+)$/.exec(type)[1], 10)
  }

  // Parse N,M from type<N>x<M>
  function parseTypeNxM (type) {
    var tmp = /^\D+(\d+)x(\d+)$/.exec(type);
    return [ parseInt(tmp[1], 10), parseInt(tmp[2], 10) ]
  }

  // Parse N in type[<N>] where "type" can itself be an array type.
  function parseTypeArray (type) {
    var tmp = type.match(/(.*)\[(.*?)\]$/);
    if (tmp) {
      return tmp[2] === '' ? 'dynamic' : parseInt(tmp[2], 10)
    }
    return null
  }

  function parseNumber (arg) {
    var type = typeof arg;
    if (type === 'string') {
      if (utils.isHexPrefixed(arg)) {
        return new BN$1(utils.stripHexPrefix(arg), 16)
      } else {
        return new BN$1(arg, 10)
      }
    } else if (type === 'number') {
      return new BN$1(arg)
    } else if (arg.toArray) {
      // assume this is a BN for the moment, replace with BN.isBN soon
      return arg
    } else {
      throw new Error('Argument is not a number')
    }
  }

  // someMethod(bytes,uint)
  // someMethod(bytes,uint):(boolean)
  function parseSignature (sig) {
    var tmp = /^(\w+)\((.*)\)$/.exec(sig);

    if (tmp.length !== 3) {
      throw new Error('Invalid method signature')
    }

    var args = /^(.+)\):\((.+)$/.exec(tmp[2]);

    if (args !== null && args.length === 3) {
      return {
        method: tmp[1],
        args: args[1].split(','),
        retargs: args[2].split(',')
      }
    } else {
      var params = tmp[2].split(',');
      if (params.length === 1 && params[0] === '') {
        // Special-case (possibly naive) fixup for functions that take no arguments.
        // TODO: special cases are always bad, but this makes the function return
        // match what the calling functions expect
        params = [];
      }
      return {
        method: tmp[1],
        args: params
      }
    }
  }

  // Encodes a single item (can be dynamic array)
  // @returns: Buffer
  function encodeSingle (type, arg) {
    var size, num, ret, i;

    if (type === 'address') {
      return encodeSingle('uint160', parseNumber(arg))
    } else if (type === 'bool') {
      return encodeSingle('uint8', arg ? 1 : 0)
    } else if (type === 'string') {
      return encodeSingle('bytes', Buffer.from(arg, 'utf8'))
    } else if (isArray(type)) {
      // this part handles fixed-length ([2]) and variable length ([]) arrays
      // NOTE: we catch here all calls to arrays, that simplifies the rest
      if (typeof arg.length === 'undefined') {
        throw new Error('Not an array?')
      }
      size = parseTypeArray(type);
      if (size !== 'dynamic' && size !== 0 && arg.length > size) {
        throw new Error('Elements exceed array size: ' + size)
      }
      ret = [];
      type = type.slice(0, type.lastIndexOf('['));
      if (typeof arg === 'string') {
        arg = JSON.parse(arg);
      }
      for (i in arg) {
        ret.push(encodeSingle(type, arg[i]));
      }
      if (size === 'dynamic') {
        var length = encodeSingle('uint256', arg.length);
        ret.unshift(length);
      }
      return Buffer.concat(ret)
    } else if (type === 'bytes') {
      arg = Buffer.from(arg);

      ret = Buffer.concat([ encodeSingle('uint256', arg.length), arg ]);

      if ((arg.length % 32) !== 0) {
        ret = Buffer.concat([ ret, utils.zeros(32 - (arg.length % 32)) ]);
      }

      return ret
    } else if (type.startsWith('bytes')) {
      size = parseTypeN(type);
      if (size < 1 || size > 32) {
        throw new Error('Invalid bytes<N> width: ' + size)
      }

      return utils.setLengthRight(arg, 32)
    } else if (type.startsWith('uint')) {
      size = parseTypeN(type);
      if ((size % 8) || (size < 8) || (size > 256)) {
        throw new Error('Invalid uint<N> width: ' + size)
      }

      num = parseNumber(arg);
      if (num.bitLength() > size) {
        throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength())
      }

      if (num < 0) {
        throw new Error('Supplied uint is negative')
      }

      return num.toArrayLike(Buffer, 'be', 32)
    } else if (type.startsWith('int')) {
      size = parseTypeN(type);
      if ((size % 8) || (size < 8) || (size > 256)) {
        throw new Error('Invalid int<N> width: ' + size)
      }

      num = parseNumber(arg);
      if (num.bitLength() > size) {
        throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength())
      }

      return num.toTwos(256).toArrayLike(Buffer, 'be', 32)
    } else if (type.startsWith('ufixed')) {
      size = parseTypeNxM(type);

      num = parseNumber(arg);

      if (num < 0) {
        throw new Error('Supplied ufixed is negative')
      }

      return encodeSingle('uint256', num.mul(new BN$1(2).pow(new BN$1(size[1]))))
    } else if (type.startsWith('fixed')) {
      size = parseTypeNxM(type);

      return encodeSingle('int256', parseNumber(arg).mul(new BN$1(2).pow(new BN$1(size[1]))))
    }

    throw new Error('Unsupported or invalid type: ' + type)
  }

  // Decodes a single item (can be dynamic array)
  // @returns: array
  // FIXME: this method will need a lot of attention at checking limits and validation
  function decodeSingle (parsedType, data, offset) {
    if (typeof parsedType === 'string') {
      parsedType = parseType(parsedType);
    }
    var size, num, ret, i;

    if (parsedType.name === 'address') {
      return decodeSingle(parsedType.rawType, data, offset).toArrayLike(Buffer, 'be', 20).toString('hex')
    } else if (parsedType.name === 'bool') {
      return decodeSingle(parsedType.rawType, data, offset).toString() === new BN$1(1).toString()
    } else if (parsedType.name === 'string') {
      var bytes = decodeSingle(parsedType.rawType, data, offset);
      return Buffer.from(bytes, 'utf8').toString()
    } else if (parsedType.isArray) {
      // this part handles fixed-length arrays ([2]) and variable length ([]) arrays
      // NOTE: we catch here all calls to arrays, that simplifies the rest
      ret = [];
      size = parsedType.size;

      if (parsedType.size === 'dynamic') {
        offset = decodeSingle('uint256', data, offset).toNumber();
        size = decodeSingle('uint256', data, offset).toNumber();
        offset = offset + 32;
      }
      for (i = 0; i < size; i++) {
        var decoded = decodeSingle(parsedType.subArray, data, offset);
        ret.push(decoded);
        offset += parsedType.subArray.memoryUsage;
      }
      return ret
    } else if (parsedType.name === 'bytes') {
      offset = decodeSingle('uint256', data, offset).toNumber();
      size = decodeSingle('uint256', data, offset).toNumber();
      return data.slice(offset + 32, offset + 32 + size)
    } else if (parsedType.name.startsWith('bytes')) {
      return data.slice(offset, offset + parsedType.size)
    } else if (parsedType.name.startsWith('uint')) {
      num = new BN$1(data.slice(offset, offset + 32), 16, 'be');
      if (num.bitLength() > parsedType.size) {
        throw new Error('Decoded int exceeds width: ' + parsedType.size + ' vs ' + num.bitLength())
      }
      return num
    } else if (parsedType.name.startsWith('int')) {
      num = new BN$1(data.slice(offset, offset + 32), 16, 'be').fromTwos(256);
      if (num.bitLength() > parsedType.size) {
        throw new Error('Decoded uint exceeds width: ' + parsedType.size + ' vs ' + num.bitLength())
      }

      return num
    } else if (parsedType.name.startsWith('ufixed')) {
      size = new BN$1(2).pow(new BN$1(parsedType.size[1]));
      num = decodeSingle('uint256', data, offset);
      if (!num.mod(size).isZero()) {
        throw new Error('Decimals not supported yet')
      }
      return num.div(size)
    } else if (parsedType.name.startsWith('fixed')) {
      size = new BN$1(2).pow(new BN$1(parsedType.size[1]));
      num = decodeSingle('int256', data, offset);
      if (!num.mod(size).isZero()) {
        throw new Error('Decimals not supported yet')
      }
      return num.div(size)
    }
    throw new Error('Unsupported or invalid type: ' + parsedType.name)
  }

  // Parse the given type
  // @returns: {} containing the type itself, memory usage and (including size and subArray if applicable)
  function parseType (type) {
    var size;
    var ret;
    if (isArray(type)) {
      size = parseTypeArray(type);
      var subArray = type.slice(0, type.lastIndexOf('['));
      subArray = parseType(subArray);
      ret = {
        isArray: true,
        name: type,
        size: size,
        memoryUsage: size === 'dynamic' ? 32 : subArray.memoryUsage * size,
        subArray: subArray
      };
      return ret
    } else {
      var rawType;
      switch (type) {
        case 'address':
          rawType = 'uint160';
          break
        case 'bool':
          rawType = 'uint8';
          break
        case 'string':
          rawType = 'bytes';
          break
      }
      ret = {
        rawType: rawType,
        name: type,
        memoryUsage: 32
      };

      if ((type.startsWith('bytes') && type !== 'bytes') || type.startsWith('uint') || type.startsWith('int')) {
        ret.size = parseTypeN(type);
      } else if (type.startsWith('ufixed') || type.startsWith('fixed')) {
        ret.size = parseTypeNxM(type);
      }

      if (type.startsWith('bytes') && type !== 'bytes' && (ret.size < 1 || ret.size > 32)) {
        throw new Error('Invalid bytes<N> width: ' + ret.size)
      }
      if ((type.startsWith('uint') || type.startsWith('int')) && (ret.size % 8 || ret.size < 8 || ret.size > 256)) {
        throw new Error('Invalid int/uint<N> width: ' + ret.size)
      }
      return ret
    }
  }

  // Is a type dynamic?
  function isDynamic (type) {
    // FIXME: handle all types? I don't think anything is missing now
    return (type === 'string') || (type === 'bytes') || (parseTypeArray(type) === 'dynamic')
  }

  // Is a type an array?
  function isArray (type) {
    return type.lastIndexOf(']') === type.length - 1
  }

  // Encode a method/event with arguments
  // @types an array of string type names
  // @args  an array of the appropriate values
  ABI.rawEncode = function (types, values) {
    var output = [];
    var data = [];

    var headLength = 0;

    types.forEach(function (type) {
      if (isArray(type)) {
        var size = parseTypeArray(type);

        if (size !== 'dynamic') {
          headLength += 32 * size;
        } else {
          headLength += 32;
        }
      } else {
        headLength += 32;
      }
    });

    for (var i = 0; i < types.length; i++) {
      var type = elementaryName(types[i]);
      var value = values[i];
      var cur = encodeSingle(type, value);

      // Use the head/tail method for storing dynamic data
      if (isDynamic(type)) {
        output.push(encodeSingle('uint256', headLength));
        data.push(cur);
        headLength += cur.length;
      } else {
        output.push(cur);
      }
    }

    return Buffer.concat(output.concat(data))
  };

  ABI.rawDecode = function (types, data) {
    var ret = [];
    data = Buffer.from(data);
    var offset = 0;
    for (var i = 0; i < types.length; i++) {
      var type = elementaryName(types[i]);
      var parsed = parseType(type);
      var decoded = decodeSingle(parsed, data, offset);
      offset += parsed.memoryUsage;
      ret.push(decoded);
    }
    return ret
  };

  ABI.simpleEncode = function (method) {
    var args = Array.prototype.slice.call(arguments).slice(1);
    var sig = parseSignature(method);

    // FIXME: validate/convert arguments
    if (args.length !== sig.args.length) {
      throw new Error('Argument count mismatch')
    }

    return Buffer.concat([ ABI.methodID(sig.method, sig.args), ABI.rawEncode(sig.args, args) ])
  };

  ABI.simpleDecode = function (method, data) {
    var sig = parseSignature(method);

    // FIXME: validate/convert arguments
    if (!sig.retargs) {
      throw new Error('No return values in method')
    }

    return ABI.rawDecode(sig.retargs, data)
  };

  function stringify (type, value) {
    if (type.startsWith('address') || type.startsWith('bytes')) {
      return '0x' + value.toString('hex')
    } else {
      return value.toString()
    }
  }

  ABI.stringify = function (types, values) {
    var ret = [];

    for (var i in types) {
      var type = types[i];
      var value = values[i];

      // if it is an array type, concat the items
      if (/^[^\[]+\[.*\]$/.test(type)) {
        value = value.map(function (item) {
          return stringify(type, item)
        }).join(', ');
      } else {
        value = stringify(type, value);
      }

      ret.push(value);
    }

    return ret
  };

  ABI.solidityHexValue = function (type, value, bitsize) {
    // pass in bitsize = null if use default bitsize
    var size, num;
    if (isArray(type)) {
      var subType = type.replace(/\[.*?\]/, '');
      if (!isArray(subType)) {
        var arraySize = parseTypeArray(type);
        if (arraySize !== 'dynamic' && arraySize !== 0 && value.length > arraySize) {
          throw new Error('Elements exceed array size: ' + arraySize)
        }
      }
      var arrayValues = value.map(function (v) {
        return ABI.solidityHexValue(subType, v, 256)
      });
      return Buffer.concat(arrayValues)
    } else if (type === 'bytes') {
      return value
    } else if (type === 'string') {
      return Buffer.from(value, 'utf8')
    } else if (type === 'bool') {
      bitsize = bitsize || 8;
      var padding = Array((bitsize) / 4).join('0');
      return Buffer.from(value ? padding + '1' : padding + '0', 'hex')
    } else if (type === 'address') {
      var bytesize = 20;
      if (bitsize) {
        bytesize = bitsize / 8;
      }
      return utils.setLengthLeft(value, bytesize)
    } else if (type.startsWith('bytes')) {
      size = parseTypeN(type);
      if (size < 1 || size > 32) {
        throw new Error('Invalid bytes<N> width: ' + size)
      }

      return utils.setLengthRight(value, size)
    } else if (type.startsWith('uint')) {
      size = parseTypeN(type);
      if ((size % 8) || (size < 8) || (size > 256)) {
        throw new Error('Invalid uint<N> width: ' + size)
      }

      num = parseNumber(value);
      if (num.bitLength() > size) {
        throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength())
      }

      bitsize = bitsize || size;
      return num.toArrayLike(Buffer, 'be', bitsize / 8)
    } else if (type.startsWith('int')) {
      size = parseTypeN(type);
      if ((size % 8) || (size < 8) || (size > 256)) {
        throw new Error('Invalid int<N> width: ' + size)
      }

      num = parseNumber(value);
      if (num.bitLength() > size) {
        throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength())
      }

      bitsize = bitsize || size;
      return num.toTwos(size).toArrayLike(Buffer, 'be', bitsize / 8)
    } else {
      // FIXME: support all other types
      throw new Error('Unsupported or invalid type: ' + type)
    }
  };

  ABI.solidityPack = function (types, values) {
    if (types.length !== values.length) {
      throw new Error('Number of types are not matching the values')
    }

    var ret = [];

    for (var i = 0; i < types.length; i++) {
      var type = elementaryName(types[i]);
      var value = values[i];
      ret.push(ABI.solidityHexValue(type, value, null));
    }

    return Buffer.concat(ret)
  };

  ABI.soliditySHA3 = function (types, values) {
    return utils.keccak256(ABI.solidityPack(types, values))
  };

  ABI.soliditySHA256 = function (types, values) {
    return utils.sha256(ABI.solidityPack(types, values))
  };

  ABI.solidityRIPEMD160 = function (types, values) {
    return utils.ripemd160(ABI.solidityPack(types, values), true)
  };

  // Serpent's users are familiar with this encoding
  // - s: string
  // - b: bytes
  // - b<N>: bytes<N>
  // - i: int256
  // - a: int256[]

  function isNumeric (c) {
    // FIXME: is this correct? Seems to work
    return (c >= '0') && (c <= '9')
  }

  // For a "documentation" refer to https://github.com/ethereum/serpent/blob/develop/preprocess.cpp
  ABI.fromSerpent = function (sig) {
    var ret = [];
    for (var i = 0; i < sig.length; i++) {
      var type = sig[i];
      if (type === 's') {
        ret.push('bytes');
      } else if (type === 'b') {
        var tmp = 'bytes';
        var j = i + 1;
        while ((j < sig.length) && isNumeric(sig[j])) {
          tmp += sig[j] - '0';
          j++;
        }
        i = j - 1;
        ret.push(tmp);
      } else if (type === 'i') {
        ret.push('int256');
      } else if (type === 'a') {
        ret.push('int256[]');
      } else {
        throw new Error('Unsupported or invalid type: ' + type)
      }
    }
    return ret
  };

  ABI.toSerpent = function (types) {
    var ret = [];
    for (var i = 0; i < types.length; i++) {
      var type = types[i];
      if (type === 'bytes') {
        ret.push('s');
      } else if (type.startsWith('bytes')) {
        ret.push('b' + parseTypeN(type));
      } else if (type === 'int256') {
        ret.push('i');
      } else if (type === 'int256[]') {
        ret.push('a');
      } else {
        throw new Error('Unsupported or invalid type: ' + type)
      }
    }
    return ret.join('')
  };

  var lib = ABI;

  var ethereumjsAbi = lib;

  const ethUtil$3 = dist$4;
  const ethAbi = ethereumjsAbi;

  var ethSigUtil = {

    concatSig: function (v, r, s) {
      const rSig = ethUtil$3.fromSigned(r);
      const sSig = ethUtil$3.fromSigned(s);
      const vSig = ethUtil$3.bufferToInt(v);
      const rStr = padWithZeroes(ethUtil$3.toUnsigned(rSig).toString('hex'), 64);
      const sStr = padWithZeroes(ethUtil$3.toUnsigned(sSig).toString('hex'), 64);
      const vStr = ethUtil$3.stripHexPrefix(ethUtil$3.intToHex(vSig));
      return ethUtil$3.addHexPrefix(rStr.concat(sStr, vStr)).toString('hex')
    },

    normalize: function (input) {
      if (!input) return

      if (typeof input === 'number') {
        const buffer = ethUtil$3.toBuffer(input);
        input = ethUtil$3.bufferToHex(buffer);
      }

      if (typeof input !== 'string') {
        var msg = 'eth-sig-util.normalize() requires hex string or integer input.';
        msg += ' received ' + (typeof input) + ': ' + input;
        throw new Error(msg)
      }

      return ethUtil$3.addHexPrefix(input.toLowerCase())
    },

    personalSign: function (privateKey, msgParams) {
      var message = ethUtil$3.toBuffer(msgParams.data);
      var msgHash = ethUtil$3.hashPersonalMessage(message);
      var sig = ethUtil$3.ecsign(msgHash, privateKey);
      var serialized = ethUtil$3.bufferToHex(this.concatSig(sig.v, sig.r, sig.s));
      return serialized
    },

    recoverPersonalSignature: function (msgParams) {
      const publicKey = getPublicKeyFor(msgParams);
      const sender = ethUtil$3.publicToAddress(publicKey);
      const senderHex = ethUtil$3.bufferToHex(sender);
      return senderHex
    },

    extractPublicKey: function (msgParams) {
      const publicKey = getPublicKeyFor(msgParams);
      return '0x' + publicKey.toString('hex')
    },

    typedSignatureHash: function (typedData) {
      const hashBuffer = typedSignatureHash(typedData);
      return ethUtil$3.bufferToHex(hashBuffer)
    },

    signTypedData: function (privateKey, msgParams) {
      const msgHash = typedSignatureHash(msgParams.data);
      const sig = ethUtil$3.ecsign(msgHash, privateKey);
      return ethUtil$3.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))
    },

    recoverTypedSignature: function (msgParams) {
      const msgHash = typedSignatureHash(msgParams.data);
      const publicKey = recoverPublicKey(msgHash, msgParams.sig);
      const sender = ethUtil$3.publicToAddress(publicKey);
      return ethUtil$3.bufferToHex(sender)
    }

  };

  /**
   * @param typedData - Array of data along with types, as per EIP712.
   * @returns Buffer
   */
  function typedSignatureHash(typedData) {
    const error = new Error('Expect argument to be non-empty array');
    if (typeof typedData !== 'object' || !typedData.length) throw error

    const data = typedData.map(function (e) {
      return e.type === 'bytes' ? ethUtil$3.toBuffer(e.value) : e.value
    });
    const types = typedData.map(function (e) { return e.type });
    const schema = typedData.map(function (e) {
      if (!e.name) throw error
      return e.type + ' ' + e.name
    });

    return ethAbi.soliditySHA3(
      ['bytes32', 'bytes32'],
      [
        ethAbi.soliditySHA3(new Array(typedData.length).fill('string'), schema),
        ethAbi.soliditySHA3(types, data)
      ]
    )
  }

  function recoverPublicKey(hash, sig) {
    const signature = ethUtil$3.toBuffer(sig);
    const sigParams = ethUtil$3.fromRpcSig(signature);
    return ethUtil$3.ecrecover(hash, sigParams.v, sigParams.r, sigParams.s)
  }

  function getPublicKeyFor (msgParams) {
    const message = ethUtil$3.toBuffer(msgParams.data);
    const msgHash = ethUtil$3.hashPersonalMessage(message);
    return recoverPublicKey(msgHash, msgParams.sig)
  }


  function padWithZeroes (number, length) {
    var myString = '' + number;
    while (myString.length < length) {
      myString = '0' + myString;
    }
    return myString
  }

  var semaphore = {exports: {}};

  (function (module, exports) {
  (function(global) {

  var nextTick = function (fn) { setTimeout(fn, 0); };
  if (typeof process != 'undefined' && process && typeof process.nextTick == 'function') {
  	// node.js and the like
  	nextTick = process.nextTick;
  }

  function semaphore(capacity) {
  	var semaphore = {
  		capacity: capacity || 1,
  		current: 0,
  		queue: [],
  		firstHere: false,

  		take: function() {
  			if (semaphore.firstHere === false) {
          			semaphore.current++;
          			semaphore.firstHere = true;
          			var isFirst = 1;
        			} else {
          			var isFirst = 0;
        			}
  			var item = { n: 1 };

  			if (typeof arguments[0] == 'function') {
  				item.task = arguments[0];
  			} else {
  				item.n = arguments[0];
  			}

  			if (arguments.length >= 2)  {
  				if (typeof arguments[1] == 'function') item.task = arguments[1];
  				else item.n = arguments[1];
  			}

  			var task = item.task;
  			item.task = function() { task(semaphore.leave); };

  			if (semaphore.current + item.n - isFirst > semaphore.capacity) {
          			if (isFirst === 1) {
          				semaphore.current--;
          				semaphore.firstHere = false;
          			}
  				return semaphore.queue.push(item);
  			}

  			semaphore.current += item.n - isFirst;
  			item.task(semaphore.leave);
        			if (isFirst === 1) semaphore.firstHere = false;
  		},

  		leave: function(n) {
  			n = n || 1;

  			semaphore.current -= n;

  			if (!semaphore.queue.length) {
  				if (semaphore.current < 0) {
  					throw new Error('leave called too many times.');
  				}

  				return;
  			}

  			var item = semaphore.queue[0];

  			if (item.n + semaphore.current > semaphore.capacity) {
  				return;
  			}

  			semaphore.queue.shift();
  			semaphore.current += item.n;

  			nextTick(item.task);
  		},

  		available: function(n) {
  			n = n || 1;
  			return(semaphore.current + n <= semaphore.capacity);
  		}
  	};

  	return semaphore;
  }
  {
      // node export
      module.exports = semaphore;
  }
  }());
  }(semaphore));

  const createPayload = createPayload_1;

  var estimateGas_1 = estimateGas$1;

  /*

  This is a work around for https://github.com/ethereum/go-ethereum/issues/2577

  */


  function estimateGas$1(provider, txParams, cb) {
    provider.sendAsync(createPayload({
      method: 'eth_estimateGas',
      params: [txParams]
    }), function(err, res){
      if (err) {
        // handle simple value transfer case
        if (err.message === 'no contract code at given address') {
          return cb(null, '0xcf08')
        } else {
          return cb(err)        
        }
      }
      cb(null, res.result);
    });
  }

  /*
   * Emulate 'eth_accounts' / 'eth_sendTransaction' using 'eth_sendRawTransaction'
   *
   * The two callbacks a user needs to implement are:
   * - getAccounts() -- array of addresses supported
   * - signTransaction(tx) -- sign a raw transaction object
   */

  const waterfall = waterfall$1.exports;
  const parallel = parallel$2.exports;
  const inherits$1 = require$$0__default$4["default"].inherits;
  const ethUtil$2 = dist$4;
  const sigUtil = ethSigUtil;
  const extend = immutable;
  const Semaphore = semaphore.exports;
  const Subprovider$1 = subprovider;
  const estimateGas = estimateGas_1;
  const hexRegex = /^[0-9A-Fa-f]+$/g;

  var hookedWallet = HookedWalletSubprovider$1;

  // handles the following RPC methods:
  //   eth_coinbase
  //   eth_accounts
  //   eth_sendTransaction
  //   eth_sign
  //   eth_signTypedData
  //   eth_signTypedData_v3
  //   eth_signTypedData_v4
  //   personal_sign
  //   eth_decryptMessage
  //   encryption_public_key
  //   personal_ecRecover
  //   parity_postTransaction
  //   parity_checkRequest
  //   parity_defaultAccount

  //
  // Tx Signature Flow
  //
  // handleRequest: eth_sendTransaction
  //   validateTransaction (basic validity check)
  //     validateSender (checks that sender is in accounts)
  //   processTransaction (sign tx and submit to network)
  //     approveTransaction (UI approval hook)
  //     checkApproval
  //     finalizeAndSubmitTx (tx signing)
  //       nonceLock.take (bottle neck to ensure atomic nonce)
  //         fillInTxExtras (set fallback gasPrice, nonce, etc)
  //         signTransaction (perform the signature)
  //         publishTransaction (publish signed tx to network)
  //


  inherits$1(HookedWalletSubprovider$1, Subprovider$1);

  function HookedWalletSubprovider$1(opts){
    const self = this;
    // control flow
    self.nonceLock = Semaphore(1);

    // data lookup
    if (opts.getAccounts) self.getAccounts = opts.getAccounts;
    // high level override
    if (opts.processTransaction) self.processTransaction = opts.processTransaction;
    if (opts.processMessage) self.processMessage = opts.processMessage;
    if (opts.processPersonalMessage) self.processPersonalMessage = opts.processPersonalMessage;
    if (opts.processTypedMessage) self.processTypedMessage = opts.processTypedMessage;
    // approval hooks
    self.approveTransaction = opts.approveTransaction || self.autoApprove;
    self.approveMessage = opts.approveMessage || self.autoApprove;
    self.approvePersonalMessage = opts.approvePersonalMessage || self.autoApprove;
    self.approveDecryptMessage = opts.approveDecryptMessage || self.autoApprove;
    self.approveEncryptionPublicKey = opts.approveEncryptionPublicKey || self.autoApprove;
    self.approveTypedMessage = opts.approveTypedMessage || self.autoApprove;
    // actually perform the signature
    if (opts.signTransaction) self.signTransaction = opts.signTransaction  || mustProvideInConstructor('signTransaction');
    if (opts.signMessage) self.signMessage = opts.signMessage  || mustProvideInConstructor('signMessage');
    if (opts.signPersonalMessage) self.signPersonalMessage = opts.signPersonalMessage  || mustProvideInConstructor('signPersonalMessage');
    if (opts.decryptMessage) self.decryptMessage = opts.decryptMessage  || mustProvideInConstructor('decryptMessage');
    if (opts.encryptionPublicKey) self.encryptionPublicKey = opts.encryptionPublicKey  || mustProvideInConstructor('encryptionPublicKey');
    if (opts.signTypedMessage) self.signTypedMessage = opts.signTypedMessage  || mustProvideInConstructor('signTypedMessage');
    if (opts.recoverPersonalSignature) self.recoverPersonalSignature = opts.recoverPersonalSignature;
    // publish to network
    if (opts.publishTransaction) self.publishTransaction = opts.publishTransaction;
    // gas options
    self.estimateGas = opts.estimateGas || self.estimateGas;
    self.getGasPrice = opts.getGasPrice || self.getGasPrice;
  }

  HookedWalletSubprovider$1.prototype.handleRequest = function(payload, next, end){
    const self = this;
    self._parityRequests = {};
    self._parityRequestCount = 0;

    // switch statement is not block scoped
    // sp we cant repeat var declarations
    let txParams, msgParams, extraParams;
    let message, address;

    switch(payload.method) {

      case 'eth_coinbase':
        // process normally
        self.getAccounts(function(err, accounts){
          if (err) return end(err)
          let result = accounts[0] || null;
          end(null, result);
        });
        return

      case 'eth_accounts':
        // process normally
        self.getAccounts(function(err, accounts){
          if (err) return end(err)
          end(null, accounts);
        });
        return

      case 'eth_sendTransaction':
        txParams = payload.params[0];
        waterfall([
          (cb) => self.validateTransaction(txParams, cb),
          (cb) => self.processTransaction(txParams, cb),
        ], end);
        return

      case 'eth_signTransaction':
        txParams = payload.params[0];
        waterfall([
          (cb) => self.validateTransaction(txParams, cb),
          (cb) => self.processSignTransaction(txParams, cb),
        ], end);
        return

      case 'eth_sign':
        // process normally
        address = payload.params[0];
        message = payload.params[1];
        // non-standard "extraParams" to be appended to our "msgParams" obj
        // good place for metadata
        extraParams = payload.params[2] || {};
        msgParams = extend(extraParams, {
          from: address,
          data: message,
        });
        waterfall([
          (cb) => self.validateMessage(msgParams, cb),
          (cb) => self.processMessage(msgParams, cb),
        ], end);
        return

      case 'personal_sign':
        return (function(){
          // process normally
          const first = payload.params[0];
          const second = payload.params[1];

          // We initially incorrectly ordered these parameters.
          // To gracefully respect users who adopted this API early,
          // we are currently gracefully recovering from the wrong param order
          // when it is clearly identifiable.
          //
          // That means when the first param is definitely an address,
          // and the second param is definitely not, but is hex.
          if (resemblesData(second) && resemblesAddress(first)) {
            let warning = `The eth_personalSign method requires params ordered `;
            warning += `[message, address]. This was previously handled incorrectly, `;
            warning += `and has been corrected automatically. `;
            warning += `Please switch this param order for smooth behavior in the future.`;
            console.warn(warning);

            address = payload.params[0];
            message = payload.params[1];
          } else {
            message = payload.params[0];
            address = payload.params[1];
          }

          // non-standard "extraParams" to be appended to our "msgParams" obj
          // good place for metadata
          extraParams = payload.params[2] || {};
          msgParams = extend(extraParams, {
            from: address,
            data: message,
          });
          waterfall([
            (cb) => self.validatePersonalMessage(msgParams, cb),
            (cb) => self.processPersonalMessage(msgParams, cb),
          ], end);
        })()

      case 'eth_decryptMessage':
        return (function(){
          // process normally
          const first = payload.params[0];
          const second = payload.params[1];

          // We initially incorrectly ordered these parameters.
          // To gracefully respect users who adopted this API early,
          // we are currently gracefully recovering from the wrong param order
          // when it is clearly identifiable.
          //
          // That means when the first param is definitely an address,
          // and the second param is definitely not, but is hex.
          if (resemblesData(second) && resemblesAddress(first)) {
            let warning = `The eth_decryptMessage method requires params ordered `;
            warning += `[message, address]. This was previously handled incorrectly, `;
            warning += `and has been corrected automatically. `;
            warning += `Please switch this param order for smooth behavior in the future.`;
            console.warn(warning);

            address = payload.params[0];
            message = payload.params[1];
          } else {
            message = payload.params[0];
            address = payload.params[1];
          }

          // non-standard "extraParams" to be appended to our "msgParams" obj
          // good place for metadata
          extraParams = payload.params[2] || {};
          msgParams = extend(extraParams, {
            from: address,
            data: message,
          });
          waterfall([
            (cb) => self.validateDecryptMessage(msgParams, cb),
            (cb) => self.processDecryptMessage(msgParams, cb),
          ], end);
        })()
        
      case 'encryption_public_key':
        return (function(){
          const address = payload.params[0];
          
          waterfall([
            (cb) => self.validateEncryptionPublicKey(address, cb),
            (cb) => self.processEncryptionPublicKey(address, cb),
          ], end);
        })()
        
      case 'personal_ecRecover':
        return (function(){    
          message = payload.params[0];
          let signature = payload.params[1];
          // non-standard "extraParams" to be appended to our "msgParams" obj
          // good place for metadata
          extraParams = payload.params[2] || {};
          msgParams = extend(extraParams, {
            sig: signature,
            data: message,
          });
          self.recoverPersonalSignature(msgParams, end);
        })()

      case 'eth_signTypedData':
      case 'eth_signTypedData_v3':
      case 'eth_signTypedData_v4':
        return (function(){ 
          // process normally
        
          const first = payload.params[0];
          const second = payload.params[1];

          if (resemblesAddress(first)) {
            address = first;
            message = second;
          } else {
            message = first;
            address = second;
          }

          extraParams = payload.params[2] || {};
          msgParams = extend(extraParams, {
            from: address,
            data: message,
          });
          waterfall([
            (cb) => self.validateTypedMessage(msgParams, cb),
            (cb) => self.processTypedMessage(msgParams, cb),
          ], end);
        })()

      case 'parity_postTransaction':
        txParams = payload.params[0];
        self.parityPostTransaction(txParams, end);
        return

      case 'parity_postSign':
        address = payload.params[0];
        message = payload.params[1];
        self.parityPostSign(address, message, end);
        return

      case 'parity_checkRequest':
        return (function(){
          const requestId = payload.params[0];
          self.parityCheckRequest(requestId, end);
        })()

      case 'parity_defaultAccount':
        self.getAccounts(function(err, accounts){
          if (err) return end(err)
          const account = accounts[0] || null;
          end(null, account);
        });
        return

      default:
        next();
        return

    }
  };

  //
  // data lookup
  //

  HookedWalletSubprovider$1.prototype.getAccounts = function(cb) {
    cb(null, []);
  };


  //
  // "process" high level flow
  //

  HookedWalletSubprovider$1.prototype.processTransaction = function(txParams, cb) {
    const self = this;
    waterfall([
      (cb) => self.approveTransaction(txParams, cb),
      (didApprove, cb) => self.checkApproval('transaction', didApprove, cb),
      (cb) => self.finalizeAndSubmitTx(txParams, cb),
    ], cb);
  };


  HookedWalletSubprovider$1.prototype.processSignTransaction = function(txParams, cb) {
    const self = this;
    waterfall([
      (cb) => self.approveTransaction(txParams, cb),
      (didApprove, cb) => self.checkApproval('transaction', didApprove, cb),
      (cb) => self.finalizeTx(txParams, cb),
    ], cb);
  };

  HookedWalletSubprovider$1.prototype.processMessage = function(msgParams, cb) {
    const self = this;
    waterfall([
      (cb) => self.approveMessage(msgParams, cb),
      (didApprove, cb) => self.checkApproval('message', didApprove, cb),
      (cb) => self.signMessage(msgParams, cb),
    ], cb);
  };

  HookedWalletSubprovider$1.prototype.processPersonalMessage = function(msgParams, cb) {
    const self = this;
    waterfall([
      (cb) => self.approvePersonalMessage(msgParams, cb),
      (didApprove, cb) => self.checkApproval('message', didApprove, cb),
      (cb) => self.signPersonalMessage(msgParams, cb),
    ], cb);
  };

  HookedWalletSubprovider$1.prototype.processDecryptMessage = function(msgParams, cb) {
    const self = this;
    waterfall([
      (cb) => self.approveDecryptMessage(msgParams, cb),
      (didApprove, cb) => self.checkApproval('decryptMessage', didApprove, cb),
      (cb) => self.decryptMessage(msgParams, cb),
    ], cb);
  };

  HookedWalletSubprovider$1.prototype.processEncryptionPublicKey = function(msgParams, cb) {
    const self = this;
    waterfall([
      (cb) => self.approveEncryptionPublicKey(msgParams, cb),
      (didApprove, cb) => self.checkApproval('encryptionPublicKey', didApprove, cb),
      (cb) => self.encryptionPublicKey(msgParams, cb),
    ], cb);
  };

  HookedWalletSubprovider$1.prototype.processTypedMessage = function(msgParams, cb) {
    const self = this;
    waterfall([
      (cb) => self.approveTypedMessage(msgParams, cb),
      (didApprove, cb) => self.checkApproval('message', didApprove, cb),
      (cb) => self.signTypedMessage(msgParams, cb),
    ], cb);
  };

  //
  // approval
  //

  HookedWalletSubprovider$1.prototype.autoApprove = function(txParams, cb) {
    cb(null, true);
  };

  HookedWalletSubprovider$1.prototype.checkApproval = function(type, didApprove, cb) {
    cb( didApprove ? null : new Error('User denied '+type+' signature.') );
  };

  //
  // parity
  //

  HookedWalletSubprovider$1.prototype.parityPostTransaction = function(txParams, cb) {
    const self = this;

    // get next id
    const count = self._parityRequestCount;
    const reqId = `0x${count.toString(16)}`;
    self._parityRequestCount++;

    self.emitPayload({
      method: 'eth_sendTransaction',
      params: [txParams],
    }, function(error, res){
      if (error) {
        self._parityRequests[reqId] = { error };
        return
      }
      const txHash = res.result;
      self._parityRequests[reqId] = txHash;
    });

    cb(null, reqId);
  };


  HookedWalletSubprovider$1.prototype.parityPostSign = function(address, message, cb) {
    const self = this;

    // get next id
    const count = self._parityRequestCount;
    const reqId = `0x${count.toString(16)}`;
    self._parityRequestCount++;

    self.emitPayload({
      method: 'eth_sign',
      params: [address, message],
    }, function(error, res){
      if (error) {
        self._parityRequests[reqId] = { error };
        return
      }
      const result = res.result;
      self._parityRequests[reqId] = result;
    });

    cb(null, reqId);
  };

  HookedWalletSubprovider$1.prototype.parityCheckRequest = function(reqId, cb) {
    const self = this;
    const result = self._parityRequests[reqId] || null;
    // tx not handled yet
    if (!result) return cb(null, null)
    // tx was rejected (or other error)
    if (result.error) return cb(result.error)
    // tx sent
    cb(null, result);
  };

  //
  // signature and recovery
  //

  HookedWalletSubprovider$1.prototype.recoverPersonalSignature = function(msgParams, cb) {
    let senderHex;
    try {
      senderHex = sigUtil.recoverPersonalSignature(msgParams);
    } catch (err) {
      return cb(err)
    }
    cb(null, senderHex);
  };

  //
  // validation
  //

  HookedWalletSubprovider$1.prototype.validateTransaction = function(txParams, cb){
    const self = this;
    // shortcut: undefined sender is invalid
    if (txParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign transaction.`))
    self.validateSender(txParams.from, function(err, senderIsValid){
      if (err) return cb(err)
      if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign transaction for this address: "${txParams.from}"`))
      cb();
    });
  };

  HookedWalletSubprovider$1.prototype.validateMessage = function(msgParams, cb){
    const self = this;
    if (msgParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign message.`))
    self.validateSender(msgParams.from, function(err, senderIsValid){
      if (err) return cb(err)
      if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign message for this address: "${msgParams.from}"`))
      cb();
    });
  };

  HookedWalletSubprovider$1.prototype.validatePersonalMessage = function(msgParams, cb){
    const self = this;
    if (msgParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign personal message.`))
    if (msgParams.data === undefined) return cb(new Error(`Undefined message - message required to sign personal message.`))
    if (!isValidHex(msgParams.data)) return cb(new Error(`HookedWalletSubprovider - validateMessage - message was not encoded as hex.`))
    self.validateSender(msgParams.from, function(err, senderIsValid){
      if (err) return cb(err)
      if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign message for this address: "${msgParams.from}"`))
      cb();
    });
  };

  HookedWalletSubprovider$1.prototype.validateDecryptMessage = function(msgParams, cb){
    const self = this;
    if (msgParams.from === undefined) return cb(new Error(`Undefined address - from address required to decrypt message.`))
    if (msgParams.data === undefined) return cb(new Error(`Undefined message - message required to decrypt message.`))
    if (!isValidHex(msgParams.data)) return cb(new Error(`HookedWalletSubprovider - validateDecryptMessage - message was not encoded as hex.`))
    self.validateSender(msgParams.from, function(err, senderIsValid){
      if (err) return cb(err)
      if (!senderIsValid) return cb(new Error(`Unknown address - unable to decrypt message for this address: "${msgParams.from}"`))
      cb();
    });
  };

  HookedWalletSubprovider$1.prototype.validateEncryptionPublicKey = function(address, cb){
    const self = this;

    self.validateSender(address, function(err, senderIsValid){
      if (err) return cb(err)
      if (!senderIsValid) return cb(new Error(`Unknown address - unable to obtain encryption public key for this address: "${address}"`))
      cb();
    });
  };

  HookedWalletSubprovider$1.prototype.validateTypedMessage = function(msgParams, cb){
    if (msgParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign typed data.`))
    if (msgParams.data === undefined) return cb(new Error(`Undefined data - message required to sign typed data.`))
    this.validateSender(msgParams.from, function(err, senderIsValid){
      if (err) return cb(err)
      if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign message for this address: "${msgParams.from}"`))
      cb();
    });
  };

  HookedWalletSubprovider$1.prototype.validateSender = function(senderAddress, cb){
    const self = this;
    // shortcut: undefined sender is invalid
    if (!senderAddress) return cb(null, false)
    self.getAccounts(function(err, accounts){
      if (err) return cb(err)
      const senderIsValid = (accounts.map(toLowerCase).indexOf(senderAddress.toLowerCase()) !== -1);
      cb(null, senderIsValid);
    });
  };

  //
  // tx helpers
  //

  HookedWalletSubprovider$1.prototype.finalizeAndSubmitTx = function(txParams, cb) {
    const self = this;
    // can only allow one tx to pass through this flow at a time
    // so we can atomically consume a nonce
    self.nonceLock.take(function(){
      waterfall([
        self.fillInTxExtras.bind(self, txParams),
        self.signTransaction.bind(self),
        self.publishTransaction.bind(self),
      ], function(err, txHash){
        self.nonceLock.leave();
        if (err) return cb(err)
        cb(null, txHash);
      });
    });
  };

  HookedWalletSubprovider$1.prototype.finalizeTx = function(txParams, cb) {
    const self = this;
    // can only allow one tx to pass through this flow at a time
    // so we can atomically consume a nonce
    self.nonceLock.take(function(){
      waterfall([
        self.fillInTxExtras.bind(self, txParams),
        self.signTransaction.bind(self),
      ], function(err, signedTx){
        self.nonceLock.leave();
        if (err) return cb(err)
        cb(null, {raw: signedTx, tx: txParams});
      });
    });
  };

  HookedWalletSubprovider$1.prototype.publishTransaction = function(rawTx, cb) {
    const self = this;
    self.emitPayload({
      method: 'eth_sendRawTransaction',
      params: [rawTx],
    }, function(err, res){
      if (err) return cb(err)
      cb(null, res.result);
    });
  };

  HookedWalletSubprovider$1.prototype.estimateGas = function(txParams, cb) {
    const self = this;
    estimateGas(self.engine, txParams, cb);
  };

  HookedWalletSubprovider$1.prototype.getGasPrice = function(cb) {
    const self = this;
    self.emitPayload({ method: 'eth_gasPrice', params: [] }, function (err, res) {
      if (err) return cb(err)
      cb(null, res.result);
    });
  };

  HookedWalletSubprovider$1.prototype.fillInTxExtras = function(txParams, cb){
    const self = this;
    const address = txParams.from;
    // console.log('fillInTxExtras - address:', address)

    const tasks = {};

    if (txParams.gasPrice === undefined) {
      // console.log("need to get gasprice")
      tasks.gasPrice = self.getGasPrice.bind(self);
    }

    if (txParams.nonce === undefined) {
      // console.log("need to get nonce")
      tasks.nonce = self.emitPayload.bind(self, { method: 'eth_getTransactionCount', params: [address, 'pending'] });
    }

    if (txParams.gas === undefined) {
      // console.log("need to get gas")
      tasks.gas = self.estimateGas.bind(self, cloneTxParams(txParams));
    }

    parallel(tasks, function(err, taskResults) {
      if (err) return cb(err)

      const result = {};
      if (taskResults.gasPrice) result.gasPrice = taskResults.gasPrice;
      if (taskResults.nonce) result.nonce = taskResults.nonce.result;
      if (taskResults.gas) result.gas = taskResults.gas;

      cb(null, extend(txParams, result));
    });
  };

  // util

  // we use this to clean any custom params from the txParams
  function cloneTxParams(txParams){
    return {
      from: txParams.from,
      to: txParams.to,
      value: txParams.value,
      data: txParams.data,
      gas: txParams.gas,
      gasPrice: txParams.gasPrice,
      nonce: txParams.nonce,
    }
  }

  function toLowerCase(string){
    return string.toLowerCase()
  }

  function resemblesAddress (string) {
    const fixed = ethUtil$2.addHexPrefix(string);
    const isValid = ethUtil$2.isValidAddress(fixed);
    return isValid
  }

  // Returns true if resembles hex data
  // but definitely not a valid address.
  function resemblesData (string) {
    const fixed = ethUtil$2.addHexPrefix(string);
    const isValidAddress = ethUtil$2.isValidAddress(fixed);
    return !isValidAddress && isValidHex(string)
  }

  function isValidHex(data) {
    const isString = typeof data === 'string';
    if (!isString) return false
    const isHexPrefixed = data.slice(0,2) === '0x';
    if (!isHexPrefixed) return false
    const nonPrefixed = data.slice(2);
    const isValid = nonPrefixed.match(hexRegex);
    return isValid
  }

  function mustProvideInConstructor(methodName) {
    return function(params, cb) {
      cb(new Error('ProviderEngine - HookedWalletSubprovider - Must provide "' + methodName + '" fn in constructor options'));
    }
  }

  var genesisGasLimit = {
  	v: 5000,
  	d: "Gas limit of the Genesis block."
  };
  var genesisDifficulty = {
  	v: 17179869184,
  	d: "Difficulty of the Genesis block."
  };
  var genesisNonce = {
  	v: "0x0000000000000042",
  	d: "the geneis nonce"
  };
  var genesisExtraData = {
  	v: "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
  	d: "extra data "
  };
  var genesisHash = {
  	v: "0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3",
  	d: "genesis hash"
  };
  var genesisStateRoot = {
  	v: "0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544",
  	d: "the genesis state root"
  };
  var minGasLimit = {
  	v: 5000,
  	d: "Minimum the gas limit may ever be."
  };
  var gasLimitBoundDivisor = {
  	v: 1024,
  	d: "The bound divisor of the gas limit, used in update calculations."
  };
  var minimumDifficulty = {
  	v: 131072,
  	d: "The minimum that the difficulty may ever be."
  };
  var difficultyBoundDivisor = {
  	v: 2048,
  	d: "The bound divisor of the difficulty, used in the update calculations."
  };
  var durationLimit = {
  	v: 13,
  	d: "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not."
  };
  var maximumExtraDataSize = {
  	v: 32,
  	d: "Maximum size extra data may be after Genesis."
  };
  var epochDuration = {
  	v: 30000,
  	d: "Duration between proof-of-work epochs."
  };
  var stackLimit = {
  	v: 1024,
  	d: "Maximum size of VM stack allowed."
  };
  var callCreateDepth = {
  	v: 1024,
  	d: "Maximum depth of call/create stack."
  };
  var tierStepGas = {
  	v: [
  		0,
  		2,
  		3,
  		5,
  		8,
  		10,
  		20
  	],
  	d: "Once per operation, for a selection of them."
  };
  var expGas = {
  	v: 10,
  	d: "Once per EXP instuction."
  };
  var expByteGas = {
  	v: 10,
  	d: "Times ceil(log256(exponent)) for the EXP instruction."
  };
  var sha3Gas = {
  	v: 30,
  	d: "Once per SHA3 operation."
  };
  var sha3WordGas = {
  	v: 6,
  	d: "Once per word of the SHA3 operation's data."
  };
  var sloadGas = {
  	v: 50,
  	d: "Once per SLOAD operation."
  };
  var sstoreSetGas = {
  	v: 20000,
  	d: "Once per SSTORE operation if the zeroness changes from zero."
  };
  var sstoreResetGas = {
  	v: 5000,
  	d: "Once per SSTORE operation if the zeroness does not change from zero."
  };
  var sstoreRefundGas = {
  	v: 15000,
  	d: "Once per SSTORE operation if the zeroness changes to zero."
  };
  var jumpdestGas = {
  	v: 1,
  	d: "Refunded gas, once per SSTORE operation if the zeroness changes to zero."
  };
  var logGas = {
  	v: 375,
  	d: "Per LOG* operation."
  };
  var logDataGas = {
  	v: 8,
  	d: "Per byte in a LOG* operation's data."
  };
  var logTopicGas = {
  	v: 375,
  	d: "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas."
  };
  var createGas = {
  	v: 32000,
  	d: "Once per CREATE operation & contract-creation transaction."
  };
  var callGas = {
  	v: 40,
  	d: "Once per CALL operation & message call transaction."
  };
  var callStipend = {
  	v: 2300,
  	d: "Free gas given at beginning of call."
  };
  var callValueTransferGas = {
  	v: 9000,
  	d: "Paid for CALL when the value transfor is non-zero."
  };
  var callNewAccountGas = {
  	v: 25000,
  	d: "Paid for CALL when the destination address didn't exist prior."
  };
  var suicideRefundGas = {
  	v: 24000,
  	d: "Refunded following a suicide operation."
  };
  var memoryGas = {
  	v: 3,
  	d: "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL."
  };
  var quadCoeffDiv = {
  	v: 512,
  	d: "Divisor for the quadratic particle of the memory cost equation."
  };
  var createDataGas = {
  	v: 200,
  	d: ""
  };
  var txGas = {
  	v: 21000,
  	d: "Per transaction. NOTE: Not payable on data of calls between transactions."
  };
  var txCreation = {
  	v: 32000,
  	d: "the cost of creating a contract via tx"
  };
  var txDataZeroGas = {
  	v: 4,
  	d: "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions."
  };
  var txDataNonZeroGas = {
  	v: 68,
  	d: "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions."
  };
  var copyGas = {
  	v: 3,
  	d: "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added."
  };
  var ecrecoverGas = {
  	v: 3000,
  	d: ""
  };
  var sha256Gas = {
  	v: 60,
  	d: ""
  };
  var sha256WordGas = {
  	v: 12,
  	d: ""
  };
  var ripemd160Gas = {
  	v: 600,
  	d: ""
  };
  var ripemd160WordGas = {
  	v: 120,
  	d: ""
  };
  var identityGas = {
  	v: 15,
  	d: ""
  };
  var identityWordGas = {
  	v: 3,
  	d: ""
  };
  var minerReward = {
  	v: "5000000000000000000",
  	d: "the amount a miner get rewarded for mining a block"
  };
  var ommerReward = {
  	v: "625000000000000000",
  	d: "The amount of wei a miner of an uncle block gets for being inculded in the blockchain"
  };
  var niblingReward = {
  	v: "156250000000000000",
  	d: "the amount a miner gets for inculding a uncle"
  };
  var homeSteadForkNumber = {
  	v: 1150000,
  	d: "the block that the Homestead fork started at"
  };
  var homesteadRepriceForkNumber = {
  	v: 2463000,
  	d: "the block that the Homestead Reprice (EIP150) fork started at"
  };
  var timebombPeriod = {
  	v: 100000,
  	d: "Exponential difficulty timebomb period"
  };
  var freeBlockPeriod = {
  	v: 2
  };
  var require$$1 = {
  	genesisGasLimit: genesisGasLimit,
  	genesisDifficulty: genesisDifficulty,
  	genesisNonce: genesisNonce,
  	genesisExtraData: genesisExtraData,
  	genesisHash: genesisHash,
  	genesisStateRoot: genesisStateRoot,
  	minGasLimit: minGasLimit,
  	gasLimitBoundDivisor: gasLimitBoundDivisor,
  	minimumDifficulty: minimumDifficulty,
  	difficultyBoundDivisor: difficultyBoundDivisor,
  	durationLimit: durationLimit,
  	maximumExtraDataSize: maximumExtraDataSize,
  	epochDuration: epochDuration,
  	stackLimit: stackLimit,
  	callCreateDepth: callCreateDepth,
  	tierStepGas: tierStepGas,
  	expGas: expGas,
  	expByteGas: expByteGas,
  	sha3Gas: sha3Gas,
  	sha3WordGas: sha3WordGas,
  	sloadGas: sloadGas,
  	sstoreSetGas: sstoreSetGas,
  	sstoreResetGas: sstoreResetGas,
  	sstoreRefundGas: sstoreRefundGas,
  	jumpdestGas: jumpdestGas,
  	logGas: logGas,
  	logDataGas: logDataGas,
  	logTopicGas: logTopicGas,
  	createGas: createGas,
  	callGas: callGas,
  	callStipend: callStipend,
  	callValueTransferGas: callValueTransferGas,
  	callNewAccountGas: callNewAccountGas,
  	suicideRefundGas: suicideRefundGas,
  	memoryGas: memoryGas,
  	quadCoeffDiv: quadCoeffDiv,
  	createDataGas: createDataGas,
  	txGas: txGas,
  	txCreation: txCreation,
  	txDataZeroGas: txDataZeroGas,
  	txDataNonZeroGas: txDataNonZeroGas,
  	copyGas: copyGas,
  	ecrecoverGas: ecrecoverGas,
  	sha256Gas: sha256Gas,
  	sha256WordGas: sha256WordGas,
  	ripemd160Gas: ripemd160Gas,
  	ripemd160WordGas: ripemd160WordGas,
  	identityGas: identityGas,
  	identityWordGas: identityWordGas,
  	minerReward: minerReward,
  	ommerReward: ommerReward,
  	niblingReward: niblingReward,
  	homeSteadForkNumber: homeSteadForkNumber,
  	homesteadRepriceForkNumber: homesteadRepriceForkNumber,
  	timebombPeriod: timebombPeriod,
  	freeBlockPeriod: freeBlockPeriod
  };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var ethUtil$1 = dist$4;
  var fees = require$$1;
  var BN = ethUtil$1.BN;

  // secp256k1n/2
  var N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);

  /**
   * Creates a new transaction object.
   *
   * @example
   * var rawTx = {
   *   nonce: '00',
   *   gasPrice: '09184e72a000',
   *   gasLimit: '2710',
   *   to: '0000000000000000000000000000000000000000',
   *   value: '00',
   *   data: '7f7465737432000000000000000000000000000000000000000000000000000000600057',
   *   v: '1c',
   *   r: '5e1d3a76fbf824220eafc8c79ad578ad2b67d01b0c2425eb1f1347e8f50882ab',
   *   s: '5bd428537f05f9830e93792f90ea6a3e2d1ee84952dd96edbae9f658f831ab13'
   * };
   * var tx = new Transaction(rawTx);
   *
   * @class
   * @param {Buffer | Array | Object} data a transaction can be initiailized with either a buffer containing the RLP serialized transaction or an array of buffers relating to each of the tx Properties, listed in order below in the exmple.
   *
   * Or lastly an Object containing the Properties of the transaction like in the Usage example.
   *
   * For Object and Arrays each of the elements can either be a Buffer, a hex-prefixed (0x) String , Number, or an object with a toBuffer method such as Bignum
   *
   * @property {Buffer} raw The raw rlp encoded transaction
   * @param {Buffer} data.nonce nonce number
   * @param {Buffer} data.gasLimit transaction gas limit
   * @param {Buffer} data.gasPrice transaction gas price
   * @param {Buffer} data.to to the to address
   * @param {Buffer} data.value the amount of ether sent
   * @param {Buffer} data.data this will contain the data of the message or the init of a contract
   * @param {Buffer} data.v EC signature parameter
   * @param {Buffer} data.r EC signature parameter
   * @param {Buffer} data.s EC recovery ID
   * @param {Number} data.chainId EIP 155 chainId - mainnet: 1, ropsten: 3
   * */

  var Transaction$1 = function () {
    function Transaction(data) {
      _classCallCheck(this, Transaction);

      data = data || {};
      // Define Properties
      var fields = [{
        name: 'nonce',
        length: 32,
        allowLess: true,
        default: new Buffer([])
      }, {
        name: 'gasPrice',
        length: 32,
        allowLess: true,
        default: new Buffer([])
      }, {
        name: 'gasLimit',
        alias: 'gas',
        length: 32,
        allowLess: true,
        default: new Buffer([])
      }, {
        name: 'to',
        allowZero: true,
        length: 20,
        default: new Buffer([])
      }, {
        name: 'value',
        length: 32,
        allowLess: true,
        default: new Buffer([])
      }, {
        name: 'data',
        alias: 'input',
        allowZero: true,
        default: new Buffer([])
      }, {
        name: 'v',
        allowZero: true,
        default: new Buffer([0x1c])
      }, {
        name: 'r',
        length: 32,
        allowZero: true,
        allowLess: true,
        default: new Buffer([])
      }, {
        name: 's',
        length: 32,
        allowZero: true,
        allowLess: true,
        default: new Buffer([])
      }];

      /**
       * Returns the rlp encoding of the transaction
       * @method serialize
       * @return {Buffer}
       * @memberof Transaction
       * @name serialize
       */
      // attached serialize
      ethUtil$1.defineProperties(this, fields, data);

      /**
       * @property {Buffer} from (read only) sender address of this transaction, mathematically derived from other parameters.
       * @name from
       * @memberof Transaction
       */
      Object.defineProperty(this, 'from', {
        enumerable: true,
        configurable: true,
        get: this.getSenderAddress.bind(this)
      });

      // calculate chainId from signature
      var sigV = ethUtil$1.bufferToInt(this.v);
      var chainId = Math.floor((sigV - 35) / 2);
      if (chainId < 0) chainId = 0;

      // set chainId
      this._chainId = chainId || data.chainId || 0;
      this._homestead = true;
    }

    /**
     * If the tx's `to` is to the creation address
     * @return {Boolean}
     */


    Transaction.prototype.toCreationAddress = function toCreationAddress() {
      return this.to.toString('hex') === '';
    };

    /**
     * Computes a sha3-256 hash of the serialized tx
     * @param {Boolean} [includeSignature=true] whether or not to inculde the signature
     * @return {Buffer}
     */


    Transaction.prototype.hash = function hash(includeSignature) {
      if (includeSignature === undefined) includeSignature = true;

      // EIP155 spec:
      // when computing the hash of a transaction for purposes of signing or recovering,
      // instead of hashing only the first six elements (ie. nonce, gasprice, startgas, to, value, data),
      // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0

      var items = void 0;
      if (includeSignature) {
        items = this.raw;
      } else {
        if (this._chainId > 0) {
          var raw = this.raw.slice();
          this.v = this._chainId;
          this.r = 0;
          this.s = 0;
          items = this.raw;
          this.raw = raw;
        } else {
          items = this.raw.slice(0, 6);
        }
      }

      // create hash
      return ethUtil$1.rlphash(items);
    };

    /**
     * returns the public key of the sender
     * @return {Buffer}
     */


    Transaction.prototype.getChainId = function getChainId() {
      return this._chainId;
    };

    /**
     * returns the sender's address
     * @return {Buffer}
     */


    Transaction.prototype.getSenderAddress = function getSenderAddress() {
      if (this._from) {
        return this._from;
      }
      var pubkey = this.getSenderPublicKey();
      this._from = ethUtil$1.publicToAddress(pubkey);
      return this._from;
    };

    /**
     * returns the public key of the sender
     * @return {Buffer}
     */


    Transaction.prototype.getSenderPublicKey = function getSenderPublicKey() {
      if (!this._senderPubKey || !this._senderPubKey.length) {
        if (!this.verifySignature()) throw new Error('Invalid Signature');
      }
      return this._senderPubKey;
    };

    /**
     * Determines if the signature is valid
     * @return {Boolean}
     */


    Transaction.prototype.verifySignature = function verifySignature() {
      var msgHash = this.hash(false);
      // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.
      if (this._homestead && new BN(this.s).cmp(N_DIV_2) === 1) {
        return false;
      }

      try {
        var v = ethUtil$1.bufferToInt(this.v);
        if (this._chainId > 0) {
          v -= this._chainId * 2 + 8;
        }
        this._senderPubKey = ethUtil$1.ecrecover(msgHash, v, this.r, this.s);
      } catch (e) {
        return false;
      }

      return !!this._senderPubKey;
    };

    /**
     * sign a transaction with a given a private key
     * @param {Buffer} privateKey
     */


    Transaction.prototype.sign = function sign(privateKey) {
      var msgHash = this.hash(false);
      var sig = ethUtil$1.ecsign(msgHash, privateKey);
      if (this._chainId > 0) {
        sig.v += this._chainId * 2 + 8;
      }
      Object.assign(this, sig);
    };

    /**
     * The amount of gas paid for the data in this tx
     * @return {BN}
     */


    Transaction.prototype.getDataFee = function getDataFee() {
      var data = this.raw[5];
      var cost = new BN(0);
      for (var i = 0; i < data.length; i++) {
        data[i] === 0 ? cost.iaddn(fees.txDataZeroGas.v) : cost.iaddn(fees.txDataNonZeroGas.v);
      }
      return cost;
    };

    /**
     * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)
     * @return {BN}
     */


    Transaction.prototype.getBaseFee = function getBaseFee() {
      var fee = this.getDataFee().iaddn(fees.txGas.v);
      if (this._homestead && this.toCreationAddress()) {
        fee.iaddn(fees.txCreation.v);
      }
      return fee;
    };

    /**
     * the up front amount that an account must have for this transaction to be valid
     * @return {BN}
     */


    Transaction.prototype.getUpfrontCost = function getUpfrontCost() {
      return new BN(this.gasLimit).imul(new BN(this.gasPrice)).iadd(new BN(this.value));
    };

    /**
     * validates the signature and checks to see if it has enough gas
     * @param {Boolean} [stringError=false] whether to return a string with a dscription of why the validation failed or return a Bloolean
     * @return {Boolean|String}
     */


    Transaction.prototype.validate = function validate(stringError) {
      var errors = [];
      if (!this.verifySignature()) {
        errors.push('Invalid Signature');
      }

      if (this.getBaseFee().cmp(new BN(this.gasLimit)) > 0) {
        errors.push(['gas limit is too low. Need at least ' + this.getBaseFee()]);
      }

      if (stringError === undefined || stringError === false) {
        return errors.length === 0;
      } else {
        return errors.join(' ');
      }
    };

    return Transaction;
  }();

  var es5 = Transaction$1;

  const inherits = require$$0__default$4["default"].inherits;
  const Transaction = es5;
  const ethUtil = dist$4;
  const Subprovider = subprovider;
  const blockTagForPayload = rpcCacheUtils.blockTagForPayload;

  var nonceTracker = NonceTrackerSubprovider;

  // handles the following RPC methods:
  //   eth_getTransactionCount (pending only)
  //
  // observes the following RPC methods:
  //   eth_sendRawTransaction
  //   evm_revert (to clear the nonce cache)

  inherits(NonceTrackerSubprovider, Subprovider);

  function NonceTrackerSubprovider(opts){
    const self = this;

    self.nonceCache = {};
  }

  NonceTrackerSubprovider.prototype.handleRequest = function(payload, next, end){
    const self = this;

    switch(payload.method) {

      case 'eth_getTransactionCount':
        var blockTag = blockTagForPayload(payload);
        var address = payload.params[0].toLowerCase();
        var cachedResult = self.nonceCache[address];
        // only handle requests against the 'pending' blockTag
        if (blockTag === 'pending') {
          // has a result
          if (cachedResult) {
            end(null, cachedResult);
          // fallthrough then populate cache
          } else {
            next(function(err, result, cb){
              if (err) return cb()
              if (self.nonceCache[address] === undefined) {
                self.nonceCache[address] = result;
              }
              cb();
            });
          }
        } else {
          next();
        }
        return

      case 'eth_sendRawTransaction':
        // allow the request to continue normally
        next(function(err, result, cb){
          // only update local nonce if tx was submitted correctly
          if (err) return cb()
          // parse raw tx
          var rawTx = payload.params[0];
          ethUtil.stripHexPrefix(rawTx);
          Buffer.from(ethUtil.stripHexPrefix(rawTx), 'hex');
          var tx = new Transaction(Buffer.from(ethUtil.stripHexPrefix(rawTx), 'hex'));
          // extract address
          var address = '0x'+tx.getSenderAddress().toString('hex').toLowerCase();
          // extract nonce and increment
          var nonce = ethUtil.bufferToInt(tx.nonce);
          nonce++;
          // hexify and normalize
          var hexNonce = nonce.toString(16);
          if (hexNonce.length%2) hexNonce = '0'+hexNonce;
          hexNonce = '0x'+hexNonce;
          // dont update our record on the nonce until the submit was successful
          // update cache
          self.nonceCache[address] = hexNonce;
          cb();
        });
        return

     // Clear cache on a testrpc revert
     case 'evm_revert':
        self.nonceCache = {};
        next();
        return

      default:
        next();
        return

    }
  };

  const SafeEventEmitter = safeEventEmitter.default;
  const createScaffoldMiddleware = scaffold;
  const { createAsyncMiddleware } = dist$2;
  const createFilterMiddleware = ethJsonRpcFilters;
  const { unsafeRandomBytes, incrementHexInt } = hexUtils;
  const getBlocksForRange = getBlocksForRange_1;

  var subscriptionManager = createSubscriptionMiddleware;


  function createSubscriptionMiddleware({ blockTracker, provider }) {
    // state and utilities for handling subscriptions
    const subscriptions = {};
    const filterManager = createFilterMiddleware({ blockTracker, provider });

    // internal flag
    let isDestroyed = false;

    // create subscriptionManager api object
    const events = new SafeEventEmitter();
    const middleware = createScaffoldMiddleware({
      eth_subscribe: createAsyncMiddleware(subscribe),
      eth_unsubscribe: createAsyncMiddleware(unsubscribe),
    });
    middleware.destroy = destroy;
    return { events, middleware }

    async function subscribe(req, res) {

      if (isDestroyed) throw new Error(
        'SubscriptionManager - attempting to use after destroying'
      )

      const subscriptionType = req.params[0];
      // subId is 16 byte hex string
      const subId = unsafeRandomBytes(16);

      // create sub
      let sub;
      switch (subscriptionType) {
        case 'newHeads':
          sub = createSubNewHeads({ subId });
          break
        case 'logs':
          const filterParams = req.params[1];
          const filter = await filterManager.newLogFilter(filterParams);
          sub = createSubFromFilter({ subId, filter });
          break
        default:
          throw new Error(`SubscriptionManager - unsupported subscription type "${subscriptionType}"`)

      }
      subscriptions[subId] = sub;

      res.result = subId;
      return

      function createSubNewHeads({ subId }) {
        const sub = {
          type: subscriptionType,
          destroy: async () => {
            blockTracker.removeListener('sync', sub.update);
          },
          update: async ({ oldBlock, newBlock }) => {
            // for newHeads
            const toBlock = newBlock;
            const fromBlock = incrementHexInt(oldBlock);
            const rawBlocks = await getBlocksForRange({ provider, fromBlock, toBlock });
            const results = rawBlocks.map(normalizeBlock);
            results.forEach((value) => {
              _emitSubscriptionResult(subId, value);
            });
          }
        };
        // check for subscription updates on new block
        blockTracker.on('sync', sub.update);
        return sub
      }

      function createSubFromFilter({ subId, filter }){
        filter.on('update', result => _emitSubscriptionResult(subId, result));
        const sub = {
          type: subscriptionType,
          destroy: async () => {
            return await filterManager.uninstallFilter(filter.idHex)
          },
        };
        return sub
      }
    }

    async function unsubscribe(req, res) {

      if (isDestroyed) throw new Error(
        'SubscriptionManager - attempting to use after destroying'
      )

      const id = req.params[0];
      const subscription = subscriptions[id];
      // if missing, return "false" to indicate it was not removed
      if (!subscription) {
        res.result = false;
        return
      }
      // cleanup subscription
      delete subscriptions[id];
      await subscription.destroy();
      res.result = true;
    }

    function _emitSubscriptionResult(filterIdHex, value) {
      events.emit('notification', {
        jsonrpc: '2.0',
        method: 'eth_subscription',
        params: {
          subscription: filterIdHex,
          result: value,
        },
      });
    }

    function destroy () {
      events.removeAllListeners();
      for (const id in subscriptions) {
        subscriptions[id].destroy();
        delete subscriptions[id];
      }
      isDestroyed = true;
    }
  }

  function normalizeBlock(block) {
    return {
      hash: block.hash,
      parentHash: block.parentHash,
      sha3Uncles: block.sha3Uncles,
      miner: block.miner,
      stateRoot: block.stateRoot,
      transactionsRoot: block.transactionsRoot,
      receiptsRoot: block.receiptsRoot,
      logsBloom: block.logsBloom,
      difficulty: block.difficulty,
      number: block.number,
      gasLimit: block.gasLimit,
      gasUsed: block.gasUsed,
      nonce: block.nonce,
      mixHash: block.mixHash,
      timestamp: block.timestamp,
      extraData: block.extraData,
    }
  }

  const ProviderSubprovider = jsonRpcEngineMiddleware;
  const createSubscriptionManager = subscriptionManager;

  class SubscriptionsSubprovider$1 extends ProviderSubprovider {
    constructor() {
      super(({ blockTracker, provider, engine }) => {
        const { events, middleware } = createSubscriptionManager({ blockTracker, provider });
        // forward subscription events on the engine
        events.on('notification', (data) => engine.emit('data', null, data));
        // return the subscription install/remove middleware
        return middleware
      });
    }
  }

  var subscriptions = SubscriptionsSubprovider$1;

  Object.defineProperty(cjs$c, "__esModule", { value: true });
  const tslib_1 = require$$0$1;
  const client_1 = (0, tslib_1.__importDefault)(cjs$b);
  const qrcode_modal_1 = (0, tslib_1.__importDefault)(cjs$1);
  const http_connection_1 = (0, tslib_1.__importDefault)(cjs);
  const utils_1 = cjs$9;
  const ProviderEngine = web3ProviderEngine;
  const CacheSubprovider = cache;
  const FixtureSubprovider = fixture;
  const FilterSubprovider = filters;
  const HookedWalletSubprovider = hookedWallet;
  const NonceSubprovider = nonceTracker;
  const SubscriptionsSubprovider = subscriptions;
  class WalletConnectProvider extends ProviderEngine {
      constructor(opts) {
          super({ pollingInterval: opts.pollingInterval || 8000 });
          this.bridge = "https://bridge.walletconnect.org";
          this.qrcode = true;
          this.qrcodeModal = qrcode_modal_1.default;
          this.qrcodeModalOptions = undefined;
          this.rpc = null;
          this.infuraId = "";
          this.http = null;
          this.isConnecting = false;
          this.connected = false;
          this.connectCallbacks = [];
          this.accounts = [];
          this.chainId = 1;
          this.rpcUrl = "";
          this.enable = () => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
              const wc = yield this.getWalletConnector();
              if (wc) {
                  this.start();
                  this.subscribeWalletConnector();
                  return wc.accounts;
              }
              else {
                  throw new Error("Failed to connect to WalleConnect");
              }
          });
          this.request = (payload) => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
              return this.send(payload);
          });
          this.send = (payload, callback) => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
              if (typeof payload === "string") {
                  const method = payload;
                  let params = callback;
                  if (method === "personal_sign") {
                      params = (0, utils_1.parsePersonalSign)(params);
                  }
                  return this.sendAsyncPromise(method, params);
              }
              payload = Object.assign({ id: (0, utils_1.payloadId)(), jsonrpc: "2.0" }, payload);
              if (payload.method === "personal_sign") {
                  payload.params = (0, utils_1.parsePersonalSign)(payload.params);
              }
              if (callback) {
                  this.sendAsync(payload, callback);
                  return;
              }
              return this.sendAsyncPromise(payload.method, payload.params);
          });
          this.onConnect = (callback) => {
              this.connectCallbacks.push(callback);
          };
          this.triggerConnect = (result) => {
              if (this.connectCallbacks && this.connectCallbacks.length) {
                  this.connectCallbacks.forEach(callback => callback(result));
              }
          };
          this.bridge = opts.connector
              ? opts.connector.bridge
              : opts.bridge || "https://bridge.walletconnect.org";
          this.qrcode = typeof opts.qrcode === "undefined" || opts.qrcode !== false;
          this.qrcodeModal = opts.qrcodeModal || this.qrcodeModal;
          this.qrcodeModalOptions = opts.qrcodeModalOptions;
          this.wc =
              opts.connector ||
                  new client_1.default({
                      bridge: this.bridge,
                      qrcodeModal: this.qrcode ? this.qrcodeModal : undefined,
                      qrcodeModalOptions: this.qrcodeModalOptions,
                      storageId: opts === null || opts === void 0 ? void 0 : opts.storageId,
                      signingMethods: opts === null || opts === void 0 ? void 0 : opts.signingMethods,
                      clientMeta: opts === null || opts === void 0 ? void 0 : opts.clientMeta,
                  });
          this.rpc = opts.rpc || null;
          if (!this.rpc &&
              (!opts.infuraId || typeof opts.infuraId !== "string" || !opts.infuraId.trim())) {
              throw new Error("Missing one of the required parameters: rpc or infuraId");
          }
          this.infuraId = opts.infuraId || "";
          this.chainId = (opts === null || opts === void 0 ? void 0 : opts.chainId) || this.chainId;
          this.initialize();
      }
      get isWalletConnect() {
          return true;
      }
      get connector() {
          return this.wc;
      }
      get walletMeta() {
          return this.wc.peerMeta;
      }
      disconnect() {
          return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
              this.close();
          });
      }
      close() {
          return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
              const wc = yield this.getWalletConnector({ disableSessionCreation: true });
              yield wc.killSession();
              yield this.onDisconnect();
          });
      }
      handleRequest(payload) {
          return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
              try {
                  let response;
                  let result = null;
                  const wc = yield this.getWalletConnector();
                  switch (payload.method) {
                      case "wc_killSession":
                          yield this.close();
                          result = null;
                          break;
                      case "eth_accounts":
                          result = wc.accounts;
                          break;
                      case "eth_coinbase":
                          result = wc.accounts[0];
                          break;
                      case "eth_chainId":
                          result = wc.chainId;
                          break;
                      case "net_version":
                          result = wc.chainId;
                          break;
                      case "eth_uninstallFilter":
                          this.sendAsync(payload, (_) => _);
                          result = true;
                          break;
                      default:
                          response = yield this.handleOtherRequests(payload);
                  }
                  if (response) {
                      return response;
                  }
                  return this.formatResponse(payload, result);
              }
              catch (error) {
                  this.emit("error", error);
                  throw error;
              }
          });
      }
      handleOtherRequests(payload) {
          return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
              if (!utils_1.signingMethods.includes(payload.method) && payload.method.startsWith("eth_")) {
                  return this.handleReadRequests(payload);
              }
              const wc = yield this.getWalletConnector();
              const result = yield wc.sendCustomRequest(payload);
              return this.formatResponse(payload, result);
          });
      }
      handleReadRequests(payload) {
          return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
              if (!this.http) {
                  const error = new Error("HTTP Connection not available");
                  this.emit("error", error);
                  throw error;
              }
              return this.http.send(payload);
          });
      }
      formatResponse(payload, result) {
          return {
              id: payload.id,
              jsonrpc: payload.jsonrpc,
              result: result,
          };
      }
      getWalletConnector(opts = {}) {
          const { disableSessionCreation = false } = opts;
          return new Promise((resolve, reject) => {
              const wc = this.wc;
              if (this.isConnecting) {
                  this.onConnect((x) => resolve(x));
              }
              else if (!wc.connected && !disableSessionCreation) {
                  this.isConnecting = true;
                  wc.on("modal_closed", () => {
                      reject(new Error("User closed modal"));
                  });
                  wc.createSession({ chainId: this.chainId })
                      .then(() => {
                      wc.on("connect", (error, payload) => {
                          if (error) {
                              this.isConnecting = false;
                              return reject(error);
                          }
                          this.isConnecting = false;
                          this.connected = true;
                          if (payload) {
                              this.updateState(payload.params[0]);
                          }
                          this.emit("connect");
                          this.triggerConnect(wc);
                          resolve(wc);
                      });
                  })
                      .catch(error => {
                      this.isConnecting = false;
                      reject(error);
                  });
              }
              else {
                  if (!this.connected) {
                      this.connected = true;
                      this.updateState(wc.session);
                  }
                  resolve(wc);
              }
          });
      }
      subscribeWalletConnector() {
          return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
              const wc = yield this.getWalletConnector();
              wc.on("disconnect", error => {
                  if (error) {
                      this.emit("error", error);
                      return;
                  }
                  this.onDisconnect();
              });
              wc.on("session_update", (error, payload) => {
                  if (error) {
                      this.emit("error", error);
                      return;
                  }
                  this.updateState(payload.params[0]);
              });
          });
      }
      onDisconnect() {
          return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
              yield this.stop();
              this.emit("close", 1000, "Connection closed");
              this.emit("disconnect", 1000, "Connection disconnected");
              this.connected = false;
          });
      }
      updateState(sessionParams) {
          return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
              const { accounts, chainId, networkId, rpcUrl } = sessionParams;
              if (!this.accounts || (accounts && this.accounts !== accounts)) {
                  this.accounts = accounts;
                  this.emit("accountsChanged", accounts);
              }
              if (!this.chainId || (chainId && this.chainId !== chainId)) {
                  this.chainId = chainId;
                  this.emit("chainChanged", chainId);
              }
              if (!this.networkId || (networkId && this.networkId !== networkId)) {
                  this.networkId = networkId;
                  this.emit("networkChanged", networkId);
              }
              this.updateRpcUrl(this.chainId, rpcUrl || "");
          });
      }
      updateRpcUrl(chainId, rpcUrl = "") {
          const rpc = { infuraId: this.infuraId, custom: this.rpc || undefined };
          rpcUrl = rpcUrl || (0, utils_1.getRpcUrl)(chainId, rpc);
          if (rpcUrl) {
              this.rpcUrl = rpcUrl;
              this.updateHttpConnection();
          }
          else {
              this.emit("error", new Error(`No RPC Url available for chainId: ${chainId}`));
          }
      }
      updateHttpConnection() {
          if (this.rpcUrl) {
              this.http = new http_connection_1.default(this.rpcUrl);
              this.http.on("payload", payload => this.emit("payload", payload));
              this.http.on("error", error => this.emit("error", error));
          }
      }
      sendAsyncPromise(method, params) {
          return new Promise((resolve, reject) => {
              this.sendAsync({
                  id: (0, utils_1.payloadId)(),
                  jsonrpc: "2.0",
                  method,
                  params: params || [],
              }, (error, response) => {
                  if (error) {
                      reject(error);
                      return;
                  }
                  resolve(response.result);
              });
          });
      }
      initialize() {
          this.updateRpcUrl(this.chainId);
          this.addProvider(new FixtureSubprovider({
              eth_hashrate: "0x00",
              eth_mining: false,
              eth_syncing: true,
              net_listening: true,
              web3_clientVersion: `WalletConnect/v1.x.x/javascript`,
          }));
          this.addProvider(new CacheSubprovider());
          this.addProvider(new SubscriptionsSubprovider());
          this.addProvider(new FilterSubprovider());
          this.addProvider(new NonceSubprovider());
          this.addProvider(new HookedWalletSubprovider(this.configWallet()));
          this.addProvider({
              handleRequest: (payload, next, end) => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                  try {
                      const { error, result } = yield this.handleRequest(payload);
                      end(error, result);
                  }
                  catch (error) {
                      end(error);
                  }
              }),
              setEngine: (_) => _,
          });
      }
      configWallet() {
          return {
              getAccounts: (cb) => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                  try {
                      const wc = yield this.getWalletConnector();
                      const accounts = wc.accounts;
                      if (accounts && accounts.length) {
                          cb(null, accounts);
                      }
                      else {
                          cb(new Error("Failed to get accounts"));
                      }
                  }
                  catch (error) {
                      cb(error);
                  }
              }),
              processMessage: (msgParams, cb) => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                  try {
                      const wc = yield this.getWalletConnector();
                      const result = yield wc.signMessage([msgParams.from, msgParams.data]);
                      cb(null, result);
                  }
                  catch (error) {
                      cb(error);
                  }
              }),
              processPersonalMessage: (msgParams, cb) => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                  try {
                      const wc = yield this.getWalletConnector();
                      const result = yield wc.signPersonalMessage([msgParams.data, msgParams.from]);
                      cb(null, result);
                  }
                  catch (error) {
                      cb(error);
                  }
              }),
              processSignTransaction: (txParams, cb) => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                  try {
                      const wc = yield this.getWalletConnector();
                      const result = yield wc.signTransaction(txParams);
                      cb(null, result);
                  }
                  catch (error) {
                      cb(error);
                  }
              }),
              processTransaction: (txParams, cb) => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                  try {
                      const wc = yield this.getWalletConnector();
                      const result = yield wc.sendTransaction(txParams);
                      cb(null, result);
                  }
                  catch (error) {
                      cb(error);
                  }
              }),
              processTypedMessage: (msgParams, cb) => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                  try {
                      const wc = yield this.getWalletConnector();
                      const result = yield wc.signTypedData([msgParams.from, msgParams.data]);
                      cb(null, result);
                  }
                  catch (error) {
                      cb(error);
                  }
              }),
          };
      }
  }
  var _default = cjs$c.default = WalletConnectProvider;

  const ethers = require('ethers');

  class WalletConnector extends Base$3 {

    constructor() {
      const originProvider = new _default({
        rpc: RpcList
      });
      const web3Provider = new ethers.providers.Web3Provider(originProvider);
      super(originProvider, web3Provider);
    }

    static getInstance() {
      if (!WalletConnector.instance) {
        WalletConnector.instance = new WalletConnector();
      }
      return WalletConnector.instance;
    }

    async connect(options = {
      onSuccess: () => {},
      onFail: () => {}
    }) {
      try {
        let accounts = await this.originProvider.enable();

        this.originProvider.on('disconnect', async(code, reason) => {
          console.log(code, reason);
        });

        options.onSuccess(accounts[0]);
      } catch(err) {
        console.log(err);
        options.onFail(err.message);
      }
    }

    disconnect() {
      this.originProvider.wc.killSession();
    }

    switchNetwork() {
      this.originProvider.wc.updateSession({
        chainId: 1,
        accounts: ['0xDA543d0C58E38f5645E0Af1EbE12345d7B6B89F7']
      });
    }
  }

  exports.Networks = Networks;
  exports.WalletConnector = WalletConnector;
  exports.WalletHandler = WalletHandler;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
