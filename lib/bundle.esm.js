import*as e from"ethereumjs-util";import{ethers as t}from"ethers";import r from"@walletconnect/web3-provider";function n(t,r){const n=e.fromRpcSig(t),o=Buffer.from(r.replace("0x",""),"hex"),s=e.ecrecover(o,n.v,n.r,n.s);return e.bufferToHex(e.publicToAddress(s))}const o=t.utils.formatUnits,s=t.utils.parseUnits;var a=Object.freeze({__proto__:null,hashPersonalMessage:function(t){const r=Buffer.from(t),n=e.hashPersonalMessage(r);return e.bufferToHex(n)},recoverPublicKey:n,formatUnits:o,parseUnits:s});class i{constructor(e,t,r){this.web3Provider=t,this.originProvider=e,this.signer=t.getSigner(),this.type=r}async queryContract(e,r,n,...o){return new t.Contract(e,r,this.web3Provider).functions[n](...o)}async runContractTransactionFunc(e,r,n,...o){return new t.Contract(e,r,this.web3Provider.getSigner()).functions[n](...o)}listenForChanges(e,t=(()=>{})){if(!e)throw new Error("This listener item cannot be empty.");if(-1===["chainChanged","accountsChanged","disconnect"].indexOf(e))throw new Error("This listener item does not exist.");try{this.originProvider.on(e,t)}catch(e){console.log("Listen to error."),console.log(e)}}verifySignature(e,t,r){return n(e,t).toLowerCase()===r.toLowerCase()}async signMessage(e,r=!1){!0===r&&(e=t.utils.arrayify(e));return await this.signer.signMessage(e)}formatUnits(e,r){return t.utils.formatUnits(e,r)}}const c=[{id:"ETH-Testnet",name:"ETH Testnet",label:"EHT Rinkeby Testnet",chainId:"0x4",url:"https://ropsten.infura.io/v3/a892bade64884ad6a13cf9981de659eb",explorer:"https://ropsten.etherscan.io/",config:{chainId:"0x4",chainName:"ETH Testnet",nativeCurrency:{name:"ETH",symbol:"ETH",decimals:18},rpcUrls:["https://ropsten.infura.io/v3/a892bade64884ad6a13cf9981de659eb"],blockExplorerUrls:["https://ropsten.etherscan.io/"]}},{id:"BSC-Testnet",name:"BSC Testnet",chainId:"0x61",label:"BSC Testnet",url:"https://data-seed-prebsc-2-s3.binance.org:8545/",explorer:"https://testnet.bscscan.com/",config:{chainId:"0x61",chainName:"BSC Testnet",nativeCurrency:{name:"BNB",symbol:"BNB",decimals:18},rpcUrls:["https://data-seed-prebsc-2-s3.binance.org:8545/"],blockExplorerUrls:["https://testnet.bscscan.com/"]}},{id:"OEC-Testnet",name:"OEC Testnet",chainId:"0x41",label:"OEC Testnet",url:"https://exchaintestrpc.okex.org",explorer:"https://www.oklink.com/oec-test/",config:{chainId:"0x41",chainName:"OKExChain Testnet",nativeCurrency:{name:"OKExChain Global Utility Token in testnet",symbol:"OKT",decimals:18},rpcUrls:["https://exchaintestrpc.okex.org"],blockExplorerUrls:["https://www.oklink.com/okexchain-test"]}},{id:"ETH-Mainnet",name:"ETH Mainnet",chainId:"0x1",url:"https://mainnet.infura.io/v3/a892bade64884ad6a13cf9981de659eb",explorer:"https://etherscan.io/",config:{chainId:"0x1",chainName:"ETH Mainnet",nativeCurrency:{name:"ETH",symbol:"ETH",decimals:18},rpcUrls:["https://mainnet.infura.io/v3/a892bade64884ad6a13cf9981de659eb"],blockExplorerUrls:["https://etherscan.io/"]}},{id:"BSC-Mainnet",name:"BSC Mainnet",chainId:"0x38",url:"https://bsc-dataseed.binance.org/",explorer:"https://bscscan.com/",config:{chainId:"0x38",chainName:"Binance Smart Chain",nativeCurrency:{name:"BNB",symbol:"BNB",decimals:18},rpcUrls:["https://bsc-dataseed.binance.org/"],blockExplorerUrls:["https://bscscan.com/"]}},{id:"OEC-Mainnet",name:"OEC Mainnet",chainId:"0x42",url:"https://exchainrpc.okex.org",explorer:"https://www.oklink.com/oec/",config:{chainId:"0x42",chainName:"OKExChain Mainnet",nativeCurrency:{name:"OKExChain Global Utility Token",symbol:"OKT",decimals:18},rpcUrls:["https://exchainrpc.okex.org"],blockExplorerUrls:["https://www.oklink.com/okexchain"]}},{id:"ETH_Goerli",name:"Ethereum Testnet Görli",chainId:"0x5",url:"https://goerli.optimism.io/",explorer:"https://goerli.net/#about",config:{chainId:"0x5",chainName:"Ethereum Testnet Görli",nativeCurrency:{name:"Görli Ether",symbol:"GOR",decimals:18},rpcUrls:["https://goerli.infura.io/v3/a892bade64884ad6a13cf9981de659eb"],blockExplorerUrls:["https://goerli.net/#about"]}}];!function(e){if(!Array.isArray(e))return void console.log("type error!");let t=[];for(let r=0;r<e.length;r++)-1===t.indexOf(e[r])&&t.push(e[r])}(c.map((e=>e.name.split(" ")[0])));const l=Object.freeze({BSC_TEST:"BSC-Testnet",ETH_TEST:"ETH-Testnet",OEC_TEST:"OEC-Testnet",BSC_MAIN:"BSC-Mainnet",ETH_MAIN:"ETH-Mainnet",OEC_MAIN:"OEC-Mainnet",ETH_GOERLI:"ETH_Goerli"}),h={[l.BSC_TEST]:97,[l.ETH_TEST]:4,[l.OEC_TEST]:41,[l.BSC_MAIN]:56,[l.ETH_MAIN]:1,[l.OEC_MAIN]:42,[l.ETH_GOERLI]:5},d={[h[l.BSC_TEST]]:"https://data-seed-prebsc-2-s3.binance.org:8545/",[h[l.ETH_TEST]]:"https://ropsten.infura.io/v3/a892bade64884ad6a13cf9981de659eb",[h[l.OEC_TEST]]:"https://exchaintestrpc.okex.org",[h[l.BSC_MAIN]]:"https://bsc-dataseed.binance.org/",[h[l.ETH_MAIN]]:"https://mainnet.infura.io/v3/a892bade64884ad6a13cf9981de659eb",[h[l.OEC_TEST]]:"https://exchainrpc.okex.org",[h[l.ETH_GOERLI]]:"https://goerli.infura.io/v3/a892bade64884ad6a13cf9981de659eb"};class p extends i{constructor(e){super(e,new t.providers.Web3Provider(e),"injected")}async getAddress(){try{return await this.signer.getAddress()}catch(e){if("UNSUPPORTED_OPERATION"===e.code)throw new Error("Please connect your wallet first");console.error(e)}}static connectWallet(e=(()=>{})){window.ethereum.request({method:"eth_requestAccounts"}).then((t=>{e(t[0])})).catch((e=>{console.error(e.message)}))}async switchNetwork(e,t=(()=>{})){let r=await this.getAddress();if(!r)throw new Error("Please connect your wallet first");let n=Object.values(l);if(!e)throw new Error("The param cannot be empty.");if(-1===n.indexOf(e))throw new Error("The param is wrong.");let o=c.find((t=>t.id===e));try{await window.ethereum.request({method:"wallet_switchEthereumChain",params:[{chainId:o.config.chainId}]}),t()}catch(e){4902===e.code?(await window.ethereum.request({method:"wallet_addEthereumChain",params:[o.config,r]}),t()):console.error(e)}}}const u=async()=>{let e=null;if(void 0!==window.ethereum){e=window.ethereum;try{await e.request({method:"eth_requestAccounts"})}catch(e){throw new Error("User Rejected")}}else if(window.web3)e=window.web3.currentProvider;else{if(!window.celo)throw new Error("No Web3 Provider found");e=window.celo}return new p(e)};class m extends i{constructor(e){super(e,new t.providers.Web3Provider(e),"walletconnect")}disconnect(){this.originProvider.wc.killSession()}}const w=e=>new Promise((async(t,n)=>{let o,s="https://bridge.walletconnect.org",a=!0,i="",c=d,p=h[l.BSC_MAIN];e&&(s=e.bridge||s,a=void 0!==e.qrcode?e.qrcode:a,i=e.infuraId||"",p=e.network?h[e.network]:p,o=e.qrcodeModalOptions||void 0);const u=new r({bridge:s,qrcode:a,infuraId:i,rpc:c,chainId:p,qrcodeModalOptions:o});try{const e=await u.enable(),r=new m(u);console.log("new wallet connect instance"),console.log(r),t({walletConnectHandler:r,accounts:e})}catch(e){n(e)}}));export{u as ConnectToInjected,w as ConnectToWalletConnect,l as Networks,a as Utils};
